/*! For license information please see bundle.js.LICENSE.txt */
(()=>{var e={757:(e,t,n)=>{e.exports=n(666)},669:(e,t,n)=>{e.exports=n(609)},592:(e,t,n)=>{"use strict";var r=n(867),a=n(26),o=n(372),l=n(327),i=n(97),u=n(109),s=n(985),c=n(61),f=n(874),d=n(263);e.exports=function(e){return new Promise((function(t,n){var p,h=e.data,m=e.headers,v=e.responseType;function g(){e.cancelToken&&e.cancelToken.unsubscribe(p),e.signal&&e.signal.removeEventListener("abort",p)}r.isFormData(h)&&delete m["Content-Type"];var y=new XMLHttpRequest;if(e.auth){var b=e.auth.username||"",w=e.auth.password?unescape(encodeURIComponent(e.auth.password)):"";m.Authorization="Basic "+btoa(b+":"+w)}var k=i(e.baseURL,e.url);function S(){if(y){var r="getAllResponseHeaders"in y?u(y.getAllResponseHeaders()):null,o={data:v&&"text"!==v&&"json"!==v?y.response:y.responseText,status:y.status,statusText:y.statusText,headers:r,config:e,request:y};a((function(e){t(e),g()}),(function(e){n(e),g()}),o),y=null}}if(y.open(e.method.toUpperCase(),l(k,e.params,e.paramsSerializer),!0),y.timeout=e.timeout,"onloadend"in y?y.onloadend=S:y.onreadystatechange=function(){y&&4===y.readyState&&(0!==y.status||y.responseURL&&0===y.responseURL.indexOf("file:"))&&setTimeout(S)},y.onabort=function(){y&&(n(c("Request aborted",e,"ECONNABORTED",y)),y=null)},y.onerror=function(){n(c("Network Error",e,null,y)),y=null},y.ontimeout=function(){var t=e.timeout?"timeout of "+e.timeout+"ms exceeded":"timeout exceeded",r=e.transitional||f;e.timeoutErrorMessage&&(t=e.timeoutErrorMessage),n(c(t,e,r.clarifyTimeoutError?"ETIMEDOUT":"ECONNABORTED",y)),y=null},r.isStandardBrowserEnv()){var E=(e.withCredentials||s(k))&&e.xsrfCookieName?o.read(e.xsrfCookieName):void 0;E&&(m[e.xsrfHeaderName]=E)}"setRequestHeader"in y&&r.forEach(m,(function(e,t){void 0===h&&"content-type"===t.toLowerCase()?delete m[t]:y.setRequestHeader(t,e)})),r.isUndefined(e.withCredentials)||(y.withCredentials=!!e.withCredentials),v&&"json"!==v&&(y.responseType=e.responseType),"function"==typeof e.onDownloadProgress&&y.addEventListener("progress",e.onDownloadProgress),"function"==typeof e.onUploadProgress&&y.upload&&y.upload.addEventListener("progress",e.onUploadProgress),(e.cancelToken||e.signal)&&(p=function(e){y&&(n(!e||e&&e.type?new d("canceled"):e),y.abort(),y=null)},e.cancelToken&&e.cancelToken.subscribe(p),e.signal&&(e.signal.aborted?p():e.signal.addEventListener("abort",p))),h||(h=null),y.send(h)}))}},609:(e,t,n)=>{"use strict";var r=n(867),a=n(849),o=n(321),l=n(185),i=function e(t){var n=new o(t),i=a(o.prototype.request,n);return r.extend(i,o.prototype,n),r.extend(i,n),i.create=function(n){return e(l(t,n))},i}(n(546));i.Axios=o,i.Cancel=n(263),i.CancelToken=n(972),i.isCancel=n(502),i.VERSION=n(288).version,i.all=function(e){return Promise.all(e)},i.spread=n(713),i.isAxiosError=n(268),e.exports=i,e.exports.default=i},263:e=>{"use strict";function t(e){this.message=e}t.prototype.toString=function(){return"Cancel"+(this.message?": "+this.message:"")},t.prototype.__CANCEL__=!0,e.exports=t},972:(e,t,n)=>{"use strict";var r=n(263);function a(e){if("function"!=typeof e)throw new TypeError("executor must be a function.");var t;this.promise=new Promise((function(e){t=e}));var n=this;this.promise.then((function(e){if(n._listeners){var t,r=n._listeners.length;for(t=0;t<r;t++)n._listeners[t](e);n._listeners=null}})),this.promise.then=function(e){var t,r=new Promise((function(e){n.subscribe(e),t=e})).then(e);return r.cancel=function(){n.unsubscribe(t)},r},e((function(e){n.reason||(n.reason=new r(e),t(n.reason))}))}a.prototype.throwIfRequested=function(){if(this.reason)throw this.reason},a.prototype.subscribe=function(e){this.reason?e(this.reason):this._listeners?this._listeners.push(e):this._listeners=[e]},a.prototype.unsubscribe=function(e){if(this._listeners){var t=this._listeners.indexOf(e);-1!==t&&this._listeners.splice(t,1)}},a.source=function(){var e;return{token:new a((function(t){e=t})),cancel:e}},e.exports=a},502:e=>{"use strict";e.exports=function(e){return!(!e||!e.__CANCEL__)}},321:(e,t,n)=>{"use strict";var r=n(867),a=n(327),o=n(782),l=n(572),i=n(185),u=n(875),s=u.validators;function c(e){this.defaults=e,this.interceptors={request:new o,response:new o}}c.prototype.request=function(e,t){"string"==typeof e?(t=t||{}).url=e:t=e||{},(t=i(this.defaults,t)).method?t.method=t.method.toLowerCase():this.defaults.method?t.method=this.defaults.method.toLowerCase():t.method="get";var n=t.transitional;void 0!==n&&u.assertOptions(n,{silentJSONParsing:s.transitional(s.boolean),forcedJSONParsing:s.transitional(s.boolean),clarifyTimeoutError:s.transitional(s.boolean)},!1);var r=[],a=!0;this.interceptors.request.forEach((function(e){"function"==typeof e.runWhen&&!1===e.runWhen(t)||(a=a&&e.synchronous,r.unshift(e.fulfilled,e.rejected))}));var o,c=[];if(this.interceptors.response.forEach((function(e){c.push(e.fulfilled,e.rejected)})),!a){var f=[l,void 0];for(Array.prototype.unshift.apply(f,r),f=f.concat(c),o=Promise.resolve(t);f.length;)o=o.then(f.shift(),f.shift());return o}for(var d=t;r.length;){var p=r.shift(),h=r.shift();try{d=p(d)}catch(e){h(e);break}}try{o=l(d)}catch(e){return Promise.reject(e)}for(;c.length;)o=o.then(c.shift(),c.shift());return o},c.prototype.getUri=function(e){return e=i(this.defaults,e),a(e.url,e.params,e.paramsSerializer).replace(/^\?/,"")},r.forEach(["delete","get","head","options"],(function(e){c.prototype[e]=function(t,n){return this.request(i(n||{},{method:e,url:t,data:(n||{}).data}))}})),r.forEach(["post","put","patch"],(function(e){c.prototype[e]=function(t,n,r){return this.request(i(r||{},{method:e,url:t,data:n}))}})),e.exports=c},782:(e,t,n)=>{"use strict";var r=n(867);function a(){this.handlers=[]}a.prototype.use=function(e,t,n){return this.handlers.push({fulfilled:e,rejected:t,synchronous:!!n&&n.synchronous,runWhen:n?n.runWhen:null}),this.handlers.length-1},a.prototype.eject=function(e){this.handlers[e]&&(this.handlers[e]=null)},a.prototype.forEach=function(e){r.forEach(this.handlers,(function(t){null!==t&&e(t)}))},e.exports=a},97:(e,t,n)=>{"use strict";var r=n(793),a=n(303);e.exports=function(e,t){return e&&!r(t)?a(e,t):t}},61:(e,t,n)=>{"use strict";var r=n(481);e.exports=function(e,t,n,a,o){var l=new Error(e);return r(l,t,n,a,o)}},572:(e,t,n)=>{"use strict";var r=n(867),a=n(527),o=n(502),l=n(546),i=n(263);function u(e){if(e.cancelToken&&e.cancelToken.throwIfRequested(),e.signal&&e.signal.aborted)throw new i("canceled")}e.exports=function(e){return u(e),e.headers=e.headers||{},e.data=a.call(e,e.data,e.headers,e.transformRequest),e.headers=r.merge(e.headers.common||{},e.headers[e.method]||{},e.headers),r.forEach(["delete","get","head","post","put","patch","common"],(function(t){delete e.headers[t]})),(e.adapter||l.adapter)(e).then((function(t){return u(e),t.data=a.call(e,t.data,t.headers,e.transformResponse),t}),(function(t){return o(t)||(u(e),t&&t.response&&(t.response.data=a.call(e,t.response.data,t.response.headers,e.transformResponse))),Promise.reject(t)}))}},481:e=>{"use strict";e.exports=function(e,t,n,r,a){return e.config=t,n&&(e.code=n),e.request=r,e.response=a,e.isAxiosError=!0,e.toJSON=function(){return{message:this.message,name:this.name,description:this.description,number:this.number,fileName:this.fileName,lineNumber:this.lineNumber,columnNumber:this.columnNumber,stack:this.stack,config:this.config,code:this.code,status:this.response&&this.response.status?this.response.status:null}},e}},185:(e,t,n)=>{"use strict";var r=n(867);e.exports=function(e,t){t=t||{};var n={};function a(e,t){return r.isPlainObject(e)&&r.isPlainObject(t)?r.merge(e,t):r.isPlainObject(t)?r.merge({},t):r.isArray(t)?t.slice():t}function o(n){return r.isUndefined(t[n])?r.isUndefined(e[n])?void 0:a(void 0,e[n]):a(e[n],t[n])}function l(e){if(!r.isUndefined(t[e]))return a(void 0,t[e])}function i(n){return r.isUndefined(t[n])?r.isUndefined(e[n])?void 0:a(void 0,e[n]):a(void 0,t[n])}function u(n){return n in t?a(e[n],t[n]):n in e?a(void 0,e[n]):void 0}var s={url:l,method:l,data:l,baseURL:i,transformRequest:i,transformResponse:i,paramsSerializer:i,timeout:i,timeoutMessage:i,withCredentials:i,adapter:i,responseType:i,xsrfCookieName:i,xsrfHeaderName:i,onUploadProgress:i,onDownloadProgress:i,decompress:i,maxContentLength:i,maxBodyLength:i,transport:i,httpAgent:i,httpsAgent:i,cancelToken:i,socketPath:i,responseEncoding:i,validateStatus:u};return r.forEach(Object.keys(e).concat(Object.keys(t)),(function(e){var t=s[e]||o,a=t(e);r.isUndefined(a)&&t!==u||(n[e]=a)})),n}},26:(e,t,n)=>{"use strict";var r=n(61);e.exports=function(e,t,n){var a=n.config.validateStatus;n.status&&a&&!a(n.status)?t(r("Request failed with status code "+n.status,n.config,null,n.request,n)):e(n)}},527:(e,t,n)=>{"use strict";var r=n(867),a=n(546);e.exports=function(e,t,n){var o=this||a;return r.forEach(n,(function(n){e=n.call(o,e,t)})),e}},546:(e,t,n)=>{"use strict";var r=n(867),a=n(16),o=n(481),l=n(874),i={"Content-Type":"application/x-www-form-urlencoded"};function u(e,t){!r.isUndefined(e)&&r.isUndefined(e["Content-Type"])&&(e["Content-Type"]=t)}var s,c={transitional:l,adapter:(("undefined"!=typeof XMLHttpRequest||"undefined"!=typeof process&&"[object process]"===Object.prototype.toString.call(process))&&(s=n(592)),s),transformRequest:[function(e,t){return a(t,"Accept"),a(t,"Content-Type"),r.isFormData(e)||r.isArrayBuffer(e)||r.isBuffer(e)||r.isStream(e)||r.isFile(e)||r.isBlob(e)?e:r.isArrayBufferView(e)?e.buffer:r.isURLSearchParams(e)?(u(t,"application/x-www-form-urlencoded;charset=utf-8"),e.toString()):r.isObject(e)||t&&"application/json"===t["Content-Type"]?(u(t,"application/json"),function(e,t,n){if(r.isString(e))try{return(0,JSON.parse)(e),r.trim(e)}catch(e){if("SyntaxError"!==e.name)throw e}return(0,JSON.stringify)(e)}(e)):e}],transformResponse:[function(e){var t=this.transitional||c.transitional,n=t&&t.silentJSONParsing,a=t&&t.forcedJSONParsing,l=!n&&"json"===this.responseType;if(l||a&&r.isString(e)&&e.length)try{return JSON.parse(e)}catch(e){if(l){if("SyntaxError"===e.name)throw o(e,this,"E_JSON_PARSE");throw e}}return e}],timeout:0,xsrfCookieName:"XSRF-TOKEN",xsrfHeaderName:"X-XSRF-TOKEN",maxContentLength:-1,maxBodyLength:-1,validateStatus:function(e){return e>=200&&e<300},headers:{common:{Accept:"application/json, text/plain, */*"}}};r.forEach(["delete","get","head"],(function(e){c.headers[e]={}})),r.forEach(["post","put","patch"],(function(e){c.headers[e]=r.merge(i)})),e.exports=c},874:e=>{"use strict";e.exports={silentJSONParsing:!0,forcedJSONParsing:!0,clarifyTimeoutError:!1}},288:e=>{e.exports={version:"0.26.1"}},849:e=>{"use strict";e.exports=function(e,t){return function(){for(var n=new Array(arguments.length),r=0;r<n.length;r++)n[r]=arguments[r];return e.apply(t,n)}}},327:(e,t,n)=>{"use strict";var r=n(867);function a(e){return encodeURIComponent(e).replace(/%3A/gi,":").replace(/%24/g,"$").replace(/%2C/gi,",").replace(/%20/g,"+").replace(/%5B/gi,"[").replace(/%5D/gi,"]")}e.exports=function(e,t,n){if(!t)return e;var o;if(n)o=n(t);else if(r.isURLSearchParams(t))o=t.toString();else{var l=[];r.forEach(t,(function(e,t){null!=e&&(r.isArray(e)?t+="[]":e=[e],r.forEach(e,(function(e){r.isDate(e)?e=e.toISOString():r.isObject(e)&&(e=JSON.stringify(e)),l.push(a(t)+"="+a(e))})))})),o=l.join("&")}if(o){var i=e.indexOf("#");-1!==i&&(e=e.slice(0,i)),e+=(-1===e.indexOf("?")?"?":"&")+o}return e}},303:e=>{"use strict";e.exports=function(e,t){return t?e.replace(/\/+$/,"")+"/"+t.replace(/^\/+/,""):e}},372:(e,t,n)=>{"use strict";var r=n(867);e.exports=r.isStandardBrowserEnv()?{write:function(e,t,n,a,o,l){var i=[];i.push(e+"="+encodeURIComponent(t)),r.isNumber(n)&&i.push("expires="+new Date(n).toGMTString()),r.isString(a)&&i.push("path="+a),r.isString(o)&&i.push("domain="+o),!0===l&&i.push("secure"),document.cookie=i.join("; ")},read:function(e){var t=document.cookie.match(new RegExp("(^|;\\s*)("+e+")=([^;]*)"));return t?decodeURIComponent(t[3]):null},remove:function(e){this.write(e,"",Date.now()-864e5)}}:{write:function(){},read:function(){return null},remove:function(){}}},793:e=>{"use strict";e.exports=function(e){return/^([a-z][a-z\d+\-.]*:)?\/\//i.test(e)}},268:(e,t,n)=>{"use strict";var r=n(867);e.exports=function(e){return r.isObject(e)&&!0===e.isAxiosError}},985:(e,t,n)=>{"use strict";var r=n(867);e.exports=r.isStandardBrowserEnv()?function(){var e,t=/(msie|trident)/i.test(navigator.userAgent),n=document.createElement("a");function a(e){var r=e;return t&&(n.setAttribute("href",r),r=n.href),n.setAttribute("href",r),{href:n.href,protocol:n.protocol?n.protocol.replace(/:$/,""):"",host:n.host,search:n.search?n.search.replace(/^\?/,""):"",hash:n.hash?n.hash.replace(/^#/,""):"",hostname:n.hostname,port:n.port,pathname:"/"===n.pathname.charAt(0)?n.pathname:"/"+n.pathname}}return e=a(window.location.href),function(t){var n=r.isString(t)?a(t):t;return n.protocol===e.protocol&&n.host===e.host}}():function(){return!0}},16:(e,t,n)=>{"use strict";var r=n(867);e.exports=function(e,t){r.forEach(e,(function(n,r){r!==t&&r.toUpperCase()===t.toUpperCase()&&(e[t]=n,delete e[r])}))}},109:(e,t,n)=>{"use strict";var r=n(867),a=["age","authorization","content-length","content-type","etag","expires","from","host","if-modified-since","if-unmodified-since","last-modified","location","max-forwards","proxy-authorization","referer","retry-after","user-agent"];e.exports=function(e){var t,n,o,l={};return e?(r.forEach(e.split("\n"),(function(e){if(o=e.indexOf(":"),t=r.trim(e.substr(0,o)).toLowerCase(),n=r.trim(e.substr(o+1)),t){if(l[t]&&a.indexOf(t)>=0)return;l[t]="set-cookie"===t?(l[t]?l[t]:[]).concat([n]):l[t]?l[t]+", "+n:n}})),l):l}},713:e=>{"use strict";e.exports=function(e){return function(t){return e.apply(null,t)}}},875:(e,t,n)=>{"use strict";var r=n(288).version,a={};["object","boolean","number","function","string","symbol"].forEach((function(e,t){a[e]=function(n){return typeof n===e||"a"+(t<1?"n ":" ")+e}}));var o={};a.transitional=function(e,t,n){function a(e,t){return"[Axios v"+r+"] Transitional option '"+e+"'"+t+(n?". "+n:"")}return function(n,r,l){if(!1===e)throw new Error(a(r," has been removed"+(t?" in "+t:"")));return t&&!o[r]&&(o[r]=!0,console.warn(a(r," has been deprecated since v"+t+" and will be removed in the near future"))),!e||e(n,r,l)}},e.exports={assertOptions:function(e,t,n){if("object"!=typeof e)throw new TypeError("options must be an object");for(var r=Object.keys(e),a=r.length;a-- >0;){var o=r[a],l=t[o];if(l){var i=e[o],u=void 0===i||l(i,o,e);if(!0!==u)throw new TypeError("option "+o+" must be "+u)}else if(!0!==n)throw Error("Unknown option "+o)}},validators:a}},867:(e,t,n)=>{"use strict";var r=n(849),a=Object.prototype.toString;function o(e){return Array.isArray(e)}function l(e){return void 0===e}function i(e){return"[object ArrayBuffer]"===a.call(e)}function u(e){return null!==e&&"object"==typeof e}function s(e){if("[object Object]"!==a.call(e))return!1;var t=Object.getPrototypeOf(e);return null===t||t===Object.prototype}function c(e){return"[object Function]"===a.call(e)}function f(e,t){if(null!=e)if("object"!=typeof e&&(e=[e]),o(e))for(var n=0,r=e.length;n<r;n++)t.call(null,e[n],n,e);else for(var a in e)Object.prototype.hasOwnProperty.call(e,a)&&t.call(null,e[a],a,e)}e.exports={isArray:o,isArrayBuffer:i,isBuffer:function(e){return null!==e&&!l(e)&&null!==e.constructor&&!l(e.constructor)&&"function"==typeof e.constructor.isBuffer&&e.constructor.isBuffer(e)},isFormData:function(e){return"[object FormData]"===a.call(e)},isArrayBufferView:function(e){return"undefined"!=typeof ArrayBuffer&&ArrayBuffer.isView?ArrayBuffer.isView(e):e&&e.buffer&&i(e.buffer)},isString:function(e){return"string"==typeof e},isNumber:function(e){return"number"==typeof e},isObject:u,isPlainObject:s,isUndefined:l,isDate:function(e){return"[object Date]"===a.call(e)},isFile:function(e){return"[object File]"===a.call(e)},isBlob:function(e){return"[object Blob]"===a.call(e)},isFunction:c,isStream:function(e){return u(e)&&c(e.pipe)},isURLSearchParams:function(e){return"[object URLSearchParams]"===a.call(e)},isStandardBrowserEnv:function(){return("undefined"==typeof navigator||"ReactNative"!==navigator.product&&"NativeScript"!==navigator.product&&"NS"!==navigator.product)&&"undefined"!=typeof window&&"undefined"!=typeof document},forEach:f,merge:function e(){var t={};function n(n,r){s(t[r])&&s(n)?t[r]=e(t[r],n):s(n)?t[r]=e({},n):o(n)?t[r]=n.slice():t[r]=n}for(var r=0,a=arguments.length;r<a;r++)f(arguments[r],n);return t},extend:function(e,t,n){return f(t,(function(t,a){e[a]=n&&"function"==typeof t?r(t,n):t})),e},trim:function(e){return e.trim?e.trim():e.replace(/^\s+|\s+$/g,"")},stripBOM:function(e){return 65279===e.charCodeAt(0)&&(e=e.slice(1)),e}}},267:(e,t,n)=>{"use strict";n.d(t,{Z:()=>i});var r=n(537),a=n.n(r),o=n(645),l=n.n(o)()(a());l.push([e.id,"@import url(https://fonts.googleapis.com/css2?family=Montserrat:wght@500;600&display=swap);"]),l.push([e.id,'body{background-color:#add8e6;box-sizing:border-box;margin:0;padding:0}.WICBowiGayoncydratYw,.OPm1UEaiNhmGqxC1tobN{font-family:"Montserrat",sans-serif;font-weight:500;font-size:16px;color:#313030;text-decoration:none}',"",{version:3,sources:["webpack://./client/styles.css"],names:[],mappings:"AAEA,KACE,wBAAA,CACA,qBAAA,CACA,QAAA,CACA,SAAA,CAGF,4CAEE,mCAAA,CACA,eAAA,CACA,cAAA,CACA,aAAA,CACA,oBAAA",sourcesContent:["@import url('https://fonts.googleapis.com/css2?family=Montserrat:wght@500;600&display=swap');\n\nbody {\n  background-color: lightblue;\n  box-sizing: border-box;\n  margin: 0;\n  padding: 0;\n}\n\n.brand,\n.nav_links {\n  font-family: 'Montserrat', sans-serif;\n  font-weight: 500;\n  font-size: 16px;\n  color: #313030;\n  text-decoration: none;\n}\n"],sourceRoot:""}]),l.locals={brand:"WICBowiGayoncydratYw",nav_links:"OPm1UEaiNhmGqxC1tobN"};const i=l},645:e=>{"use strict";e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var n="",r=void 0!==t[5];return t[4]&&(n+="@supports (".concat(t[4],") {")),t[2]&&(n+="@media ".concat(t[2]," {")),r&&(n+="@layer".concat(t[5].length>0?" ".concat(t[5]):""," {")),n+=e(t),r&&(n+="}"),t[2]&&(n+="}"),t[4]&&(n+="}"),n})).join("")},t.i=function(e,n,r,a,o){"string"==typeof e&&(e=[[null,e,void 0]]);var l={};if(r)for(var i=0;i<this.length;i++){var u=this[i][0];null!=u&&(l[u]=!0)}for(var s=0;s<e.length;s++){var c=[].concat(e[s]);r&&l[c[0]]||(void 0!==o&&(void 0===c[5]||(c[1]="@layer".concat(c[5].length>0?" ".concat(c[5]):""," {").concat(c[1],"}")),c[5]=o),n&&(c[2]?(c[1]="@media ".concat(c[2]," {").concat(c[1],"}"),c[2]=n):c[2]=n),a&&(c[4]?(c[1]="@supports (".concat(c[4],") {").concat(c[1],"}"),c[4]=a):c[4]="".concat(a)),t.push(c))}},t}},537:e=>{"use strict";e.exports=function(e){var t=e[1],n=e[3];if(!n)return t;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(n)))),a="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),o="/*# ".concat(a," */"),l=n.sources.map((function(e){return"/*# sourceURL=".concat(n.sourceRoot||"").concat(e," */")}));return[t].concat(l).concat([o]).join("\n")}return[t].join("\n")}},512:function(e,t,n){e=n.nmd(e),function(){var t,n,r,a,o,l,i,u;n={},null!==e&&e.exports?e.exports=n:this.ipaddr=n,i=function(e,t,n,r){var a,o;if(e.length!==t.length)throw new Error("ipaddr: cannot match CIDR for objects with different lengths");for(a=0;r>0;){if((o=n-r)<0&&(o=0),e[a]>>o!=t[a]>>o)return!1;r-=n,a+=1}return!0},n.subnetMatch=function(e,t,n){var r,a,o,l,i;for(o in null==n&&(n="unicast"),t)for(!(l=t[o])[0]||l[0]instanceof Array||(l=[l]),r=0,a=l.length;r<a;r++)if(i=l[r],e.kind()===i[0].kind()&&e.match.apply(e,i))return o;return n},n.IPv4=function(){function e(e){var t,n,r;if(4!==e.length)throw new Error("ipaddr: ipv4 octet count should be 4");for(t=0,n=e.length;t<n;t++)if(!(0<=(r=e[t])&&r<=255))throw new Error("ipaddr: ipv4 octet should fit in 8 bits");this.octets=e}return e.prototype.kind=function(){return"ipv4"},e.prototype.toString=function(){return this.octets.join(".")},e.prototype.toNormalizedString=function(){return this.toString()},e.prototype.toByteArray=function(){return this.octets.slice(0)},e.prototype.match=function(e,t){var n;if(void 0===t&&(e=(n=e)[0],t=n[1]),"ipv4"!==e.kind())throw new Error("ipaddr: cannot match ipv4 address with non-ipv4 one");return i(this.octets,e.octets,8,t)},e.prototype.SpecialRanges={unspecified:[[new e([0,0,0,0]),8]],broadcast:[[new e([255,255,255,255]),32]],multicast:[[new e([224,0,0,0]),4]],linkLocal:[[new e([169,254,0,0]),16]],loopback:[[new e([127,0,0,0]),8]],carrierGradeNat:[[new e([100,64,0,0]),10]],private:[[new e([10,0,0,0]),8],[new e([172,16,0,0]),12],[new e([192,168,0,0]),16]],reserved:[[new e([192,0,0,0]),24],[new e([192,0,2,0]),24],[new e([192,88,99,0]),24],[new e([198,51,100,0]),24],[new e([203,0,113,0]),24],[new e([240,0,0,0]),4]]},e.prototype.range=function(){return n.subnetMatch(this,this.SpecialRanges)},e.prototype.toIPv4MappedAddress=function(){return n.IPv6.parse("::ffff:"+this.toString())},e.prototype.prefixLengthFromSubnetMask=function(){var e,t,n,r,a,o,l;for(l={0:8,128:7,192:6,224:5,240:4,248:3,252:2,254:1,255:0},e=0,a=!1,t=n=3;n>=0;t=n+=-1){if(!((r=this.octets[t])in l))return null;if(o=l[r],a&&0!==o)return null;8!==o&&(a=!0),e+=o}return 32-e},e}(),r="(0?\\d+|0x[a-f0-9]+)",a={fourOctet:new RegExp("^"+r+"\\."+r+"\\."+r+"\\."+r+"$","i"),longValue:new RegExp("^"+r+"$","i")},n.IPv4.parser=function(e){var t,n,r,o,l;if(n=function(e){return"0"===e[0]&&"x"!==e[1]?parseInt(e,8):parseInt(e)},t=e.match(a.fourOctet))return function(){var e,a,o,l;for(l=[],e=0,a=(o=t.slice(1,6)).length;e<a;e++)r=o[e],l.push(n(r));return l}();if(t=e.match(a.longValue)){if((l=n(t[1]))>4294967295||l<0)throw new Error("ipaddr: address outside defined range");return function(){var e,t;for(t=[],o=e=0;e<=24;o=e+=8)t.push(l>>o&255);return t}().reverse()}return null},n.IPv6=function(){function e(e,t){var n,r,a,o,l,i;if(16===e.length)for(this.parts=[],n=r=0;r<=14;n=r+=2)this.parts.push(e[n]<<8|e[n+1]);else{if(8!==e.length)throw new Error("ipaddr: ipv6 part count should be 8 or 16");this.parts=e}for(a=0,o=(i=this.parts).length;a<o;a++)if(!(0<=(l=i[a])&&l<=65535))throw new Error("ipaddr: ipv6 part should fit in 16 bits");t&&(this.zoneId=t)}return e.prototype.kind=function(){return"ipv6"},e.prototype.toString=function(){return this.toNormalizedString().replace(/((^|:)(0(:|$))+)/,"::")},e.prototype.toRFC5952String=function(){var e,t,n,r,a;for(r=/((^|:)(0(:|$)){2,})/g,a=this.toNormalizedString(),e=0,t=-1;n=r.exec(a);)n[0].length>t&&(e=n.index,t=n[0].length);return t<0?a:a.substring(0,e)+"::"+a.substring(e+t)},e.prototype.toByteArray=function(){var e,t,n,r,a;for(e=[],t=0,n=(a=this.parts).length;t<n;t++)r=a[t],e.push(r>>8),e.push(255&r);return e},e.prototype.toNormalizedString=function(){var e,t,n;return e=function(){var e,n,r,a;for(a=[],e=0,n=(r=this.parts).length;e<n;e++)t=r[e],a.push(t.toString(16));return a}.call(this).join(":"),n="",this.zoneId&&(n="%"+this.zoneId),e+n},e.prototype.toFixedLengthString=function(){var e,t,n;return e=function(){var e,n,r,a;for(a=[],e=0,n=(r=this.parts).length;e<n;e++)t=r[e],a.push(t.toString(16).padStart(4,"0"));return a}.call(this).join(":"),n="",this.zoneId&&(n="%"+this.zoneId),e+n},e.prototype.match=function(e,t){var n;if(void 0===t&&(e=(n=e)[0],t=n[1]),"ipv6"!==e.kind())throw new Error("ipaddr: cannot match ipv6 address with non-ipv6 one");return i(this.parts,e.parts,16,t)},e.prototype.SpecialRanges={unspecified:[new e([0,0,0,0,0,0,0,0]),128],linkLocal:[new e([65152,0,0,0,0,0,0,0]),10],multicast:[new e([65280,0,0,0,0,0,0,0]),8],loopback:[new e([0,0,0,0,0,0,0,1]),128],uniqueLocal:[new e([64512,0,0,0,0,0,0,0]),7],ipv4Mapped:[new e([0,0,0,0,0,65535,0,0]),96],rfc6145:[new e([0,0,0,0,65535,0,0,0]),96],rfc6052:[new e([100,65435,0,0,0,0,0,0]),96],"6to4":[new e([8194,0,0,0,0,0,0,0]),16],teredo:[new e([8193,0,0,0,0,0,0,0]),32],reserved:[[new e([8193,3512,0,0,0,0,0,0]),32]]},e.prototype.range=function(){return n.subnetMatch(this,this.SpecialRanges)},e.prototype.isIPv4MappedAddress=function(){return"ipv4Mapped"===this.range()},e.prototype.toIPv4Address=function(){var e,t,r;if(!this.isIPv4MappedAddress())throw new Error("ipaddr: trying to convert a generic ipv6 address to ipv4");return e=(r=this.parts.slice(-2))[0],t=r[1],new n.IPv4([e>>8,255&e,t>>8,255&t])},e.prototype.prefixLengthFromSubnetMask=function(){var e,t,n,r,a,o,l;for(l={0:16,32768:15,49152:14,57344:13,61440:12,63488:11,64512:10,65024:9,65280:8,65408:7,65472:6,65504:5,65520:4,65528:3,65532:2,65534:1,65535:0},e=0,a=!1,t=n=7;n>=0;t=n+=-1){if(!((r=this.parts[t])in l))return null;if(o=l[r],a&&0!==o)return null;16!==o&&(a=!0),e+=o}return 128-e},e}(),o="(?:[0-9a-f]+::?)+",u="%[0-9a-z]{1,}",l={zoneIndex:new RegExp(u,"i"),native:new RegExp("^(::)?("+o+")?([0-9a-f]+)?(::)?("+u+")?$","i"),transitional:new RegExp("^((?:"+o+")|(?:::)(?:"+o+")?)"+r+"\\."+r+"\\."+r+"\\."+r+"(%[0-9a-z]{1,})?$","i")},t=function(e,t){var n,r,a,o,i,u;if(e.indexOf("::")!==e.lastIndexOf("::"))return null;for((u=(e.match(l.zoneIndex)||[])[0])&&(u=u.substring(1),e=e.replace(/%.+$/,"")),n=0,r=-1;(r=e.indexOf(":",r+1))>=0;)n++;if("::"===e.substr(0,2)&&n--,"::"===e.substr(-2,2)&&n--,n>t)return null;for(i=t-n,o=":";i--;)o+="0:";return":"===(e=e.replace("::",o))[0]&&(e=e.slice(1)),":"===e[e.length-1]&&(e=e.slice(0,-1)),{parts:t=function(){var t,n,r,o;for(o=[],t=0,n=(r=e.split(":")).length;t<n;t++)a=r[t],o.push(parseInt(a,16));return o}(),zoneId:u}},n.IPv6.parser=function(e){var n,r,a,o,i,u,s;if(l.native.test(e))return t(e,8);if((o=e.match(l.transitional))&&(s=o[6]||"",(n=t(o[1].slice(0,-1)+s,6)).parts)){for(r=0,a=(u=[parseInt(o[2]),parseInt(o[3]),parseInt(o[4]),parseInt(o[5])]).length;r<a;r++)if(!(0<=(i=u[r])&&i<=255))return null;return n.parts.push(u[0]<<8|u[1]),n.parts.push(u[2]<<8|u[3]),{parts:n.parts,zoneId:n.zoneId}}return null},n.IPv4.isIPv4=n.IPv6.isIPv6=function(e){return null!==this.parser(e)},n.IPv4.isValid=function(e){try{return new this(this.parser(e)),!0}catch(e){return!1}},n.IPv4.isValidFourPartDecimal=function(e){return!(!n.IPv4.isValid(e)||!e.match(/^(0|[1-9]\d*)(\.(0|[1-9]\d*)){3}$/))},n.IPv6.isValid=function(e){var t;if("string"==typeof e&&-1===e.indexOf(":"))return!1;try{return new this((t=this.parser(e)).parts,t.zoneId),!0}catch(e){return!1}},n.IPv4.parse=function(e){var t;if(null===(t=this.parser(e)))throw new Error("ipaddr: string is not formatted like ip address");return new this(t)},n.IPv6.parse=function(e){var t;if(null===(t=this.parser(e)).parts)throw new Error("ipaddr: string is not formatted like ip address");return new this(t.parts,t.zoneId)},n.IPv4.parseCIDR=function(e){var t,n,r;if((n=e.match(/^(.+)\/(\d+)$/))&&(t=parseInt(n[2]))>=0&&t<=32)return r=[this.parse(n[1]),t],Object.defineProperty(r,"toString",{value:function(){return this.join("/")}}),r;throw new Error("ipaddr: string is not formatted like an IPv4 CIDR range")},n.IPv4.subnetMaskFromPrefixLength=function(e){var t,n,r;if((e=parseInt(e))<0||e>32)throw new Error("ipaddr: invalid IPv4 prefix length");for(r=[0,0,0,0],n=0,t=Math.floor(e/8);n<t;)r[n]=255,n++;return t<4&&(r[t]=Math.pow(2,e%8)-1<<8-e%8),new this(r)},n.IPv4.broadcastAddressFromCIDR=function(e){var t,n,r,a,o;try{for(r=(t=this.parseCIDR(e))[0].toByteArray(),o=this.subnetMaskFromPrefixLength(t[1]).toByteArray(),a=[],n=0;n<4;)a.push(parseInt(r[n],10)|255^parseInt(o[n],10)),n++;return new this(a)}catch(e){throw new Error("ipaddr: the address does not have IPv4 CIDR format")}},n.IPv4.networkAddressFromCIDR=function(e){var t,n,r,a,o;try{for(r=(t=this.parseCIDR(e))[0].toByteArray(),o=this.subnetMaskFromPrefixLength(t[1]).toByteArray(),a=[],n=0;n<4;)a.push(parseInt(r[n],10)&parseInt(o[n],10)),n++;return new this(a)}catch(e){throw new Error("ipaddr: the address does not have IPv4 CIDR format")}},n.IPv6.parseCIDR=function(e){var t,n,r;if((n=e.match(/^(.+)\/(\d+)$/))&&(t=parseInt(n[2]))>=0&&t<=128)return r=[this.parse(n[1]),t],Object.defineProperty(r,"toString",{value:function(){return this.join("/")}}),r;throw new Error("ipaddr: string is not formatted like an IPv6 CIDR range")},n.isValid=function(e){return n.IPv6.isValid(e)||n.IPv4.isValid(e)},n.parse=function(e){if(n.IPv6.isValid(e))return n.IPv6.parse(e);if(n.IPv4.isValid(e))return n.IPv4.parse(e);throw new Error("ipaddr: the address has neither IPv6 nor IPv4 format")},n.parseCIDR=function(e){try{return n.IPv6.parseCIDR(e)}catch(t){try{return n.IPv4.parseCIDR(e)}catch(e){throw new Error("ipaddr: the address has neither IPv6 nor IPv4 CIDR format")}}},n.fromByteArray=function(e){var t;if(4===(t=e.length))return new n.IPv4(e);if(16===t)return new n.IPv6(e);throw new Error("ipaddr: the binary input is neither an IPv6 nor IPv4 address")},n.process=function(e){var t;return"ipv6"===(t=this.parse(e)).kind()&&t.isIPv4MappedAddress()?t.toIPv4Address():t}}.call(this)},448:(e,t,n)=>{"use strict";var r=n(294),a=n(840);function o(e){for(var t="https://reactjs.org/docs/error-decoder.html?invariant="+e,n=1;n<arguments.length;n++)t+="&args[]="+encodeURIComponent(arguments[n]);return"Minified React error #"+e+"; visit "+t+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}var l=new Set,i={};function u(e,t){s(e,t),s(e+"Capture",t)}function s(e,t){for(i[e]=t,e=0;e<t.length;e++)l.add(t[e])}var c=!("undefined"==typeof window||void 0===window.document||void 0===window.document.createElement),f=Object.prototype.hasOwnProperty,d=/^[:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD][:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\-.0-9\u00B7\u0300-\u036F\u203F-\u2040]*$/,p={},h={};function m(e,t,n,r,a,o,l){this.acceptsBooleans=2===t||3===t||4===t,this.attributeName=r,this.attributeNamespace=a,this.mustUseProperty=n,this.propertyName=e,this.type=t,this.sanitizeURL=o,this.removeEmptyString=l}var v={};"children dangerouslySetInnerHTML defaultValue defaultChecked innerHTML suppressContentEditableWarning suppressHydrationWarning style".split(" ").forEach((function(e){v[e]=new m(e,0,!1,e,null,!1,!1)})),[["acceptCharset","accept-charset"],["className","class"],["htmlFor","for"],["httpEquiv","http-equiv"]].forEach((function(e){var t=e[0];v[t]=new m(t,1,!1,e[1],null,!1,!1)})),["contentEditable","draggable","spellCheck","value"].forEach((function(e){v[e]=new m(e,2,!1,e.toLowerCase(),null,!1,!1)})),["autoReverse","externalResourcesRequired","focusable","preserveAlpha"].forEach((function(e){v[e]=new m(e,2,!1,e,null,!1,!1)})),"allowFullScreen async autoFocus autoPlay controls default defer disabled disablePictureInPicture disableRemotePlayback formNoValidate hidden loop noModule noValidate open playsInline readOnly required reversed scoped seamless itemScope".split(" ").forEach((function(e){v[e]=new m(e,3,!1,e.toLowerCase(),null,!1,!1)})),["checked","multiple","muted","selected"].forEach((function(e){v[e]=new m(e,3,!0,e,null,!1,!1)})),["capture","download"].forEach((function(e){v[e]=new m(e,4,!1,e,null,!1,!1)})),["cols","rows","size","span"].forEach((function(e){v[e]=new m(e,6,!1,e,null,!1,!1)})),["rowSpan","start"].forEach((function(e){v[e]=new m(e,5,!1,e.toLowerCase(),null,!1,!1)}));var g=/[\-:]([a-z])/g;function y(e){return e[1].toUpperCase()}function b(e,t,n,r){var a=v.hasOwnProperty(t)?v[t]:null;(null!==a?0!==a.type:r||!(2<t.length)||"o"!==t[0]&&"O"!==t[0]||"n"!==t[1]&&"N"!==t[1])&&(function(e,t,n,r){if(null==t||function(e,t,n,r){if(null!==n&&0===n.type)return!1;switch(typeof t){case"function":case"symbol":return!0;case"boolean":return!r&&(null!==n?!n.acceptsBooleans:"data-"!==(e=e.toLowerCase().slice(0,5))&&"aria-"!==e);default:return!1}}(e,t,n,r))return!0;if(r)return!1;if(null!==n)switch(n.type){case 3:return!t;case 4:return!1===t;case 5:return isNaN(t);case 6:return isNaN(t)||1>t}return!1}(t,n,a,r)&&(n=null),r||null===a?function(e){return!!f.call(h,e)||!f.call(p,e)&&(d.test(e)?h[e]=!0:(p[e]=!0,!1))}(t)&&(null===n?e.removeAttribute(t):e.setAttribute(t,""+n)):a.mustUseProperty?e[a.propertyName]=null===n?3!==a.type&&"":n:(t=a.attributeName,r=a.attributeNamespace,null===n?e.removeAttribute(t):(n=3===(a=a.type)||4===a&&!0===n?"":""+n,r?e.setAttributeNS(r,t,n):e.setAttribute(t,n))))}"accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode xmlns:xlink x-height".split(" ").forEach((function(e){var t=e.replace(g,y);v[t]=new m(t,1,!1,e,null,!1,!1)})),"xlink:actuate xlink:arcrole xlink:role xlink:show xlink:title xlink:type".split(" ").forEach((function(e){var t=e.replace(g,y);v[t]=new m(t,1,!1,e,"http://www.w3.org/1999/xlink",!1,!1)})),["xml:base","xml:lang","xml:space"].forEach((function(e){var t=e.replace(g,y);v[t]=new m(t,1,!1,e,"http://www.w3.org/XML/1998/namespace",!1,!1)})),["tabIndex","crossOrigin"].forEach((function(e){v[e]=new m(e,1,!1,e.toLowerCase(),null,!1,!1)})),v.xlinkHref=new m("xlinkHref",1,!1,"xlink:href","http://www.w3.org/1999/xlink",!0,!1),["src","href","action","formAction"].forEach((function(e){v[e]=new m(e,1,!1,e.toLowerCase(),null,!0,!0)}));var w=r.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED,k=Symbol.for("react.element"),S=Symbol.for("react.portal"),E=Symbol.for("react.fragment"),x=Symbol.for("react.strict_mode"),C=Symbol.for("react.profiler"),P=Symbol.for("react.provider"),_=Symbol.for("react.context"),N=Symbol.for("react.forward_ref"),L=Symbol.for("react.suspense"),T=Symbol.for("react.suspense_list"),I=Symbol.for("react.memo"),z=Symbol.for("react.lazy");Symbol.for("react.scope"),Symbol.for("react.debug_trace_mode");var R=Symbol.for("react.offscreen");Symbol.for("react.legacy_hidden"),Symbol.for("react.cache"),Symbol.for("react.tracing_marker");var O=Symbol.iterator;function A(e){return null===e||"object"!=typeof e?null:"function"==typeof(e=O&&e[O]||e["@@iterator"])?e:null}var M,F=Object.assign;function D(e){if(void 0===M)try{throw Error()}catch(e){var t=e.stack.trim().match(/\n( *(at )?)/);M=t&&t[1]||""}return"\n"+M+e}var j=!1;function U(e,t){if(!e||j)return"";j=!0;var n=Error.prepareStackTrace;Error.prepareStackTrace=void 0;try{if(t)if(t=function(){throw Error()},Object.defineProperty(t.prototype,"props",{set:function(){throw Error()}}),"object"==typeof Reflect&&Reflect.construct){try{Reflect.construct(t,[])}catch(e){var r=e}Reflect.construct(e,[],t)}else{try{t.call()}catch(e){r=e}e.call(t.prototype)}else{try{throw Error()}catch(e){r=e}e()}}catch(t){if(t&&r&&"string"==typeof t.stack){for(var a=t.stack.split("\n"),o=r.stack.split("\n"),l=a.length-1,i=o.length-1;1<=l&&0<=i&&a[l]!==o[i];)i--;for(;1<=l&&0<=i;l--,i--)if(a[l]!==o[i]){if(1!==l||1!==i)do{if(l--,0>--i||a[l]!==o[i]){var u="\n"+a[l].replace(" at new "," at ");return e.displayName&&u.includes("<anonymous>")&&(u=u.replace("<anonymous>",e.displayName)),u}}while(1<=l&&0<=i);break}}}finally{j=!1,Error.prepareStackTrace=n}return(e=e?e.displayName||e.name:"")?D(e):""}function B(e){switch(e.tag){case 5:return D(e.type);case 16:return D("Lazy");case 13:return D("Suspense");case 19:return D("SuspenseList");case 0:case 2:case 15:return U(e.type,!1);case 11:return U(e.type.render,!1);case 1:return U(e.type,!0);default:return""}}function V(e){if(null==e)return null;if("function"==typeof e)return e.displayName||e.name||null;if("string"==typeof e)return e;switch(e){case E:return"Fragment";case S:return"Portal";case C:return"Profiler";case x:return"StrictMode";case L:return"Suspense";case T:return"SuspenseList"}if("object"==typeof e)switch(e.$$typeof){case _:return(e.displayName||"Context")+".Consumer";case P:return(e._context.displayName||"Context")+".Provider";case N:var t=e.render;return(e=e.displayName)||(e=""!==(e=t.displayName||t.name||"")?"ForwardRef("+e+")":"ForwardRef"),e;case I:return null!==(t=e.displayName||null)?t:V(e.type)||"Memo";case z:t=e._payload,e=e._init;try{return V(e(t))}catch(e){}}return null}function $(e){var t=e.type;switch(e.tag){case 24:return"Cache";case 9:return(t.displayName||"Context")+".Consumer";case 10:return(t._context.displayName||"Context")+".Provider";case 18:return"DehydratedFragment";case 11:return e=(e=t.render).displayName||e.name||"",t.displayName||(""!==e?"ForwardRef("+e+")":"ForwardRef");case 7:return"Fragment";case 5:return t;case 4:return"Portal";case 3:return"Root";case 6:return"Text";case 16:return V(t);case 8:return t===x?"StrictMode":"Mode";case 22:return"Offscreen";case 12:return"Profiler";case 21:return"Scope";case 13:return"Suspense";case 19:return"SuspenseList";case 25:return"TracingMarker";case 1:case 0:case 17:case 2:case 14:case 15:if("function"==typeof t)return t.displayName||t.name||null;if("string"==typeof t)return t}return null}function W(e){switch(typeof e){case"boolean":case"number":case"string":case"undefined":case"object":return e;default:return""}}function H(e){var t=e.type;return(e=e.nodeName)&&"input"===e.toLowerCase()&&("checkbox"===t||"radio"===t)}function Q(e){e._valueTracker||(e._valueTracker=function(e){var t=H(e)?"checked":"value",n=Object.getOwnPropertyDescriptor(e.constructor.prototype,t),r=""+e[t];if(!e.hasOwnProperty(t)&&void 0!==n&&"function"==typeof n.get&&"function"==typeof n.set){var a=n.get,o=n.set;return Object.defineProperty(e,t,{configurable:!0,get:function(){return a.call(this)},set:function(e){r=""+e,o.call(this,e)}}),Object.defineProperty(e,t,{enumerable:n.enumerable}),{getValue:function(){return r},setValue:function(e){r=""+e},stopTracking:function(){e._valueTracker=null,delete e[t]}}}}(e))}function q(e){if(!e)return!1;var t=e._valueTracker;if(!t)return!0;var n=t.getValue(),r="";return e&&(r=H(e)?e.checked?"true":"false":e.value),(e=r)!==n&&(t.setValue(e),!0)}function K(e){if(void 0===(e=e||("undefined"!=typeof document?document:void 0)))return null;try{return e.activeElement||e.body}catch(t){return e.body}}function G(e,t){var n=t.checked;return F({},t,{defaultChecked:void 0,defaultValue:void 0,value:void 0,checked:null!=n?n:e._wrapperState.initialChecked})}function Y(e,t){var n=null==t.defaultValue?"":t.defaultValue,r=null!=t.checked?t.checked:t.defaultChecked;n=W(null!=t.value?t.value:n),e._wrapperState={initialChecked:r,initialValue:n,controlled:"checkbox"===t.type||"radio"===t.type?null!=t.checked:null!=t.value}}function X(e,t){null!=(t=t.checked)&&b(e,"checked",t,!1)}function J(e,t){X(e,t);var n=W(t.value),r=t.type;if(null!=n)"number"===r?(0===n&&""===e.value||e.value!=n)&&(e.value=""+n):e.value!==""+n&&(e.value=""+n);else if("submit"===r||"reset"===r)return void e.removeAttribute("value");t.hasOwnProperty("value")?ee(e,t.type,n):t.hasOwnProperty("defaultValue")&&ee(e,t.type,W(t.defaultValue)),null==t.checked&&null!=t.defaultChecked&&(e.defaultChecked=!!t.defaultChecked)}function Z(e,t,n){if(t.hasOwnProperty("value")||t.hasOwnProperty("defaultValue")){var r=t.type;if(!("submit"!==r&&"reset"!==r||void 0!==t.value&&null!==t.value))return;t=""+e._wrapperState.initialValue,n||t===e.value||(e.value=t),e.defaultValue=t}""!==(n=e.name)&&(e.name=""),e.defaultChecked=!!e._wrapperState.initialChecked,""!==n&&(e.name=n)}function ee(e,t,n){"number"===t&&K(e.ownerDocument)===e||(null==n?e.defaultValue=""+e._wrapperState.initialValue:e.defaultValue!==""+n&&(e.defaultValue=""+n))}var te=Array.isArray;function ne(e,t,n,r){if(e=e.options,t){t={};for(var a=0;a<n.length;a++)t["$"+n[a]]=!0;for(n=0;n<e.length;n++)a=t.hasOwnProperty("$"+e[n].value),e[n].selected!==a&&(e[n].selected=a),a&&r&&(e[n].defaultSelected=!0)}else{for(n=""+W(n),t=null,a=0;a<e.length;a++){if(e[a].value===n)return e[a].selected=!0,void(r&&(e[a].defaultSelected=!0));null!==t||e[a].disabled||(t=e[a])}null!==t&&(t.selected=!0)}}function re(e,t){if(null!=t.dangerouslySetInnerHTML)throw Error(o(91));return F({},t,{value:void 0,defaultValue:void 0,children:""+e._wrapperState.initialValue})}function ae(e,t){var n=t.value;if(null==n){if(n=t.children,t=t.defaultValue,null!=n){if(null!=t)throw Error(o(92));if(te(n)){if(1<n.length)throw Error(o(93));n=n[0]}t=n}null==t&&(t=""),n=t}e._wrapperState={initialValue:W(n)}}function oe(e,t){var n=W(t.value),r=W(t.defaultValue);null!=n&&((n=""+n)!==e.value&&(e.value=n),null==t.defaultValue&&e.defaultValue!==n&&(e.defaultValue=n)),null!=r&&(e.defaultValue=""+r)}function le(e){var t=e.textContent;t===e._wrapperState.initialValue&&""!==t&&null!==t&&(e.value=t)}function ie(e){switch(e){case"svg":return"http://www.w3.org/2000/svg";case"math":return"http://www.w3.org/1998/Math/MathML";default:return"http://www.w3.org/1999/xhtml"}}function ue(e,t){return null==e||"http://www.w3.org/1999/xhtml"===e?ie(t):"http://www.w3.org/2000/svg"===e&&"foreignObject"===t?"http://www.w3.org/1999/xhtml":e}var se,ce,fe=(ce=function(e,t){if("http://www.w3.org/2000/svg"!==e.namespaceURI||"innerHTML"in e)e.innerHTML=t;else{for((se=se||document.createElement("div")).innerHTML="<svg>"+t.valueOf().toString()+"</svg>",t=se.firstChild;e.firstChild;)e.removeChild(e.firstChild);for(;t.firstChild;)e.appendChild(t.firstChild)}},"undefined"!=typeof MSApp&&MSApp.execUnsafeLocalFunction?function(e,t,n,r){MSApp.execUnsafeLocalFunction((function(){return ce(e,t)}))}:ce);function de(e,t){if(t){var n=e.firstChild;if(n&&n===e.lastChild&&3===n.nodeType)return void(n.nodeValue=t)}e.textContent=t}var pe={animationIterationCount:!0,aspectRatio:!0,borderImageOutset:!0,borderImageSlice:!0,borderImageWidth:!0,boxFlex:!0,boxFlexGroup:!0,boxOrdinalGroup:!0,columnCount:!0,columns:!0,flex:!0,flexGrow:!0,flexPositive:!0,flexShrink:!0,flexNegative:!0,flexOrder:!0,gridArea:!0,gridRow:!0,gridRowEnd:!0,gridRowSpan:!0,gridRowStart:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnSpan:!0,gridColumnStart:!0,fontWeight:!0,lineClamp:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,tabSize:!0,widows:!0,zIndex:!0,zoom:!0,fillOpacity:!0,floodOpacity:!0,stopOpacity:!0,strokeDasharray:!0,strokeDashoffset:!0,strokeMiterlimit:!0,strokeOpacity:!0,strokeWidth:!0},he=["Webkit","ms","Moz","O"];function me(e,t,n){return null==t||"boolean"==typeof t||""===t?"":n||"number"!=typeof t||0===t||pe.hasOwnProperty(e)&&pe[e]?(""+t).trim():t+"px"}function ve(e,t){for(var n in e=e.style,t)if(t.hasOwnProperty(n)){var r=0===n.indexOf("--"),a=me(n,t[n],r);"float"===n&&(n="cssFloat"),r?e.setProperty(n,a):e[n]=a}}Object.keys(pe).forEach((function(e){he.forEach((function(t){t=t+e.charAt(0).toUpperCase()+e.substring(1),pe[t]=pe[e]}))}));var ge=F({menuitem:!0},{area:!0,base:!0,br:!0,col:!0,embed:!0,hr:!0,img:!0,input:!0,keygen:!0,link:!0,meta:!0,param:!0,source:!0,track:!0,wbr:!0});function ye(e,t){if(t){if(ge[e]&&(null!=t.children||null!=t.dangerouslySetInnerHTML))throw Error(o(137,e));if(null!=t.dangerouslySetInnerHTML){if(null!=t.children)throw Error(o(60));if("object"!=typeof t.dangerouslySetInnerHTML||!("__html"in t.dangerouslySetInnerHTML))throw Error(o(61))}if(null!=t.style&&"object"!=typeof t.style)throw Error(o(62))}}function be(e,t){if(-1===e.indexOf("-"))return"string"==typeof t.is;switch(e){case"annotation-xml":case"color-profile":case"font-face":case"font-face-src":case"font-face-uri":case"font-face-format":case"font-face-name":case"missing-glyph":return!1;default:return!0}}var we=null;function ke(e){return(e=e.target||e.srcElement||window).correspondingUseElement&&(e=e.correspondingUseElement),3===e.nodeType?e.parentNode:e}var Se=null,Ee=null,xe=null;function Ce(e){if(e=va(e)){if("function"!=typeof Se)throw Error(o(280));var t=e.stateNode;t&&(t=ya(t),Se(e.stateNode,e.type,t))}}function Pe(e){Ee?xe?xe.push(e):xe=[e]:Ee=e}function _e(){if(Ee){var e=Ee,t=xe;if(xe=Ee=null,Ce(e),t)for(e=0;e<t.length;e++)Ce(t[e])}}function Ne(e,t){return e(t)}function Le(){}var Te=!1;function Ie(e,t,n){if(Te)return e(t,n);Te=!0;try{return Ne(e,t,n)}finally{Te=!1,(null!==Ee||null!==xe)&&(Le(),_e())}}function ze(e,t){var n=e.stateNode;if(null===n)return null;var r=ya(n);if(null===r)return null;n=r[t];e:switch(t){case"onClick":case"onClickCapture":case"onDoubleClick":case"onDoubleClickCapture":case"onMouseDown":case"onMouseDownCapture":case"onMouseMove":case"onMouseMoveCapture":case"onMouseUp":case"onMouseUpCapture":case"onMouseEnter":(r=!r.disabled)||(r=!("button"===(e=e.type)||"input"===e||"select"===e||"textarea"===e)),e=!r;break e;default:e=!1}if(e)return null;if(n&&"function"!=typeof n)throw Error(o(231,t,typeof n));return n}var Re=!1;if(c)try{var Oe={};Object.defineProperty(Oe,"passive",{get:function(){Re=!0}}),window.addEventListener("test",Oe,Oe),window.removeEventListener("test",Oe,Oe)}catch(ce){Re=!1}function Ae(e,t,n,r,a,o,l,i,u){var s=Array.prototype.slice.call(arguments,3);try{t.apply(n,s)}catch(e){this.onError(e)}}var Me=!1,Fe=null,De=!1,je=null,Ue={onError:function(e){Me=!0,Fe=e}};function Be(e,t,n,r,a,o,l,i,u){Me=!1,Fe=null,Ae.apply(Ue,arguments)}function Ve(e){var t=e,n=e;if(e.alternate)for(;t.return;)t=t.return;else{e=t;do{0!=(4098&(t=e).flags)&&(n=t.return),e=t.return}while(e)}return 3===t.tag?n:null}function $e(e){if(13===e.tag){var t=e.memoizedState;if(null===t&&null!==(e=e.alternate)&&(t=e.memoizedState),null!==t)return t.dehydrated}return null}function We(e){if(Ve(e)!==e)throw Error(o(188))}function He(e){return null!==(e=function(e){var t=e.alternate;if(!t){if(null===(t=Ve(e)))throw Error(o(188));return t!==e?null:e}for(var n=e,r=t;;){var a=n.return;if(null===a)break;var l=a.alternate;if(null===l){if(null!==(r=a.return)){n=r;continue}break}if(a.child===l.child){for(l=a.child;l;){if(l===n)return We(a),e;if(l===r)return We(a),t;l=l.sibling}throw Error(o(188))}if(n.return!==r.return)n=a,r=l;else{for(var i=!1,u=a.child;u;){if(u===n){i=!0,n=a,r=l;break}if(u===r){i=!0,r=a,n=l;break}u=u.sibling}if(!i){for(u=l.child;u;){if(u===n){i=!0,n=l,r=a;break}if(u===r){i=!0,r=l,n=a;break}u=u.sibling}if(!i)throw Error(o(189))}}if(n.alternate!==r)throw Error(o(190))}if(3!==n.tag)throw Error(o(188));return n.stateNode.current===n?e:t}(e))?Qe(e):null}function Qe(e){if(5===e.tag||6===e.tag)return e;for(e=e.child;null!==e;){var t=Qe(e);if(null!==t)return t;e=e.sibling}return null}var qe=a.unstable_scheduleCallback,Ke=a.unstable_cancelCallback,Ge=a.unstable_shouldYield,Ye=a.unstable_requestPaint,Xe=a.unstable_now,Je=a.unstable_getCurrentPriorityLevel,Ze=a.unstable_ImmediatePriority,et=a.unstable_UserBlockingPriority,tt=a.unstable_NormalPriority,nt=a.unstable_LowPriority,rt=a.unstable_IdlePriority,at=null,ot=null,lt=Math.clz32?Math.clz32:function(e){return 0==(e>>>=0)?32:31-(it(e)/ut|0)|0},it=Math.log,ut=Math.LN2,st=64,ct=4194304;function ft(e){switch(e&-e){case 1:return 1;case 2:return 2;case 4:return 4;case 8:return 8;case 16:return 16;case 32:return 32;case 64:case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:return 4194240&e;case 4194304:case 8388608:case 16777216:case 33554432:case 67108864:return 130023424&e;case 134217728:return 134217728;case 268435456:return 268435456;case 536870912:return 536870912;case 1073741824:return 1073741824;default:return e}}function dt(e,t){var n=e.pendingLanes;if(0===n)return 0;var r=0,a=e.suspendedLanes,o=e.pingedLanes,l=268435455&n;if(0!==l){var i=l&~a;0!==i?r=ft(i):0!=(o&=l)&&(r=ft(o))}else 0!=(l=n&~a)?r=ft(l):0!==o&&(r=ft(o));if(0===r)return 0;if(0!==t&&t!==r&&0==(t&a)&&((a=r&-r)>=(o=t&-t)||16===a&&0!=(4194240&o)))return t;if(0!=(4&r)&&(r|=16&n),0!==(t=e.entangledLanes))for(e=e.entanglements,t&=r;0<t;)a=1<<(n=31-lt(t)),r|=e[n],t&=~a;return r}function pt(e,t){switch(e){case 1:case 2:case 4:return t+250;case 8:case 16:case 32:case 64:case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:return t+5e3;default:return-1}}function ht(e){return 0!=(e=-1073741825&e.pendingLanes)?e:1073741824&e?1073741824:0}function mt(e){for(var t=[],n=0;31>n;n++)t.push(e);return t}function vt(e,t,n){e.pendingLanes|=t,536870912!==t&&(e.suspendedLanes=0,e.pingedLanes=0),(e=e.eventTimes)[t=31-lt(t)]=n}function gt(e,t){var n=e.entangledLanes|=t;for(e=e.entanglements;n;){var r=31-lt(n),a=1<<r;a&t|e[r]&t&&(e[r]|=t),n&=~a}}var yt=0;function bt(e){return 1<(e&=-e)?4<e?0!=(268435455&e)?16:536870912:4:1}var wt,kt,St,Et,xt,Ct=!1,Pt=[],_t=null,Nt=null,Lt=null,Tt=new Map,It=new Map,zt=[],Rt="mousedown mouseup touchcancel touchend touchstart auxclick dblclick pointercancel pointerdown pointerup dragend dragstart drop compositionend compositionstart keydown keypress keyup input textInput copy cut paste click change contextmenu reset submit".split(" ");function Ot(e,t){switch(e){case"focusin":case"focusout":_t=null;break;case"dragenter":case"dragleave":Nt=null;break;case"mouseover":case"mouseout":Lt=null;break;case"pointerover":case"pointerout":Tt.delete(t.pointerId);break;case"gotpointercapture":case"lostpointercapture":It.delete(t.pointerId)}}function At(e,t,n,r,a,o){return null===e||e.nativeEvent!==o?(e={blockedOn:t,domEventName:n,eventSystemFlags:r,nativeEvent:o,targetContainers:[a]},null!==t&&null!==(t=va(t))&&kt(t),e):(e.eventSystemFlags|=r,t=e.targetContainers,null!==a&&-1===t.indexOf(a)&&t.push(a),e)}function Mt(e){var t=ma(e.target);if(null!==t){var n=Ve(t);if(null!==n)if(13===(t=n.tag)){if(null!==(t=$e(n)))return e.blockedOn=t,void xt(e.priority,(function(){St(n)}))}else if(3===t&&n.stateNode.current.memoizedState.isDehydrated)return void(e.blockedOn=3===n.tag?n.stateNode.containerInfo:null)}e.blockedOn=null}function Ft(e){if(null!==e.blockedOn)return!1;for(var t=e.targetContainers;0<t.length;){var n=qt(e.domEventName,e.eventSystemFlags,t[0],e.nativeEvent);if(null!==n)return null!==(t=va(n))&&kt(t),e.blockedOn=n,!1;var r=new(n=e.nativeEvent).constructor(n.type,n);we=r,n.target.dispatchEvent(r),we=null,t.shift()}return!0}function Dt(e,t,n){Ft(e)&&n.delete(t)}function jt(){Ct=!1,null!==_t&&Ft(_t)&&(_t=null),null!==Nt&&Ft(Nt)&&(Nt=null),null!==Lt&&Ft(Lt)&&(Lt=null),Tt.forEach(Dt),It.forEach(Dt)}function Ut(e,t){e.blockedOn===t&&(e.blockedOn=null,Ct||(Ct=!0,a.unstable_scheduleCallback(a.unstable_NormalPriority,jt)))}function Bt(e){function t(t){return Ut(t,e)}if(0<Pt.length){Ut(Pt[0],e);for(var n=1;n<Pt.length;n++){var r=Pt[n];r.blockedOn===e&&(r.blockedOn=null)}}for(null!==_t&&Ut(_t,e),null!==Nt&&Ut(Nt,e),null!==Lt&&Ut(Lt,e),Tt.forEach(t),It.forEach(t),n=0;n<zt.length;n++)(r=zt[n]).blockedOn===e&&(r.blockedOn=null);for(;0<zt.length&&null===(n=zt[0]).blockedOn;)Mt(n),null===n.blockedOn&&zt.shift()}var Vt=w.ReactCurrentBatchConfig;function $t(e,t,n,r){var a=yt,o=Vt.transition;Vt.transition=null;try{yt=1,Ht(e,t,n,r)}finally{yt=a,Vt.transition=o}}function Wt(e,t,n,r){var a=yt,o=Vt.transition;Vt.transition=null;try{yt=4,Ht(e,t,n,r)}finally{yt=a,Vt.transition=o}}function Ht(e,t,n,r){var a=qt(e,t,n,r);if(null===a)Vr(e,t,r,Qt,n),Ot(e,r);else if(function(e,t,n,r,a){switch(t){case"focusin":return _t=At(_t,e,t,n,r,a),!0;case"dragenter":return Nt=At(Nt,e,t,n,r,a),!0;case"mouseover":return Lt=At(Lt,e,t,n,r,a),!0;case"pointerover":var o=a.pointerId;return Tt.set(o,At(Tt.get(o)||null,e,t,n,r,a)),!0;case"gotpointercapture":return o=a.pointerId,It.set(o,At(It.get(o)||null,e,t,n,r,a)),!0}return!1}(a,e,t,n,r))r.stopPropagation();else if(Ot(e,r),4&t&&-1<Rt.indexOf(e)){for(;null!==a;){var o=va(a);if(null!==o&&wt(o),null===(o=qt(e,t,n,r))&&Vr(e,t,r,Qt,n),o===a)break;a=o}null!==a&&r.stopPropagation()}else Vr(e,t,r,null,n)}var Qt=null;function qt(e,t,n,r){if(Qt=null,null!==(e=ma(e=ke(r))))if(null===(t=Ve(e)))e=null;else if(13===(n=t.tag)){if(null!==(e=$e(t)))return e;e=null}else if(3===n){if(t.stateNode.current.memoizedState.isDehydrated)return 3===t.tag?t.stateNode.containerInfo:null;e=null}else t!==e&&(e=null);return Qt=e,null}function Kt(e){switch(e){case"cancel":case"click":case"close":case"contextmenu":case"copy":case"cut":case"auxclick":case"dblclick":case"dragend":case"dragstart":case"drop":case"focusin":case"focusout":case"input":case"invalid":case"keydown":case"keypress":case"keyup":case"mousedown":case"mouseup":case"paste":case"pause":case"play":case"pointercancel":case"pointerdown":case"pointerup":case"ratechange":case"reset":case"resize":case"seeked":case"submit":case"touchcancel":case"touchend":case"touchstart":case"volumechange":case"change":case"selectionchange":case"textInput":case"compositionstart":case"compositionend":case"compositionupdate":case"beforeblur":case"afterblur":case"beforeinput":case"blur":case"fullscreenchange":case"focus":case"hashchange":case"popstate":case"select":case"selectstart":return 1;case"drag":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"mousemove":case"mouseout":case"mouseover":case"pointermove":case"pointerout":case"pointerover":case"scroll":case"toggle":case"touchmove":case"wheel":case"mouseenter":case"mouseleave":case"pointerenter":case"pointerleave":return 4;case"message":switch(Je()){case Ze:return 1;case et:return 4;case tt:case nt:return 16;case rt:return 536870912;default:return 16}default:return 16}}var Gt=null,Yt=null,Xt=null;function Jt(){if(Xt)return Xt;var e,t,n=Yt,r=n.length,a="value"in Gt?Gt.value:Gt.textContent,o=a.length;for(e=0;e<r&&n[e]===a[e];e++);var l=r-e;for(t=1;t<=l&&n[r-t]===a[o-t];t++);return Xt=a.slice(e,1<t?1-t:void 0)}function Zt(e){var t=e.keyCode;return"charCode"in e?0===(e=e.charCode)&&13===t&&(e=13):e=t,10===e&&(e=13),32<=e||13===e?e:0}function en(){return!0}function tn(){return!1}function nn(e){function t(t,n,r,a,o){for(var l in this._reactName=t,this._targetInst=r,this.type=n,this.nativeEvent=a,this.target=o,this.currentTarget=null,e)e.hasOwnProperty(l)&&(t=e[l],this[l]=t?t(a):a[l]);return this.isDefaultPrevented=(null!=a.defaultPrevented?a.defaultPrevented:!1===a.returnValue)?en:tn,this.isPropagationStopped=tn,this}return F(t.prototype,{preventDefault:function(){this.defaultPrevented=!0;var e=this.nativeEvent;e&&(e.preventDefault?e.preventDefault():"unknown"!=typeof e.returnValue&&(e.returnValue=!1),this.isDefaultPrevented=en)},stopPropagation:function(){var e=this.nativeEvent;e&&(e.stopPropagation?e.stopPropagation():"unknown"!=typeof e.cancelBubble&&(e.cancelBubble=!0),this.isPropagationStopped=en)},persist:function(){},isPersistent:en}),t}var rn,an,on,ln={eventPhase:0,bubbles:0,cancelable:0,timeStamp:function(e){return e.timeStamp||Date.now()},defaultPrevented:0,isTrusted:0},un=nn(ln),sn=F({},ln,{view:0,detail:0}),cn=nn(sn),fn=F({},sn,{screenX:0,screenY:0,clientX:0,clientY:0,pageX:0,pageY:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,getModifierState:En,button:0,buttons:0,relatedTarget:function(e){return void 0===e.relatedTarget?e.fromElement===e.srcElement?e.toElement:e.fromElement:e.relatedTarget},movementX:function(e){return"movementX"in e?e.movementX:(e!==on&&(on&&"mousemove"===e.type?(rn=e.screenX-on.screenX,an=e.screenY-on.screenY):an=rn=0,on=e),rn)},movementY:function(e){return"movementY"in e?e.movementY:an}}),dn=nn(fn),pn=nn(F({},fn,{dataTransfer:0})),hn=nn(F({},sn,{relatedTarget:0})),mn=nn(F({},ln,{animationName:0,elapsedTime:0,pseudoElement:0})),vn=F({},ln,{clipboardData:function(e){return"clipboardData"in e?e.clipboardData:window.clipboardData}}),gn=nn(vn),yn=nn(F({},ln,{data:0})),bn={Esc:"Escape",Spacebar:" ",Left:"ArrowLeft",Up:"ArrowUp",Right:"ArrowRight",Down:"ArrowDown",Del:"Delete",Win:"OS",Menu:"ContextMenu",Apps:"ContextMenu",Scroll:"ScrollLock",MozPrintableKey:"Unidentified"},wn={8:"Backspace",9:"Tab",12:"Clear",13:"Enter",16:"Shift",17:"Control",18:"Alt",19:"Pause",20:"CapsLock",27:"Escape",32:" ",33:"PageUp",34:"PageDown",35:"End",36:"Home",37:"ArrowLeft",38:"ArrowUp",39:"ArrowRight",40:"ArrowDown",45:"Insert",46:"Delete",112:"F1",113:"F2",114:"F3",115:"F4",116:"F5",117:"F6",118:"F7",119:"F8",120:"F9",121:"F10",122:"F11",123:"F12",144:"NumLock",145:"ScrollLock",224:"Meta"},kn={Alt:"altKey",Control:"ctrlKey",Meta:"metaKey",Shift:"shiftKey"};function Sn(e){var t=this.nativeEvent;return t.getModifierState?t.getModifierState(e):!!(e=kn[e])&&!!t[e]}function En(){return Sn}var xn=F({},sn,{key:function(e){if(e.key){var t=bn[e.key]||e.key;if("Unidentified"!==t)return t}return"keypress"===e.type?13===(e=Zt(e))?"Enter":String.fromCharCode(e):"keydown"===e.type||"keyup"===e.type?wn[e.keyCode]||"Unidentified":""},code:0,location:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,repeat:0,locale:0,getModifierState:En,charCode:function(e){return"keypress"===e.type?Zt(e):0},keyCode:function(e){return"keydown"===e.type||"keyup"===e.type?e.keyCode:0},which:function(e){return"keypress"===e.type?Zt(e):"keydown"===e.type||"keyup"===e.type?e.keyCode:0}}),Cn=nn(xn),Pn=nn(F({},fn,{pointerId:0,width:0,height:0,pressure:0,tangentialPressure:0,tiltX:0,tiltY:0,twist:0,pointerType:0,isPrimary:0})),_n=nn(F({},sn,{touches:0,targetTouches:0,changedTouches:0,altKey:0,metaKey:0,ctrlKey:0,shiftKey:0,getModifierState:En})),Nn=nn(F({},ln,{propertyName:0,elapsedTime:0,pseudoElement:0})),Ln=F({},fn,{deltaX:function(e){return"deltaX"in e?e.deltaX:"wheelDeltaX"in e?-e.wheelDeltaX:0},deltaY:function(e){return"deltaY"in e?e.deltaY:"wheelDeltaY"in e?-e.wheelDeltaY:"wheelDelta"in e?-e.wheelDelta:0},deltaZ:0,deltaMode:0}),Tn=nn(Ln),In=[9,13,27,32],zn=c&&"CompositionEvent"in window,Rn=null;c&&"documentMode"in document&&(Rn=document.documentMode);var On=c&&"TextEvent"in window&&!Rn,An=c&&(!zn||Rn&&8<Rn&&11>=Rn),Mn=String.fromCharCode(32),Fn=!1;function Dn(e,t){switch(e){case"keyup":return-1!==In.indexOf(t.keyCode);case"keydown":return 229!==t.keyCode;case"keypress":case"mousedown":case"focusout":return!0;default:return!1}}function jn(e){return"object"==typeof(e=e.detail)&&"data"in e?e.data:null}var Un=!1,Bn={color:!0,date:!0,datetime:!0,"datetime-local":!0,email:!0,month:!0,number:!0,password:!0,range:!0,search:!0,tel:!0,text:!0,time:!0,url:!0,week:!0};function Vn(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return"input"===t?!!Bn[e.type]:"textarea"===t}function $n(e,t,n,r){Pe(r),0<(t=Wr(t,"onChange")).length&&(n=new un("onChange","change",null,n,r),e.push({event:n,listeners:t}))}var Wn=null,Hn=null;function Qn(e){Mr(e,0)}function qn(e){if(q(ga(e)))return e}function Kn(e,t){if("change"===e)return t}var Gn=!1;if(c){var Yn;if(c){var Xn="oninput"in document;if(!Xn){var Jn=document.createElement("div");Jn.setAttribute("oninput","return;"),Xn="function"==typeof Jn.oninput}Yn=Xn}else Yn=!1;Gn=Yn&&(!document.documentMode||9<document.documentMode)}function Zn(){Wn&&(Wn.detachEvent("onpropertychange",er),Hn=Wn=null)}function er(e){if("value"===e.propertyName&&qn(Hn)){var t=[];$n(t,Hn,e,ke(e)),Ie(Qn,t)}}function tr(e,t,n){"focusin"===e?(Zn(),Hn=n,(Wn=t).attachEvent("onpropertychange",er)):"focusout"===e&&Zn()}function nr(e){if("selectionchange"===e||"keyup"===e||"keydown"===e)return qn(Hn)}function rr(e,t){if("click"===e)return qn(t)}function ar(e,t){if("input"===e||"change"===e)return qn(t)}var or="function"==typeof Object.is?Object.is:function(e,t){return e===t&&(0!==e||1/e==1/t)||e!=e&&t!=t};function lr(e,t){if(or(e,t))return!0;if("object"!=typeof e||null===e||"object"!=typeof t||null===t)return!1;var n=Object.keys(e),r=Object.keys(t);if(n.length!==r.length)return!1;for(r=0;r<n.length;r++){var a=n[r];if(!f.call(t,a)||!or(e[a],t[a]))return!1}return!0}function ir(e){for(;e&&e.firstChild;)e=e.firstChild;return e}function ur(e,t){var n,r=ir(e);for(e=0;r;){if(3===r.nodeType){if(n=e+r.textContent.length,e<=t&&n>=t)return{node:r,offset:t-e};e=n}e:{for(;r;){if(r.nextSibling){r=r.nextSibling;break e}r=r.parentNode}r=void 0}r=ir(r)}}function sr(e,t){return!(!e||!t)&&(e===t||(!e||3!==e.nodeType)&&(t&&3===t.nodeType?sr(e,t.parentNode):"contains"in e?e.contains(t):!!e.compareDocumentPosition&&!!(16&e.compareDocumentPosition(t))))}function cr(){for(var e=window,t=K();t instanceof e.HTMLIFrameElement;){try{var n="string"==typeof t.contentWindow.location.href}catch(e){n=!1}if(!n)break;t=K((e=t.contentWindow).document)}return t}function fr(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return t&&("input"===t&&("text"===e.type||"search"===e.type||"tel"===e.type||"url"===e.type||"password"===e.type)||"textarea"===t||"true"===e.contentEditable)}function dr(e){var t=cr(),n=e.focusedElem,r=e.selectionRange;if(t!==n&&n&&n.ownerDocument&&sr(n.ownerDocument.documentElement,n)){if(null!==r&&fr(n))if(t=r.start,void 0===(e=r.end)&&(e=t),"selectionStart"in n)n.selectionStart=t,n.selectionEnd=Math.min(e,n.value.length);else if((e=(t=n.ownerDocument||document)&&t.defaultView||window).getSelection){e=e.getSelection();var a=n.textContent.length,o=Math.min(r.start,a);r=void 0===r.end?o:Math.min(r.end,a),!e.extend&&o>r&&(a=r,r=o,o=a),a=ur(n,o);var l=ur(n,r);a&&l&&(1!==e.rangeCount||e.anchorNode!==a.node||e.anchorOffset!==a.offset||e.focusNode!==l.node||e.focusOffset!==l.offset)&&((t=t.createRange()).setStart(a.node,a.offset),e.removeAllRanges(),o>r?(e.addRange(t),e.extend(l.node,l.offset)):(t.setEnd(l.node,l.offset),e.addRange(t)))}for(t=[],e=n;e=e.parentNode;)1===e.nodeType&&t.push({element:e,left:e.scrollLeft,top:e.scrollTop});for("function"==typeof n.focus&&n.focus(),n=0;n<t.length;n++)(e=t[n]).element.scrollLeft=e.left,e.element.scrollTop=e.top}}var pr=c&&"documentMode"in document&&11>=document.documentMode,hr=null,mr=null,vr=null,gr=!1;function yr(e,t,n){var r=n.window===n?n.document:9===n.nodeType?n:n.ownerDocument;gr||null==hr||hr!==K(r)||(r="selectionStart"in(r=hr)&&fr(r)?{start:r.selectionStart,end:r.selectionEnd}:{anchorNode:(r=(r.ownerDocument&&r.ownerDocument.defaultView||window).getSelection()).anchorNode,anchorOffset:r.anchorOffset,focusNode:r.focusNode,focusOffset:r.focusOffset},vr&&lr(vr,r)||(vr=r,0<(r=Wr(mr,"onSelect")).length&&(t=new un("onSelect","select",null,t,n),e.push({event:t,listeners:r}),t.target=hr)))}function br(e,t){var n={};return n[e.toLowerCase()]=t.toLowerCase(),n["Webkit"+e]="webkit"+t,n["Moz"+e]="moz"+t,n}var wr={animationend:br("Animation","AnimationEnd"),animationiteration:br("Animation","AnimationIteration"),animationstart:br("Animation","AnimationStart"),transitionend:br("Transition","TransitionEnd")},kr={},Sr={};function Er(e){if(kr[e])return kr[e];if(!wr[e])return e;var t,n=wr[e];for(t in n)if(n.hasOwnProperty(t)&&t in Sr)return kr[e]=n[t];return e}c&&(Sr=document.createElement("div").style,"AnimationEvent"in window||(delete wr.animationend.animation,delete wr.animationiteration.animation,delete wr.animationstart.animation),"TransitionEvent"in window||delete wr.transitionend.transition);var xr=Er("animationend"),Cr=Er("animationiteration"),Pr=Er("animationstart"),_r=Er("transitionend"),Nr=new Map,Lr="abort auxClick cancel canPlay canPlayThrough click close contextMenu copy cut drag dragEnd dragEnter dragExit dragLeave dragOver dragStart drop durationChange emptied encrypted ended error gotPointerCapture input invalid keyDown keyPress keyUp load loadedData loadedMetadata loadStart lostPointerCapture mouseDown mouseMove mouseOut mouseOver mouseUp paste pause play playing pointerCancel pointerDown pointerMove pointerOut pointerOver pointerUp progress rateChange reset resize seeked seeking stalled submit suspend timeUpdate touchCancel touchEnd touchStart volumeChange scroll toggle touchMove waiting wheel".split(" ");function Tr(e,t){Nr.set(e,t),u(t,[e])}for(var Ir=0;Ir<Lr.length;Ir++){var zr=Lr[Ir];Tr(zr.toLowerCase(),"on"+(zr[0].toUpperCase()+zr.slice(1)))}Tr(xr,"onAnimationEnd"),Tr(Cr,"onAnimationIteration"),Tr(Pr,"onAnimationStart"),Tr("dblclick","onDoubleClick"),Tr("focusin","onFocus"),Tr("focusout","onBlur"),Tr(_r,"onTransitionEnd"),s("onMouseEnter",["mouseout","mouseover"]),s("onMouseLeave",["mouseout","mouseover"]),s("onPointerEnter",["pointerout","pointerover"]),s("onPointerLeave",["pointerout","pointerover"]),u("onChange","change click focusin focusout input keydown keyup selectionchange".split(" ")),u("onSelect","focusout contextmenu dragend focusin keydown keyup mousedown mouseup selectionchange".split(" ")),u("onBeforeInput",["compositionend","keypress","textInput","paste"]),u("onCompositionEnd","compositionend focusout keydown keypress keyup mousedown".split(" ")),u("onCompositionStart","compositionstart focusout keydown keypress keyup mousedown".split(" ")),u("onCompositionUpdate","compositionupdate focusout keydown keypress keyup mousedown".split(" "));var Rr="abort canplay canplaythrough durationchange emptied encrypted ended error loadeddata loadedmetadata loadstart pause play playing progress ratechange resize seeked seeking stalled suspend timeupdate volumechange waiting".split(" "),Or=new Set("cancel close invalid load scroll toggle".split(" ").concat(Rr));function Ar(e,t,n){var r=e.type||"unknown-event";e.currentTarget=n,function(e,t,n,r,a,l,i,u,s){if(Be.apply(this,arguments),Me){if(!Me)throw Error(o(198));var c=Fe;Me=!1,Fe=null,De||(De=!0,je=c)}}(r,t,void 0,e),e.currentTarget=null}function Mr(e,t){t=0!=(4&t);for(var n=0;n<e.length;n++){var r=e[n],a=r.event;r=r.listeners;e:{var o=void 0;if(t)for(var l=r.length-1;0<=l;l--){var i=r[l],u=i.instance,s=i.currentTarget;if(i=i.listener,u!==o&&a.isPropagationStopped())break e;Ar(a,i,s),o=u}else for(l=0;l<r.length;l++){if(u=(i=r[l]).instance,s=i.currentTarget,i=i.listener,u!==o&&a.isPropagationStopped())break e;Ar(a,i,s),o=u}}}if(De)throw e=je,De=!1,je=null,e}function Fr(e,t){var n=t[da];void 0===n&&(n=t[da]=new Set);var r=e+"__bubble";n.has(r)||(Br(t,e,2,!1),n.add(r))}function Dr(e,t,n){var r=0;t&&(r|=4),Br(n,e,r,t)}var jr="_reactListening"+Math.random().toString(36).slice(2);function Ur(e){if(!e[jr]){e[jr]=!0,l.forEach((function(t){"selectionchange"!==t&&(Or.has(t)||Dr(t,!1,e),Dr(t,!0,e))}));var t=9===e.nodeType?e:e.ownerDocument;null===t||t[jr]||(t[jr]=!0,Dr("selectionchange",!1,t))}}function Br(e,t,n,r){switch(Kt(t)){case 1:var a=$t;break;case 4:a=Wt;break;default:a=Ht}n=a.bind(null,t,n,e),a=void 0,!Re||"touchstart"!==t&&"touchmove"!==t&&"wheel"!==t||(a=!0),r?void 0!==a?e.addEventListener(t,n,{capture:!0,passive:a}):e.addEventListener(t,n,!0):void 0!==a?e.addEventListener(t,n,{passive:a}):e.addEventListener(t,n,!1)}function Vr(e,t,n,r,a){var o=r;if(0==(1&t)&&0==(2&t)&&null!==r)e:for(;;){if(null===r)return;var l=r.tag;if(3===l||4===l){var i=r.stateNode.containerInfo;if(i===a||8===i.nodeType&&i.parentNode===a)break;if(4===l)for(l=r.return;null!==l;){var u=l.tag;if((3===u||4===u)&&((u=l.stateNode.containerInfo)===a||8===u.nodeType&&u.parentNode===a))return;l=l.return}for(;null!==i;){if(null===(l=ma(i)))return;if(5===(u=l.tag)||6===u){r=o=l;continue e}i=i.parentNode}}r=r.return}Ie((function(){var r=o,a=ke(n),l=[];e:{var i=Nr.get(e);if(void 0!==i){var u=un,s=e;switch(e){case"keypress":if(0===Zt(n))break e;case"keydown":case"keyup":u=Cn;break;case"focusin":s="focus",u=hn;break;case"focusout":s="blur",u=hn;break;case"beforeblur":case"afterblur":u=hn;break;case"click":if(2===n.button)break e;case"auxclick":case"dblclick":case"mousedown":case"mousemove":case"mouseup":case"mouseout":case"mouseover":case"contextmenu":u=dn;break;case"drag":case"dragend":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"dragstart":case"drop":u=pn;break;case"touchcancel":case"touchend":case"touchmove":case"touchstart":u=_n;break;case xr:case Cr:case Pr:u=mn;break;case _r:u=Nn;break;case"scroll":u=cn;break;case"wheel":u=Tn;break;case"copy":case"cut":case"paste":u=gn;break;case"gotpointercapture":case"lostpointercapture":case"pointercancel":case"pointerdown":case"pointermove":case"pointerout":case"pointerover":case"pointerup":u=Pn}var c=0!=(4&t),f=!c&&"scroll"===e,d=c?null!==i?i+"Capture":null:i;c=[];for(var p,h=r;null!==h;){var m=(p=h).stateNode;if(5===p.tag&&null!==m&&(p=m,null!==d&&null!=(m=ze(h,d))&&c.push($r(h,m,p))),f)break;h=h.return}0<c.length&&(i=new u(i,s,null,n,a),l.push({event:i,listeners:c}))}}if(0==(7&t)){if(u="mouseout"===e||"pointerout"===e,(!(i="mouseover"===e||"pointerover"===e)||n===we||!(s=n.relatedTarget||n.fromElement)||!ma(s)&&!s[fa])&&(u||i)&&(i=a.window===a?a:(i=a.ownerDocument)?i.defaultView||i.parentWindow:window,u?(u=r,null!==(s=(s=n.relatedTarget||n.toElement)?ma(s):null)&&(s!==(f=Ve(s))||5!==s.tag&&6!==s.tag)&&(s=null)):(u=null,s=r),u!==s)){if(c=dn,m="onMouseLeave",d="onMouseEnter",h="mouse","pointerout"!==e&&"pointerover"!==e||(c=Pn,m="onPointerLeave",d="onPointerEnter",h="pointer"),f=null==u?i:ga(u),p=null==s?i:ga(s),(i=new c(m,h+"leave",u,n,a)).target=f,i.relatedTarget=p,m=null,ma(a)===r&&((c=new c(d,h+"enter",s,n,a)).target=p,c.relatedTarget=f,m=c),f=m,u&&s)e:{for(d=s,h=0,p=c=u;p;p=Hr(p))h++;for(p=0,m=d;m;m=Hr(m))p++;for(;0<h-p;)c=Hr(c),h--;for(;0<p-h;)d=Hr(d),p--;for(;h--;){if(c===d||null!==d&&c===d.alternate)break e;c=Hr(c),d=Hr(d)}c=null}else c=null;null!==u&&Qr(l,i,u,c,!1),null!==s&&null!==f&&Qr(l,f,s,c,!0)}if("select"===(u=(i=r?ga(r):window).nodeName&&i.nodeName.toLowerCase())||"input"===u&&"file"===i.type)var v=Kn;else if(Vn(i))if(Gn)v=ar;else{v=nr;var g=tr}else(u=i.nodeName)&&"input"===u.toLowerCase()&&("checkbox"===i.type||"radio"===i.type)&&(v=rr);switch(v&&(v=v(e,r))?$n(l,v,n,a):(g&&g(e,i,r),"focusout"===e&&(g=i._wrapperState)&&g.controlled&&"number"===i.type&&ee(i,"number",i.value)),g=r?ga(r):window,e){case"focusin":(Vn(g)||"true"===g.contentEditable)&&(hr=g,mr=r,vr=null);break;case"focusout":vr=mr=hr=null;break;case"mousedown":gr=!0;break;case"contextmenu":case"mouseup":case"dragend":gr=!1,yr(l,n,a);break;case"selectionchange":if(pr)break;case"keydown":case"keyup":yr(l,n,a)}var y;if(zn)e:{switch(e){case"compositionstart":var b="onCompositionStart";break e;case"compositionend":b="onCompositionEnd";break e;case"compositionupdate":b="onCompositionUpdate";break e}b=void 0}else Un?Dn(e,n)&&(b="onCompositionEnd"):"keydown"===e&&229===n.keyCode&&(b="onCompositionStart");b&&(An&&"ko"!==n.locale&&(Un||"onCompositionStart"!==b?"onCompositionEnd"===b&&Un&&(y=Jt()):(Yt="value"in(Gt=a)?Gt.value:Gt.textContent,Un=!0)),0<(g=Wr(r,b)).length&&(b=new yn(b,e,null,n,a),l.push({event:b,listeners:g}),(y||null!==(y=jn(n)))&&(b.data=y))),(y=On?function(e,t){switch(e){case"compositionend":return jn(t);case"keypress":return 32!==t.which?null:(Fn=!0,Mn);case"textInput":return(e=t.data)===Mn&&Fn?null:e;default:return null}}(e,n):function(e,t){if(Un)return"compositionend"===e||!zn&&Dn(e,t)?(e=Jt(),Xt=Yt=Gt=null,Un=!1,e):null;switch(e){case"paste":default:return null;case"keypress":if(!(t.ctrlKey||t.altKey||t.metaKey)||t.ctrlKey&&t.altKey){if(t.char&&1<t.char.length)return t.char;if(t.which)return String.fromCharCode(t.which)}return null;case"compositionend":return An&&"ko"!==t.locale?null:t.data}}(e,n))&&0<(r=Wr(r,"onBeforeInput")).length&&(a=new yn("onBeforeInput","beforeinput",null,n,a),l.push({event:a,listeners:r}),a.data=y)}Mr(l,t)}))}function $r(e,t,n){return{instance:e,listener:t,currentTarget:n}}function Wr(e,t){for(var n=t+"Capture",r=[];null!==e;){var a=e,o=a.stateNode;5===a.tag&&null!==o&&(a=o,null!=(o=ze(e,n))&&r.unshift($r(e,o,a)),null!=(o=ze(e,t))&&r.push($r(e,o,a))),e=e.return}return r}function Hr(e){if(null===e)return null;do{e=e.return}while(e&&5!==e.tag);return e||null}function Qr(e,t,n,r,a){for(var o=t._reactName,l=[];null!==n&&n!==r;){var i=n,u=i.alternate,s=i.stateNode;if(null!==u&&u===r)break;5===i.tag&&null!==s&&(i=s,a?null!=(u=ze(n,o))&&l.unshift($r(n,u,i)):a||null!=(u=ze(n,o))&&l.push($r(n,u,i))),n=n.return}0!==l.length&&e.push({event:t,listeners:l})}var qr=/\r\n?/g,Kr=/\u0000|\uFFFD/g;function Gr(e){return("string"==typeof e?e:""+e).replace(qr,"\n").replace(Kr,"")}function Yr(e,t,n){if(t=Gr(t),Gr(e)!==t&&n)throw Error(o(425))}function Xr(){}var Jr=null;function Zr(e,t){return"textarea"===e||"noscript"===e||"string"==typeof t.children||"number"==typeof t.children||"object"==typeof t.dangerouslySetInnerHTML&&null!==t.dangerouslySetInnerHTML&&null!=t.dangerouslySetInnerHTML.__html}var ea="function"==typeof setTimeout?setTimeout:void 0,ta="function"==typeof clearTimeout?clearTimeout:void 0,na="function"==typeof Promise?Promise:void 0,ra="function"==typeof queueMicrotask?queueMicrotask:void 0!==na?function(e){return na.resolve(null).then(e).catch(aa)}:ea;function aa(e){setTimeout((function(){throw e}))}function oa(e,t){var n=t,r=0;do{var a=n.nextSibling;if(e.removeChild(n),a&&8===a.nodeType)if("/$"===(n=a.data)){if(0===r)return e.removeChild(a),void Bt(t);r--}else"$"!==n&&"$?"!==n&&"$!"!==n||r++;n=a}while(n);Bt(t)}function la(e){for(;null!=e;e=e.nextSibling){var t=e.nodeType;if(1===t||3===t)break;if(8===t){if("$"===(t=e.data)||"$!"===t||"$?"===t)break;if("/$"===t)return null}}return e}function ia(e){e=e.previousSibling;for(var t=0;e;){if(8===e.nodeType){var n=e.data;if("$"===n||"$!"===n||"$?"===n){if(0===t)return e;t--}else"/$"===n&&t++}e=e.previousSibling}return null}var ua=Math.random().toString(36).slice(2),sa="__reactFiber$"+ua,ca="__reactProps$"+ua,fa="__reactContainer$"+ua,da="__reactEvents$"+ua,pa="__reactListeners$"+ua,ha="__reactHandles$"+ua;function ma(e){var t=e[sa];if(t)return t;for(var n=e.parentNode;n;){if(t=n[fa]||n[sa]){if(n=t.alternate,null!==t.child||null!==n&&null!==n.child)for(e=ia(e);null!==e;){if(n=e[sa])return n;e=ia(e)}return t}n=(e=n).parentNode}return null}function va(e){return!(e=e[sa]||e[fa])||5!==e.tag&&6!==e.tag&&13!==e.tag&&3!==e.tag?null:e}function ga(e){if(5===e.tag||6===e.tag)return e.stateNode;throw Error(o(33))}function ya(e){return e[ca]||null}var ba=[],wa=-1;function ka(e){return{current:e}}function Sa(e){0>wa||(e.current=ba[wa],ba[wa]=null,wa--)}function Ea(e,t){wa++,ba[wa]=e.current,e.current=t}var xa={},Ca=ka(xa),Pa=ka(!1),_a=xa;function Na(e,t){var n=e.type.contextTypes;if(!n)return xa;var r=e.stateNode;if(r&&r.__reactInternalMemoizedUnmaskedChildContext===t)return r.__reactInternalMemoizedMaskedChildContext;var a,o={};for(a in n)o[a]=t[a];return r&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=t,e.__reactInternalMemoizedMaskedChildContext=o),o}function La(e){return null!=e.childContextTypes}function Ta(){Sa(Pa),Sa(Ca)}function Ia(e,t,n){if(Ca.current!==xa)throw Error(o(168));Ea(Ca,t),Ea(Pa,n)}function za(e,t,n){var r=e.stateNode;if(t=t.childContextTypes,"function"!=typeof r.getChildContext)return n;for(var a in r=r.getChildContext())if(!(a in t))throw Error(o(108,$(e)||"Unknown",a));return F({},n,r)}function Ra(e){return e=(e=e.stateNode)&&e.__reactInternalMemoizedMergedChildContext||xa,_a=Ca.current,Ea(Ca,e),Ea(Pa,Pa.current),!0}function Oa(e,t,n){var r=e.stateNode;if(!r)throw Error(o(169));n?(e=za(e,t,_a),r.__reactInternalMemoizedMergedChildContext=e,Sa(Pa),Sa(Ca),Ea(Ca,e)):Sa(Pa),Ea(Pa,n)}var Aa=null,Ma=!1,Fa=!1;function Da(e){null===Aa?Aa=[e]:Aa.push(e)}function ja(){if(!Fa&&null!==Aa){Fa=!0;var e=0,t=yt;try{var n=Aa;for(yt=1;e<n.length;e++){var r=n[e];do{r=r(!0)}while(null!==r)}Aa=null,Ma=!1}catch(t){throw null!==Aa&&(Aa=Aa.slice(e+1)),qe(Ze,ja),t}finally{yt=t,Fa=!1}}return null}var Ua=w.ReactCurrentBatchConfig;function Ba(e,t){if(e&&e.defaultProps){for(var n in t=F({},t),e=e.defaultProps)void 0===t[n]&&(t[n]=e[n]);return t}return t}var Va=ka(null),$a=null,Wa=null,Ha=null;function Qa(){Ha=Wa=$a=null}function qa(e){var t=Va.current;Sa(Va),e._currentValue=t}function Ka(e,t,n){for(;null!==e;){var r=e.alternate;if((e.childLanes&t)!==t?(e.childLanes|=t,null!==r&&(r.childLanes|=t)):null!==r&&(r.childLanes&t)!==t&&(r.childLanes|=t),e===n)break;e=e.return}}function Ga(e,t){$a=e,Ha=Wa=null,null!==(e=e.dependencies)&&null!==e.firstContext&&(0!=(e.lanes&t)&&(gi=!0),e.firstContext=null)}function Ya(e){var t=e._currentValue;if(Ha!==e)if(e={context:e,memoizedValue:t,next:null},null===Wa){if(null===$a)throw Error(o(308));Wa=e,$a.dependencies={lanes:0,firstContext:e}}else Wa=Wa.next=e;return t}var Xa=null,Ja=!1;function Za(e){e.updateQueue={baseState:e.memoizedState,firstBaseUpdate:null,lastBaseUpdate:null,shared:{pending:null,interleaved:null,lanes:0},effects:null}}function eo(e,t){e=e.updateQueue,t.updateQueue===e&&(t.updateQueue={baseState:e.baseState,firstBaseUpdate:e.firstBaseUpdate,lastBaseUpdate:e.lastBaseUpdate,shared:e.shared,effects:e.effects})}function to(e,t){return{eventTime:e,lane:t,tag:0,payload:null,callback:null,next:null}}function no(e,t){var n=e.updateQueue;null!==n&&(n=n.shared,null!==gu&&0!=(1&e.mode)&&0==(2&vu)?(null===(e=n.interleaved)?(t.next=t,null===Xa?Xa=[n]:Xa.push(n)):(t.next=e.next,e.next=t),n.interleaved=t):(null===(e=n.pending)?t.next=t:(t.next=e.next,e.next=t),n.pending=t))}function ro(e,t,n){if(null!==(t=t.updateQueue)&&(t=t.shared,0!=(4194240&n))){var r=t.lanes;n|=r&=e.pendingLanes,t.lanes=n,gt(e,n)}}function ao(e,t){var n=e.updateQueue,r=e.alternate;if(null!==r&&n===(r=r.updateQueue)){var a=null,o=null;if(null!==(n=n.firstBaseUpdate)){do{var l={eventTime:n.eventTime,lane:n.lane,tag:n.tag,payload:n.payload,callback:n.callback,next:null};null===o?a=o=l:o=o.next=l,n=n.next}while(null!==n);null===o?a=o=t:o=o.next=t}else a=o=t;return n={baseState:r.baseState,firstBaseUpdate:a,lastBaseUpdate:o,shared:r.shared,effects:r.effects},void(e.updateQueue=n)}null===(e=n.lastBaseUpdate)?n.firstBaseUpdate=t:e.next=t,n.lastBaseUpdate=t}function oo(e,t,n,r){var a=e.updateQueue;Ja=!1;var o=a.firstBaseUpdate,l=a.lastBaseUpdate,i=a.shared.pending;if(null!==i){a.shared.pending=null;var u=i,s=u.next;u.next=null,null===l?o=s:l.next=s,l=u;var c=e.alternate;null!==c&&(i=(c=c.updateQueue).lastBaseUpdate)!==l&&(null===i?c.firstBaseUpdate=s:i.next=s,c.lastBaseUpdate=u)}if(null!==o){var f=a.baseState;for(l=0,c=s=u=null,i=o;;){var d=i.lane,p=i.eventTime;if((r&d)===d){null!==c&&(c=c.next={eventTime:p,lane:0,tag:i.tag,payload:i.payload,callback:i.callback,next:null});e:{var h=e,m=i;switch(d=t,p=n,m.tag){case 1:if("function"==typeof(h=m.payload)){f=h.call(p,f,d);break e}f=h;break e;case 3:h.flags=-65537&h.flags|128;case 0:if(null==(d="function"==typeof(h=m.payload)?h.call(p,f,d):h))break e;f=F({},f,d);break e;case 2:Ja=!0}}null!==i.callback&&0!==i.lane&&(e.flags|=64,null===(d=a.effects)?a.effects=[i]:d.push(i))}else p={eventTime:p,lane:d,tag:i.tag,payload:i.payload,callback:i.callback,next:null},null===c?(s=c=p,u=f):c=c.next=p,l|=d;if(null===(i=i.next)){if(null===(i=a.shared.pending))break;i=(d=i).next,d.next=null,a.lastBaseUpdate=d,a.shared.pending=null}}if(null===c&&(u=f),a.baseState=u,a.firstBaseUpdate=s,a.lastBaseUpdate=c,null!==(t=a.shared.interleaved)){a=t;do{l|=a.lane,a=a.next}while(a!==t)}else null===o&&(a.shared.lanes=0);xu|=l,e.lanes=l,e.memoizedState=f}}function lo(e,t,n){if(e=t.effects,t.effects=null,null!==e)for(t=0;t<e.length;t++){var r=e[t],a=r.callback;if(null!==a){if(r.callback=null,r=n,"function"!=typeof a)throw Error(o(191,a));a.call(r)}}}var io=(new r.Component).refs;function uo(e,t,n,r){n=null==(n=n(r,t=e.memoizedState))?t:F({},t,n),e.memoizedState=n,0===e.lanes&&(e.updateQueue.baseState=n)}var so={isMounted:function(e){return!!(e=e._reactInternals)&&Ve(e)===e},enqueueSetState:function(e,t,n){e=e._reactInternals;var r=Bu(),a=Vu(e),o=to(r,a);o.payload=t,null!=n&&(o.callback=n),no(e,o),null!==(t=$u(e,a,r))&&ro(t,e,a)},enqueueReplaceState:function(e,t,n){e=e._reactInternals;var r=Bu(),a=Vu(e),o=to(r,a);o.tag=1,o.payload=t,null!=n&&(o.callback=n),no(e,o),null!==(t=$u(e,a,r))&&ro(t,e,a)},enqueueForceUpdate:function(e,t){e=e._reactInternals;var n=Bu(),r=Vu(e),a=to(n,r);a.tag=2,null!=t&&(a.callback=t),no(e,a),null!==(t=$u(e,r,n))&&ro(t,e,r)}};function co(e,t,n,r,a,o,l){return"function"==typeof(e=e.stateNode).shouldComponentUpdate?e.shouldComponentUpdate(r,o,l):!(t.prototype&&t.prototype.isPureReactComponent&&lr(n,r)&&lr(a,o))}function fo(e,t,n){var r=!1,a=xa,o=t.contextType;return"object"==typeof o&&null!==o?o=Ya(o):(a=La(t)?_a:Ca.current,o=(r=null!=(r=t.contextTypes))?Na(e,a):xa),t=new t(n,o),e.memoizedState=null!==t.state&&void 0!==t.state?t.state:null,t.updater=so,e.stateNode=t,t._reactInternals=e,r&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=a,e.__reactInternalMemoizedMaskedChildContext=o),t}function po(e,t,n,r){e=t.state,"function"==typeof t.componentWillReceiveProps&&t.componentWillReceiveProps(n,r),"function"==typeof t.UNSAFE_componentWillReceiveProps&&t.UNSAFE_componentWillReceiveProps(n,r),t.state!==e&&so.enqueueReplaceState(t,t.state,null)}function ho(e,t,n,r){var a=e.stateNode;a.props=n,a.state=e.memoizedState,a.refs=io,Za(e);var o=t.contextType;"object"==typeof o&&null!==o?a.context=Ya(o):(o=La(t)?_a:Ca.current,a.context=Na(e,o)),a.state=e.memoizedState,"function"==typeof(o=t.getDerivedStateFromProps)&&(uo(e,t,o,n),a.state=e.memoizedState),"function"==typeof t.getDerivedStateFromProps||"function"==typeof a.getSnapshotBeforeUpdate||"function"!=typeof a.UNSAFE_componentWillMount&&"function"!=typeof a.componentWillMount||(t=a.state,"function"==typeof a.componentWillMount&&a.componentWillMount(),"function"==typeof a.UNSAFE_componentWillMount&&a.UNSAFE_componentWillMount(),t!==a.state&&so.enqueueReplaceState(a,a.state,null),oo(e,n,a,r),a.state=e.memoizedState),"function"==typeof a.componentDidMount&&(e.flags|=4194308)}var mo=[],vo=0,go=null,yo=0,bo=[],wo=0,ko=null,So=1,Eo="";function xo(e,t){mo[vo++]=yo,mo[vo++]=go,go=e,yo=t}function Co(e,t,n){bo[wo++]=So,bo[wo++]=Eo,bo[wo++]=ko,ko=e;var r=So;e=Eo;var a=32-lt(r)-1;r&=~(1<<a),n+=1;var o=32-lt(t)+a;if(30<o){var l=a-a%5;o=(r&(1<<l)-1).toString(32),r>>=l,a-=l,So=1<<32-lt(t)+a|n<<a|r,Eo=o+e}else So=1<<o|n<<a|r,Eo=e}function Po(e){null!==e.return&&(xo(e,1),Co(e,1,0))}function _o(e){for(;e===go;)go=mo[--vo],mo[vo]=null,yo=mo[--vo],mo[vo]=null;for(;e===ko;)ko=bo[--wo],bo[wo]=null,Eo=bo[--wo],bo[wo]=null,So=bo[--wo],bo[wo]=null}var No=null,Lo=null,To=!1,Io=null;function zo(e,t){var n=bs(5,null,null,0);n.elementType="DELETED",n.stateNode=t,n.return=e,null===(t=e.deletions)?(e.deletions=[n],e.flags|=16):t.push(n)}function Ro(e,t){switch(e.tag){case 5:var n=e.type;return null!==(t=1!==t.nodeType||n.toLowerCase()!==t.nodeName.toLowerCase()?null:t)&&(e.stateNode=t,No=e,Lo=la(t.firstChild),!0);case 6:return null!==(t=""===e.pendingProps||3!==t.nodeType?null:t)&&(e.stateNode=t,No=e,Lo=null,!0);case 13:return null!==(t=8!==t.nodeType?null:t)&&(n=null!==ko?{id:So,overflow:Eo}:null,e.memoizedState={dehydrated:t,treeContext:n,retryLane:1073741824},(n=bs(18,null,null,0)).stateNode=t,n.return=e,e.child=n,No=e,Lo=null,!0);default:return!1}}function Oo(e){return 0!=(1&e.mode)&&0==(128&e.flags)}function Ao(e){if(To){var t=Lo;if(t){var n=t;if(!Ro(e,t)){if(Oo(e))throw Error(o(418));t=la(n.nextSibling);var r=No;t&&Ro(e,t)?zo(r,n):(e.flags=-4097&e.flags|2,To=!1,No=e)}}else{if(Oo(e))throw Error(o(418));e.flags=-4097&e.flags|2,To=!1,No=e}}}function Mo(e){for(e=e.return;null!==e&&5!==e.tag&&3!==e.tag&&13!==e.tag;)e=e.return;No=e}function Fo(e){if(e!==No)return!1;if(!To)return Mo(e),To=!0,!1;var t;if((t=3!==e.tag)&&!(t=5!==e.tag)&&(t="head"!==(t=e.type)&&"body"!==t&&!Zr(e.type,e.memoizedProps)),t&&(t=Lo)){if(Oo(e)){for(e=Lo;e;)e=la(e.nextSibling);throw Error(o(418))}for(;t;)zo(e,t),t=la(t.nextSibling)}if(Mo(e),13===e.tag){if(!(e=null!==(e=e.memoizedState)?e.dehydrated:null))throw Error(o(317));e:{for(e=e.nextSibling,t=0;e;){if(8===e.nodeType){var n=e.data;if("/$"===n){if(0===t){Lo=la(e.nextSibling);break e}t--}else"$"!==n&&"$!"!==n&&"$?"!==n||t++}e=e.nextSibling}Lo=null}}else Lo=No?la(e.stateNode.nextSibling):null;return!0}function Do(){Lo=No=null,To=!1}function jo(e){null===Io?Io=[e]:Io.push(e)}function Uo(e,t,n){if(null!==(e=n.ref)&&"function"!=typeof e&&"object"!=typeof e){if(n._owner){if(n=n._owner){if(1!==n.tag)throw Error(o(309));var r=n.stateNode}if(!r)throw Error(o(147,e));var a=r,l=""+e;return null!==t&&null!==t.ref&&"function"==typeof t.ref&&t.ref._stringRef===l?t.ref:(t=function(e){var t=a.refs;t===io&&(t=a.refs={}),null===e?delete t[l]:t[l]=e},t._stringRef=l,t)}if("string"!=typeof e)throw Error(o(284));if(!n._owner)throw Error(o(290,e))}return e}function Bo(e,t){throw e=Object.prototype.toString.call(t),Error(o(31,"[object Object]"===e?"object with keys {"+Object.keys(t).join(", ")+"}":e))}function Vo(e){return(0,e._init)(e._payload)}function $o(e){function t(t,n){if(e){var r=t.deletions;null===r?(t.deletions=[n],t.flags|=16):r.push(n)}}function n(n,r){if(!e)return null;for(;null!==r;)t(n,r),r=r.sibling;return null}function r(e,t){for(e=new Map;null!==t;)null!==t.key?e.set(t.key,t):e.set(t.index,t),t=t.sibling;return e}function a(e,t){return(e=ks(e,t)).index=0,e.sibling=null,e}function l(t,n,r){return t.index=r,e?null!==(r=t.alternate)?(r=r.index)<n?(t.flags|=2,n):r:(t.flags|=2,n):(t.flags|=1048576,n)}function i(t){return e&&null===t.alternate&&(t.flags|=2),t}function u(e,t,n,r){return null===t||6!==t.tag?((t=Cs(n,e.mode,r)).return=e,t):((t=a(t,n)).return=e,t)}function s(e,t,n,r){var o=n.type;return o===E?f(e,t,n.props.children,r,n.key):null!==t&&(t.elementType===o||"object"==typeof o&&null!==o&&o.$$typeof===z&&Vo(o)===t.type)?((r=a(t,n.props)).ref=Uo(e,t,n),r.return=e,r):((r=Ss(n.type,n.key,n.props,null,e.mode,r)).ref=Uo(e,t,n),r.return=e,r)}function c(e,t,n,r){return null===t||4!==t.tag||t.stateNode.containerInfo!==n.containerInfo||t.stateNode.implementation!==n.implementation?((t=Ps(n,e.mode,r)).return=e,t):((t=a(t,n.children||[])).return=e,t)}function f(e,t,n,r,o){return null===t||7!==t.tag?((t=Es(n,e.mode,r,o)).return=e,t):((t=a(t,n)).return=e,t)}function d(e,t,n){if("string"==typeof t&&""!==t||"number"==typeof t)return(t=Cs(""+t,e.mode,n)).return=e,t;if("object"==typeof t&&null!==t){switch(t.$$typeof){case k:return(n=Ss(t.type,t.key,t.props,null,e.mode,n)).ref=Uo(e,null,t),n.return=e,n;case S:return(t=Ps(t,e.mode,n)).return=e,t;case z:return d(e,(0,t._init)(t._payload),n)}if(te(t)||A(t))return(t=Es(t,e.mode,n,null)).return=e,t;Bo(e,t)}return null}function p(e,t,n,r){var a=null!==t?t.key:null;if("string"==typeof n&&""!==n||"number"==typeof n)return null!==a?null:u(e,t,""+n,r);if("object"==typeof n&&null!==n){switch(n.$$typeof){case k:return n.key===a?s(e,t,n,r):null;case S:return n.key===a?c(e,t,n,r):null;case z:return p(e,t,(a=n._init)(n._payload),r)}if(te(n)||A(n))return null!==a?null:f(e,t,n,r,null);Bo(e,n)}return null}function h(e,t,n,r,a){if("string"==typeof r&&""!==r||"number"==typeof r)return u(t,e=e.get(n)||null,""+r,a);if("object"==typeof r&&null!==r){switch(r.$$typeof){case k:return s(t,e=e.get(null===r.key?n:r.key)||null,r,a);case S:return c(t,e=e.get(null===r.key?n:r.key)||null,r,a);case z:return h(e,t,n,(0,r._init)(r._payload),a)}if(te(r)||A(r))return f(t,e=e.get(n)||null,r,a,null);Bo(t,r)}return null}function m(a,o,i,u){for(var s=null,c=null,f=o,m=o=0,v=null;null!==f&&m<i.length;m++){f.index>m?(v=f,f=null):v=f.sibling;var g=p(a,f,i[m],u);if(null===g){null===f&&(f=v);break}e&&f&&null===g.alternate&&t(a,f),o=l(g,o,m),null===c?s=g:c.sibling=g,c=g,f=v}if(m===i.length)return n(a,f),To&&xo(a,m),s;if(null===f){for(;m<i.length;m++)null!==(f=d(a,i[m],u))&&(o=l(f,o,m),null===c?s=f:c.sibling=f,c=f);return To&&xo(a,m),s}for(f=r(a,f);m<i.length;m++)null!==(v=h(f,a,m,i[m],u))&&(e&&null!==v.alternate&&f.delete(null===v.key?m:v.key),o=l(v,o,m),null===c?s=v:c.sibling=v,c=v);return e&&f.forEach((function(e){return t(a,e)})),To&&xo(a,m),s}function v(a,i,u,s){var c=A(u);if("function"!=typeof c)throw Error(o(150));if(null==(u=c.call(u)))throw Error(o(151));for(var f=c=null,m=i,v=i=0,g=null,y=u.next();null!==m&&!y.done;v++,y=u.next()){m.index>v?(g=m,m=null):g=m.sibling;var b=p(a,m,y.value,s);if(null===b){null===m&&(m=g);break}e&&m&&null===b.alternate&&t(a,m),i=l(b,i,v),null===f?c=b:f.sibling=b,f=b,m=g}if(y.done)return n(a,m),To&&xo(a,v),c;if(null===m){for(;!y.done;v++,y=u.next())null!==(y=d(a,y.value,s))&&(i=l(y,i,v),null===f?c=y:f.sibling=y,f=y);return To&&xo(a,v),c}for(m=r(a,m);!y.done;v++,y=u.next())null!==(y=h(m,a,v,y.value,s))&&(e&&null!==y.alternate&&m.delete(null===y.key?v:y.key),i=l(y,i,v),null===f?c=y:f.sibling=y,f=y);return e&&m.forEach((function(e){return t(a,e)})),To&&xo(a,v),c}return function e(r,o,l,u){if("object"==typeof l&&null!==l&&l.type===E&&null===l.key&&(l=l.props.children),"object"==typeof l&&null!==l){switch(l.$$typeof){case k:e:{for(var s=l.key,c=o;null!==c;){if(c.key===s){if((s=l.type)===E){if(7===c.tag){n(r,c.sibling),(o=a(c,l.props.children)).return=r,r=o;break e}}else if(c.elementType===s||"object"==typeof s&&null!==s&&s.$$typeof===z&&Vo(s)===c.type){n(r,c.sibling),(o=a(c,l.props)).ref=Uo(r,c,l),o.return=r,r=o;break e}n(r,c);break}t(r,c),c=c.sibling}l.type===E?((o=Es(l.props.children,r.mode,u,l.key)).return=r,r=o):((u=Ss(l.type,l.key,l.props,null,r.mode,u)).ref=Uo(r,o,l),u.return=r,r=u)}return i(r);case S:e:{for(c=l.key;null!==o;){if(o.key===c){if(4===o.tag&&o.stateNode.containerInfo===l.containerInfo&&o.stateNode.implementation===l.implementation){n(r,o.sibling),(o=a(o,l.children||[])).return=r,r=o;break e}n(r,o);break}t(r,o),o=o.sibling}(o=Ps(l,r.mode,u)).return=r,r=o}return i(r);case z:return e(r,o,(c=l._init)(l._payload),u)}if(te(l))return m(r,o,l,u);if(A(l))return v(r,o,l,u);Bo(r,l)}return"string"==typeof l&&""!==l||"number"==typeof l?(l=""+l,null!==o&&6===o.tag?(n(r,o.sibling),(o=a(o,l)).return=r,r=o):(n(r,o),(o=Cs(l,r.mode,u)).return=r,r=o),i(r)):n(r,o)}}var Wo=$o(!0),Ho=$o(!1),Qo={},qo=ka(Qo),Ko=ka(Qo),Go=ka(Qo);function Yo(e){if(e===Qo)throw Error(o(174));return e}function Xo(e,t){switch(Ea(Go,t),Ea(Ko,e),Ea(qo,Qo),e=t.nodeType){case 9:case 11:t=(t=t.documentElement)?t.namespaceURI:ue(null,"");break;default:t=ue(t=(e=8===e?t.parentNode:t).namespaceURI||null,e=e.tagName)}Sa(qo),Ea(qo,t)}function Jo(){Sa(qo),Sa(Ko),Sa(Go)}function Zo(e){Yo(Go.current);var t=Yo(qo.current),n=ue(t,e.type);t!==n&&(Ea(Ko,e),Ea(qo,n))}function el(e){Ko.current===e&&(Sa(qo),Sa(Ko))}var tl=ka(0);function nl(e){for(var t=e;null!==t;){if(13===t.tag){var n=t.memoizedState;if(null!==n&&(null===(n=n.dehydrated)||"$?"===n.data||"$!"===n.data))return t}else if(19===t.tag&&void 0!==t.memoizedProps.revealOrder){if(0!=(128&t.flags))return t}else if(null!==t.child){t.child.return=t,t=t.child;continue}if(t===e)break;for(;null===t.sibling;){if(null===t.return||t.return===e)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}return null}var rl=[];function al(){for(var e=0;e<rl.length;e++)rl[e]._workInProgressVersionPrimary=null;rl.length=0}var ol=w.ReactCurrentDispatcher,ll=w.ReactCurrentBatchConfig,il=0,ul=null,sl=null,cl=null,fl=!1,dl=!1,pl=0,hl=0;function ml(){throw Error(o(321))}function vl(e,t){if(null===t)return!1;for(var n=0;n<t.length&&n<e.length;n++)if(!or(e[n],t[n]))return!1;return!0}function gl(e,t,n,r,a,l){if(il=l,ul=t,t.memoizedState=null,t.updateQueue=null,t.lanes=0,ol.current=null===e||null===e.memoizedState?Zl:ei,e=n(r,a),dl){l=0;do{if(dl=!1,pl=0,25<=l)throw Error(o(301));l+=1,cl=sl=null,t.updateQueue=null,ol.current=ti,e=n(r,a)}while(dl)}if(ol.current=Jl,t=null!==sl&&null!==sl.next,il=0,cl=sl=ul=null,fl=!1,t)throw Error(o(300));return e}function yl(){var e=0!==pl;return pl=0,e}function bl(){var e={memoizedState:null,baseState:null,baseQueue:null,queue:null,next:null};return null===cl?ul.memoizedState=cl=e:cl=cl.next=e,cl}function wl(){if(null===sl){var e=ul.alternate;e=null!==e?e.memoizedState:null}else e=sl.next;var t=null===cl?ul.memoizedState:cl.next;if(null!==t)cl=t,sl=e;else{if(null===e)throw Error(o(310));e={memoizedState:(sl=e).memoizedState,baseState:sl.baseState,baseQueue:sl.baseQueue,queue:sl.queue,next:null},null===cl?ul.memoizedState=cl=e:cl=cl.next=e}return cl}function kl(e,t){return"function"==typeof t?t(e):t}function Sl(e){var t=wl(),n=t.queue;if(null===n)throw Error(o(311));n.lastRenderedReducer=e;var r=sl,a=r.baseQueue,l=n.pending;if(null!==l){if(null!==a){var i=a.next;a.next=l.next,l.next=i}r.baseQueue=a=l,n.pending=null}if(null!==a){l=a.next,r=r.baseState;var u=i=null,s=null,c=l;do{var f=c.lane;if((il&f)===f)null!==s&&(s=s.next={lane:0,action:c.action,hasEagerState:c.hasEagerState,eagerState:c.eagerState,next:null}),r=c.hasEagerState?c.eagerState:e(r,c.action);else{var d={lane:f,action:c.action,hasEagerState:c.hasEagerState,eagerState:c.eagerState,next:null};null===s?(u=s=d,i=r):s=s.next=d,ul.lanes|=f,xu|=f}c=c.next}while(null!==c&&c!==l);null===s?i=r:s.next=u,or(r,t.memoizedState)||(gi=!0),t.memoizedState=r,t.baseState=i,t.baseQueue=s,n.lastRenderedState=r}if(null!==(e=n.interleaved)){a=e;do{l=a.lane,ul.lanes|=l,xu|=l,a=a.next}while(a!==e)}else null===a&&(n.lanes=0);return[t.memoizedState,n.dispatch]}function El(e){var t=wl(),n=t.queue;if(null===n)throw Error(o(311));n.lastRenderedReducer=e;var r=n.dispatch,a=n.pending,l=t.memoizedState;if(null!==a){n.pending=null;var i=a=a.next;do{l=e(l,i.action),i=i.next}while(i!==a);or(l,t.memoizedState)||(gi=!0),t.memoizedState=l,null===t.baseQueue&&(t.baseState=l),n.lastRenderedState=l}return[l,r]}function xl(){}function Cl(e,t){var n=ul,r=wl(),a=t(),l=!or(r.memoizedState,a);if(l&&(r.memoizedState=a,gi=!0),r=r.queue,Ml(Nl.bind(null,n,r,e),[e]),r.getSnapshot!==t||l||null!==cl&&1&cl.memoizedState.tag){if(n.flags|=2048,Il(9,_l.bind(null,n,r,a,t),void 0,null),null===gu)throw Error(o(349));0!=(30&il)||Pl(n,t,a)}return a}function Pl(e,t,n){e.flags|=16384,e={getSnapshot:t,value:n},null===(t=ul.updateQueue)?(t={lastEffect:null,stores:null},ul.updateQueue=t,t.stores=[e]):null===(n=t.stores)?t.stores=[e]:n.push(e)}function _l(e,t,n,r){t.value=n,t.getSnapshot=r,Ll(t)&&$u(e,1,-1)}function Nl(e,t,n){return n((function(){Ll(t)&&$u(e,1,-1)}))}function Ll(e){var t=e.getSnapshot;e=e.value;try{var n=t();return!or(e,n)}catch(e){return!0}}function Tl(e){var t=bl();return"function"==typeof e&&(e=e()),t.memoizedState=t.baseState=e,e={pending:null,interleaved:null,lanes:0,dispatch:null,lastRenderedReducer:kl,lastRenderedState:e},t.queue=e,e=e.dispatch=ql.bind(null,ul,e),[t.memoizedState,e]}function Il(e,t,n,r){return e={tag:e,create:t,destroy:n,deps:r,next:null},null===(t=ul.updateQueue)?(t={lastEffect:null,stores:null},ul.updateQueue=t,t.lastEffect=e.next=e):null===(n=t.lastEffect)?t.lastEffect=e.next=e:(r=n.next,n.next=e,e.next=r,t.lastEffect=e),e}function zl(){return wl().memoizedState}function Rl(e,t,n,r){var a=bl();ul.flags|=e,a.memoizedState=Il(1|t,n,void 0,void 0===r?null:r)}function Ol(e,t,n,r){var a=wl();r=void 0===r?null:r;var o=void 0;if(null!==sl){var l=sl.memoizedState;if(o=l.destroy,null!==r&&vl(r,l.deps))return void(a.memoizedState=Il(t,n,o,r))}ul.flags|=e,a.memoizedState=Il(1|t,n,o,r)}function Al(e,t){return Rl(8390656,8,e,t)}function Ml(e,t){return Ol(2048,8,e,t)}function Fl(e,t){return Ol(4,2,e,t)}function Dl(e,t){return Ol(4,4,e,t)}function jl(e,t){return"function"==typeof t?(e=e(),t(e),function(){t(null)}):null!=t?(e=e(),t.current=e,function(){t.current=null}):void 0}function Ul(e,t,n){return n=null!=n?n.concat([e]):null,Ol(4,4,jl.bind(null,t,e),n)}function Bl(){}function Vl(e,t){var n=wl();t=void 0===t?null:t;var r=n.memoizedState;return null!==r&&null!==t&&vl(t,r[1])?r[0]:(n.memoizedState=[e,t],e)}function $l(e,t){var n=wl();t=void 0===t?null:t;var r=n.memoizedState;return null!==r&&null!==t&&vl(t,r[1])?r[0]:(e=e(),n.memoizedState=[e,t],e)}function Wl(e,t){var n=yt;yt=0!==n&&4>n?n:4,e(!0);var r=ll.transition;ll.transition={};try{e(!1),t()}finally{yt=n,ll.transition=r}}function Hl(){return wl().memoizedState}function Ql(e,t,n){var r=Vu(e);n={lane:r,action:n,hasEagerState:!1,eagerState:null,next:null},Kl(e)?Gl(t,n):(Yl(e,t,n),null!==(e=$u(e,r,n=Bu()))&&Xl(e,t,r))}function ql(e,t,n){var r=Vu(e),a={lane:r,action:n,hasEagerState:!1,eagerState:null,next:null};if(Kl(e))Gl(t,a);else{Yl(e,t,a);var o=e.alternate;if(0===e.lanes&&(null===o||0===o.lanes)&&null!==(o=t.lastRenderedReducer))try{var l=t.lastRenderedState,i=o(l,n);if(a.hasEagerState=!0,a.eagerState=i,or(i,l))return}catch(e){}null!==(e=$u(e,r,n=Bu()))&&Xl(e,t,r)}}function Kl(e){var t=e.alternate;return e===ul||null!==t&&t===ul}function Gl(e,t){dl=fl=!0;var n=e.pending;null===n?t.next=t:(t.next=n.next,n.next=t),e.pending=t}function Yl(e,t,n){null!==gu&&0!=(1&e.mode)&&0==(2&vu)?(null===(e=t.interleaved)?(n.next=n,null===Xa?Xa=[t]:Xa.push(t)):(n.next=e.next,e.next=n),t.interleaved=n):(null===(e=t.pending)?n.next=n:(n.next=e.next,e.next=n),t.pending=n)}function Xl(e,t,n){if(0!=(4194240&n)){var r=t.lanes;n|=r&=e.pendingLanes,t.lanes=n,gt(e,n)}}var Jl={readContext:Ya,useCallback:ml,useContext:ml,useEffect:ml,useImperativeHandle:ml,useInsertionEffect:ml,useLayoutEffect:ml,useMemo:ml,useReducer:ml,useRef:ml,useState:ml,useDebugValue:ml,useDeferredValue:ml,useTransition:ml,useMutableSource:ml,useSyncExternalStore:ml,useId:ml,unstable_isNewReconciler:!1},Zl={readContext:Ya,useCallback:function(e,t){return bl().memoizedState=[e,void 0===t?null:t],e},useContext:Ya,useEffect:Al,useImperativeHandle:function(e,t,n){return n=null!=n?n.concat([e]):null,Rl(4194308,4,jl.bind(null,t,e),n)},useLayoutEffect:function(e,t){return Rl(4194308,4,e,t)},useInsertionEffect:function(e,t){return Rl(4,2,e,t)},useMemo:function(e,t){var n=bl();return t=void 0===t?null:t,e=e(),n.memoizedState=[e,t],e},useReducer:function(e,t,n){var r=bl();return t=void 0!==n?n(t):t,r.memoizedState=r.baseState=t,e={pending:null,interleaved:null,lanes:0,dispatch:null,lastRenderedReducer:e,lastRenderedState:t},r.queue=e,e=e.dispatch=Ql.bind(null,ul,e),[r.memoizedState,e]},useRef:function(e){return e={current:e},bl().memoizedState=e},useState:Tl,useDebugValue:Bl,useDeferredValue:function(e){var t=Tl(e),n=t[0],r=t[1];return Al((function(){var t=ll.transition;ll.transition={};try{r(e)}finally{ll.transition=t}}),[e]),n},useTransition:function(){var e=Tl(!1),t=e[0];return e=Wl.bind(null,e[1]),bl().memoizedState=e,[t,e]},useMutableSource:function(){},useSyncExternalStore:function(e,t,n){var r=ul,a=bl();if(To){if(void 0===n)throw Error(o(407));n=n()}else{if(n=t(),null===gu)throw Error(o(349));0!=(30&il)||Pl(r,t,n)}a.memoizedState=n;var l={value:n,getSnapshot:t};return a.queue=l,Al(Nl.bind(null,r,l,e),[e]),r.flags|=2048,Il(9,_l.bind(null,r,l,n,t),void 0,null),n},useId:function(){var e=bl(),t=gu.identifierPrefix;if(To){var n=Eo;t=":"+t+"R"+(n=(So&~(1<<32-lt(So)-1)).toString(32)+n),0<(n=pl++)&&(t+="H"+n.toString(32)),t+=":"}else t=":"+t+"r"+(n=hl++).toString(32)+":";return e.memoizedState=t},unstable_isNewReconciler:!1},ei={readContext:Ya,useCallback:Vl,useContext:Ya,useEffect:Ml,useImperativeHandle:Ul,useInsertionEffect:Fl,useLayoutEffect:Dl,useMemo:$l,useReducer:Sl,useRef:zl,useState:function(){return Sl(kl)},useDebugValue:Bl,useDeferredValue:function(e){var t=Sl(kl),n=t[0],r=t[1];return Ml((function(){var t=ll.transition;ll.transition={};try{r(e)}finally{ll.transition=t}}),[e]),n},useTransition:function(){return[Sl(kl)[0],wl().memoizedState]},useMutableSource:xl,useSyncExternalStore:Cl,useId:Hl,unstable_isNewReconciler:!1},ti={readContext:Ya,useCallback:Vl,useContext:Ya,useEffect:Ml,useImperativeHandle:Ul,useInsertionEffect:Fl,useLayoutEffect:Dl,useMemo:$l,useReducer:El,useRef:zl,useState:function(){return El(kl)},useDebugValue:Bl,useDeferredValue:function(e){var t=El(kl),n=t[0],r=t[1];return Ml((function(){var t=ll.transition;ll.transition={};try{r(e)}finally{ll.transition=t}}),[e]),n},useTransition:function(){return[El(kl)[0],wl().memoizedState]},useMutableSource:xl,useSyncExternalStore:Cl,useId:Hl,unstable_isNewReconciler:!1};function ni(e,t){try{var n="",r=t;do{n+=B(r),r=r.return}while(r);var a=n}catch(e){a="\nError generating stack: "+e.message+"\n"+e.stack}return{value:e,source:t,stack:a}}function ri(e,t){try{console.error(t.value)}catch(e){setTimeout((function(){throw e}))}}var ai,oi,li,ii="function"==typeof WeakMap?WeakMap:Map;function ui(e,t,n){(n=to(-1,n)).tag=3,n.payload={element:null};var r=t.value;return n.callback=function(){Iu||(Iu=!0,zu=r),ri(0,t)},n}function si(e,t,n){(n=to(-1,n)).tag=3;var r=e.type.getDerivedStateFromError;if("function"==typeof r){var a=t.value;n.payload=function(){return r(a)},n.callback=function(){ri(0,t)}}var o=e.stateNode;return null!==o&&"function"==typeof o.componentDidCatch&&(n.callback=function(){ri(0,t),"function"!=typeof r&&(null===Ru?Ru=new Set([this]):Ru.add(this));var e=t.stack;this.componentDidCatch(t.value,{componentStack:null!==e?e:""})}),n}function ci(e,t,n){var r=e.pingCache;if(null===r){r=e.pingCache=new ii;var a=new Set;r.set(t,a)}else void 0===(a=r.get(t))&&(a=new Set,r.set(t,a));a.has(n)||(a.add(n),e=ps.bind(null,e,t,n),t.then(e,e))}function fi(e){do{var t;if((t=13===e.tag)&&(t=null===(t=e.memoizedState)||null!==t.dehydrated),t)return e;e=e.return}while(null!==e);return null}function di(e,t,n,r,a){return 0==(1&e.mode)?(e===t?e.flags|=65536:(e.flags|=128,n.flags|=131072,n.flags&=-52805,1===n.tag&&(null===n.alternate?n.tag=17:((t=to(-1,1)).tag=2,no(n,t))),n.lanes|=1),e):(e.flags|=65536,e.lanes=a,e)}function pi(e,t){if(!To)switch(e.tailMode){case"hidden":t=e.tail;for(var n=null;null!==t;)null!==t.alternate&&(n=t),t=t.sibling;null===n?e.tail=null:n.sibling=null;break;case"collapsed":n=e.tail;for(var r=null;null!==n;)null!==n.alternate&&(r=n),n=n.sibling;null===r?t||null===e.tail?e.tail=null:e.tail.sibling=null:r.sibling=null}}function hi(e){var t=null!==e.alternate&&e.alternate.child===e.child,n=0,r=0;if(t)for(var a=e.child;null!==a;)n|=a.lanes|a.childLanes,r|=14680064&a.subtreeFlags,r|=14680064&a.flags,a.return=e,a=a.sibling;else for(a=e.child;null!==a;)n|=a.lanes|a.childLanes,r|=a.subtreeFlags,r|=a.flags,a.return=e,a=a.sibling;return e.subtreeFlags|=r,e.childLanes=n,t}function mi(e,t,n){var r=t.pendingProps;switch(_o(t),t.tag){case 2:case 16:case 15:case 0:case 11:case 7:case 8:case 12:case 9:case 14:return hi(t),null;case 1:case 17:return La(t.type)&&Ta(),hi(t),null;case 3:return r=t.stateNode,Jo(),Sa(Pa),Sa(Ca),al(),r.pendingContext&&(r.context=r.pendingContext,r.pendingContext=null),null!==e&&null!==e.child||(Fo(t)?t.flags|=4:null===e||e.memoizedState.isDehydrated&&0==(256&t.flags)||(t.flags|=1024,null!==Io&&(Ku(Io),Io=null))),hi(t),null;case 5:el(t);var a=Yo(Go.current);if(n=t.type,null!==e&&null!=t.stateNode)oi(e,t,n,r),e.ref!==t.ref&&(t.flags|=512,t.flags|=2097152);else{if(!r){if(null===t.stateNode)throw Error(o(166));return hi(t),null}if(e=Yo(qo.current),Fo(t)){r=t.stateNode,n=t.type;var l=t.memoizedProps;switch(r[sa]=t,r[ca]=l,e=0!=(1&t.mode),n){case"dialog":Fr("cancel",r),Fr("close",r);break;case"iframe":case"object":case"embed":Fr("load",r);break;case"video":case"audio":for(a=0;a<Rr.length;a++)Fr(Rr[a],r);break;case"source":Fr("error",r);break;case"img":case"image":case"link":Fr("error",r),Fr("load",r);break;case"details":Fr("toggle",r);break;case"input":Y(r,l),Fr("invalid",r);break;case"select":r._wrapperState={wasMultiple:!!l.multiple},Fr("invalid",r);break;case"textarea":ae(r,l),Fr("invalid",r)}for(var u in ye(n,l),a=null,l)if(l.hasOwnProperty(u)){var s=l[u];"children"===u?"string"==typeof s?r.textContent!==s&&(Yr(r.textContent,s,e),a=["children",s]):"number"==typeof s&&r.textContent!==""+s&&(Yr(r.textContent,s,e),a=["children",""+s]):i.hasOwnProperty(u)&&null!=s&&"onScroll"===u&&Fr("scroll",r)}switch(n){case"input":Q(r),Z(r,l,!0);break;case"textarea":Q(r),le(r);break;case"select":case"option":break;default:"function"==typeof l.onClick&&(r.onclick=Xr)}r=a,t.updateQueue=r,null!==r&&(t.flags|=4)}else{u=9===a.nodeType?a:a.ownerDocument,"http://www.w3.org/1999/xhtml"===e&&(e=ie(n)),"http://www.w3.org/1999/xhtml"===e?"script"===n?((e=u.createElement("div")).innerHTML="<script><\/script>",e=e.removeChild(e.firstChild)):"string"==typeof r.is?e=u.createElement(n,{is:r.is}):(e=u.createElement(n),"select"===n&&(u=e,r.multiple?u.multiple=!0:r.size&&(u.size=r.size))):e=u.createElementNS(e,n),e[sa]=t,e[ca]=r,ai(e,t),t.stateNode=e;e:{switch(u=be(n,r),n){case"dialog":Fr("cancel",e),Fr("close",e),a=r;break;case"iframe":case"object":case"embed":Fr("load",e),a=r;break;case"video":case"audio":for(a=0;a<Rr.length;a++)Fr(Rr[a],e);a=r;break;case"source":Fr("error",e),a=r;break;case"img":case"image":case"link":Fr("error",e),Fr("load",e),a=r;break;case"details":Fr("toggle",e),a=r;break;case"input":Y(e,r),a=G(e,r),Fr("invalid",e);break;case"option":default:a=r;break;case"select":e._wrapperState={wasMultiple:!!r.multiple},a=F({},r,{value:void 0}),Fr("invalid",e);break;case"textarea":ae(e,r),a=re(e,r),Fr("invalid",e)}for(l in ye(n,a),s=a)if(s.hasOwnProperty(l)){var c=s[l];"style"===l?ve(e,c):"dangerouslySetInnerHTML"===l?null!=(c=c?c.__html:void 0)&&fe(e,c):"children"===l?"string"==typeof c?("textarea"!==n||""!==c)&&de(e,c):"number"==typeof c&&de(e,""+c):"suppressContentEditableWarning"!==l&&"suppressHydrationWarning"!==l&&"autoFocus"!==l&&(i.hasOwnProperty(l)?null!=c&&"onScroll"===l&&Fr("scroll",e):null!=c&&b(e,l,c,u))}switch(n){case"input":Q(e),Z(e,r,!1);break;case"textarea":Q(e),le(e);break;case"option":null!=r.value&&e.setAttribute("value",""+W(r.value));break;case"select":e.multiple=!!r.multiple,null!=(l=r.value)?ne(e,!!r.multiple,l,!1):null!=r.defaultValue&&ne(e,!!r.multiple,r.defaultValue,!0);break;default:"function"==typeof a.onClick&&(e.onclick=Xr)}switch(n){case"button":case"input":case"select":case"textarea":r=!!r.autoFocus;break e;case"img":r=!0;break e;default:r=!1}}r&&(t.flags|=4)}null!==t.ref&&(t.flags|=512,t.flags|=2097152)}return hi(t),null;case 6:if(e&&null!=t.stateNode)li(0,t,e.memoizedProps,r);else{if("string"!=typeof r&&null===t.stateNode)throw Error(o(166));if(n=Yo(Go.current),Yo(qo.current),Fo(t)){if(r=t.stateNode,n=t.memoizedProps,r[sa]=t,(l=r.nodeValue!==n)&&null!==(e=No))switch(u=0!=(1&e.mode),e.tag){case 3:Yr(r.nodeValue,n,u);break;case 5:!0!==e.memoizedProps[void 0]&&Yr(r.nodeValue,n,u)}l&&(t.flags|=4)}else(r=(9===n.nodeType?n:n.ownerDocument).createTextNode(r))[sa]=t,t.stateNode=r}return hi(t),null;case 13:if(Sa(tl),r=t.memoizedState,To&&null!==Lo&&0!=(1&t.mode)&&0==(128&t.flags)){for(r=Lo;r;)r=la(r.nextSibling);return Do(),t.flags|=98560,t}if(null!==r&&null!==r.dehydrated){if(r=Fo(t),null===e){if(!r)throw Error(o(318));if(!(r=null!==(r=t.memoizedState)?r.dehydrated:null))throw Error(o(317));r[sa]=t}else Do(),0==(128&t.flags)&&(t.memoizedState=null),t.flags|=4;return hi(t),null}return null!==Io&&(Ku(Io),Io=null),0!=(128&t.flags)?(t.lanes=n,t):(r=null!==r,n=!1,null===e?Fo(t):n=null!==e.memoizedState,r&&!n&&(t.child.flags|=8192,0!=(1&t.mode)&&(null===e||0!=(1&tl.current)?0===Su&&(Su=3):rs())),null!==t.updateQueue&&(t.flags|=4),hi(t),null);case 4:return Jo(),null===e&&Ur(t.stateNode.containerInfo),hi(t),null;case 10:return qa(t.type._context),hi(t),null;case 19:if(Sa(tl),null===(l=t.memoizedState))return hi(t),null;if(r=0!=(128&t.flags),null===(u=l.rendering))if(r)pi(l,!1);else{if(0!==Su||null!==e&&0!=(128&e.flags))for(e=t.child;null!==e;){if(null!==(u=nl(e))){for(t.flags|=128,pi(l,!1),null!==(r=u.updateQueue)&&(t.updateQueue=r,t.flags|=4),t.subtreeFlags=0,r=n,n=t.child;null!==n;)e=r,(l=n).flags&=14680066,null===(u=l.alternate)?(l.childLanes=0,l.lanes=e,l.child=null,l.subtreeFlags=0,l.memoizedProps=null,l.memoizedState=null,l.updateQueue=null,l.dependencies=null,l.stateNode=null):(l.childLanes=u.childLanes,l.lanes=u.lanes,l.child=u.child,l.subtreeFlags=0,l.deletions=null,l.memoizedProps=u.memoizedProps,l.memoizedState=u.memoizedState,l.updateQueue=u.updateQueue,l.type=u.type,e=u.dependencies,l.dependencies=null===e?null:{lanes:e.lanes,firstContext:e.firstContext}),n=n.sibling;return Ea(tl,1&tl.current|2),t.child}e=e.sibling}null!==l.tail&&Xe()>Tu&&(t.flags|=128,r=!0,pi(l,!1),t.lanes=4194304)}else{if(!r)if(null!==(e=nl(u))){if(t.flags|=128,r=!0,null!==(n=e.updateQueue)&&(t.updateQueue=n,t.flags|=4),pi(l,!0),null===l.tail&&"hidden"===l.tailMode&&!u.alternate&&!To)return hi(t),null}else 2*Xe()-l.renderingStartTime>Tu&&1073741824!==n&&(t.flags|=128,r=!0,pi(l,!1),t.lanes=4194304);l.isBackwards?(u.sibling=t.child,t.child=u):(null!==(n=l.last)?n.sibling=u:t.child=u,l.last=u)}return null!==l.tail?(t=l.tail,l.rendering=t,l.tail=t.sibling,l.renderingStartTime=Xe(),t.sibling=null,n=tl.current,Ea(tl,r?1&n|2:1&n),t):(hi(t),null);case 22:case 23:return Zu(),r=null!==t.memoizedState,null!==e&&null!==e.memoizedState!==r&&(t.flags|=8192),r&&0!=(1&t.mode)?0!=(1073741824&wu)&&(hi(t),6&t.subtreeFlags&&(t.flags|=8192)):hi(t),null;case 24:case 25:return null}throw Error(o(156,t.tag))}ai=function(e,t){for(var n=t.child;null!==n;){if(5===n.tag||6===n.tag)e.appendChild(n.stateNode);else if(4!==n.tag&&null!==n.child){n.child.return=n,n=n.child;continue}if(n===t)break;for(;null===n.sibling;){if(null===n.return||n.return===t)return;n=n.return}n.sibling.return=n.return,n=n.sibling}},oi=function(e,t,n,r){var a=e.memoizedProps;if(a!==r){e=t.stateNode,Yo(qo.current);var o,l=null;switch(n){case"input":a=G(e,a),r=G(e,r),l=[];break;case"select":a=F({},a,{value:void 0}),r=F({},r,{value:void 0}),l=[];break;case"textarea":a=re(e,a),r=re(e,r),l=[];break;default:"function"!=typeof a.onClick&&"function"==typeof r.onClick&&(e.onclick=Xr)}for(c in ye(n,r),n=null,a)if(!r.hasOwnProperty(c)&&a.hasOwnProperty(c)&&null!=a[c])if("style"===c){var u=a[c];for(o in u)u.hasOwnProperty(o)&&(n||(n={}),n[o]="")}else"dangerouslySetInnerHTML"!==c&&"children"!==c&&"suppressContentEditableWarning"!==c&&"suppressHydrationWarning"!==c&&"autoFocus"!==c&&(i.hasOwnProperty(c)?l||(l=[]):(l=l||[]).push(c,null));for(c in r){var s=r[c];if(u=null!=a?a[c]:void 0,r.hasOwnProperty(c)&&s!==u&&(null!=s||null!=u))if("style"===c)if(u){for(o in u)!u.hasOwnProperty(o)||s&&s.hasOwnProperty(o)||(n||(n={}),n[o]="");for(o in s)s.hasOwnProperty(o)&&u[o]!==s[o]&&(n||(n={}),n[o]=s[o])}else n||(l||(l=[]),l.push(c,n)),n=s;else"dangerouslySetInnerHTML"===c?(s=s?s.__html:void 0,u=u?u.__html:void 0,null!=s&&u!==s&&(l=l||[]).push(c,s)):"children"===c?"string"!=typeof s&&"number"!=typeof s||(l=l||[]).push(c,""+s):"suppressContentEditableWarning"!==c&&"suppressHydrationWarning"!==c&&(i.hasOwnProperty(c)?(null!=s&&"onScroll"===c&&Fr("scroll",e),l||u===s||(l=[])):(l=l||[]).push(c,s))}n&&(l=l||[]).push("style",n);var c=l;(t.updateQueue=c)&&(t.flags|=4)}},li=function(e,t,n,r){n!==r&&(t.flags|=4)};var vi=w.ReactCurrentOwner,gi=!1;function yi(e,t,n,r){t.child=null===e?Ho(t,null,n,r):Wo(t,e.child,n,r)}function bi(e,t,n,r,a){n=n.render;var o=t.ref;return Ga(t,a),r=gl(e,t,n,r,o,a),n=yl(),null===e||gi?(To&&n&&Po(t),t.flags|=1,yi(e,t,r,a),t.child):(t.updateQueue=e.updateQueue,t.flags&=-2053,e.lanes&=~a,ji(e,t,a))}function wi(e,t,n,r,a){if(null===e){var o=n.type;return"function"!=typeof o||ws(o)||void 0!==o.defaultProps||null!==n.compare||void 0!==n.defaultProps?((e=Ss(n.type,null,r,t,t.mode,a)).ref=t.ref,e.return=t,t.child=e):(t.tag=15,t.type=o,ki(e,t,o,r,a))}if(o=e.child,0==(e.lanes&a)){var l=o.memoizedProps;if((n=null!==(n=n.compare)?n:lr)(l,r)&&e.ref===t.ref)return ji(e,t,a)}return t.flags|=1,(e=ks(o,r)).ref=t.ref,e.return=t,t.child=e}function ki(e,t,n,r,a){if(null!==e&&lr(e.memoizedProps,r)&&e.ref===t.ref){if(gi=!1,0==(e.lanes&a))return t.lanes=e.lanes,ji(e,t,a);0!=(131072&e.flags)&&(gi=!0)}return xi(e,t,n,r,a)}function Si(e,t,n){var r=t.pendingProps,a=r.children,o=null!==e?e.memoizedState:null;if("hidden"===r.mode)if(0==(1&t.mode))t.memoizedState={baseLanes:0,cachePool:null},Ea(ku,wu),wu|=n;else{if(0==(1073741824&n))return e=null!==o?o.baseLanes|n:n,t.lanes=t.childLanes=1073741824,t.memoizedState={baseLanes:e,cachePool:null},t.updateQueue=null,Ea(ku,wu),wu|=e,null;t.memoizedState={baseLanes:0,cachePool:null},r=null!==o?o.baseLanes:n,Ea(ku,wu),wu|=r}else null!==o?(r=o.baseLanes|n,t.memoizedState=null):r=n,Ea(ku,wu),wu|=r;return yi(e,t,a,n),t.child}function Ei(e,t){var n=t.ref;(null===e&&null!==n||null!==e&&e.ref!==n)&&(t.flags|=512,t.flags|=2097152)}function xi(e,t,n,r,a){var o=La(n)?_a:Ca.current;return o=Na(t,o),Ga(t,a),n=gl(e,t,n,r,o,a),r=yl(),null===e||gi?(To&&r&&Po(t),t.flags|=1,yi(e,t,n,a),t.child):(t.updateQueue=e.updateQueue,t.flags&=-2053,e.lanes&=~a,ji(e,t,a))}function Ci(e,t,n,r,a){if(La(n)){var o=!0;Ra(t)}else o=!1;if(Ga(t,a),null===t.stateNode)null!==e&&(e.alternate=null,t.alternate=null,t.flags|=2),fo(t,n,r),ho(t,n,r,a),r=!0;else if(null===e){var l=t.stateNode,i=t.memoizedProps;l.props=i;var u=l.context,s=n.contextType;s="object"==typeof s&&null!==s?Ya(s):Na(t,s=La(n)?_a:Ca.current);var c=n.getDerivedStateFromProps,f="function"==typeof c||"function"==typeof l.getSnapshotBeforeUpdate;f||"function"!=typeof l.UNSAFE_componentWillReceiveProps&&"function"!=typeof l.componentWillReceiveProps||(i!==r||u!==s)&&po(t,l,r,s),Ja=!1;var d=t.memoizedState;l.state=d,oo(t,r,l,a),u=t.memoizedState,i!==r||d!==u||Pa.current||Ja?("function"==typeof c&&(uo(t,n,c,r),u=t.memoizedState),(i=Ja||co(t,n,i,r,d,u,s))?(f||"function"!=typeof l.UNSAFE_componentWillMount&&"function"!=typeof l.componentWillMount||("function"==typeof l.componentWillMount&&l.componentWillMount(),"function"==typeof l.UNSAFE_componentWillMount&&l.UNSAFE_componentWillMount()),"function"==typeof l.componentDidMount&&(t.flags|=4194308)):("function"==typeof l.componentDidMount&&(t.flags|=4194308),t.memoizedProps=r,t.memoizedState=u),l.props=r,l.state=u,l.context=s,r=i):("function"==typeof l.componentDidMount&&(t.flags|=4194308),r=!1)}else{l=t.stateNode,eo(e,t),i=t.memoizedProps,s=t.type===t.elementType?i:Ba(t.type,i),l.props=s,f=t.pendingProps,d=l.context,u="object"==typeof(u=n.contextType)&&null!==u?Ya(u):Na(t,u=La(n)?_a:Ca.current);var p=n.getDerivedStateFromProps;(c="function"==typeof p||"function"==typeof l.getSnapshotBeforeUpdate)||"function"!=typeof l.UNSAFE_componentWillReceiveProps&&"function"!=typeof l.componentWillReceiveProps||(i!==f||d!==u)&&po(t,l,r,u),Ja=!1,d=t.memoizedState,l.state=d,oo(t,r,l,a);var h=t.memoizedState;i!==f||d!==h||Pa.current||Ja?("function"==typeof p&&(uo(t,n,p,r),h=t.memoizedState),(s=Ja||co(t,n,s,r,d,h,u)||!1)?(c||"function"!=typeof l.UNSAFE_componentWillUpdate&&"function"!=typeof l.componentWillUpdate||("function"==typeof l.componentWillUpdate&&l.componentWillUpdate(r,h,u),"function"==typeof l.UNSAFE_componentWillUpdate&&l.UNSAFE_componentWillUpdate(r,h,u)),"function"==typeof l.componentDidUpdate&&(t.flags|=4),"function"==typeof l.getSnapshotBeforeUpdate&&(t.flags|=1024)):("function"!=typeof l.componentDidUpdate||i===e.memoizedProps&&d===e.memoizedState||(t.flags|=4),"function"!=typeof l.getSnapshotBeforeUpdate||i===e.memoizedProps&&d===e.memoizedState||(t.flags|=1024),t.memoizedProps=r,t.memoizedState=h),l.props=r,l.state=h,l.context=u,r=s):("function"!=typeof l.componentDidUpdate||i===e.memoizedProps&&d===e.memoizedState||(t.flags|=4),"function"!=typeof l.getSnapshotBeforeUpdate||i===e.memoizedProps&&d===e.memoizedState||(t.flags|=1024),r=!1)}return Pi(e,t,n,r,o,a)}function Pi(e,t,n,r,a,o){Ei(e,t);var l=0!=(128&t.flags);if(!r&&!l)return a&&Oa(t,n,!1),ji(e,t,o);r=t.stateNode,vi.current=t;var i=l&&"function"!=typeof n.getDerivedStateFromError?null:r.render();return t.flags|=1,null!==e&&l?(t.child=Wo(t,e.child,null,o),t.child=Wo(t,null,i,o)):yi(e,t,i,o),t.memoizedState=r.state,a&&Oa(t,n,!0),t.child}function _i(e){var t=e.stateNode;t.pendingContext?Ia(0,t.pendingContext,t.pendingContext!==t.context):t.context&&Ia(0,t.context,!1),Xo(e,t.containerInfo)}function Ni(e,t,n,r,a){return Do(),jo(a),t.flags|=256,yi(e,t,n,r),t.child}var Li={dehydrated:null,treeContext:null,retryLane:0};function Ti(e){return{baseLanes:e,cachePool:null}}function Ii(e,t,n){var r,a=t.pendingProps,l=tl.current,i=!1,u=0!=(128&t.flags);if((r=u)||(r=(null===e||null!==e.memoizedState)&&0!=(2&l)),r?(i=!0,t.flags&=-129):null!==e&&null===e.memoizedState||(l|=1),Ea(tl,1&l),null===e)return Ao(t),null!==(e=t.memoizedState)&&null!==(e=e.dehydrated)?(0==(1&t.mode)?t.lanes=1:"$!"===e.data?t.lanes=8:t.lanes=1073741824,null):(l=a.children,e=a.fallback,i?(a=t.mode,i=t.child,l={mode:"hidden",children:l},0==(1&a)&&null!==i?(i.childLanes=0,i.pendingProps=l):i=xs(l,a,0,null),e=Es(e,a,n,null),i.return=t,e.return=t,i.sibling=e,t.child=i,t.child.memoizedState=Ti(n),t.memoizedState=Li,e):zi(t,l));if(null!==(l=e.memoizedState)){if(null!==(r=l.dehydrated)){if(u)return 256&t.flags?(t.flags&=-257,Ai(e,t,n,Error(o(422)))):null!==t.memoizedState?(t.child=e.child,t.flags|=128,null):(i=a.fallback,l=t.mode,a=xs({mode:"visible",children:a.children},l,0,null),(i=Es(i,l,n,null)).flags|=2,a.return=t,i.return=t,a.sibling=i,t.child=a,0!=(1&t.mode)&&Wo(t,e.child,null,n),t.child.memoizedState=Ti(n),t.memoizedState=Li,i);if(0==(1&t.mode))t=Ai(e,t,n,null);else if("$!"===r.data)t=Ai(e,t,n,Error(o(419)));else if(a=0!=(n&e.childLanes),gi||a){if(null!==(a=gu)){switch(n&-n){case 4:i=2;break;case 16:i=8;break;case 64:case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:case 4194304:case 8388608:case 16777216:case 33554432:case 67108864:i=32;break;case 536870912:i=268435456;break;default:i=0}0!==(a=0!=(i&(a.suspendedLanes|n))?0:i)&&a!==l.retryLane&&(l.retryLane=a,$u(e,a,-1))}rs(),t=Ai(e,t,n,Error(o(421)))}else"$?"===r.data?(t.flags|=128,t.child=e.child,t=ms.bind(null,e),r._reactRetry=t,t=null):(n=l.treeContext,Lo=la(r.nextSibling),No=t,To=!0,Io=null,null!==n&&(bo[wo++]=So,bo[wo++]=Eo,bo[wo++]=ko,So=n.id,Eo=n.overflow,ko=t),(t=zi(t,t.pendingProps.children)).flags|=4096);return t}return i?(a=Oi(e,t,a.children,a.fallback,n),i=t.child,l=e.child.memoizedState,i.memoizedState=null===l?Ti(n):{baseLanes:l.baseLanes|n,cachePool:null},i.childLanes=e.childLanes&~n,t.memoizedState=Li,a):(n=Ri(e,t,a.children,n),t.memoizedState=null,n)}return i?(a=Oi(e,t,a.children,a.fallback,n),i=t.child,l=e.child.memoizedState,i.memoizedState=null===l?Ti(n):{baseLanes:l.baseLanes|n,cachePool:null},i.childLanes=e.childLanes&~n,t.memoizedState=Li,a):(n=Ri(e,t,a.children,n),t.memoizedState=null,n)}function zi(e,t){return(t=xs({mode:"visible",children:t},e.mode,0,null)).return=e,e.child=t}function Ri(e,t,n,r){var a=e.child;return e=a.sibling,n=ks(a,{mode:"visible",children:n}),0==(1&t.mode)&&(n.lanes=r),n.return=t,n.sibling=null,null!==e&&(null===(r=t.deletions)?(t.deletions=[e],t.flags|=16):r.push(e)),t.child=n}function Oi(e,t,n,r,a){var o=t.mode,l=(e=e.child).sibling,i={mode:"hidden",children:n};return 0==(1&o)&&t.child!==e?((n=t.child).childLanes=0,n.pendingProps=i,t.deletions=null):(n=ks(e,i)).subtreeFlags=14680064&e.subtreeFlags,null!==l?r=ks(l,r):(r=Es(r,o,a,null)).flags|=2,r.return=t,n.return=t,n.sibling=r,t.child=n,r}function Ai(e,t,n,r){return null!==r&&jo(r),Wo(t,e.child,null,n),(e=zi(t,t.pendingProps.children)).flags|=2,t.memoizedState=null,e}function Mi(e,t,n){e.lanes|=t;var r=e.alternate;null!==r&&(r.lanes|=t),Ka(e.return,t,n)}function Fi(e,t,n,r,a){var o=e.memoizedState;null===o?e.memoizedState={isBackwards:t,rendering:null,renderingStartTime:0,last:r,tail:n,tailMode:a}:(o.isBackwards=t,o.rendering=null,o.renderingStartTime=0,o.last=r,o.tail=n,o.tailMode=a)}function Di(e,t,n){var r=t.pendingProps,a=r.revealOrder,o=r.tail;if(yi(e,t,r.children,n),0!=(2&(r=tl.current)))r=1&r|2,t.flags|=128;else{if(null!==e&&0!=(128&e.flags))e:for(e=t.child;null!==e;){if(13===e.tag)null!==e.memoizedState&&Mi(e,n,t);else if(19===e.tag)Mi(e,n,t);else if(null!==e.child){e.child.return=e,e=e.child;continue}if(e===t)break e;for(;null===e.sibling;){if(null===e.return||e.return===t)break e;e=e.return}e.sibling.return=e.return,e=e.sibling}r&=1}if(Ea(tl,r),0==(1&t.mode))t.memoizedState=null;else switch(a){case"forwards":for(n=t.child,a=null;null!==n;)null!==(e=n.alternate)&&null===nl(e)&&(a=n),n=n.sibling;null===(n=a)?(a=t.child,t.child=null):(a=n.sibling,n.sibling=null),Fi(t,!1,a,n,o);break;case"backwards":for(n=null,a=t.child,t.child=null;null!==a;){if(null!==(e=a.alternate)&&null===nl(e)){t.child=a;break}e=a.sibling,a.sibling=n,n=a,a=e}Fi(t,!0,n,null,o);break;case"together":Fi(t,!1,null,null,void 0);break;default:t.memoizedState=null}return t.child}function ji(e,t,n){if(null!==e&&(t.dependencies=e.dependencies),xu|=t.lanes,0==(n&t.childLanes))return null;if(null!==e&&t.child!==e.child)throw Error(o(153));if(null!==t.child){for(n=ks(e=t.child,e.pendingProps),t.child=n,n.return=t;null!==e.sibling;)e=e.sibling,(n=n.sibling=ks(e,e.pendingProps)).return=t;n.sibling=null}return t.child}function Ui(e,t){switch(_o(t),t.tag){case 1:return La(t.type)&&Ta(),65536&(e=t.flags)?(t.flags=-65537&e|128,t):null;case 3:return Jo(),Sa(Pa),Sa(Ca),al(),0!=(65536&(e=t.flags))&&0==(128&e)?(t.flags=-65537&e|128,t):null;case 5:return el(t),null;case 13:if(Sa(tl),null!==(e=t.memoizedState)&&null!==e.dehydrated){if(null===t.alternate)throw Error(o(340));Do()}return 65536&(e=t.flags)?(t.flags=-65537&e|128,t):null;case 19:return Sa(tl),null;case 4:return Jo(),null;case 10:return qa(t.type._context),null;case 22:case 23:return Zu(),null;default:return null}}var Bi=!1,Vi=!1,$i="function"==typeof WeakSet?WeakSet:Set,Wi=null;function Hi(e,t){var n=e.ref;if(null!==n)if("function"==typeof n)try{n(null)}catch(n){ds(e,t,n)}else n.current=null}function Qi(e,t,n){try{n()}catch(n){ds(e,t,n)}}var qi=!1;function Ki(e,t,n){var r=t.updateQueue;if(null!==(r=null!==r?r.lastEffect:null)){var a=r=r.next;do{if((a.tag&e)===e){var o=a.destroy;a.destroy=void 0,void 0!==o&&Qi(t,n,o)}a=a.next}while(a!==r)}}function Gi(e,t){if(null!==(t=null!==(t=t.updateQueue)?t.lastEffect:null)){var n=t=t.next;do{if((n.tag&e)===e){var r=n.create;n.destroy=r()}n=n.next}while(n!==t)}}function Yi(e){var t=e.ref;if(null!==t){var n=e.stateNode;e.tag,e=n,"function"==typeof t?t(e):t.current=e}}function Xi(e,t,n){if(ot&&"function"==typeof ot.onCommitFiberUnmount)try{ot.onCommitFiberUnmount(at,t)}catch(e){}switch(t.tag){case 0:case 11:case 14:case 15:if(null!==(e=t.updateQueue)&&null!==(e=e.lastEffect)){var r=e=e.next;do{var a=r,o=a.destroy;a=a.tag,void 0!==o&&(0!=(2&a)||0!=(4&a))&&Qi(t,n,o),r=r.next}while(r!==e)}break;case 1:if(Hi(t,n),"function"==typeof(e=t.stateNode).componentWillUnmount)try{e.props=t.memoizedProps,e.state=t.memoizedState,e.componentWillUnmount()}catch(e){ds(t,n,e)}break;case 5:Hi(t,n);break;case 4:au(e,t,n)}}function Ji(e){var t=e.alternate;null!==t&&(e.alternate=null,Ji(t)),e.child=null,e.deletions=null,e.sibling=null,5===e.tag&&null!==(t=e.stateNode)&&(delete t[sa],delete t[ca],delete t[da],delete t[pa],delete t[ha]),e.stateNode=null,e.return=null,e.dependencies=null,e.memoizedProps=null,e.memoizedState=null,e.pendingProps=null,e.stateNode=null,e.updateQueue=null}function Zi(e){return 5===e.tag||3===e.tag||4===e.tag}function eu(e){e:for(;;){for(;null===e.sibling;){if(null===e.return||Zi(e.return))return null;e=e.return}for(e.sibling.return=e.return,e=e.sibling;5!==e.tag&&6!==e.tag&&18!==e.tag;){if(2&e.flags)continue e;if(null===e.child||4===e.tag)continue e;e.child.return=e,e=e.child}if(!(2&e.flags))return e.stateNode}}function tu(e){e:{for(var t=e.return;null!==t;){if(Zi(t))break e;t=t.return}throw Error(o(160))}var n=t;switch(n.tag){case 5:t=n.stateNode,32&n.flags&&(de(t,""),n.flags&=-33),ru(e,n=eu(e),t);break;case 3:case 4:t=n.stateNode.containerInfo,nu(e,n=eu(e),t);break;default:throw Error(o(161))}}function nu(e,t,n){var r=e.tag;if(5===r||6===r)e=e.stateNode,t?8===n.nodeType?n.parentNode.insertBefore(e,t):n.insertBefore(e,t):(8===n.nodeType?(t=n.parentNode).insertBefore(e,n):(t=n).appendChild(e),null!=(n=n._reactRootContainer)||null!==t.onclick||(t.onclick=Xr));else if(4!==r&&null!==(e=e.child))for(nu(e,t,n),e=e.sibling;null!==e;)nu(e,t,n),e=e.sibling}function ru(e,t,n){var r=e.tag;if(5===r||6===r)e=e.stateNode,t?n.insertBefore(e,t):n.appendChild(e);else if(4!==r&&null!==(e=e.child))for(ru(e,t,n),e=e.sibling;null!==e;)ru(e,t,n),e=e.sibling}function au(e,t,n){for(var r,a,l=t,i=!1;;){if(!i){i=l.return;e:for(;;){if(null===i)throw Error(o(160));switch(r=i.stateNode,i.tag){case 5:a=!1;break e;case 3:case 4:r=r.containerInfo,a=!0;break e}i=i.return}i=!0}if(5===l.tag||6===l.tag){e:for(var u=e,s=l,c=n,f=s;;)if(Xi(u,f,c),null!==f.child&&4!==f.tag)f.child.return=f,f=f.child;else{if(f===s)break e;for(;null===f.sibling;){if(null===f.return||f.return===s)break e;f=f.return}f.sibling.return=f.return,f=f.sibling}a?(u=r,s=l.stateNode,8===u.nodeType?u.parentNode.removeChild(s):u.removeChild(s)):r.removeChild(l.stateNode)}else if(18===l.tag)a?(u=r,s=l.stateNode,8===u.nodeType?oa(u.parentNode,s):1===u.nodeType&&oa(u,s),Bt(u)):oa(r,l.stateNode);else if(4===l.tag){if(null!==l.child){r=l.stateNode.containerInfo,a=!0,l.child.return=l,l=l.child;continue}}else if(Xi(e,l,n),null!==l.child){l.child.return=l,l=l.child;continue}if(l===t)break;for(;null===l.sibling;){if(null===l.return||l.return===t)return;4===(l=l.return).tag&&(i=!1)}l.sibling.return=l.return,l=l.sibling}}function ou(e,t){switch(t.tag){case 0:case 11:case 14:case 15:return Ki(3,t,t.return),Gi(3,t),void Ki(5,t,t.return);case 1:case 12:case 17:return;case 5:var n=t.stateNode;if(null!=n){var r=t.memoizedProps,a=null!==e?e.memoizedProps:r;e=t.type;var l=t.updateQueue;if(t.updateQueue=null,null!==l){for("input"===e&&"radio"===r.type&&null!=r.name&&X(n,r),be(e,a),t=be(e,r),a=0;a<l.length;a+=2){var i=l[a],u=l[a+1];"style"===i?ve(n,u):"dangerouslySetInnerHTML"===i?fe(n,u):"children"===i?de(n,u):b(n,i,u,t)}switch(e){case"input":J(n,r);break;case"textarea":oe(n,r);break;case"select":e=n._wrapperState.wasMultiple,n._wrapperState.wasMultiple=!!r.multiple,null!=(l=r.value)?ne(n,!!r.multiple,l,!1):e!==!!r.multiple&&(null!=r.defaultValue?ne(n,!!r.multiple,r.defaultValue,!0):ne(n,!!r.multiple,r.multiple?[]:"",!1))}n[ca]=r}}return;case 6:if(null===t.stateNode)throw Error(o(162));return void(t.stateNode.nodeValue=t.memoizedProps);case 3:return void(null!==e&&e.memoizedState.isDehydrated&&Bt(t.stateNode.containerInfo));case 13:case 19:return void function(e){var t=e.updateQueue;if(null!==t){e.updateQueue=null;var n=e.stateNode;null===n&&(n=e.stateNode=new $i),t.forEach((function(t){var r=vs.bind(null,e,t);n.has(t)||(n.add(t),t.then(r,r))}))}}(t)}throw Error(o(163))}function lu(e,t,n){Wi=e,iu(e,t,n)}function iu(e,t,n){for(var r=0!=(1&e.mode);null!==Wi;){var a=Wi,o=a.child;if(22===a.tag&&r){var l=null!==a.memoizedState||Bi;if(!l){var i=a.alternate,u=null!==i&&null!==i.memoizedState||Vi;i=Bi;var s=Vi;if(Bi=l,(Vi=u)&&!s)for(Wi=a;null!==Wi;)u=(l=Wi).child,22===l.tag&&null!==l.memoizedState?cu(a):null!==u?(u.return=l,Wi=u):cu(a);for(;null!==o;)Wi=o,iu(o,t,n),o=o.sibling;Wi=a,Bi=i,Vi=s}uu(e)}else 0!=(8772&a.subtreeFlags)&&null!==o?(o.return=a,Wi=o):uu(e)}}function uu(e){for(;null!==Wi;){var t=Wi;if(0!=(8772&t.flags)){var n=t.alternate;try{if(0!=(8772&t.flags))switch(t.tag){case 0:case 11:case 15:Vi||Gi(5,t);break;case 1:var r=t.stateNode;if(4&t.flags&&!Vi)if(null===n)r.componentDidMount();else{var a=t.elementType===t.type?n.memoizedProps:Ba(t.type,n.memoizedProps);r.componentDidUpdate(a,n.memoizedState,r.__reactInternalSnapshotBeforeUpdate)}var l=t.updateQueue;null!==l&&lo(t,l,r);break;case 3:var i=t.updateQueue;if(null!==i){if(n=null,null!==t.child)switch(t.child.tag){case 5:case 1:n=t.child.stateNode}lo(t,i,n)}break;case 5:var u=t.stateNode;if(null===n&&4&t.flags){n=u;var s=t.memoizedProps;switch(t.type){case"button":case"input":case"select":case"textarea":s.autoFocus&&n.focus();break;case"img":s.src&&(n.src=s.src)}}break;case 6:case 4:case 12:case 19:case 17:case 21:case 22:case 23:break;case 13:if(null===t.memoizedState){var c=t.alternate;if(null!==c){var f=c.memoizedState;if(null!==f){var d=f.dehydrated;null!==d&&Bt(d)}}}break;default:throw Error(o(163))}Vi||512&t.flags&&Yi(t)}catch(e){ds(t,t.return,e)}}if(t===e){Wi=null;break}if(null!==(n=t.sibling)){n.return=t.return,Wi=n;break}Wi=t.return}}function su(e){for(;null!==Wi;){var t=Wi;if(t===e){Wi=null;break}var n=t.sibling;if(null!==n){n.return=t.return,Wi=n;break}Wi=t.return}}function cu(e){for(;null!==Wi;){var t=Wi;try{switch(t.tag){case 0:case 11:case 15:var n=t.return;try{Gi(4,t)}catch(e){ds(t,n,e)}break;case 1:var r=t.stateNode;if("function"==typeof r.componentDidMount){var a=t.return;try{r.componentDidMount()}catch(e){ds(t,a,e)}}var o=t.return;try{Yi(t)}catch(e){ds(t,o,e)}break;case 5:var l=t.return;try{Yi(t)}catch(e){ds(t,l,e)}}}catch(e){ds(t,t.return,e)}if(t===e){Wi=null;break}var i=t.sibling;if(null!==i){i.return=t.return,Wi=i;break}Wi=t.return}}var fu,du=Math.ceil,pu=w.ReactCurrentDispatcher,hu=w.ReactCurrentOwner,mu=w.ReactCurrentBatchConfig,vu=0,gu=null,yu=null,bu=0,wu=0,ku=ka(0),Su=0,Eu=null,xu=0,Cu=0,Pu=0,_u=null,Nu=null,Lu=0,Tu=1/0,Iu=!1,zu=null,Ru=null,Ou=!1,Au=null,Mu=0,Fu=0,Du=null,ju=-1,Uu=0;function Bu(){return 0!=(6&vu)?Xe():-1!==ju?ju:ju=Xe()}function Vu(e){return 0==(1&e.mode)?1:0!=(2&vu)&&0!==bu?bu&-bu:null!==Ua.transition?(0===Uu&&(e=st,0==(4194240&(st<<=1))&&(st=64),Uu=e),Uu):0!==(e=yt)?e:e=void 0===(e=window.event)?16:Kt(e.type)}function $u(e,t,n){if(50<Fu)throw Fu=0,Du=null,Error(o(185));var r=Wu(e,t);return null===r?null:(vt(r,t,n),0!=(2&vu)&&r===gu||(r===gu&&(0==(2&vu)&&(Cu|=t),4===Su&&Gu(r,bu)),Hu(r,n),1===t&&0===vu&&0==(1&e.mode)&&(Tu=Xe()+500,Ma&&ja())),r)}function Wu(e,t){e.lanes|=t;var n=e.alternate;for(null!==n&&(n.lanes|=t),n=e,e=e.return;null!==e;)e.childLanes|=t,null!==(n=e.alternate)&&(n.childLanes|=t),n=e,e=e.return;return 3===n.tag?n.stateNode:null}function Hu(e,t){var n=e.callbackNode;!function(e,t){for(var n=e.suspendedLanes,r=e.pingedLanes,a=e.expirationTimes,o=e.pendingLanes;0<o;){var l=31-lt(o),i=1<<l,u=a[l];-1===u?0!=(i&n)&&0==(i&r)||(a[l]=pt(i,t)):u<=t&&(e.expiredLanes|=i),o&=~i}}(e,t);var r=dt(e,e===gu?bu:0);if(0===r)null!==n&&Ke(n),e.callbackNode=null,e.callbackPriority=0;else if(t=r&-r,e.callbackPriority!==t){if(null!=n&&Ke(n),1===t)0===e.tag?function(e){Ma=!0,Da(e)}(Yu.bind(null,e)):Da(Yu.bind(null,e)),ra((function(){0===vu&&ja()})),n=null;else{switch(bt(r)){case 1:n=Ze;break;case 4:n=et;break;case 16:default:n=tt;break;case 536870912:n=rt}n=gs(n,Qu.bind(null,e))}e.callbackPriority=t,e.callbackNode=n}}function Qu(e,t){if(ju=-1,Uu=0,0!=(6&vu))throw Error(o(327));var n=e.callbackNode;if(cs()&&e.callbackNode!==n)return null;var r=dt(e,e===gu?bu:0);if(0===r)return null;if(0!=(30&r)||0!=(r&e.expiredLanes)||t)t=as(e,r);else{t=r;var a=vu;vu|=2;var l=ns();for(gu===e&&bu===t||(Tu=Xe()+500,es(e,t));;)try{ls();break}catch(t){ts(e,t)}Qa(),pu.current=l,vu=a,null!==yu?t=0:(gu=null,bu=0,t=Su)}if(0!==t){if(2===t&&0!==(a=ht(e))&&(r=a,t=qu(e,a)),1===t)throw n=Eu,es(e,0),Gu(e,r),Hu(e,Xe()),n;if(6===t)Gu(e,r);else{if(a=e.current.alternate,0==(30&r)&&!function(e){for(var t=e;;){if(16384&t.flags){var n=t.updateQueue;if(null!==n&&null!==(n=n.stores))for(var r=0;r<n.length;r++){var a=n[r],o=a.getSnapshot;a=a.value;try{if(!or(o(),a))return!1}catch(e){return!1}}}if(n=t.child,16384&t.subtreeFlags&&null!==n)n.return=t,t=n;else{if(t===e)break;for(;null===t.sibling;){if(null===t.return||t.return===e)return!0;t=t.return}t.sibling.return=t.return,t=t.sibling}}return!0}(a)&&(2===(t=as(e,r))&&0!==(l=ht(e))&&(r=l,t=qu(e,l)),1===t))throw n=Eu,es(e,0),Gu(e,r),Hu(e,Xe()),n;switch(e.finishedWork=a,e.finishedLanes=r,t){case 0:case 1:throw Error(o(345));case 2:case 5:ss(e,Nu);break;case 3:if(Gu(e,r),(130023424&r)===r&&10<(t=Lu+500-Xe())){if(0!==dt(e,0))break;if(((a=e.suspendedLanes)&r)!==r){Bu(),e.pingedLanes|=e.suspendedLanes&a;break}e.timeoutHandle=ea(ss.bind(null,e,Nu),t);break}ss(e,Nu);break;case 4:if(Gu(e,r),(4194240&r)===r)break;for(t=e.eventTimes,a=-1;0<r;){var i=31-lt(r);l=1<<i,(i=t[i])>a&&(a=i),r&=~l}if(r=a,10<(r=(120>(r=Xe()-r)?120:480>r?480:1080>r?1080:1920>r?1920:3e3>r?3e3:4320>r?4320:1960*du(r/1960))-r)){e.timeoutHandle=ea(ss.bind(null,e,Nu),r);break}ss(e,Nu);break;default:throw Error(o(329))}}}return Hu(e,Xe()),e.callbackNode===n?Qu.bind(null,e):null}function qu(e,t){var n=_u;return e.current.memoizedState.isDehydrated&&(es(e,t).flags|=256),2!==(e=as(e,t))&&(t=Nu,Nu=n,null!==t&&Ku(t)),e}function Ku(e){null===Nu?Nu=e:Nu.push.apply(Nu,e)}function Gu(e,t){for(t&=~Pu,t&=~Cu,e.suspendedLanes|=t,e.pingedLanes&=~t,e=e.expirationTimes;0<t;){var n=31-lt(t),r=1<<n;e[n]=-1,t&=~r}}function Yu(e){if(0!=(6&vu))throw Error(o(327));cs();var t=dt(e,0);if(0==(1&t))return Hu(e,Xe()),null;var n=as(e,t);if(0!==e.tag&&2===n){var r=ht(e);0!==r&&(t=r,n=qu(e,r))}if(1===n)throw n=Eu,es(e,0),Gu(e,t),Hu(e,Xe()),n;if(6===n)throw Error(o(345));return e.finishedWork=e.current.alternate,e.finishedLanes=t,ss(e,Nu),Hu(e,Xe()),null}function Xu(e,t){var n=vu;vu|=1;try{return e(t)}finally{0===(vu=n)&&(Tu=Xe()+500,Ma&&ja())}}function Ju(e){null!==Au&&0===Au.tag&&0==(6&vu)&&cs();var t=vu;vu|=1;var n=mu.transition,r=yt;try{if(mu.transition=null,yt=1,e)return e()}finally{yt=r,mu.transition=n,0==(6&(vu=t))&&ja()}}function Zu(){wu=ku.current,Sa(ku)}function es(e,t){e.finishedWork=null,e.finishedLanes=0;var n=e.timeoutHandle;if(-1!==n&&(e.timeoutHandle=-1,ta(n)),null!==yu)for(n=yu.return;null!==n;){var r=n;switch(_o(r),r.tag){case 1:null!=(r=r.type.childContextTypes)&&Ta();break;case 3:Jo(),Sa(Pa),Sa(Ca),al();break;case 5:el(r);break;case 4:Jo();break;case 13:case 19:Sa(tl);break;case 10:qa(r.type._context);break;case 22:case 23:Zu()}n=n.return}if(gu=e,yu=e=ks(e.current,null),bu=wu=t,Su=0,Eu=null,Pu=Cu=xu=0,Nu=_u=null,null!==Xa){for(t=0;t<Xa.length;t++)if(null!==(r=(n=Xa[t]).interleaved)){n.interleaved=null;var a=r.next,o=n.pending;if(null!==o){var l=o.next;o.next=a,r.next=l}n.pending=r}Xa=null}return e}function ts(e,t){for(;;){var n=yu;try{if(Qa(),ol.current=Jl,fl){for(var r=ul.memoizedState;null!==r;){var a=r.queue;null!==a&&(a.pending=null),r=r.next}fl=!1}if(il=0,cl=sl=ul=null,dl=!1,pl=0,hu.current=null,null===n||null===n.return){Su=1,Eu=t,yu=null;break}e:{var l=e,i=n.return,u=n,s=t;if(t=bu,u.flags|=32768,null!==s&&"object"==typeof s&&"function"==typeof s.then){var c=s,f=u,d=f.tag;if(0==(1&f.mode)&&(0===d||11===d||15===d)){var p=f.alternate;p?(f.updateQueue=p.updateQueue,f.memoizedState=p.memoizedState,f.lanes=p.lanes):(f.updateQueue=null,f.memoizedState=null)}var h=fi(i);if(null!==h){h.flags&=-257,di(h,i,u,0,t),1&h.mode&&ci(l,c,t),s=c;var m=(t=h).updateQueue;if(null===m){var v=new Set;v.add(s),t.updateQueue=v}else m.add(s);break e}if(0==(1&t)){ci(l,c,t),rs();break e}s=Error(o(426))}else if(To&&1&u.mode){var g=fi(i);if(null!==g){0==(65536&g.flags)&&(g.flags|=256),di(g,i,u,0,t),jo(s);break e}}l=s,4!==Su&&(Su=2),null===_u?_u=[l]:_u.push(l),s=ni(s,u),u=i;do{switch(u.tag){case 3:u.flags|=65536,t&=-t,u.lanes|=t,ao(u,ui(0,s,t));break e;case 1:l=s;var y=u.type,b=u.stateNode;if(0==(128&u.flags)&&("function"==typeof y.getDerivedStateFromError||null!==b&&"function"==typeof b.componentDidCatch&&(null===Ru||!Ru.has(b)))){u.flags|=65536,t&=-t,u.lanes|=t,ao(u,si(u,l,t));break e}}u=u.return}while(null!==u)}us(n)}catch(e){t=e,yu===n&&null!==n&&(yu=n=n.return);continue}break}}function ns(){var e=pu.current;return pu.current=Jl,null===e?Jl:e}function rs(){0!==Su&&3!==Su&&2!==Su||(Su=4),null===gu||0==(268435455&xu)&&0==(268435455&Cu)||Gu(gu,bu)}function as(e,t){var n=vu;vu|=2;var r=ns();for(gu===e&&bu===t||es(e,t);;)try{os();break}catch(t){ts(e,t)}if(Qa(),vu=n,pu.current=r,null!==yu)throw Error(o(261));return gu=null,bu=0,Su}function os(){for(;null!==yu;)is(yu)}function ls(){for(;null!==yu&&!Ge();)is(yu)}function is(e){var t=fu(e.alternate,e,wu);e.memoizedProps=e.pendingProps,null===t?us(e):yu=t,hu.current=null}function us(e){var t=e;do{var n=t.alternate;if(e=t.return,0==(32768&t.flags)){if(null!==(n=mi(n,t,wu)))return void(yu=n)}else{if(null!==(n=Ui(n,t)))return n.flags&=32767,void(yu=n);if(null===e)return Su=6,void(yu=null);e.flags|=32768,e.subtreeFlags=0,e.deletions=null}if(null!==(t=t.sibling))return void(yu=t);yu=t=e}while(null!==t);0===Su&&(Su=5)}function ss(e,t){var n=yt,r=mu.transition;try{mu.transition=null,yt=1,function(e,t,n){do{cs()}while(null!==Au);if(0!=(6&vu))throw Error(o(327));var r=e.finishedWork,a=e.finishedLanes;if(null===r)return null;if(e.finishedWork=null,e.finishedLanes=0,r===e.current)throw Error(o(177));e.callbackNode=null,e.callbackPriority=0;var l=r.lanes|r.childLanes;if(function(e,t){var n=e.pendingLanes&~t;e.pendingLanes=t,e.suspendedLanes=0,e.pingedLanes=0,e.expiredLanes&=t,e.mutableReadLanes&=t,e.entangledLanes&=t,t=e.entanglements;var r=e.eventTimes;for(e=e.expirationTimes;0<n;){var a=31-lt(n),o=1<<a;t[a]=0,r[a]=-1,e[a]=-1,n&=~o}}(e,l),e===gu&&(yu=gu=null,bu=0),0==(2064&r.subtreeFlags)&&0==(2064&r.flags)||Ou||(Ou=!0,gs(tt,(function(){return cs(),null}))),l=0!=(15990&r.flags),0!=(15990&r.subtreeFlags)||l){l=mu.transition,mu.transition=null;var i=yt;yt=1;var u=vu;vu|=4,hu.current=null,function(e,t){if(fr(e=cr())){if("selectionStart"in e)var n={start:e.selectionStart,end:e.selectionEnd};else e:{var r=(n=(n=e.ownerDocument)&&n.defaultView||window).getSelection&&n.getSelection();if(r&&0!==r.rangeCount){n=r.anchorNode;var a=r.anchorOffset,l=r.focusNode;r=r.focusOffset;try{n.nodeType,l.nodeType}catch(e){n=null;break e}var i=0,u=-1,s=-1,c=0,f=0,d=e,p=null;t:for(;;){for(var h;d!==n||0!==a&&3!==d.nodeType||(u=i+a),d!==l||0!==r&&3!==d.nodeType||(s=i+r),3===d.nodeType&&(i+=d.nodeValue.length),null!==(h=d.firstChild);)p=d,d=h;for(;;){if(d===e)break t;if(p===n&&++c===a&&(u=i),p===l&&++f===r&&(s=i),null!==(h=d.nextSibling))break;p=(d=p).parentNode}d=h}n=-1===u||-1===s?null:{start:u,end:s}}else n=null}n=n||{start:0,end:0}}else n=null;for(Jr={focusedElem:e,selectionRange:n},Wi=t;null!==Wi;)if(e=(t=Wi).child,0!=(1028&t.subtreeFlags)&&null!==e)e.return=t,Wi=e;else for(;null!==Wi;){t=Wi;try{var m=t.alternate;if(0!=(1024&t.flags))switch(t.tag){case 0:case 11:case 15:case 5:case 6:case 4:case 17:break;case 1:if(null!==m){var v=m.memoizedProps,g=m.memoizedState,y=t.stateNode,b=y.getSnapshotBeforeUpdate(t.elementType===t.type?v:Ba(t.type,v),g);y.__reactInternalSnapshotBeforeUpdate=b}break;case 3:var w=t.stateNode.containerInfo;if(1===w.nodeType)w.textContent="";else if(9===w.nodeType){var k=w.body;null!=k&&(k.textContent="")}break;default:throw Error(o(163))}}catch(e){ds(t,t.return,e)}if(null!==(e=t.sibling)){e.return=t.return,Wi=e;break}Wi=t.return}m=qi,qi=!1}(e,r),function(e,t){for(Wi=t;null!==Wi;){var n=(t=Wi).deletions;if(null!==n)for(var r=0;r<n.length;r++){var a=n[r];try{au(e,a,t);var o=a.alternate;null!==o&&(o.return=null),a.return=null}catch(e){ds(a,t,e)}}if(n=t.child,0!=(12854&t.subtreeFlags)&&null!==n)n.return=t,Wi=n;else for(;null!==Wi;){t=Wi;try{var l=t.flags;if(32&l&&de(t.stateNode,""),512&l){var i=t.alternate;if(null!==i){var u=i.ref;null!==u&&("function"==typeof u?u(null):u.current=null)}}if(8192&l)switch(t.tag){case 13:if(null!==t.memoizedState){var s=t.alternate;null!==s&&null!==s.memoizedState||(Lu=Xe())}break;case 22:var c=null!==t.memoizedState,f=t.alternate,d=null!==f&&null!==f.memoizedState;e:{a=c;for(var p=null,h=r=n=t;;){if(5===h.tag){if(null===p){p=h;var m=h.stateNode;if(a){var v=m.style;"function"==typeof v.setProperty?v.setProperty("display","none","important"):v.display="none"}else{var g=h.stateNode,y=h.memoizedProps.style,b=null!=y&&y.hasOwnProperty("display")?y.display:null;g.style.display=me("display",b)}}}else if(6===h.tag)null===p&&(h.stateNode.nodeValue=a?"":h.memoizedProps);else if((22!==h.tag&&23!==h.tag||null===h.memoizedState||h===r)&&null!==h.child){h.child.return=h,h=h.child;continue}if(h===r)break;for(;null===h.sibling;){if(null===h.return||h.return===r)break e;p===h&&(p=null),h=h.return}p===h&&(p=null),h.sibling.return=h.return,h=h.sibling}}if(c&&!d&&0!=(1&n.mode)){Wi=n;for(var w=n.child;null!==w;){for(n=Wi=w;null!==Wi;){var k=(r=Wi).child;switch(r.tag){case 0:case 11:case 14:case 15:Ki(4,r,r.return);break;case 1:Hi(r,r.return);var S=r.stateNode;if("function"==typeof S.componentWillUnmount){var E=r.return;try{S.props=r.memoizedProps,S.state=r.memoizedState,S.componentWillUnmount()}catch(e){ds(r,E,e)}}break;case 5:Hi(r,r.return);break;case 22:if(null!==r.memoizedState){su(n);continue}}null!==k?(k.return=r,Wi=k):su(n)}w=w.sibling}}}switch(4102&l){case 2:tu(t),t.flags&=-3;break;case 6:tu(t),t.flags&=-3,ou(t.alternate,t);break;case 4096:t.flags&=-4097;break;case 4100:t.flags&=-4097,ou(t.alternate,t);break;case 4:ou(t.alternate,t)}}catch(e){ds(t,t.return,e)}if(null!==(n=t.sibling)){n.return=t.return,Wi=n;break}Wi=t.return}}}(e,r),dr(Jr),Jr=null,e.current=r,lu(r,e,a),Ye(),vu=u,yt=i,mu.transition=l}else e.current=r;if(Ou&&(Ou=!1,Au=e,Mu=a),0===(l=e.pendingLanes)&&(Ru=null),function(e){if(ot&&"function"==typeof ot.onCommitFiberRoot)try{ot.onCommitFiberRoot(at,e,void 0,128==(128&e.current.flags))}catch(e){}}(r.stateNode),Hu(e,Xe()),null!==t)for(n=e.onRecoverableError,r=0;r<t.length;r++)n(t[r]);if(Iu)throw Iu=!1,e=zu,zu=null,e;0!=(1&Mu)&&0!==e.tag&&cs(),0!=(1&(l=e.pendingLanes))?e===Du?Fu++:(Fu=0,Du=e):Fu=0,ja()}(e,t,n)}finally{mu.transition=r,yt=n}return null}function cs(){if(null!==Au){var e=bt(Mu),t=mu.transition,n=yt;try{if(mu.transition=null,yt=16>e?16:e,null===Au)var r=!1;else{if(e=Au,Au=null,Mu=0,0!=(6&vu))throw Error(o(331));var a=vu;for(vu|=4,Wi=e.current;null!==Wi;){var l=Wi,i=l.child;if(0!=(16&Wi.flags)){var u=l.deletions;if(null!==u){for(var s=0;s<u.length;s++){var c=u[s];for(Wi=c;null!==Wi;){var f=Wi;switch(f.tag){case 0:case 11:case 15:Ki(8,f,l)}var d=f.child;if(null!==d)d.return=f,Wi=d;else for(;null!==Wi;){var p=(f=Wi).sibling,h=f.return;if(Ji(f),f===c){Wi=null;break}if(null!==p){p.return=h,Wi=p;break}Wi=h}}}var m=l.alternate;if(null!==m){var v=m.child;if(null!==v){m.child=null;do{var g=v.sibling;v.sibling=null,v=g}while(null!==v)}}Wi=l}}if(0!=(2064&l.subtreeFlags)&&null!==i)i.return=l,Wi=i;else e:for(;null!==Wi;){if(0!=(2048&(l=Wi).flags))switch(l.tag){case 0:case 11:case 15:Ki(9,l,l.return)}var y=l.sibling;if(null!==y){y.return=l.return,Wi=y;break e}Wi=l.return}}var b=e.current;for(Wi=b;null!==Wi;){var w=(i=Wi).child;if(0!=(2064&i.subtreeFlags)&&null!==w)w.return=i,Wi=w;else e:for(i=b;null!==Wi;){if(0!=(2048&(u=Wi).flags))try{switch(u.tag){case 0:case 11:case 15:Gi(9,u)}}catch(e){ds(u,u.return,e)}if(u===i){Wi=null;break e}var k=u.sibling;if(null!==k){k.return=u.return,Wi=k;break e}Wi=u.return}}if(vu=a,ja(),ot&&"function"==typeof ot.onPostCommitFiberRoot)try{ot.onPostCommitFiberRoot(at,e)}catch(e){}r=!0}return r}finally{yt=n,mu.transition=t}}return!1}function fs(e,t,n){no(e,t=ui(0,t=ni(n,t),1)),t=Bu(),null!==(e=Wu(e,1))&&(vt(e,1,t),Hu(e,t))}function ds(e,t,n){if(3===e.tag)fs(e,e,n);else for(;null!==t;){if(3===t.tag){fs(t,e,n);break}if(1===t.tag){var r=t.stateNode;if("function"==typeof t.type.getDerivedStateFromError||"function"==typeof r.componentDidCatch&&(null===Ru||!Ru.has(r))){no(t,e=si(t,e=ni(n,e),1)),e=Bu(),null!==(t=Wu(t,1))&&(vt(t,1,e),Hu(t,e));break}}t=t.return}}function ps(e,t,n){var r=e.pingCache;null!==r&&r.delete(t),t=Bu(),e.pingedLanes|=e.suspendedLanes&n,gu===e&&(bu&n)===n&&(4===Su||3===Su&&(130023424&bu)===bu&&500>Xe()-Lu?es(e,0):Pu|=n),Hu(e,t)}function hs(e,t){0===t&&(0==(1&e.mode)?t=1:(t=ct,0==(130023424&(ct<<=1))&&(ct=4194304)));var n=Bu();null!==(e=Wu(e,t))&&(vt(e,t,n),Hu(e,n))}function ms(e){var t=e.memoizedState,n=0;null!==t&&(n=t.retryLane),hs(e,n)}function vs(e,t){var n=0;switch(e.tag){case 13:var r=e.stateNode,a=e.memoizedState;null!==a&&(n=a.retryLane);break;case 19:r=e.stateNode;break;default:throw Error(o(314))}null!==r&&r.delete(t),hs(e,n)}function gs(e,t){return qe(e,t)}function ys(e,t,n,r){this.tag=e,this.key=n,this.sibling=this.child=this.return=this.stateNode=this.type=this.elementType=null,this.index=0,this.ref=null,this.pendingProps=t,this.dependencies=this.memoizedState=this.updateQueue=this.memoizedProps=null,this.mode=r,this.subtreeFlags=this.flags=0,this.deletions=null,this.childLanes=this.lanes=0,this.alternate=null}function bs(e,t,n,r){return new ys(e,t,n,r)}function ws(e){return!(!(e=e.prototype)||!e.isReactComponent)}function ks(e,t){var n=e.alternate;return null===n?((n=bs(e.tag,t,e.key,e.mode)).elementType=e.elementType,n.type=e.type,n.stateNode=e.stateNode,n.alternate=e,e.alternate=n):(n.pendingProps=t,n.type=e.type,n.flags=0,n.subtreeFlags=0,n.deletions=null),n.flags=14680064&e.flags,n.childLanes=e.childLanes,n.lanes=e.lanes,n.child=e.child,n.memoizedProps=e.memoizedProps,n.memoizedState=e.memoizedState,n.updateQueue=e.updateQueue,t=e.dependencies,n.dependencies=null===t?null:{lanes:t.lanes,firstContext:t.firstContext},n.sibling=e.sibling,n.index=e.index,n.ref=e.ref,n}function Ss(e,t,n,r,a,l){var i=2;if(r=e,"function"==typeof e)ws(e)&&(i=1);else if("string"==typeof e)i=5;else e:switch(e){case E:return Es(n.children,a,l,t);case x:i=8,a|=8;break;case C:return(e=bs(12,n,t,2|a)).elementType=C,e.lanes=l,e;case L:return(e=bs(13,n,t,a)).elementType=L,e.lanes=l,e;case T:return(e=bs(19,n,t,a)).elementType=T,e.lanes=l,e;case R:return xs(n,a,l,t);default:if("object"==typeof e&&null!==e)switch(e.$$typeof){case P:i=10;break e;case _:i=9;break e;case N:i=11;break e;case I:i=14;break e;case z:i=16,r=null;break e}throw Error(o(130,null==e?e:typeof e,""))}return(t=bs(i,n,t,a)).elementType=e,t.type=r,t.lanes=l,t}function Es(e,t,n,r){return(e=bs(7,e,r,t)).lanes=n,e}function xs(e,t,n,r){return(e=bs(22,e,r,t)).elementType=R,e.lanes=n,e.stateNode={},e}function Cs(e,t,n){return(e=bs(6,e,null,t)).lanes=n,e}function Ps(e,t,n){return(t=bs(4,null!==e.children?e.children:[],e.key,t)).lanes=n,t.stateNode={containerInfo:e.containerInfo,pendingChildren:null,implementation:e.implementation},t}function _s(e,t,n,r,a){this.tag=t,this.containerInfo=e,this.finishedWork=this.pingCache=this.current=this.pendingChildren=null,this.timeoutHandle=-1,this.callbackNode=this.pendingContext=this.context=null,this.callbackPriority=0,this.eventTimes=mt(0),this.expirationTimes=mt(-1),this.entangledLanes=this.finishedLanes=this.mutableReadLanes=this.expiredLanes=this.pingedLanes=this.suspendedLanes=this.pendingLanes=0,this.entanglements=mt(0),this.identifierPrefix=r,this.onRecoverableError=a,this.mutableSourceEagerHydrationData=null}function Ns(e,t,n,r,a,o,l,i,u){return e=new _s(e,t,n,i,u),1===t?(t=1,!0===o&&(t|=8)):t=0,o=bs(3,null,null,t),e.current=o,o.stateNode=e,o.memoizedState={element:r,isDehydrated:n,cache:null,transitions:null},Za(o),e}function Ls(e,t,n){var r=3<arguments.length&&void 0!==arguments[3]?arguments[3]:null;return{$$typeof:S,key:null==r?null:""+r,children:e,containerInfo:t,implementation:n}}function Ts(e){if(!e)return xa;e:{if(Ve(e=e._reactInternals)!==e||1!==e.tag)throw Error(o(170));var t=e;do{switch(t.tag){case 3:t=t.stateNode.context;break e;case 1:if(La(t.type)){t=t.stateNode.__reactInternalMemoizedMergedChildContext;break e}}t=t.return}while(null!==t);throw Error(o(171))}if(1===e.tag){var n=e.type;if(La(n))return za(e,n,t)}return t}function Is(e,t,n,r,a,o,l,i,u){return(e=Ns(n,r,!0,e,0,o,0,i,u)).context=Ts(null),n=e.current,(o=to(r=Bu(),a=Vu(n))).callback=null!=t?t:null,no(n,o),e.current.lanes=a,vt(e,a,r),Hu(e,r),e}function zs(e,t,n,r){var a=t.current,o=Bu(),l=Vu(a);return n=Ts(n),null===t.context?t.context=n:t.pendingContext=n,(t=to(o,l)).payload={element:e},null!==(r=void 0===r?null:r)&&(t.callback=r),no(a,t),null!==(e=$u(a,l,o))&&ro(e,a,l),l}function Rs(e){return(e=e.current).child?(e.child.tag,e.child.stateNode):null}function Os(e,t){if(null!==(e=e.memoizedState)&&null!==e.dehydrated){var n=e.retryLane;e.retryLane=0!==n&&n<t?n:t}}function As(e,t){Os(e,t),(e=e.alternate)&&Os(e,t)}fu=function(e,t,n){if(null!==e)if(e.memoizedProps!==t.pendingProps||Pa.current)gi=!0;else{if(0==(e.lanes&n)&&0==(128&t.flags))return gi=!1,function(e,t,n){switch(t.tag){case 3:_i(t),Do();break;case 5:Zo(t);break;case 1:La(t.type)&&Ra(t);break;case 4:Xo(t,t.stateNode.containerInfo);break;case 10:var r=t.type._context,a=t.memoizedProps.value;Ea(Va,r._currentValue),r._currentValue=a;break;case 13:if(null!==(r=t.memoizedState))return null!==r.dehydrated?(Ea(tl,1&tl.current),t.flags|=128,null):0!=(n&t.child.childLanes)?Ii(e,t,n):(Ea(tl,1&tl.current),null!==(e=ji(e,t,n))?e.sibling:null);Ea(tl,1&tl.current);break;case 19:if(r=0!=(n&t.childLanes),0!=(128&e.flags)){if(r)return Di(e,t,n);t.flags|=128}if(null!==(a=t.memoizedState)&&(a.rendering=null,a.tail=null,a.lastEffect=null),Ea(tl,tl.current),r)break;return null;case 22:case 23:return t.lanes=0,Si(e,t,n)}return ji(e,t,n)}(e,t,n);gi=0!=(131072&e.flags)}else gi=!1,To&&0!=(1048576&t.flags)&&Co(t,yo,t.index);switch(t.lanes=0,t.tag){case 2:var r=t.type;null!==e&&(e.alternate=null,t.alternate=null,t.flags|=2),e=t.pendingProps;var a=Na(t,Ca.current);Ga(t,n),a=gl(null,t,r,e,a,n);var l=yl();return t.flags|=1,"object"==typeof a&&null!==a&&"function"==typeof a.render&&void 0===a.$$typeof?(t.tag=1,t.memoizedState=null,t.updateQueue=null,La(r)?(l=!0,Ra(t)):l=!1,t.memoizedState=null!==a.state&&void 0!==a.state?a.state:null,Za(t),a.updater=so,t.stateNode=a,a._reactInternals=t,ho(t,r,e,n),t=Pi(null,t,r,!0,l,n)):(t.tag=0,To&&l&&Po(t),yi(null,t,a,n),t=t.child),t;case 16:r=t.elementType;e:{switch(null!==e&&(e.alternate=null,t.alternate=null,t.flags|=2),e=t.pendingProps,r=(a=r._init)(r._payload),t.type=r,a=t.tag=function(e){if("function"==typeof e)return ws(e)?1:0;if(null!=e){if((e=e.$$typeof)===N)return 11;if(e===I)return 14}return 2}(r),e=Ba(r,e),a){case 0:t=xi(null,t,r,e,n);break e;case 1:t=Ci(null,t,r,e,n);break e;case 11:t=bi(null,t,r,e,n);break e;case 14:t=wi(null,t,r,Ba(r.type,e),n);break e}throw Error(o(306,r,""))}return t;case 0:return r=t.type,a=t.pendingProps,xi(e,t,r,a=t.elementType===r?a:Ba(r,a),n);case 1:return r=t.type,a=t.pendingProps,Ci(e,t,r,a=t.elementType===r?a:Ba(r,a),n);case 3:e:{if(_i(t),null===e)throw Error(o(387));r=t.pendingProps,a=(l=t.memoizedState).element,eo(e,t),oo(t,r,null,n);var i=t.memoizedState;if(r=i.element,l.isDehydrated){if(l={element:r,isDehydrated:!1,cache:i.cache,transitions:i.transitions},t.updateQueue.baseState=l,t.memoizedState=l,256&t.flags){t=Ni(e,t,r,n,a=Error(o(423)));break e}if(r!==a){t=Ni(e,t,r,n,a=Error(o(424)));break e}for(Lo=la(t.stateNode.containerInfo.firstChild),No=t,To=!0,Io=null,n=Ho(t,null,r,n),t.child=n;n;)n.flags=-3&n.flags|4096,n=n.sibling}else{if(Do(),r===a){t=ji(e,t,n);break e}yi(e,t,r,n)}t=t.child}return t;case 5:return Zo(t),null===e&&Ao(t),r=t.type,a=t.pendingProps,l=null!==e?e.memoizedProps:null,i=a.children,Zr(r,a)?i=null:null!==l&&Zr(r,l)&&(t.flags|=32),Ei(e,t),yi(e,t,i,n),t.child;case 6:return null===e&&Ao(t),null;case 13:return Ii(e,t,n);case 4:return Xo(t,t.stateNode.containerInfo),r=t.pendingProps,null===e?t.child=Wo(t,null,r,n):yi(e,t,r,n),t.child;case 11:return r=t.type,a=t.pendingProps,bi(e,t,r,a=t.elementType===r?a:Ba(r,a),n);case 7:return yi(e,t,t.pendingProps,n),t.child;case 8:case 12:return yi(e,t,t.pendingProps.children,n),t.child;case 10:e:{if(r=t.type._context,a=t.pendingProps,l=t.memoizedProps,i=a.value,Ea(Va,r._currentValue),r._currentValue=i,null!==l)if(or(l.value,i)){if(l.children===a.children&&!Pa.current){t=ji(e,t,n);break e}}else for(null!==(l=t.child)&&(l.return=t);null!==l;){var u=l.dependencies;if(null!==u){i=l.child;for(var s=u.firstContext;null!==s;){if(s.context===r){if(1===l.tag){(s=to(-1,n&-n)).tag=2;var c=l.updateQueue;if(null!==c){var f=(c=c.shared).pending;null===f?s.next=s:(s.next=f.next,f.next=s),c.pending=s}}l.lanes|=n,null!==(s=l.alternate)&&(s.lanes|=n),Ka(l.return,n,t),u.lanes|=n;break}s=s.next}}else if(10===l.tag)i=l.type===t.type?null:l.child;else if(18===l.tag){if(null===(i=l.return))throw Error(o(341));i.lanes|=n,null!==(u=i.alternate)&&(u.lanes|=n),Ka(i,n,t),i=l.sibling}else i=l.child;if(null!==i)i.return=l;else for(i=l;null!==i;){if(i===t){i=null;break}if(null!==(l=i.sibling)){l.return=i.return,i=l;break}i=i.return}l=i}yi(e,t,a.children,n),t=t.child}return t;case 9:return a=t.type,r=t.pendingProps.children,Ga(t,n),r=r(a=Ya(a)),t.flags|=1,yi(e,t,r,n),t.child;case 14:return a=Ba(r=t.type,t.pendingProps),wi(e,t,r,a=Ba(r.type,a),n);case 15:return ki(e,t,t.type,t.pendingProps,n);case 17:return r=t.type,a=t.pendingProps,a=t.elementType===r?a:Ba(r,a),null!==e&&(e.alternate=null,t.alternate=null,t.flags|=2),t.tag=1,La(r)?(e=!0,Ra(t)):e=!1,Ga(t,n),fo(t,r,a),ho(t,r,a,n),Pi(null,t,r,!0,e,n);case 19:return Di(e,t,n);case 22:return Si(e,t,n)}throw Error(o(156,t.tag))};var Ms="function"==typeof reportError?reportError:function(e){console.error(e)};function Fs(e){this._internalRoot=e}function Ds(e){this._internalRoot=e}function js(e){return!(!e||1!==e.nodeType&&9!==e.nodeType&&11!==e.nodeType)}function Us(e){return!(!e||1!==e.nodeType&&9!==e.nodeType&&11!==e.nodeType&&(8!==e.nodeType||" react-mount-point-unstable "!==e.nodeValue))}function Bs(){}function Vs(e,t,n,r,a){var o=n._reactRootContainer;if(o){var l=o;if("function"==typeof a){var i=a;a=function(){var e=Rs(l);i.call(e)}}zs(t,l,e,a)}else l=function(e,t,n,r,a){if(a){if("function"==typeof r){var o=r;r=function(){var e=Rs(l);o.call(e)}}var l=Is(t,r,e,0,null,!1,0,"",Bs);return e._reactRootContainer=l,e[fa]=l.current,Ur(8===e.nodeType?e.parentNode:e),Ju(),l}for(;a=e.lastChild;)e.removeChild(a);if("function"==typeof r){var i=r;r=function(){var e=Rs(u);i.call(e)}}var u=Ns(e,0,!1,null,0,!1,0,"",Bs);return e._reactRootContainer=u,e[fa]=u.current,Ur(8===e.nodeType?e.parentNode:e),Ju((function(){zs(t,u,n,r)})),u}(n,t,e,a,r);return Rs(l)}Ds.prototype.render=Fs.prototype.render=function(e){var t=this._internalRoot;if(null===t)throw Error(o(409));zs(e,t,null,null)},Ds.prototype.unmount=Fs.prototype.unmount=function(){var e=this._internalRoot;if(null!==e){this._internalRoot=null;var t=e.containerInfo;Ju((function(){zs(null,e,null,null)})),t[fa]=null}},Ds.prototype.unstable_scheduleHydration=function(e){if(e){var t=Et();e={blockedOn:null,target:e,priority:t};for(var n=0;n<zt.length&&0!==t&&t<zt[n].priority;n++);zt.splice(n,0,e),0===n&&Mt(e)}},wt=function(e){switch(e.tag){case 3:var t=e.stateNode;if(t.current.memoizedState.isDehydrated){var n=ft(t.pendingLanes);0!==n&&(gt(t,1|n),Hu(t,Xe()),0==(6&vu)&&(Tu=Xe()+500,ja()))}break;case 13:var r=Bu();Ju((function(){return $u(e,1,r)})),As(e,1)}},kt=function(e){13===e.tag&&($u(e,134217728,Bu()),As(e,134217728))},St=function(e){if(13===e.tag){var t=Bu(),n=Vu(e);$u(e,n,t),As(e,n)}},Et=function(){return yt},xt=function(e,t){var n=yt;try{return yt=e,t()}finally{yt=n}},Se=function(e,t,n){switch(t){case"input":if(J(e,n),t=n.name,"radio"===n.type&&null!=t){for(n=e;n.parentNode;)n=n.parentNode;for(n=n.querySelectorAll("input[name="+JSON.stringify(""+t)+'][type="radio"]'),t=0;t<n.length;t++){var r=n[t];if(r!==e&&r.form===e.form){var a=ya(r);if(!a)throw Error(o(90));q(r),J(r,a)}}}break;case"textarea":oe(e,n);break;case"select":null!=(t=n.value)&&ne(e,!!n.multiple,t,!1)}},Ne=Xu,Le=Ju;var $s={usingClientEntryPoint:!1,Events:[va,ga,ya,Pe,_e,Xu]},Ws={findFiberByHostInstance:ma,bundleType:0,version:"18.0.0-fc46dba67-20220329",rendererPackageName:"react-dom"},Hs={bundleType:Ws.bundleType,version:Ws.version,rendererPackageName:Ws.rendererPackageName,rendererConfig:Ws.rendererConfig,overrideHookState:null,overrideHookStateDeletePath:null,overrideHookStateRenamePath:null,overrideProps:null,overridePropsDeletePath:null,overridePropsRenamePath:null,setErrorHandler:null,setSuspenseHandler:null,scheduleUpdate:null,currentDispatcherRef:w.ReactCurrentDispatcher,findHostInstanceByFiber:function(e){return null===(e=He(e))?null:e.stateNode},findFiberByHostInstance:Ws.findFiberByHostInstance||function(){return null},findHostInstancesForRefresh:null,scheduleRefresh:null,scheduleRoot:null,setRefreshHandler:null,getCurrentFiber:null,reconcilerVersion:"18.0.0-fc46dba67-20220329"};if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__){var Qs=__REACT_DEVTOOLS_GLOBAL_HOOK__;if(!Qs.isDisabled&&Qs.supportsFiber)try{at=Qs.inject(Hs),ot=Qs}catch(ce){}}t.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=$s,t.createPortal=function(e,t){var n=2<arguments.length&&void 0!==arguments[2]?arguments[2]:null;if(!js(t))throw Error(o(200));return Ls(e,t,null,n)},t.createRoot=function(e,t){if(!js(e))throw Error(o(299));var n=!1,r="",a=Ms;return null!=t&&(!0===t.unstable_strictMode&&(n=!0),void 0!==t.identifierPrefix&&(r=t.identifierPrefix),void 0!==t.onRecoverableError&&(a=t.onRecoverableError)),t=Ns(e,1,!1,null,0,n,0,r,a),e[fa]=t.current,Ur(8===e.nodeType?e.parentNode:e),new Fs(t)},t.findDOMNode=function(e){if(null==e)return null;if(1===e.nodeType)return e;var t=e._reactInternals;if(void 0===t){if("function"==typeof e.render)throw Error(o(188));throw e=Object.keys(e).join(","),Error(o(268,e))}return null===(e=He(t))?null:e.stateNode},t.flushSync=function(e){return Ju(e)},t.hydrate=function(e,t,n){if(!Us(t))throw Error(o(200));return Vs(null,e,t,!0,n)},t.hydrateRoot=function(e,t,n){if(!js(e))throw Error(o(405));var r=null!=n&&n.hydratedSources||null,a=!1,l="",i=Ms;if(null!=n&&(!0===n.unstable_strictMode&&(a=!0),void 0!==n.identifierPrefix&&(l=n.identifierPrefix),void 0!==n.onRecoverableError&&(i=n.onRecoverableError)),t=Is(t,null,e,1,null!=n?n:null,a,0,l,i),e[fa]=t.current,Ur(e),r)for(e=0;e<r.length;e++)a=(a=(n=r[e])._getVersion)(n._source),null==t.mutableSourceEagerHydrationData?t.mutableSourceEagerHydrationData=[n,a]:t.mutableSourceEagerHydrationData.push(n,a);return new Ds(t)},t.render=function(e,t,n){if(!Us(t))throw Error(o(200));return Vs(null,e,t,!1,n)},t.unmountComponentAtNode=function(e){if(!Us(e))throw Error(o(40));return!!e._reactRootContainer&&(Ju((function(){Vs(null,null,e,!1,(function(){e._reactRootContainer=null,e[fa]=null}))})),!0)},t.unstable_batchedUpdates=Xu,t.unstable_renderSubtreeIntoContainer=function(e,t,n,r){if(!Us(n))throw Error(o(200));if(null==e||void 0===e._reactInternals)throw Error(o(38));return Vs(e,t,n,!1,r)},t.version="18.0.0-fc46dba67-20220329"},745:(e,t,n)=>{"use strict";var r=n(935);t.s=r.createRoot,r.hydrateRoot},935:(e,t,n)=>{"use strict";!function e(){if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__&&"function"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE)try{__REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(e)}catch(e){console.error(e)}}(),e.exports=n(448)},408:(e,t)=>{"use strict";var n=Symbol.for("react.element"),r=Symbol.for("react.portal"),a=Symbol.for("react.fragment"),o=Symbol.for("react.strict_mode"),l=Symbol.for("react.profiler"),i=Symbol.for("react.provider"),u=Symbol.for("react.context"),s=Symbol.for("react.forward_ref"),c=Symbol.for("react.suspense"),f=Symbol.for("react.memo"),d=Symbol.for("react.lazy"),p=Symbol.iterator,h={isMounted:function(){return!1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}},m=Object.assign,v={};function g(e,t,n){this.props=e,this.context=t,this.refs=v,this.updater=n||h}function y(){}function b(e,t,n){this.props=e,this.context=t,this.refs=v,this.updater=n||h}g.prototype.isReactComponent={},g.prototype.setState=function(e,t){if("object"!=typeof e&&"function"!=typeof e&&null!=e)throw Error("setState(...): takes an object of state variables to update or a function which returns an object of state variables.");this.updater.enqueueSetState(this,e,t,"setState")},g.prototype.forceUpdate=function(e){this.updater.enqueueForceUpdate(this,e,"forceUpdate")},y.prototype=g.prototype;var w=b.prototype=new y;w.constructor=b,m(w,g.prototype),w.isPureReactComponent=!0;var k=Array.isArray,S=Object.prototype.hasOwnProperty,E={current:null},x={key:!0,ref:!0,__self:!0,__source:!0};function C(e,t,r){var a,o={},l=null,i=null;if(null!=t)for(a in void 0!==t.ref&&(i=t.ref),void 0!==t.key&&(l=""+t.key),t)S.call(t,a)&&!x.hasOwnProperty(a)&&(o[a]=t[a]);var u=arguments.length-2;if(1===u)o.children=r;else if(1<u){for(var s=Array(u),c=0;c<u;c++)s[c]=arguments[c+2];o.children=s}if(e&&e.defaultProps)for(a in u=e.defaultProps)void 0===o[a]&&(o[a]=u[a]);return{$$typeof:n,type:e,key:l,ref:i,props:o,_owner:E.current}}function P(e){return"object"==typeof e&&null!==e&&e.$$typeof===n}var _=/\/+/g;function N(e,t){return"object"==typeof e&&null!==e&&null!=e.key?function(e){var t={"=":"=0",":":"=2"};return"$"+e.replace(/[=:]/g,(function(e){return t[e]}))}(""+e.key):t.toString(36)}function L(e,t,a,o,l){var i=typeof e;"undefined"!==i&&"boolean"!==i||(e=null);var u=!1;if(null===e)u=!0;else switch(i){case"string":case"number":u=!0;break;case"object":switch(e.$$typeof){case n:case r:u=!0}}if(u)return l=l(u=e),e=""===o?"."+N(u,0):o,k(l)?(a="",null!=e&&(a=e.replace(_,"$&/")+"/"),L(l,t,a,"",(function(e){return e}))):null!=l&&(P(l)&&(l=function(e,t){return{$$typeof:n,type:e.type,key:t,ref:e.ref,props:e.props,_owner:e._owner}}(l,a+(!l.key||u&&u.key===l.key?"":(""+l.key).replace(_,"$&/")+"/")+e)),t.push(l)),1;if(u=0,o=""===o?".":o+":",k(e))for(var s=0;s<e.length;s++){var c=o+N(i=e[s],s);u+=L(i,t,a,c,l)}else if(c=function(e){return null===e||"object"!=typeof e?null:"function"==typeof(e=p&&e[p]||e["@@iterator"])?e:null}(e),"function"==typeof c)for(e=c.call(e),s=0;!(i=e.next()).done;)u+=L(i=i.value,t,a,c=o+N(i,s++),l);else if("object"===i)throw t=String(e),Error("Objects are not valid as a React child (found: "+("[object Object]"===t?"object with keys {"+Object.keys(e).join(", ")+"}":t)+"). If you meant to render a collection of children, use an array instead.");return u}function T(e,t,n){if(null==e)return e;var r=[],a=0;return L(e,r,"","",(function(e){return t.call(n,e,a++)})),r}function I(e){if(-1===e._status){var t=e._result;(t=t()).then((function(t){0!==e._status&&-1!==e._status||(e._status=1,e._result=t)}),(function(t){0!==e._status&&-1!==e._status||(e._status=2,e._result=t)})),-1===e._status&&(e._status=0,e._result=t)}if(1===e._status)return e._result.default;throw e._result}var z={current:null},R={transition:null},O={ReactCurrentDispatcher:z,ReactCurrentBatchConfig:R,ReactCurrentOwner:E};t.Children={map:T,forEach:function(e,t,n){T(e,(function(){t.apply(this,arguments)}),n)},count:function(e){var t=0;return T(e,(function(){t++})),t},toArray:function(e){return T(e,(function(e){return e}))||[]},only:function(e){if(!P(e))throw Error("React.Children.only expected to receive a single React element child.");return e}},t.Component=g,t.Fragment=a,t.Profiler=l,t.PureComponent=b,t.StrictMode=o,t.Suspense=c,t.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=O,t.cloneElement=function(e,t,r){if(null==e)throw Error("React.cloneElement(...): The argument must be a React element, but you passed "+e+".");var a=m({},e.props),o=e.key,l=e.ref,i=e._owner;if(null!=t){if(void 0!==t.ref&&(l=t.ref,i=E.current),void 0!==t.key&&(o=""+t.key),e.type&&e.type.defaultProps)var u=e.type.defaultProps;for(s in t)S.call(t,s)&&!x.hasOwnProperty(s)&&(a[s]=void 0===t[s]&&void 0!==u?u[s]:t[s])}var s=arguments.length-2;if(1===s)a.children=r;else if(1<s){u=Array(s);for(var c=0;c<s;c++)u[c]=arguments[c+2];a.children=u}return{$$typeof:n,type:e.type,key:o,ref:l,props:a,_owner:i}},t.createContext=function(e){return(e={$$typeof:u,_currentValue:e,_currentValue2:e,_threadCount:0,Provider:null,Consumer:null,_defaultValue:null,_globalName:null}).Provider={$$typeof:i,_context:e},e.Consumer=e},t.createElement=C,t.createFactory=function(e){var t=C.bind(null,e);return t.type=e,t},t.createRef=function(){return{current:null}},t.forwardRef=function(e){return{$$typeof:s,render:e}},t.isValidElement=P,t.lazy=function(e){return{$$typeof:d,_payload:{_status:-1,_result:e},_init:I}},t.memo=function(e,t){return{$$typeof:f,type:e,compare:void 0===t?null:t}},t.startTransition=function(e){var t=R.transition;R.transition={};try{e()}finally{R.transition=t}},t.unstable_act=function(){throw Error("act(...) is not supported in production builds of React.")},t.useCallback=function(e,t){return z.current.useCallback(e,t)},t.useContext=function(e){return z.current.useContext(e)},t.useDebugValue=function(){},t.useDeferredValue=function(e){return z.current.useDeferredValue(e)},t.useEffect=function(e,t){return z.current.useEffect(e,t)},t.useId=function(){return z.current.useId()},t.useImperativeHandle=function(e,t,n){return z.current.useImperativeHandle(e,t,n)},t.useInsertionEffect=function(e,t){return z.current.useInsertionEffect(e,t)},t.useLayoutEffect=function(e,t){return z.current.useLayoutEffect(e,t)},t.useMemo=function(e,t){return z.current.useMemo(e,t)},t.useReducer=function(e,t,n){return z.current.useReducer(e,t,n)},t.useRef=function(e){return z.current.useRef(e)},t.useState=function(e){return z.current.useState(e)},t.useSyncExternalStore=function(e,t,n){return z.current.useSyncExternalStore(e,t,n)},t.useTransition=function(){return z.current.useTransition()},t.version="18.0.0-fc46dba67-20220329"},294:(e,t,n)=>{"use strict";e.exports=n(408)},666:e=>{var t=function(e){"use strict";var t,n=Object.prototype,r=n.hasOwnProperty,a="function"==typeof Symbol?Symbol:{},o=a.iterator||"@@iterator",l=a.asyncIterator||"@@asyncIterator",i=a.toStringTag||"@@toStringTag";function u(e,t,n){return Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}),e[t]}try{u({},"")}catch(e){u=function(e,t,n){return e[t]=n}}function s(e,t,n,r){var a=t&&t.prototype instanceof v?t:v,o=Object.create(a.prototype),l=new N(r||[]);return o._invoke=function(e,t,n){var r=f;return function(a,o){if(r===p)throw new Error("Generator is already running");if(r===h){if("throw"===a)throw o;return T()}for(n.method=a,n.arg=o;;){var l=n.delegate;if(l){var i=C(l,n);if(i){if(i===m)continue;return i}}if("next"===n.method)n.sent=n._sent=n.arg;else if("throw"===n.method){if(r===f)throw r=h,n.arg;n.dispatchException(n.arg)}else"return"===n.method&&n.abrupt("return",n.arg);r=p;var u=c(e,t,n);if("normal"===u.type){if(r=n.done?h:d,u.arg===m)continue;return{value:u.arg,done:n.done}}"throw"===u.type&&(r=h,n.method="throw",n.arg=u.arg)}}}(e,n,l),o}function c(e,t,n){try{return{type:"normal",arg:e.call(t,n)}}catch(e){return{type:"throw",arg:e}}}e.wrap=s;var f="suspendedStart",d="suspendedYield",p="executing",h="completed",m={};function v(){}function g(){}function y(){}var b={};u(b,o,(function(){return this}));var w=Object.getPrototypeOf,k=w&&w(w(L([])));k&&k!==n&&r.call(k,o)&&(b=k);var S=y.prototype=v.prototype=Object.create(b);function E(e){["next","throw","return"].forEach((function(t){u(e,t,(function(e){return this._invoke(t,e)}))}))}function x(e,t){function n(a,o,l,i){var u=c(e[a],e,o);if("throw"!==u.type){var s=u.arg,f=s.value;return f&&"object"==typeof f&&r.call(f,"__await")?t.resolve(f.__await).then((function(e){n("next",e,l,i)}),(function(e){n("throw",e,l,i)})):t.resolve(f).then((function(e){s.value=e,l(s)}),(function(e){return n("throw",e,l,i)}))}i(u.arg)}var a;this._invoke=function(e,r){function o(){return new t((function(t,a){n(e,r,t,a)}))}return a=a?a.then(o,o):o()}}function C(e,n){var r=e.iterator[n.method];if(r===t){if(n.delegate=null,"throw"===n.method){if(e.iterator.return&&(n.method="return",n.arg=t,C(e,n),"throw"===n.method))return m;n.method="throw",n.arg=new TypeError("The iterator does not provide a 'throw' method")}return m}var a=c(r,e.iterator,n.arg);if("throw"===a.type)return n.method="throw",n.arg=a.arg,n.delegate=null,m;var o=a.arg;return o?o.done?(n[e.resultName]=o.value,n.next=e.nextLoc,"return"!==n.method&&(n.method="next",n.arg=t),n.delegate=null,m):o:(n.method="throw",n.arg=new TypeError("iterator result is not an object"),n.delegate=null,m)}function P(e){var t={tryLoc:e[0]};1 in e&&(t.catchLoc=e[1]),2 in e&&(t.finallyLoc=e[2],t.afterLoc=e[3]),this.tryEntries.push(t)}function _(e){var t=e.completion||{};t.type="normal",delete t.arg,e.completion=t}function N(e){this.tryEntries=[{tryLoc:"root"}],e.forEach(P,this),this.reset(!0)}function L(e){if(e){var n=e[o];if(n)return n.call(e);if("function"==typeof e.next)return e;if(!isNaN(e.length)){var a=-1,l=function n(){for(;++a<e.length;)if(r.call(e,a))return n.value=e[a],n.done=!1,n;return n.value=t,n.done=!0,n};return l.next=l}}return{next:T}}function T(){return{value:t,done:!0}}return g.prototype=y,u(S,"constructor",y),u(y,"constructor",g),g.displayName=u(y,i,"GeneratorFunction"),e.isGeneratorFunction=function(e){var t="function"==typeof e&&e.constructor;return!!t&&(t===g||"GeneratorFunction"===(t.displayName||t.name))},e.mark=function(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,y):(e.__proto__=y,u(e,i,"GeneratorFunction")),e.prototype=Object.create(S),e},e.awrap=function(e){return{__await:e}},E(x.prototype),u(x.prototype,l,(function(){return this})),e.AsyncIterator=x,e.async=function(t,n,r,a,o){void 0===o&&(o=Promise);var l=new x(s(t,n,r,a),o);return e.isGeneratorFunction(n)?l:l.next().then((function(e){return e.done?e.value:l.next()}))},E(S),u(S,i,"Generator"),u(S,o,(function(){return this})),u(S,"toString",(function(){return"[object Generator]"})),e.keys=function(e){var t=[];for(var n in e)t.push(n);return t.reverse(),function n(){for(;t.length;){var r=t.pop();if(r in e)return n.value=r,n.done=!1,n}return n.done=!0,n}},e.values=L,N.prototype={constructor:N,reset:function(e){if(this.prev=0,this.next=0,this.sent=this._sent=t,this.done=!1,this.delegate=null,this.method="next",this.arg=t,this.tryEntries.forEach(_),!e)for(var n in this)"t"===n.charAt(0)&&r.call(this,n)&&!isNaN(+n.slice(1))&&(this[n]=t)},stop:function(){this.done=!0;var e=this.tryEntries[0].completion;if("throw"===e.type)throw e.arg;return this.rval},dispatchException:function(e){if(this.done)throw e;var n=this;function a(r,a){return i.type="throw",i.arg=e,n.next=r,a&&(n.method="next",n.arg=t),!!a}for(var o=this.tryEntries.length-1;o>=0;--o){var l=this.tryEntries[o],i=l.completion;if("root"===l.tryLoc)return a("end");if(l.tryLoc<=this.prev){var u=r.call(l,"catchLoc"),s=r.call(l,"finallyLoc");if(u&&s){if(this.prev<l.catchLoc)return a(l.catchLoc,!0);if(this.prev<l.finallyLoc)return a(l.finallyLoc)}else if(u){if(this.prev<l.catchLoc)return a(l.catchLoc,!0)}else{if(!s)throw new Error("try statement without catch or finally");if(this.prev<l.finallyLoc)return a(l.finallyLoc)}}}},abrupt:function(e,t){for(var n=this.tryEntries.length-1;n>=0;--n){var a=this.tryEntries[n];if(a.tryLoc<=this.prev&&r.call(a,"finallyLoc")&&this.prev<a.finallyLoc){var o=a;break}}o&&("break"===e||"continue"===e)&&o.tryLoc<=t&&t<=o.finallyLoc&&(o=null);var l=o?o.completion:{};return l.type=e,l.arg=t,o?(this.method="next",this.next=o.finallyLoc,m):this.complete(l)},complete:function(e,t){if("throw"===e.type)throw e.arg;return"break"===e.type||"continue"===e.type?this.next=e.arg:"return"===e.type?(this.rval=this.arg=e.arg,this.method="return",this.next="end"):"normal"===e.type&&t&&(this.next=t),m},finish:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.finallyLoc===e)return this.complete(n.completion,n.afterLoc),_(n),m}},catch:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.tryLoc===e){var r=n.completion;if("throw"===r.type){var a=r.arg;_(n)}return a}}throw new Error("illegal catch attempt")},delegateYield:function(e,n,r){return this.delegate={iterator:L(e),resultName:n,nextLoc:r},"next"===this.method&&(this.arg=t),m}},e}(e.exports);try{regeneratorRuntime=t}catch(e){"object"==typeof globalThis?globalThis.regeneratorRuntime=t:Function("r","regeneratorRuntime = r")(t)}},53:(e,t)=>{"use strict";function n(e,t){var n=e.length;e.push(t);e:for(;0<n;){var r=n-1>>>1,a=e[r];if(!(0<o(a,t)))break e;e[r]=t,e[n]=a,n=r}}function r(e){return 0===e.length?null:e[0]}function a(e){if(0===e.length)return null;var t=e[0],n=e.pop();if(n!==t){e[0]=n;e:for(var r=0,a=e.length,l=a>>>1;r<l;){var i=2*(r+1)-1,u=e[i],s=i+1,c=e[s];if(0>o(u,n))s<a&&0>o(c,u)?(e[r]=c,e[s]=n,r=s):(e[r]=u,e[i]=n,r=i);else{if(!(s<a&&0>o(c,n)))break e;e[r]=c,e[s]=n,r=s}}}return t}function o(e,t){var n=e.sortIndex-t.sortIndex;return 0!==n?n:e.id-t.id}if("object"==typeof performance&&"function"==typeof performance.now){var l=performance;t.unstable_now=function(){return l.now()}}else{var i=Date,u=i.now();t.unstable_now=function(){return i.now()-u}}var s=[],c=[],f=1,d=null,p=3,h=!1,m=!1,v=!1,g="function"==typeof setTimeout?setTimeout:null,y="function"==typeof clearTimeout?clearTimeout:null,b="undefined"!=typeof setImmediate?setImmediate:null;function w(e){for(var t=r(c);null!==t;){if(null===t.callback)a(c);else{if(!(t.startTime<=e))break;a(c),t.sortIndex=t.expirationTime,n(s,t)}t=r(c)}}function k(e){if(v=!1,w(e),!m)if(null!==r(s))m=!0,R(S);else{var t=r(c);null!==t&&O(k,t.startTime-e)}}function S(e,n){m=!1,v&&(v=!1,y(P),P=-1),h=!0;var o=p;try{for(w(n),d=r(s);null!==d&&(!(d.expirationTime>n)||e&&!L());){var l=d.callback;if("function"==typeof l){d.callback=null,p=d.priorityLevel;var i=l(d.expirationTime<=n);n=t.unstable_now(),"function"==typeof i?d.callback=i:d===r(s)&&a(s),w(n)}else a(s);d=r(s)}if(null!==d)var u=!0;else{var f=r(c);null!==f&&O(k,f.startTime-n),u=!1}return u}finally{d=null,p=o,h=!1}}"undefined"!=typeof navigator&&void 0!==navigator.scheduling&&void 0!==navigator.scheduling.isInputPending&&navigator.scheduling.isInputPending.bind(navigator.scheduling);var E,x=!1,C=null,P=-1,_=5,N=-1;function L(){return!(t.unstable_now()-N<_)}function T(){if(null!==C){var e=t.unstable_now();N=e;var n=!0;try{n=C(!0,e)}finally{n?E():(x=!1,C=null)}}else x=!1}if("function"==typeof b)E=function(){b(T)};else if("undefined"!=typeof MessageChannel){var I=new MessageChannel,z=I.port2;I.port1.onmessage=T,E=function(){z.postMessage(null)}}else E=function(){g(T,0)};function R(e){C=e,x||(x=!0,E())}function O(e,n){P=g((function(){e(t.unstable_now())}),n)}t.unstable_IdlePriority=5,t.unstable_ImmediatePriority=1,t.unstable_LowPriority=4,t.unstable_NormalPriority=3,t.unstable_Profiling=null,t.unstable_UserBlockingPriority=2,t.unstable_cancelCallback=function(e){e.callback=null},t.unstable_continueExecution=function(){m||h||(m=!0,R(S))},t.unstable_forceFrameRate=function(e){0>e||125<e?console.error("forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported"):_=0<e?Math.floor(1e3/e):5},t.unstable_getCurrentPriorityLevel=function(){return p},t.unstable_getFirstCallbackNode=function(){return r(s)},t.unstable_next=function(e){switch(p){case 1:case 2:case 3:var t=3;break;default:t=p}var n=p;p=t;try{return e()}finally{p=n}},t.unstable_pauseExecution=function(){},t.unstable_requestPaint=function(){},t.unstable_runWithPriority=function(e,t){switch(e){case 1:case 2:case 3:case 4:case 5:break;default:e=3}var n=p;p=e;try{return t()}finally{p=n}},t.unstable_scheduleCallback=function(e,a,o){var l=t.unstable_now();switch(o="object"==typeof o&&null!==o&&"number"==typeof(o=o.delay)&&0<o?l+o:l,e){case 1:var i=-1;break;case 2:i=250;break;case 5:i=1073741823;break;case 4:i=1e4;break;default:i=5e3}return e={id:f++,callback:a,priorityLevel:e,startTime:o,expirationTime:i=o+i,sortIndex:-1},o>l?(e.sortIndex=o,n(c,e),null===r(s)&&e===r(c)&&(v?(y(P),P=-1):v=!0,O(k,o-l))):(e.sortIndex=i,n(s,e),m||h||(m=!0,R(S))),e},t.unstable_shouldYield=L,t.unstable_wrapCallback=function(e){var t=p;return function(){var n=p;p=t;try{return e.apply(this,arguments)}finally{p=n}}}},840:(e,t,n)=>{"use strict";e.exports=n(53)},379:e=>{"use strict";var t=[];function n(e){for(var n=-1,r=0;r<t.length;r++)if(t[r].identifier===e){n=r;break}return n}function r(e,r){for(var o={},l=[],i=0;i<e.length;i++){var u=e[i],s=r.base?u[0]+r.base:u[0],c=o[s]||0,f="".concat(s," ").concat(c);o[s]=c+1;var d=n(f),p={css:u[1],media:u[2],sourceMap:u[3],supports:u[4],layer:u[5]};if(-1!==d)t[d].references++,t[d].updater(p);else{var h=a(p,r);r.byIndex=i,t.splice(i,0,{identifier:f,updater:h,references:1})}l.push(f)}return l}function a(e,t){var n=t.domAPI(t);return n.update(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap&&t.supports===e.supports&&t.layer===e.layer)return;n.update(e=t)}else n.remove()}}e.exports=function(e,a){var o=r(e=e||[],a=a||{});return function(e){e=e||[];for(var l=0;l<o.length;l++){var i=n(o[l]);t[i].references--}for(var u=r(e,a),s=0;s<o.length;s++){var c=n(o[s]);0===t[c].references&&(t[c].updater(),t.splice(c,1))}o=u}}},569:e=>{"use strict";var t={};e.exports=function(e,n){var r=function(e){if(void 0===t[e]){var n=document.querySelector(e);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}t[e]=n}return t[e]}(e);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(n)}},216:e=>{"use strict";e.exports=function(e){var t=document.createElement("style");return e.setAttributes(t,e.attributes),e.insert(t,e.options),t}},565:(e,t,n)=>{"use strict";e.exports=function(e){var t=n.nc;t&&e.setAttribute("nonce",t)}},795:e=>{"use strict";e.exports=function(e){var t=e.insertStyleElement(e);return{update:function(n){!function(e,t,n){var r="";n.supports&&(r+="@supports (".concat(n.supports,") {")),n.media&&(r+="@media ".concat(n.media," {"));var a=void 0!==n.layer;a&&(r+="@layer".concat(n.layer.length>0?" ".concat(n.layer):""," {")),r+=n.css,a&&(r+="}"),n.media&&(r+="}"),n.supports&&(r+="}");var o=n.sourceMap;o&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(o))))," */")),t.styleTagTransform(r,e,t.options)}(t,e,n)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(t)}}}},589:e=>{"use strict";e.exports=function(e,t){if(t.styleSheet)t.styleSheet.cssText=e;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(e))}}}},t={};function n(r){var a=t[r];if(void 0!==a)return a.exports;var o=t[r]={id:r,loaded:!1,exports:{}};return e[r].call(o.exports,o,o.exports,n),o.loaded=!0,o.exports}n.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return n.d(t,{a:t}),t},n.d=(e,t)=>{for(var r in t)n.o(t,r)&&!n.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:t[r]})},n.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),n.nmd=e=>(e.paths=[],e.children||(e.children=[]),e),(()=>{"use strict";var e,t=n(294),r=(n(935),n(745));function a(){return a=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},a.apply(this,arguments)}!function(e){e.Pop="POP",e.Push="PUSH",e.Replace="REPLACE"}(e||(e={}));var o="beforeunload";function l(e){e.preventDefault(),e.returnValue=""}function i(){var e=[];return{get length(){return e.length},push:function(t){return e.push(t),function(){e=e.filter((function(e){return e!==t}))}},call:function(t){e.forEach((function(e){return e&&e(t)}))}}}function u(e){var t={};if(e){var n=e.indexOf("#");n>=0&&(t.hash=e.substr(n),e=e.substr(0,n));var r=e.indexOf("?");r>=0&&(t.search=e.substr(r),e=e.substr(0,r)),e&&(t.pathname=e)}return t}const s=(0,t.createContext)(null),c=(0,t.createContext)(null),f=(0,t.createContext)({outlet:null,matches:[]});function d(e,t){if(!e)throw new Error(t)}function p(e,t,n){void 0===n&&(n="/");let r=w(("string"==typeof t?u(t):t).pathname||"/",n);if(null==r)return null;let a=h(e);!function(e){e.sort(((e,t)=>e.score!==t.score?t.score-e.score:function(e,t){return e.length===t.length&&e.slice(0,-1).every(((e,n)=>e===t[n]))?e[e.length-1]-t[t.length-1]:0}(e.routesMeta.map((e=>e.childrenIndex)),t.routesMeta.map((e=>e.childrenIndex)))))}(a);let o=null;for(let e=0;null==o&&e<a.length;++e)o=y(a[e],r);return o}function h(e,t,n,r){return void 0===t&&(t=[]),void 0===n&&(n=[]),void 0===r&&(r=""),e.forEach(((e,a)=>{let o={relativePath:e.path||"",caseSensitive:!0===e.caseSensitive,childrenIndex:a,route:e};o.relativePath.startsWith("/")&&(o.relativePath.startsWith(r)||d(!1),o.relativePath=o.relativePath.slice(r.length));let l=k([r,o.relativePath]),i=n.concat(o);e.children&&e.children.length>0&&(!0===e.index&&d(!1),h(e.children,t,i,l)),(null!=e.path||e.index)&&t.push({path:l,score:g(l,e.index),routesMeta:i})})),t}const m=/^:\w+$/,v=e=>"*"===e;function g(e,t){let n=e.split("/"),r=n.length;return n.some(v)&&(r+=-2),t&&(r+=2),n.filter((e=>!v(e))).reduce(((e,t)=>e+(m.test(t)?3:""===t?1:10)),r)}function y(e,t){let{routesMeta:n}=e,r={},a="/",o=[];for(let e=0;e<n.length;++e){let l=n[e],i=e===n.length-1,u="/"===a?t:t.slice(a.length)||"/",s=b({path:l.relativePath,caseSensitive:l.caseSensitive,end:i},u);if(!s)return null;Object.assign(r,s.params);let c=l.route;o.push({params:r,pathname:k([a,s.pathname]),pathnameBase:S(k([a,s.pathnameBase])),route:c}),"/"!==s.pathnameBase&&(a=k([a,s.pathnameBase]))}return o}function b(e,t){"string"==typeof e&&(e={path:e,caseSensitive:!1,end:!0});let[n,r]=function(e,t,n){void 0===t&&(t=!1),void 0===n&&(n=!0);let r=[],a="^"+e.replace(/\/*\*?$/,"").replace(/^\/*/,"/").replace(/[\\.*+^$?{}|()[\]]/g,"\\$&").replace(/:(\w+)/g,((e,t)=>(r.push(t),"([^\\/]+)")));return e.endsWith("*")?(r.push("*"),a+="*"===e||"/*"===e?"(.*)$":"(?:\\/(.+)|\\/*)$"):a+=n?"\\/*$":"(?:(?=[.~-]|%[0-9A-F]{2})|\\b|\\/|$)",[new RegExp(a,t?void 0:"i"),r]}(e.path,e.caseSensitive,e.end),a=t.match(n);if(!a)return null;let o=a[0],l=o.replace(/(.)\/+$/,"$1"),i=a.slice(1);return{params:r.reduce(((e,t,n)=>{if("*"===t){let e=i[n]||"";l=o.slice(0,o.length-e.length).replace(/(.)\/+$/,"$1")}return e[t]=function(e,t){try{return decodeURIComponent(e)}catch(t){return e}}(i[n]||""),e}),{}),pathname:o,pathnameBase:l,pattern:e}}function w(e,t){if("/"===t)return e;if(!e.toLowerCase().startsWith(t.toLowerCase()))return null;let n=e.charAt(t.length);return n&&"/"!==n?null:e.slice(t.length)||"/"}const k=e=>e.join("/").replace(/\/\/+/g,"/"),S=e=>e.replace(/\/+$/,"").replace(/^\/*/,"/"),E=e=>e&&"?"!==e?e.startsWith("?")?e:"?"+e:"",x=e=>e&&"#"!==e?e.startsWith("#")?e:"#"+e:"";function C(){return null!=(0,t.useContext)(c)}function P(){return C()||d(!1),(0,t.useContext)(c).location}function _(){C()||d(!1);let{basename:e,navigator:n}=(0,t.useContext)(s),{matches:r}=(0,t.useContext)(f),{pathname:a}=P(),o=JSON.stringify(r.map((e=>e.pathnameBase))),l=(0,t.useRef)(!1);(0,t.useEffect)((()=>{l.current=!0}));let i=(0,t.useCallback)((function(t,r){if(void 0===r&&(r={}),!l.current)return;if("number"==typeof t)return void n.go(t);let i=function(e,t,n){let r,a="string"==typeof e?u(e):e,o=""===e||""===a.pathname?"/":a.pathname;if(null==o)r=n;else{let e=t.length-1;if(o.startsWith("..")){let t=o.split("/");for(;".."===t[0];)t.shift(),e-=1;a.pathname=t.join("/")}r=e>=0?t[e]:"/"}let l=function(e,t){void 0===t&&(t="/");let{pathname:n,search:r="",hash:a=""}="string"==typeof e?u(e):e,o=n?n.startsWith("/")?n:function(e,t){let n=t.replace(/\/+$/,"").split("/");return e.split("/").forEach((e=>{".."===e?n.length>1&&n.pop():"."!==e&&n.push(e)})),n.length>1?n.join("/"):"/"}(n,t):t;return{pathname:o,search:E(r),hash:x(a)}}(a,r);return o&&"/"!==o&&o.endsWith("/")&&!l.pathname.endsWith("/")&&(l.pathname+="/"),l}(t,JSON.parse(o),a);"/"!==e&&(i.pathname=k([e,i.pathname])),(r.replace?n.replace:n.push)(i,r.state)}),[e,n,o,a]);return i}function N(e){let{to:n,replace:r,state:a}=e;C()||d(!1);let o=_();return(0,t.useEffect)((()=>{o(n,{replace:r,state:a})})),null}function L(e){d(!1)}function T(n){let{basename:r="/",children:a=null,location:o,navigationType:l=e.Pop,navigator:i,static:f=!1}=n;C()&&d(!1);let p=S(r),h=(0,t.useMemo)((()=>({basename:p,navigator:i,static:f})),[p,i,f]);"string"==typeof o&&(o=u(o));let{pathname:m="/",search:v="",hash:g="",state:y=null,key:b="default"}=o,k=(0,t.useMemo)((()=>{let e=w(m,p);return null==e?null:{pathname:e,search:v,hash:g,state:y,key:b}}),[p,m,v,g,y,b]);return null==k?null:(0,t.createElement)(s.Provider,{value:h},(0,t.createElement)(c.Provider,{children:a,value:{location:k,navigationType:l}}))}function I(e){let{children:n,location:r}=e;return function(e,n){C()||d(!1);let{matches:r}=(0,t.useContext)(f),a=r[r.length-1],o=a?a.params:{},l=(a&&a.pathname,a?a.pathnameBase:"/");a&&a.route;let i,s=P();if(n){var c;let e="string"==typeof n?u(n):n;"/"===l||(null==(c=e.pathname)?void 0:c.startsWith(l))||d(!1),i=e}else i=s;let h=i.pathname||"/",m=p(e,{pathname:"/"===l?h:h.slice(l.length)||"/"});return function(e,n){return void 0===n&&(n=[]),null==e?null:e.reduceRight(((r,a,o)=>(0,t.createElement)(f.Provider,{children:void 0!==a.route.element?a.route.element:r,value:{outlet:r,matches:n.concat(e.slice(0,o+1))}})),null)}(m&&m.map((e=>Object.assign({},e,{params:Object.assign({},o,e.params),pathname:k([l,e.pathname]),pathnameBase:"/"===e.pathnameBase?l:k([l,e.pathnameBase])}))),r)}(z(n),r)}function z(e){let n=[];return t.Children.forEach(e,(e=>{if(!(0,t.isValidElement)(e))return;if(e.type===t.Fragment)return void n.push.apply(n,z(e.props.children));e.type!==L&&d(!1);let r={caseSensitive:e.props.caseSensitive,element:e.props.element,index:e.props.index,path:e.props.path};e.props.children&&(r.children=z(e.props.children)),n.push(r)})),n}function R(n){let{basename:r,children:s,window:c}=n,f=(0,t.useRef)();null==f.current&&(f.current=function(t){void 0===t&&(t={});var n=t.window,r=void 0===n?document.defaultView:n,s=r.history;function c(){var e=r.location,t=e.pathname,n=e.search,a=e.hash,o=s.state||{};return[o.idx,{pathname:t,search:n,hash:a,state:o.usr||null,key:o.key||"default"}]}var f=null;r.addEventListener("popstate",(function(){if(f)g.call(f),f=null;else{var t=e.Pop,n=c(),r=n[0],a=n[1];if(g.length){if(null!=r){var o=h-r;o&&(f={action:t,location:a,retry:function(){E(-1*o)}},E(o))}}else S(t)}}));var d=e.Pop,p=c(),h=p[0],m=p[1],v=i(),g=i();function y(e){return"string"==typeof e?e:function(e){var t=e.pathname,n=void 0===t?"/":t,r=e.search,a=void 0===r?"":r,o=e.hash,l=void 0===o?"":o;return a&&"?"!==a&&(n+="?"===a.charAt(0)?a:"?"+a),l&&"#"!==l&&(n+="#"===l.charAt(0)?l:"#"+l),n}(e)}function b(e,t){return void 0===t&&(t=null),a({pathname:m.pathname,hash:"",search:""},"string"==typeof e?u(e):e,{state:t,key:Math.random().toString(36).substr(2,8)})}function w(e,t){return[{usr:e.state,key:e.key,idx:t},y(e)]}function k(e,t,n){return!g.length||(g.call({action:e,location:t,retry:n}),!1)}function S(e){d=e;var t=c();h=t[0],m=t[1],v.call({action:d,location:m})}function E(e){s.go(e)}null==h&&(h=0,s.replaceState(a({},s.state,{idx:h}),""));var x={get action(){return d},get location(){return m},createHref:y,push:function t(n,a){var o=e.Push,l=b(n,a);if(k(o,l,(function(){t(n,a)}))){var i=w(l,h+1),u=i[0],c=i[1];try{s.pushState(u,"",c)}catch(e){r.location.assign(c)}S(o)}},replace:function t(n,r){var a=e.Replace,o=b(n,r);if(k(a,o,(function(){t(n,r)}))){var l=w(o,h),i=l[0],u=l[1];s.replaceState(i,"",u),S(a)}},go:E,back:function(){E(-1)},forward:function(){E(1)},listen:function(e){return v.push(e)},block:function(e){var t=g.push(e);return 1===g.length&&r.addEventListener(o,l),function(){t(),g.length||r.removeEventListener(o,l)}}};return x}({window:c}));let d=f.current,[p,h]=(0,t.useState)({action:d.action,location:d.location});return(0,t.useLayoutEffect)((()=>d.listen(h)),[d]),(0,t.createElement)(T,{basename:r,children:s,location:p.location,navigationType:p.action,navigator:d})}function O(e,t,n,r,a,o,l){try{var i=e[o](l),u=i.value}catch(e){return void n(e)}i.done?t(u):Promise.resolve(u).then(r,a)}function A(e){return function(){var t=this,n=arguments;return new Promise((function(r,a){var o=e.apply(t,n);function l(e){O(o,r,a,l,i,"next",e)}function i(e){O(o,r,a,l,i,"throw",e)}l(void 0)}))}}var M=n(757),F=n.n(M);const D=(0,t.createContext)(),j=function(){_();var e=function(){var e=A(F().mark((function e(t){var n,r;return F().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return t.preventDefault(),n={username,password},e.prev=2,e.next=5,fetch("/login",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(n)});case 5:return r=e.sent,e.next=8,r.json();case 8:e.sent,e.next=13;break;case 11:e.prev=11,e.t0=e.catch(2);case 13:case"end":return e.stop()}}),e,null,[[2,11]])})));return function(t){return e.apply(this,arguments)}}();return t.createElement("div",{className:"login"},t.createElement("h1",null,"Login Page"),t.createElement("div",null,t.createElement("form",{onSubmit:e},t.createElement("input",{name:"username",type:"text",placeholder:"username",onChange:function(e){var t=e.target;return setUsername(t.value)}}),t.createElement("input",{name:"password",type:"password",placeholder:"password",onChange:function(e){var t=e.target;return setPassword(t.value)}}),t.createElement("input",{type:"submit",value:"Login"}))))};function U(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}function B(e,t){if(e){if("string"==typeof e)return U(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?U(e,t):void 0}}function V(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,a,o=[],l=!0,i=!1;try{for(n=n.call(e);!(l=(r=n.next()).done)&&(o.push(r.value),!t||o.length!==t);l=!0);}catch(e){i=!0,a=e}finally{try{l||null==n.return||n.return()}finally{if(i)throw a}}return o}}(e,t)||B(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}const $=function(){var e=V(useState(""),2),n=e[0],r=e[1],a=V(useState(""),2),o=a[0],l=a[1],i=V(useState(),2);i[0],i[1],_(),console.log("createUser");var u=function(){var e=A(F().mark((function e(t){var r,a;return F().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return t.preventDefault(),r={username:n,password:o},e.prev=2,e.next=5,fetch("/createuser",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(r)});case 5:return a=e.sent,e.next=8,a.json();case 8:e.sent,e.next=13;break;case 11:e.prev=11,e.t0=e.catch(2);case 13:case"end":return e.stop()}}),e,null,[[2,11]])})));return function(t){return e.apply(this,arguments)}}();return t.createElement("div",{className:"createuser"},t.createElement("h1",null,"Create User Page"),t.createElement("div",null,t.createElement("form",{onSubmit:u},t.createElement("input",{name:"username",type:"text",placeholder:"username",onChange:function(e){var t=e.target;return r(t.value)}}),t.createElement("input",{name:"password",type:"password",placeholder:"password",onChange:function(e){var t=e.target;return l(t.value)}}),t.createElement("input",{name:"state",type:"text",placeholder:"state",onChange:function(e){var t=e.target;return setState(t.value)}}),t.createElement("input",{type:"submit",value:"Create User"}))))},W=function(){var e=_(),n=(0,t.useContext)(D);if(console.log(n),(0,t.useEffect)((function(){n&&e("/userlanding")})),!n)return t.createElement("div",{className:"home"},t.createElement("button",{className:"login-btn",onClick:function(){e("/login")}},"Login"),t.createElement("button",{className:"create-btn",onClick:function(){e("/createuser")}},"Create User"))};function H(e){return function(e){if(Array.isArray(e))return U(e)}(e)||function(e){if("undefined"!=typeof Symbol&&null!=e[Symbol.iterator]||null!=e["@@iterator"])return Array.from(e)}(e)||B(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}const Q=function(e){(0,t.useContext)(D);var n=e.breweryComp,r={};return"state"===n?(r.name=e.name,r.id=e.id,r.brewery_type=e.brewery_type,r.state=e.state,r.city=e.city,r.phone=e.phone,r.street=e.street,r.street=e.street,r.address_2=e.address_2,r.addStateToVisited=e.addStateToVisited):(r.id=e.id,r.usersid=e.usersid,r.breweryname=e.breweryname,r.brewerytype=e.brewerytype,r.brewerystate=e.brewerystate,r.brewerycity=e.brewerycity,r.breweryphone=e.breweryphone,r.removeVisited=e.removeVisited),"state"===n?t.createElement(t.Fragment,null,t.createElement("div",null,t.createElement("span",null,"Name: ",r.name),t.createElement("span",null,"Location: ",r.street),t.createElement("span",null,"Rating: ",r.address_2),t.createElement("button",{onClick:function(e){r.addStateToVisited({id:r.id,name:r.name,brewery_type:r.brewery_type,state:r.state,city:r.city,phone:r.phone})}},"Add to Visited"))):t.createElement(t.Fragment,null,t.createElement("div",null,t.createElement("span",null,"Name: ",r.breweryname),t.createElement("span",null,"State: ",r.brewerystate),t.createElement("span",null,"City: ",r.brewerycity),t.createElement("button",{onClick:function(e){r.removeVisited({id:r.id,name:r.breweryname,brewery_type:r.brewerytype,state:r.brewerystate,city:r.brewerycity,phone:r.breweryphone})}},"Remove")))};var q=n(669),K=n.n(q);const G=function(e){var n=e.stateBreweries,r=e.addStateToVisited,o=n.map((function(e,n){return t.createElement(Q,a({},e,{addStateToVisited:r,breweryComp:"state",uniqueid:"StateBrewery".concat(n),key:"StateBrewery".concat(n)}))}));return t.createElement("div",null,t.createElement("h2",null,"State Breweries"),o)},Y=function(e){var n=e.visBreweries,r=e.removeVisited,o=n.map((function(e,n){return t.createElement(Q,a({},e,{removeVisited:r,breweryComp:"visited",uniqueid:"VisBrewery".concat(n),key:"VisBrewery".concat(n)}))}));return t.createElement("div",null,t.createElement("h2",null,"Visited Breweries"),o)};n(512);const X=function(){var e=V((0,t.useState)(),2),n=e[0],r=e[1],a=V((0,t.useState)(),2),o=a[0],l=a[1],i=(0,t.useContext)(D);(0,t.useEffect)((function(){var e=function(){var e=A(F().mark((function e(){var t;return F().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(!i){e.next=12;break}return e.prev=1,e.next=4,K().get("/api",{params:{state:i.state,id:i.usersid}});case 4:t=e.sent,r(t.data.getBreweries),l(t.data.visited),e.next=12;break;case 9:e.prev=9,e.t0=e.catch(1),console.log(e.t0);case 12:case"end":return e.stop()}}),e,null,[[1,9]])})));return function(){return e.apply(this,arguments)}}();e()}),[]);var u=function(){var e=A(F().mark((function e(t){var n;return F().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,K().post("/visited/add",{addVisited:{breweryid:t.id,breweryname:t.name,brewerytype:t.brewery_type,brewerystate:t.state,brewerycity:t.city,breweryphone:t.phone,userId:i.usersid}});case 2:n=e.sent,l(H(n.data.visited));case 4:case"end":return e.stop()}}),e)})));return function(t){return e.apply(this,arguments)}}(),s=function(){var e=A(F().mark((function e(t){var n;return F().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return console.log("ricky"),console.log("breweryDetails.id: ".concat(t.id)),console.log("breweryDetails.name: ".concat(t.name)),console.log("breweryDetails.type: ".concat(t.brewery_type)),console.log("breweryDetails.state: ".concat(t.state)),console.log("breweryDetails.city: ".concat(t.city)),console.log("breweryDetails.phone: ".concat(t.phone)),e.next=9,K().delete("/visited/delete",{data:{breweryid:t.id,breweryname:t.name,brewerytype:t.brewery_type,brewerystate:t.state,brewerycity:t.city,breweryphone:t.phone,userId:i.usersid}});case 9:n=e.sent,l(H(n.data.visited));case 11:case"end":return e.stop()}}),e)})));return function(t){return e.apply(this,arguments)}}();if(n)return t.createElement("div",{className:"userlanding"},t.createElement(G,{stateBreweries:H(n),addStateToVisited:u}),t.createElement(Y,{visBreweries:H(o),removeVisited:s}))},J=function(e){var n=(0,t.useContext)(D);return t.createElement(t.Fragment,null,t.createElement("header",null,t.createElement("div",{className:"brand"},"FindMyBrews"),t.createElement("ul",{className:"nav_links"},n&&t.createElement("li",null,t.createElement("a",{href:"#"},"Change State")),n&&t.createElement("li",null,t.createElement("a",{href:"#"},"Logout")))))},Z=function(e){return(0,t.useContext)(D),t.createElement(t.Fragment,null,t.createElement("footer",null,t.createElement("h2",null,"FOOTER")))};var ee={name:"Ricky",usersid:2,state:"new_york",favorites:["nyc brew","brew4life"]};const te=function(){return t.createElement(D.Provider,{value:ee},t.createElement(R,null,t.createElement("div",{className:"App"},t.createElement(J,null),t.createElement(I,null,t.createElement(L,{exact:!0,path:"/",element:t.createElement(W,null)}),t.createElement(L,{exact:!0,path:"/login",element:t.createElement(j,null)}),t.createElement(L,{exact:!0,path:"/createuser",element:t.createElement($,null)}),t.createElement(L,{exact:!0,path:"/userlanding",element:t.createElement(X,null)}),t.createElement(L,{path:"*",element:t.createElement(N,{to:"/",replace:!0})})),t.createElement(Z,null))))};var ne=n(379),re=n.n(ne),ae=n(795),oe=n.n(ae),le=n(569),ie=n.n(le),ue=n(565),se=n.n(ue),ce=n(216),fe=n.n(ce),de=n(589),pe=n.n(de),he=n(267),me={};me.styleTagTransform=pe(),me.setAttributes=se(),me.insert=ie().bind(null,"head"),me.domAPI=oe(),me.insertStyleElement=fe(),re()(he.Z,me),he.Z&&he.Z.locals&&he.Z.locals;var ve=document.getElementById("root");r.s(ve).render(t.createElement(te,null))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QUk3QkMsRUFBQUEsRUFBMEJGLElBQ2xDeDhDLE9BQU8sZ0JBQUMsR0FBRCIsInNvdXJjZXMiOlsid2VicGFjazovL2JyZXdlcnktYXBwLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL3JlZ2VuZXJhdG9yL2luZGV4LmpzIiwid2VicGFjazovL2JyZXdlcnktYXBwLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2luZGV4LmpzIiwid2VicGFjazovL2JyZXdlcnktYXBwLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9hZGFwdGVycy94aHIuanMiLCJ3ZWJwYWNrOi8vYnJld2VyeS1hcHAvLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2F4aW9zLmpzIiwid2VicGFjazovL2JyZXdlcnktYXBwLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jYW5jZWwvQ2FuY2VsLmpzIiwid2VicGFjazovL2JyZXdlcnktYXBwLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jYW5jZWwvQ2FuY2VsVG9rZW4uanMiLCJ3ZWJwYWNrOi8vYnJld2VyeS1hcHAvLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NhbmNlbC9pc0NhbmNlbC5qcyIsIndlYnBhY2s6Ly9icmV3ZXJ5LWFwcC8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvY29yZS9BeGlvcy5qcyIsIndlYnBhY2s6Ly9icmV3ZXJ5LWFwcC8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvY29yZS9JbnRlcmNlcHRvck1hbmFnZXIuanMiLCJ3ZWJwYWNrOi8vYnJld2VyeS1hcHAvLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NvcmUvYnVpbGRGdWxsUGF0aC5qcyIsIndlYnBhY2s6Ly9icmV3ZXJ5LWFwcC8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvY29yZS9jcmVhdGVFcnJvci5qcyIsIndlYnBhY2s6Ly9icmV3ZXJ5LWFwcC8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvY29yZS9kaXNwYXRjaFJlcXVlc3QuanMiLCJ3ZWJwYWNrOi8vYnJld2VyeS1hcHAvLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NvcmUvZW5oYW5jZUVycm9yLmpzIiwid2VicGFjazovL2JyZXdlcnktYXBwLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jb3JlL21lcmdlQ29uZmlnLmpzIiwid2VicGFjazovL2JyZXdlcnktYXBwLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jb3JlL3NldHRsZS5qcyIsIndlYnBhY2s6Ly9icmV3ZXJ5LWFwcC8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvY29yZS90cmFuc2Zvcm1EYXRhLmpzIiwid2VicGFjazovL2JyZXdlcnktYXBwLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9kZWZhdWx0cy9pbmRleC5qcyIsIndlYnBhY2s6Ly9icmV3ZXJ5LWFwcC8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvZGVmYXVsdHMvdHJhbnNpdGlvbmFsLmpzIiwid2VicGFjazovL2JyZXdlcnktYXBwLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9lbnYvZGF0YS5qcyIsIndlYnBhY2s6Ly9icmV3ZXJ5LWFwcC8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9iaW5kLmpzIiwid2VicGFjazovL2JyZXdlcnktYXBwLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL2J1aWxkVVJMLmpzIiwid2VicGFjazovL2JyZXdlcnktYXBwLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL2NvbWJpbmVVUkxzLmpzIiwid2VicGFjazovL2JyZXdlcnktYXBwLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL2Nvb2tpZXMuanMiLCJ3ZWJwYWNrOi8vYnJld2VyeS1hcHAvLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvaXNBYnNvbHV0ZVVSTC5qcyIsIndlYnBhY2s6Ly9icmV3ZXJ5LWFwcC8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9pc0F4aW9zRXJyb3IuanMiLCJ3ZWJwYWNrOi8vYnJld2VyeS1hcHAvLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvaXNVUkxTYW1lT3JpZ2luLmpzIiwid2VicGFjazovL2JyZXdlcnktYXBwLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL25vcm1hbGl6ZUhlYWRlck5hbWUuanMiLCJ3ZWJwYWNrOi8vYnJld2VyeS1hcHAvLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvcGFyc2VIZWFkZXJzLmpzIiwid2VicGFjazovL2JyZXdlcnktYXBwLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL3NwcmVhZC5qcyIsIndlYnBhY2s6Ly9icmV3ZXJ5LWFwcC8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy92YWxpZGF0b3IuanMiLCJ3ZWJwYWNrOi8vYnJld2VyeS1hcHAvLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL3V0aWxzLmpzIiwid2VicGFjazovL2JyZXdlcnktYXBwLy4vY2xpZW50L3N0eWxlcy5jc3MiLCJ3ZWJwYWNrOi8vYnJld2VyeS1hcHAvLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzIiwid2VicGFjazovL2JyZXdlcnktYXBwLy4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL3NvdXJjZU1hcHMuanMiLCJ3ZWJwYWNrOi8vYnJld2VyeS1hcHAvLi9ub2RlX21vZHVsZXMvaXBhZGRyLmpzL2xpYi9pcGFkZHIuanMiLCJ3ZWJwYWNrOi8vYnJld2VyeS1hcHAvLi9ub2RlX21vZHVsZXMvcmVhY3QtZG9tL2Nqcy9yZWFjdC1kb20ucHJvZHVjdGlvbi5taW4uanMiLCJ3ZWJwYWNrOi8vYnJld2VyeS1hcHAvLi9ub2RlX21vZHVsZXMvcmVhY3QtZG9tL2NsaWVudC5qcyIsIndlYnBhY2s6Ly9icmV3ZXJ5LWFwcC8uL25vZGVfbW9kdWxlcy9yZWFjdC1kb20vaW5kZXguanMiLCJ3ZWJwYWNrOi8vYnJld2VyeS1hcHAvLi9ub2RlX21vZHVsZXMvcmVhY3QvY2pzL3JlYWN0LnByb2R1Y3Rpb24ubWluLmpzIiwid2VicGFjazovL2JyZXdlcnktYXBwLy4vbm9kZV9tb2R1bGVzL3JlYWN0L2luZGV4LmpzIiwid2VicGFjazovL2JyZXdlcnktYXBwLy4vbm9kZV9tb2R1bGVzL3JlZ2VuZXJhdG9yLXJ1bnRpbWUvcnVudGltZS5qcyIsIndlYnBhY2s6Ly9icmV3ZXJ5LWFwcC8uL25vZGVfbW9kdWxlcy9zY2hlZHVsZXIvY2pzL3NjaGVkdWxlci5wcm9kdWN0aW9uLm1pbi5qcyIsIndlYnBhY2s6Ly9icmV3ZXJ5LWFwcC8uL25vZGVfbW9kdWxlcy9zY2hlZHVsZXIvaW5kZXguanMiLCJ3ZWJwYWNrOi8vYnJld2VyeS1hcHAvLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbmplY3RTdHlsZXNJbnRvU3R5bGVUYWcuanMiLCJ3ZWJwYWNrOi8vYnJld2VyeS1hcHAvLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRCeVNlbGVjdG9yLmpzIiwid2VicGFjazovL2JyZXdlcnktYXBwLy4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0U3R5bGVFbGVtZW50LmpzIiwid2VicGFjazovL2JyZXdlcnktYXBwLy4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc2V0QXR0cmlidXRlc1dpdGhvdXRBdHRyaWJ1dGVzLmpzIiwid2VicGFjazovL2JyZXdlcnktYXBwLy4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVEb21BUEkuanMiLCJ3ZWJwYWNrOi8vYnJld2VyeS1hcHAvLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZVRhZ1RyYW5zZm9ybS5qcyIsIndlYnBhY2s6Ly9icmV3ZXJ5LWFwcC93ZWJwYWNrL2Jvb3RzdHJhcCIsIndlYnBhY2s6Ly9icmV3ZXJ5LWFwcC93ZWJwYWNrL3J1bnRpbWUvY29tcGF0IGdldCBkZWZhdWx0IGV4cG9ydCIsIndlYnBhY2s6Ly9icmV3ZXJ5LWFwcC93ZWJwYWNrL3J1bnRpbWUvZGVmaW5lIHByb3BlcnR5IGdldHRlcnMiLCJ3ZWJwYWNrOi8vYnJld2VyeS1hcHAvd2VicGFjay9ydW50aW1lL2hhc093blByb3BlcnR5IHNob3J0aGFuZCIsIndlYnBhY2s6Ly9icmV3ZXJ5LWFwcC93ZWJwYWNrL3J1bnRpbWUvbm9kZSBtb2R1bGUgZGVjb3JhdG9yIiwid2VicGFjazovL2JyZXdlcnktYXBwLy4vbm9kZV9tb2R1bGVzL2hpc3RvcnkvaW5kZXguanMiLCJ3ZWJwYWNrOi8vYnJld2VyeS1hcHAvLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kcy5qcyIsIndlYnBhY2s6Ly9icmV3ZXJ5LWFwcC8uL25vZGVfbW9kdWxlcy9yZWFjdC1yb3V0ZXIvaW5kZXguanMiLCJ3ZWJwYWNrOi8vYnJld2VyeS1hcHAvLi9ub2RlX21vZHVsZXMvcmVhY3Qtcm91dGVyLWRvbS9pbmRleC5qcyIsIndlYnBhY2s6Ly9icmV3ZXJ5LWFwcC8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9hc3luY1RvR2VuZXJhdG9yLmpzIiwid2VicGFjazovL2JyZXdlcnktYXBwLy4vY2xpZW50L2NvbXBvbmVudHMvVXNlckRldGFpbHMuanN4Iiwid2VicGFjazovL2JyZXdlcnktYXBwLy4vY2xpZW50L2NvbXBvbmVudHMvTG9naW4uanN4Iiwid2VicGFjazovL2JyZXdlcnktYXBwLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2FycmF5TGlrZVRvQXJyYXkuanMiLCJ3ZWJwYWNrOi8vYnJld2VyeS1hcHAvLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vdW5zdXBwb3J0ZWRJdGVyYWJsZVRvQXJyYXkuanMiLCJ3ZWJwYWNrOi8vYnJld2VyeS1hcHAvLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vc2xpY2VkVG9BcnJheS5qcyIsIndlYnBhY2s6Ly9icmV3ZXJ5LWFwcC8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9hcnJheVdpdGhIb2xlcy5qcyIsIndlYnBhY2s6Ly9icmV3ZXJ5LWFwcC8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9pdGVyYWJsZVRvQXJyYXlMaW1pdC5qcyIsIndlYnBhY2s6Ly9icmV3ZXJ5LWFwcC8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9ub25JdGVyYWJsZVJlc3QuanMiLCJ3ZWJwYWNrOi8vYnJld2VyeS1hcHAvLi9jbGllbnQvY29tcG9uZW50cy9DcmVhdGVVc2VyLmpzeCIsIndlYnBhY2s6Ly9icmV3ZXJ5LWFwcC8uL2NsaWVudC9jb21wb25lbnRzL0hvbWUuanN4Iiwid2VicGFjazovL2JyZXdlcnktYXBwLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL3RvQ29uc3VtYWJsZUFycmF5LmpzIiwid2VicGFjazovL2JyZXdlcnktYXBwLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2FycmF5V2l0aG91dEhvbGVzLmpzIiwid2VicGFjazovL2JyZXdlcnktYXBwLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2l0ZXJhYmxlVG9BcnJheS5qcyIsIndlYnBhY2s6Ly9icmV3ZXJ5LWFwcC8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9ub25JdGVyYWJsZVNwcmVhZC5qcyIsIndlYnBhY2s6Ly9icmV3ZXJ5LWFwcC8uL2NsaWVudC9jb21wb25lbnRzL0JyZXdlcnkuanN4Iiwid2VicGFjazovL2JyZXdlcnktYXBwLy4vY2xpZW50L2NvbXBvbmVudHMvU3RhdGVCcmV3ZXJpZXMuanN4Iiwid2VicGFjazovL2JyZXdlcnktYXBwLy4vY2xpZW50L2NvbXBvbmVudHMvVmlzaXRlZEJyZXdlcmllcy5qc3giLCJ3ZWJwYWNrOi8vYnJld2VyeS1hcHAvLi9jbGllbnQvY29tcG9uZW50cy9Vc2VyTGFuZGluZy5qc3giLCJ3ZWJwYWNrOi8vYnJld2VyeS1hcHAvLi9jbGllbnQvY29tcG9uZW50cy9OYXZiYXIuanN4Iiwid2VicGFjazovL2JyZXdlcnktYXBwLy4vY2xpZW50L2NvbXBvbmVudHMvRm9vdGVyLmpzeCIsIndlYnBhY2s6Ly9icmV3ZXJ5LWFwcC8uL2NsaWVudC9jb21wb25lbnRzL0FwcC5qc3giLCJ3ZWJwYWNrOi8vYnJld2VyeS1hcHAvLi9jbGllbnQvc3R5bGVzLmNzcz9mZjY1Iiwid2VicGFjazovL2JyZXdlcnktYXBwLy4vY2xpZW50L2luZGV4LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcInJlZ2VuZXJhdG9yLXJ1bnRpbWVcIik7XG4iLCJtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vbGliL2F4aW9zJyk7IiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLy4uL3V0aWxzJyk7XG52YXIgc2V0dGxlID0gcmVxdWlyZSgnLi8uLi9jb3JlL3NldHRsZScpO1xudmFyIGNvb2tpZXMgPSByZXF1aXJlKCcuLy4uL2hlbHBlcnMvY29va2llcycpO1xudmFyIGJ1aWxkVVJMID0gcmVxdWlyZSgnLi8uLi9oZWxwZXJzL2J1aWxkVVJMJyk7XG52YXIgYnVpbGRGdWxsUGF0aCA9IHJlcXVpcmUoJy4uL2NvcmUvYnVpbGRGdWxsUGF0aCcpO1xudmFyIHBhcnNlSGVhZGVycyA9IHJlcXVpcmUoJy4vLi4vaGVscGVycy9wYXJzZUhlYWRlcnMnKTtcbnZhciBpc1VSTFNhbWVPcmlnaW4gPSByZXF1aXJlKCcuLy4uL2hlbHBlcnMvaXNVUkxTYW1lT3JpZ2luJyk7XG52YXIgY3JlYXRlRXJyb3IgPSByZXF1aXJlKCcuLi9jb3JlL2NyZWF0ZUVycm9yJyk7XG52YXIgdHJhbnNpdGlvbmFsRGVmYXVsdHMgPSByZXF1aXJlKCcuLi9kZWZhdWx0cy90cmFuc2l0aW9uYWwnKTtcbnZhciBDYW5jZWwgPSByZXF1aXJlKCcuLi9jYW5jZWwvQ2FuY2VsJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24geGhyQWRhcHRlcihjb25maWcpIHtcbiAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIGRpc3BhdGNoWGhyUmVxdWVzdChyZXNvbHZlLCByZWplY3QpIHtcbiAgICB2YXIgcmVxdWVzdERhdGEgPSBjb25maWcuZGF0YTtcbiAgICB2YXIgcmVxdWVzdEhlYWRlcnMgPSBjb25maWcuaGVhZGVycztcbiAgICB2YXIgcmVzcG9uc2VUeXBlID0gY29uZmlnLnJlc3BvbnNlVHlwZTtcbiAgICB2YXIgb25DYW5jZWxlZDtcbiAgICBmdW5jdGlvbiBkb25lKCkge1xuICAgICAgaWYgKGNvbmZpZy5jYW5jZWxUb2tlbikge1xuICAgICAgICBjb25maWcuY2FuY2VsVG9rZW4udW5zdWJzY3JpYmUob25DYW5jZWxlZCk7XG4gICAgICB9XG5cbiAgICAgIGlmIChjb25maWcuc2lnbmFsKSB7XG4gICAgICAgIGNvbmZpZy5zaWduYWwucmVtb3ZlRXZlbnRMaXN0ZW5lcignYWJvcnQnLCBvbkNhbmNlbGVkKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAodXRpbHMuaXNGb3JtRGF0YShyZXF1ZXN0RGF0YSkpIHtcbiAgICAgIGRlbGV0ZSByZXF1ZXN0SGVhZGVyc1snQ29udGVudC1UeXBlJ107IC8vIExldCB0aGUgYnJvd3NlciBzZXQgaXRcbiAgICB9XG5cbiAgICB2YXIgcmVxdWVzdCA9IG5ldyBYTUxIdHRwUmVxdWVzdCgpO1xuXG4gICAgLy8gSFRUUCBiYXNpYyBhdXRoZW50aWNhdGlvblxuICAgIGlmIChjb25maWcuYXV0aCkge1xuICAgICAgdmFyIHVzZXJuYW1lID0gY29uZmlnLmF1dGgudXNlcm5hbWUgfHwgJyc7XG4gICAgICB2YXIgcGFzc3dvcmQgPSBjb25maWcuYXV0aC5wYXNzd29yZCA/IHVuZXNjYXBlKGVuY29kZVVSSUNvbXBvbmVudChjb25maWcuYXV0aC5wYXNzd29yZCkpIDogJyc7XG4gICAgICByZXF1ZXN0SGVhZGVycy5BdXRob3JpemF0aW9uID0gJ0Jhc2ljICcgKyBidG9hKHVzZXJuYW1lICsgJzonICsgcGFzc3dvcmQpO1xuICAgIH1cblxuICAgIHZhciBmdWxsUGF0aCA9IGJ1aWxkRnVsbFBhdGgoY29uZmlnLmJhc2VVUkwsIGNvbmZpZy51cmwpO1xuICAgIHJlcXVlc3Qub3Blbihjb25maWcubWV0aG9kLnRvVXBwZXJDYXNlKCksIGJ1aWxkVVJMKGZ1bGxQYXRoLCBjb25maWcucGFyYW1zLCBjb25maWcucGFyYW1zU2VyaWFsaXplciksIHRydWUpO1xuXG4gICAgLy8gU2V0IHRoZSByZXF1ZXN0IHRpbWVvdXQgaW4gTVNcbiAgICByZXF1ZXN0LnRpbWVvdXQgPSBjb25maWcudGltZW91dDtcblxuICAgIGZ1bmN0aW9uIG9ubG9hZGVuZCgpIHtcbiAgICAgIGlmICghcmVxdWVzdCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICAvLyBQcmVwYXJlIHRoZSByZXNwb25zZVxuICAgICAgdmFyIHJlc3BvbnNlSGVhZGVycyA9ICdnZXRBbGxSZXNwb25zZUhlYWRlcnMnIGluIHJlcXVlc3QgPyBwYXJzZUhlYWRlcnMocmVxdWVzdC5nZXRBbGxSZXNwb25zZUhlYWRlcnMoKSkgOiBudWxsO1xuICAgICAgdmFyIHJlc3BvbnNlRGF0YSA9ICFyZXNwb25zZVR5cGUgfHwgcmVzcG9uc2VUeXBlID09PSAndGV4dCcgfHwgIHJlc3BvbnNlVHlwZSA9PT0gJ2pzb24nID9cbiAgICAgICAgcmVxdWVzdC5yZXNwb25zZVRleHQgOiByZXF1ZXN0LnJlc3BvbnNlO1xuICAgICAgdmFyIHJlc3BvbnNlID0ge1xuICAgICAgICBkYXRhOiByZXNwb25zZURhdGEsXG4gICAgICAgIHN0YXR1czogcmVxdWVzdC5zdGF0dXMsXG4gICAgICAgIHN0YXR1c1RleHQ6IHJlcXVlc3Quc3RhdHVzVGV4dCxcbiAgICAgICAgaGVhZGVyczogcmVzcG9uc2VIZWFkZXJzLFxuICAgICAgICBjb25maWc6IGNvbmZpZyxcbiAgICAgICAgcmVxdWVzdDogcmVxdWVzdFxuICAgICAgfTtcblxuICAgICAgc2V0dGxlKGZ1bmN0aW9uIF9yZXNvbHZlKHZhbHVlKSB7XG4gICAgICAgIHJlc29sdmUodmFsdWUpO1xuICAgICAgICBkb25lKCk7XG4gICAgICB9LCBmdW5jdGlvbiBfcmVqZWN0KGVycikge1xuICAgICAgICByZWplY3QoZXJyKTtcbiAgICAgICAgZG9uZSgpO1xuICAgICAgfSwgcmVzcG9uc2UpO1xuXG4gICAgICAvLyBDbGVhbiB1cCByZXF1ZXN0XG4gICAgICByZXF1ZXN0ID0gbnVsbDtcbiAgICB9XG5cbiAgICBpZiAoJ29ubG9hZGVuZCcgaW4gcmVxdWVzdCkge1xuICAgICAgLy8gVXNlIG9ubG9hZGVuZCBpZiBhdmFpbGFibGVcbiAgICAgIHJlcXVlc3Qub25sb2FkZW5kID0gb25sb2FkZW5kO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBMaXN0ZW4gZm9yIHJlYWR5IHN0YXRlIHRvIGVtdWxhdGUgb25sb2FkZW5kXG4gICAgICByZXF1ZXN0Lm9ucmVhZHlzdGF0ZWNoYW5nZSA9IGZ1bmN0aW9uIGhhbmRsZUxvYWQoKSB7XG4gICAgICAgIGlmICghcmVxdWVzdCB8fCByZXF1ZXN0LnJlYWR5U3RhdGUgIT09IDQpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICAvLyBUaGUgcmVxdWVzdCBlcnJvcmVkIG91dCBhbmQgd2UgZGlkbid0IGdldCBhIHJlc3BvbnNlLCB0aGlzIHdpbGwgYmVcbiAgICAgICAgLy8gaGFuZGxlZCBieSBvbmVycm9yIGluc3RlYWRcbiAgICAgICAgLy8gV2l0aCBvbmUgZXhjZXB0aW9uOiByZXF1ZXN0IHRoYXQgdXNpbmcgZmlsZTogcHJvdG9jb2wsIG1vc3QgYnJvd3NlcnNcbiAgICAgICAgLy8gd2lsbCByZXR1cm4gc3RhdHVzIGFzIDAgZXZlbiB0aG91Z2ggaXQncyBhIHN1Y2Nlc3NmdWwgcmVxdWVzdFxuICAgICAgICBpZiAocmVxdWVzdC5zdGF0dXMgPT09IDAgJiYgIShyZXF1ZXN0LnJlc3BvbnNlVVJMICYmIHJlcXVlc3QucmVzcG9uc2VVUkwuaW5kZXhPZignZmlsZTonKSA9PT0gMCkpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgLy8gcmVhZHlzdGF0ZSBoYW5kbGVyIGlzIGNhbGxpbmcgYmVmb3JlIG9uZXJyb3Igb3Igb250aW1lb3V0IGhhbmRsZXJzLFxuICAgICAgICAvLyBzbyB3ZSBzaG91bGQgY2FsbCBvbmxvYWRlbmQgb24gdGhlIG5leHQgJ3RpY2snXG4gICAgICAgIHNldFRpbWVvdXQob25sb2FkZW5kKTtcbiAgICAgIH07XG4gICAgfVxuXG4gICAgLy8gSGFuZGxlIGJyb3dzZXIgcmVxdWVzdCBjYW5jZWxsYXRpb24gKGFzIG9wcG9zZWQgdG8gYSBtYW51YWwgY2FuY2VsbGF0aW9uKVxuICAgIHJlcXVlc3Qub25hYm9ydCA9IGZ1bmN0aW9uIGhhbmRsZUFib3J0KCkge1xuICAgICAgaWYgKCFyZXF1ZXN0KSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgcmVqZWN0KGNyZWF0ZUVycm9yKCdSZXF1ZXN0IGFib3J0ZWQnLCBjb25maWcsICdFQ09OTkFCT1JURUQnLCByZXF1ZXN0KSk7XG5cbiAgICAgIC8vIENsZWFuIHVwIHJlcXVlc3RcbiAgICAgIHJlcXVlc3QgPSBudWxsO1xuICAgIH07XG5cbiAgICAvLyBIYW5kbGUgbG93IGxldmVsIG5ldHdvcmsgZXJyb3JzXG4gICAgcmVxdWVzdC5vbmVycm9yID0gZnVuY3Rpb24gaGFuZGxlRXJyb3IoKSB7XG4gICAgICAvLyBSZWFsIGVycm9ycyBhcmUgaGlkZGVuIGZyb20gdXMgYnkgdGhlIGJyb3dzZXJcbiAgICAgIC8vIG9uZXJyb3Igc2hvdWxkIG9ubHkgZmlyZSBpZiBpdCdzIGEgbmV0d29yayBlcnJvclxuICAgICAgcmVqZWN0KGNyZWF0ZUVycm9yKCdOZXR3b3JrIEVycm9yJywgY29uZmlnLCBudWxsLCByZXF1ZXN0KSk7XG5cbiAgICAgIC8vIENsZWFuIHVwIHJlcXVlc3RcbiAgICAgIHJlcXVlc3QgPSBudWxsO1xuICAgIH07XG5cbiAgICAvLyBIYW5kbGUgdGltZW91dFxuICAgIHJlcXVlc3Qub250aW1lb3V0ID0gZnVuY3Rpb24gaGFuZGxlVGltZW91dCgpIHtcbiAgICAgIHZhciB0aW1lb3V0RXJyb3JNZXNzYWdlID0gY29uZmlnLnRpbWVvdXQgPyAndGltZW91dCBvZiAnICsgY29uZmlnLnRpbWVvdXQgKyAnbXMgZXhjZWVkZWQnIDogJ3RpbWVvdXQgZXhjZWVkZWQnO1xuICAgICAgdmFyIHRyYW5zaXRpb25hbCA9IGNvbmZpZy50cmFuc2l0aW9uYWwgfHwgdHJhbnNpdGlvbmFsRGVmYXVsdHM7XG4gICAgICBpZiAoY29uZmlnLnRpbWVvdXRFcnJvck1lc3NhZ2UpIHtcbiAgICAgICAgdGltZW91dEVycm9yTWVzc2FnZSA9IGNvbmZpZy50aW1lb3V0RXJyb3JNZXNzYWdlO1xuICAgICAgfVxuICAgICAgcmVqZWN0KGNyZWF0ZUVycm9yKFxuICAgICAgICB0aW1lb3V0RXJyb3JNZXNzYWdlLFxuICAgICAgICBjb25maWcsXG4gICAgICAgIHRyYW5zaXRpb25hbC5jbGFyaWZ5VGltZW91dEVycm9yID8gJ0VUSU1FRE9VVCcgOiAnRUNPTk5BQk9SVEVEJyxcbiAgICAgICAgcmVxdWVzdCkpO1xuXG4gICAgICAvLyBDbGVhbiB1cCByZXF1ZXN0XG4gICAgICByZXF1ZXN0ID0gbnVsbDtcbiAgICB9O1xuXG4gICAgLy8gQWRkIHhzcmYgaGVhZGVyXG4gICAgLy8gVGhpcyBpcyBvbmx5IGRvbmUgaWYgcnVubmluZyBpbiBhIHN0YW5kYXJkIGJyb3dzZXIgZW52aXJvbm1lbnQuXG4gICAgLy8gU3BlY2lmaWNhbGx5IG5vdCBpZiB3ZSdyZSBpbiBhIHdlYiB3b3JrZXIsIG9yIHJlYWN0LW5hdGl2ZS5cbiAgICBpZiAodXRpbHMuaXNTdGFuZGFyZEJyb3dzZXJFbnYoKSkge1xuICAgICAgLy8gQWRkIHhzcmYgaGVhZGVyXG4gICAgICB2YXIgeHNyZlZhbHVlID0gKGNvbmZpZy53aXRoQ3JlZGVudGlhbHMgfHwgaXNVUkxTYW1lT3JpZ2luKGZ1bGxQYXRoKSkgJiYgY29uZmlnLnhzcmZDb29raWVOYW1lID9cbiAgICAgICAgY29va2llcy5yZWFkKGNvbmZpZy54c3JmQ29va2llTmFtZSkgOlxuICAgICAgICB1bmRlZmluZWQ7XG5cbiAgICAgIGlmICh4c3JmVmFsdWUpIHtcbiAgICAgICAgcmVxdWVzdEhlYWRlcnNbY29uZmlnLnhzcmZIZWFkZXJOYW1lXSA9IHhzcmZWYWx1ZTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBBZGQgaGVhZGVycyB0byB0aGUgcmVxdWVzdFxuICAgIGlmICgnc2V0UmVxdWVzdEhlYWRlcicgaW4gcmVxdWVzdCkge1xuICAgICAgdXRpbHMuZm9yRWFjaChyZXF1ZXN0SGVhZGVycywgZnVuY3Rpb24gc2V0UmVxdWVzdEhlYWRlcih2YWwsIGtleSkge1xuICAgICAgICBpZiAodHlwZW9mIHJlcXVlc3REYXRhID09PSAndW5kZWZpbmVkJyAmJiBrZXkudG9Mb3dlckNhc2UoKSA9PT0gJ2NvbnRlbnQtdHlwZScpIHtcbiAgICAgICAgICAvLyBSZW1vdmUgQ29udGVudC1UeXBlIGlmIGRhdGEgaXMgdW5kZWZpbmVkXG4gICAgICAgICAgZGVsZXRlIHJlcXVlc3RIZWFkZXJzW2tleV07XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgLy8gT3RoZXJ3aXNlIGFkZCBoZWFkZXIgdG8gdGhlIHJlcXVlc3RcbiAgICAgICAgICByZXF1ZXN0LnNldFJlcXVlc3RIZWFkZXIoa2V5LCB2YWwpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICAvLyBBZGQgd2l0aENyZWRlbnRpYWxzIHRvIHJlcXVlc3QgaWYgbmVlZGVkXG4gICAgaWYgKCF1dGlscy5pc1VuZGVmaW5lZChjb25maWcud2l0aENyZWRlbnRpYWxzKSkge1xuICAgICAgcmVxdWVzdC53aXRoQ3JlZGVudGlhbHMgPSAhIWNvbmZpZy53aXRoQ3JlZGVudGlhbHM7XG4gICAgfVxuXG4gICAgLy8gQWRkIHJlc3BvbnNlVHlwZSB0byByZXF1ZXN0IGlmIG5lZWRlZFxuICAgIGlmIChyZXNwb25zZVR5cGUgJiYgcmVzcG9uc2VUeXBlICE9PSAnanNvbicpIHtcbiAgICAgIHJlcXVlc3QucmVzcG9uc2VUeXBlID0gY29uZmlnLnJlc3BvbnNlVHlwZTtcbiAgICB9XG5cbiAgICAvLyBIYW5kbGUgcHJvZ3Jlc3MgaWYgbmVlZGVkXG4gICAgaWYgKHR5cGVvZiBjb25maWcub25Eb3dubG9hZFByb2dyZXNzID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICByZXF1ZXN0LmFkZEV2ZW50TGlzdGVuZXIoJ3Byb2dyZXNzJywgY29uZmlnLm9uRG93bmxvYWRQcm9ncmVzcyk7XG4gICAgfVxuXG4gICAgLy8gTm90IGFsbCBicm93c2VycyBzdXBwb3J0IHVwbG9hZCBldmVudHNcbiAgICBpZiAodHlwZW9mIGNvbmZpZy5vblVwbG9hZFByb2dyZXNzID09PSAnZnVuY3Rpb24nICYmIHJlcXVlc3QudXBsb2FkKSB7XG4gICAgICByZXF1ZXN0LnVwbG9hZC5hZGRFdmVudExpc3RlbmVyKCdwcm9ncmVzcycsIGNvbmZpZy5vblVwbG9hZFByb2dyZXNzKTtcbiAgICB9XG5cbiAgICBpZiAoY29uZmlnLmNhbmNlbFRva2VuIHx8IGNvbmZpZy5zaWduYWwpIHtcbiAgICAgIC8vIEhhbmRsZSBjYW5jZWxsYXRpb25cbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBmdW5jLW5hbWVzXG4gICAgICBvbkNhbmNlbGVkID0gZnVuY3Rpb24oY2FuY2VsKSB7XG4gICAgICAgIGlmICghcmVxdWVzdCkge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICByZWplY3QoIWNhbmNlbCB8fCAoY2FuY2VsICYmIGNhbmNlbC50eXBlKSA/IG5ldyBDYW5jZWwoJ2NhbmNlbGVkJykgOiBjYW5jZWwpO1xuICAgICAgICByZXF1ZXN0LmFib3J0KCk7XG4gICAgICAgIHJlcXVlc3QgPSBudWxsO1xuICAgICAgfTtcblxuICAgICAgY29uZmlnLmNhbmNlbFRva2VuICYmIGNvbmZpZy5jYW5jZWxUb2tlbi5zdWJzY3JpYmUob25DYW5jZWxlZCk7XG4gICAgICBpZiAoY29uZmlnLnNpZ25hbCkge1xuICAgICAgICBjb25maWcuc2lnbmFsLmFib3J0ZWQgPyBvbkNhbmNlbGVkKCkgOiBjb25maWcuc2lnbmFsLmFkZEV2ZW50TGlzdGVuZXIoJ2Fib3J0Jywgb25DYW5jZWxlZCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKCFyZXF1ZXN0RGF0YSkge1xuICAgICAgcmVxdWVzdERhdGEgPSBudWxsO1xuICAgIH1cblxuICAgIC8vIFNlbmQgdGhlIHJlcXVlc3RcbiAgICByZXF1ZXN0LnNlbmQocmVxdWVzdERhdGEpO1xuICB9KTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vdXRpbHMnKTtcbnZhciBiaW5kID0gcmVxdWlyZSgnLi9oZWxwZXJzL2JpbmQnKTtcbnZhciBBeGlvcyA9IHJlcXVpcmUoJy4vY29yZS9BeGlvcycpO1xudmFyIG1lcmdlQ29uZmlnID0gcmVxdWlyZSgnLi9jb3JlL21lcmdlQ29uZmlnJyk7XG52YXIgZGVmYXVsdHMgPSByZXF1aXJlKCcuL2RlZmF1bHRzJyk7XG5cbi8qKlxuICogQ3JlYXRlIGFuIGluc3RhbmNlIG9mIEF4aW9zXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IGRlZmF1bHRDb25maWcgVGhlIGRlZmF1bHQgY29uZmlnIGZvciB0aGUgaW5zdGFuY2VcbiAqIEByZXR1cm4ge0F4aW9zfSBBIG5ldyBpbnN0YW5jZSBvZiBBeGlvc1xuICovXG5mdW5jdGlvbiBjcmVhdGVJbnN0YW5jZShkZWZhdWx0Q29uZmlnKSB7XG4gIHZhciBjb250ZXh0ID0gbmV3IEF4aW9zKGRlZmF1bHRDb25maWcpO1xuICB2YXIgaW5zdGFuY2UgPSBiaW5kKEF4aW9zLnByb3RvdHlwZS5yZXF1ZXN0LCBjb250ZXh0KTtcblxuICAvLyBDb3B5IGF4aW9zLnByb3RvdHlwZSB0byBpbnN0YW5jZVxuICB1dGlscy5leHRlbmQoaW5zdGFuY2UsIEF4aW9zLnByb3RvdHlwZSwgY29udGV4dCk7XG5cbiAgLy8gQ29weSBjb250ZXh0IHRvIGluc3RhbmNlXG4gIHV0aWxzLmV4dGVuZChpbnN0YW5jZSwgY29udGV4dCk7XG5cbiAgLy8gRmFjdG9yeSBmb3IgY3JlYXRpbmcgbmV3IGluc3RhbmNlc1xuICBpbnN0YW5jZS5jcmVhdGUgPSBmdW5jdGlvbiBjcmVhdGUoaW5zdGFuY2VDb25maWcpIHtcbiAgICByZXR1cm4gY3JlYXRlSW5zdGFuY2UobWVyZ2VDb25maWcoZGVmYXVsdENvbmZpZywgaW5zdGFuY2VDb25maWcpKTtcbiAgfTtcblxuICByZXR1cm4gaW5zdGFuY2U7XG59XG5cbi8vIENyZWF0ZSB0aGUgZGVmYXVsdCBpbnN0YW5jZSB0byBiZSBleHBvcnRlZFxudmFyIGF4aW9zID0gY3JlYXRlSW5zdGFuY2UoZGVmYXVsdHMpO1xuXG4vLyBFeHBvc2UgQXhpb3MgY2xhc3MgdG8gYWxsb3cgY2xhc3MgaW5oZXJpdGFuY2VcbmF4aW9zLkF4aW9zID0gQXhpb3M7XG5cbi8vIEV4cG9zZSBDYW5jZWwgJiBDYW5jZWxUb2tlblxuYXhpb3MuQ2FuY2VsID0gcmVxdWlyZSgnLi9jYW5jZWwvQ2FuY2VsJyk7XG5heGlvcy5DYW5jZWxUb2tlbiA9IHJlcXVpcmUoJy4vY2FuY2VsL0NhbmNlbFRva2VuJyk7XG5heGlvcy5pc0NhbmNlbCA9IHJlcXVpcmUoJy4vY2FuY2VsL2lzQ2FuY2VsJyk7XG5heGlvcy5WRVJTSU9OID0gcmVxdWlyZSgnLi9lbnYvZGF0YScpLnZlcnNpb247XG5cbi8vIEV4cG9zZSBhbGwvc3ByZWFkXG5heGlvcy5hbGwgPSBmdW5jdGlvbiBhbGwocHJvbWlzZXMpIHtcbiAgcmV0dXJuIFByb21pc2UuYWxsKHByb21pc2VzKTtcbn07XG5heGlvcy5zcHJlYWQgPSByZXF1aXJlKCcuL2hlbHBlcnMvc3ByZWFkJyk7XG5cbi8vIEV4cG9zZSBpc0F4aW9zRXJyb3JcbmF4aW9zLmlzQXhpb3NFcnJvciA9IHJlcXVpcmUoJy4vaGVscGVycy9pc0F4aW9zRXJyb3InKTtcblxubW9kdWxlLmV4cG9ydHMgPSBheGlvcztcblxuLy8gQWxsb3cgdXNlIG9mIGRlZmF1bHQgaW1wb3J0IHN5bnRheCBpbiBUeXBlU2NyaXB0XG5tb2R1bGUuZXhwb3J0cy5kZWZhdWx0ID0gYXhpb3M7XG4iLCIndXNlIHN0cmljdCc7XG5cbi8qKlxuICogQSBgQ2FuY2VsYCBpcyBhbiBvYmplY3QgdGhhdCBpcyB0aHJvd24gd2hlbiBhbiBvcGVyYXRpb24gaXMgY2FuY2VsZWQuXG4gKlxuICogQGNsYXNzXG4gKiBAcGFyYW0ge3N0cmluZz19IG1lc3NhZ2UgVGhlIG1lc3NhZ2UuXG4gKi9cbmZ1bmN0aW9uIENhbmNlbChtZXNzYWdlKSB7XG4gIHRoaXMubWVzc2FnZSA9IG1lc3NhZ2U7XG59XG5cbkNhbmNlbC5wcm90b3R5cGUudG9TdHJpbmcgPSBmdW5jdGlvbiB0b1N0cmluZygpIHtcbiAgcmV0dXJuICdDYW5jZWwnICsgKHRoaXMubWVzc2FnZSA/ICc6ICcgKyB0aGlzLm1lc3NhZ2UgOiAnJyk7XG59O1xuXG5DYW5jZWwucHJvdG90eXBlLl9fQ0FOQ0VMX18gPSB0cnVlO1xuXG5tb2R1bGUuZXhwb3J0cyA9IENhbmNlbDtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIENhbmNlbCA9IHJlcXVpcmUoJy4vQ2FuY2VsJyk7XG5cbi8qKlxuICogQSBgQ2FuY2VsVG9rZW5gIGlzIGFuIG9iamVjdCB0aGF0IGNhbiBiZSB1c2VkIHRvIHJlcXVlc3QgY2FuY2VsbGF0aW9uIG9mIGFuIG9wZXJhdGlvbi5cbiAqXG4gKiBAY2xhc3NcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGV4ZWN1dG9yIFRoZSBleGVjdXRvciBmdW5jdGlvbi5cbiAqL1xuZnVuY3Rpb24gQ2FuY2VsVG9rZW4oZXhlY3V0b3IpIHtcbiAgaWYgKHR5cGVvZiBleGVjdXRvciAhPT0gJ2Z1bmN0aW9uJykge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ2V4ZWN1dG9yIG11c3QgYmUgYSBmdW5jdGlvbi4nKTtcbiAgfVxuXG4gIHZhciByZXNvbHZlUHJvbWlzZTtcblxuICB0aGlzLnByb21pc2UgPSBuZXcgUHJvbWlzZShmdW5jdGlvbiBwcm9taXNlRXhlY3V0b3IocmVzb2x2ZSkge1xuICAgIHJlc29sdmVQcm9taXNlID0gcmVzb2x2ZTtcbiAgfSk7XG5cbiAgdmFyIHRva2VuID0gdGhpcztcblxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZnVuYy1uYW1lc1xuICB0aGlzLnByb21pc2UudGhlbihmdW5jdGlvbihjYW5jZWwpIHtcbiAgICBpZiAoIXRva2VuLl9saXN0ZW5lcnMpIHJldHVybjtcblxuICAgIHZhciBpO1xuICAgIHZhciBsID0gdG9rZW4uX2xpc3RlbmVycy5sZW5ndGg7XG5cbiAgICBmb3IgKGkgPSAwOyBpIDwgbDsgaSsrKSB7XG4gICAgICB0b2tlbi5fbGlzdGVuZXJzW2ldKGNhbmNlbCk7XG4gICAgfVxuICAgIHRva2VuLl9saXN0ZW5lcnMgPSBudWxsO1xuICB9KTtcblxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZnVuYy1uYW1lc1xuICB0aGlzLnByb21pc2UudGhlbiA9IGZ1bmN0aW9uKG9uZnVsZmlsbGVkKSB7XG4gICAgdmFyIF9yZXNvbHZlO1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBmdW5jLW5hbWVzXG4gICAgdmFyIHByb21pc2UgPSBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlKSB7XG4gICAgICB0b2tlbi5zdWJzY3JpYmUocmVzb2x2ZSk7XG4gICAgICBfcmVzb2x2ZSA9IHJlc29sdmU7XG4gICAgfSkudGhlbihvbmZ1bGZpbGxlZCk7XG5cbiAgICBwcm9taXNlLmNhbmNlbCA9IGZ1bmN0aW9uIHJlamVjdCgpIHtcbiAgICAgIHRva2VuLnVuc3Vic2NyaWJlKF9yZXNvbHZlKTtcbiAgICB9O1xuXG4gICAgcmV0dXJuIHByb21pc2U7XG4gIH07XG5cbiAgZXhlY3V0b3IoZnVuY3Rpb24gY2FuY2VsKG1lc3NhZ2UpIHtcbiAgICBpZiAodG9rZW4ucmVhc29uKSB7XG4gICAgICAvLyBDYW5jZWxsYXRpb24gaGFzIGFscmVhZHkgYmVlbiByZXF1ZXN0ZWRcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB0b2tlbi5yZWFzb24gPSBuZXcgQ2FuY2VsKG1lc3NhZ2UpO1xuICAgIHJlc29sdmVQcm9taXNlKHRva2VuLnJlYXNvbik7XG4gIH0pO1xufVxuXG4vKipcbiAqIFRocm93cyBhIGBDYW5jZWxgIGlmIGNhbmNlbGxhdGlvbiBoYXMgYmVlbiByZXF1ZXN0ZWQuXG4gKi9cbkNhbmNlbFRva2VuLnByb3RvdHlwZS50aHJvd0lmUmVxdWVzdGVkID0gZnVuY3Rpb24gdGhyb3dJZlJlcXVlc3RlZCgpIHtcbiAgaWYgKHRoaXMucmVhc29uKSB7XG4gICAgdGhyb3cgdGhpcy5yZWFzb247XG4gIH1cbn07XG5cbi8qKlxuICogU3Vic2NyaWJlIHRvIHRoZSBjYW5jZWwgc2lnbmFsXG4gKi9cblxuQ2FuY2VsVG9rZW4ucHJvdG90eXBlLnN1YnNjcmliZSA9IGZ1bmN0aW9uIHN1YnNjcmliZShsaXN0ZW5lcikge1xuICBpZiAodGhpcy5yZWFzb24pIHtcbiAgICBsaXN0ZW5lcih0aGlzLnJlYXNvbik7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgaWYgKHRoaXMuX2xpc3RlbmVycykge1xuICAgIHRoaXMuX2xpc3RlbmVycy5wdXNoKGxpc3RlbmVyKTtcbiAgfSBlbHNlIHtcbiAgICB0aGlzLl9saXN0ZW5lcnMgPSBbbGlzdGVuZXJdO1xuICB9XG59O1xuXG4vKipcbiAqIFVuc3Vic2NyaWJlIGZyb20gdGhlIGNhbmNlbCBzaWduYWxcbiAqL1xuXG5DYW5jZWxUb2tlbi5wcm90b3R5cGUudW5zdWJzY3JpYmUgPSBmdW5jdGlvbiB1bnN1YnNjcmliZShsaXN0ZW5lcikge1xuICBpZiAoIXRoaXMuX2xpc3RlbmVycykge1xuICAgIHJldHVybjtcbiAgfVxuICB2YXIgaW5kZXggPSB0aGlzLl9saXN0ZW5lcnMuaW5kZXhPZihsaXN0ZW5lcik7XG4gIGlmIChpbmRleCAhPT0gLTEpIHtcbiAgICB0aGlzLl9saXN0ZW5lcnMuc3BsaWNlKGluZGV4LCAxKTtcbiAgfVxufTtcblxuLyoqXG4gKiBSZXR1cm5zIGFuIG9iamVjdCB0aGF0IGNvbnRhaW5zIGEgbmV3IGBDYW5jZWxUb2tlbmAgYW5kIGEgZnVuY3Rpb24gdGhhdCwgd2hlbiBjYWxsZWQsXG4gKiBjYW5jZWxzIHRoZSBgQ2FuY2VsVG9rZW5gLlxuICovXG5DYW5jZWxUb2tlbi5zb3VyY2UgPSBmdW5jdGlvbiBzb3VyY2UoKSB7XG4gIHZhciBjYW5jZWw7XG4gIHZhciB0b2tlbiA9IG5ldyBDYW5jZWxUb2tlbihmdW5jdGlvbiBleGVjdXRvcihjKSB7XG4gICAgY2FuY2VsID0gYztcbiAgfSk7XG4gIHJldHVybiB7XG4gICAgdG9rZW46IHRva2VuLFxuICAgIGNhbmNlbDogY2FuY2VsXG4gIH07XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IENhbmNlbFRva2VuO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGlzQ2FuY2VsKHZhbHVlKSB7XG4gIHJldHVybiAhISh2YWx1ZSAmJiB2YWx1ZS5fX0NBTkNFTF9fKTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vLi4vdXRpbHMnKTtcbnZhciBidWlsZFVSTCA9IHJlcXVpcmUoJy4uL2hlbHBlcnMvYnVpbGRVUkwnKTtcbnZhciBJbnRlcmNlcHRvck1hbmFnZXIgPSByZXF1aXJlKCcuL0ludGVyY2VwdG9yTWFuYWdlcicpO1xudmFyIGRpc3BhdGNoUmVxdWVzdCA9IHJlcXVpcmUoJy4vZGlzcGF0Y2hSZXF1ZXN0Jyk7XG52YXIgbWVyZ2VDb25maWcgPSByZXF1aXJlKCcuL21lcmdlQ29uZmlnJyk7XG52YXIgdmFsaWRhdG9yID0gcmVxdWlyZSgnLi4vaGVscGVycy92YWxpZGF0b3InKTtcblxudmFyIHZhbGlkYXRvcnMgPSB2YWxpZGF0b3IudmFsaWRhdG9ycztcbi8qKlxuICogQ3JlYXRlIGEgbmV3IGluc3RhbmNlIG9mIEF4aW9zXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IGluc3RhbmNlQ29uZmlnIFRoZSBkZWZhdWx0IGNvbmZpZyBmb3IgdGhlIGluc3RhbmNlXG4gKi9cbmZ1bmN0aW9uIEF4aW9zKGluc3RhbmNlQ29uZmlnKSB7XG4gIHRoaXMuZGVmYXVsdHMgPSBpbnN0YW5jZUNvbmZpZztcbiAgdGhpcy5pbnRlcmNlcHRvcnMgPSB7XG4gICAgcmVxdWVzdDogbmV3IEludGVyY2VwdG9yTWFuYWdlcigpLFxuICAgIHJlc3BvbnNlOiBuZXcgSW50ZXJjZXB0b3JNYW5hZ2VyKClcbiAgfTtcbn1cblxuLyoqXG4gKiBEaXNwYXRjaCBhIHJlcXVlc3RcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gY29uZmlnIFRoZSBjb25maWcgc3BlY2lmaWMgZm9yIHRoaXMgcmVxdWVzdCAobWVyZ2VkIHdpdGggdGhpcy5kZWZhdWx0cylcbiAqL1xuQXhpb3MucHJvdG90eXBlLnJlcXVlc3QgPSBmdW5jdGlvbiByZXF1ZXN0KGNvbmZpZ09yVXJsLCBjb25maWcpIHtcbiAgLyplc2xpbnQgbm8tcGFyYW0tcmVhc3NpZ246MCovXG4gIC8vIEFsbG93IGZvciBheGlvcygnZXhhbXBsZS91cmwnWywgY29uZmlnXSkgYSBsYSBmZXRjaCBBUElcbiAgaWYgKHR5cGVvZiBjb25maWdPclVybCA9PT0gJ3N0cmluZycpIHtcbiAgICBjb25maWcgPSBjb25maWcgfHwge307XG4gICAgY29uZmlnLnVybCA9IGNvbmZpZ09yVXJsO1xuICB9IGVsc2Uge1xuICAgIGNvbmZpZyA9IGNvbmZpZ09yVXJsIHx8IHt9O1xuICB9XG5cbiAgY29uZmlnID0gbWVyZ2VDb25maWcodGhpcy5kZWZhdWx0cywgY29uZmlnKTtcblxuICAvLyBTZXQgY29uZmlnLm1ldGhvZFxuICBpZiAoY29uZmlnLm1ldGhvZCkge1xuICAgIGNvbmZpZy5tZXRob2QgPSBjb25maWcubWV0aG9kLnRvTG93ZXJDYXNlKCk7XG4gIH0gZWxzZSBpZiAodGhpcy5kZWZhdWx0cy5tZXRob2QpIHtcbiAgICBjb25maWcubWV0aG9kID0gdGhpcy5kZWZhdWx0cy5tZXRob2QudG9Mb3dlckNhc2UoKTtcbiAgfSBlbHNlIHtcbiAgICBjb25maWcubWV0aG9kID0gJ2dldCc7XG4gIH1cblxuICB2YXIgdHJhbnNpdGlvbmFsID0gY29uZmlnLnRyYW5zaXRpb25hbDtcblxuICBpZiAodHJhbnNpdGlvbmFsICE9PSB1bmRlZmluZWQpIHtcbiAgICB2YWxpZGF0b3IuYXNzZXJ0T3B0aW9ucyh0cmFuc2l0aW9uYWwsIHtcbiAgICAgIHNpbGVudEpTT05QYXJzaW5nOiB2YWxpZGF0b3JzLnRyYW5zaXRpb25hbCh2YWxpZGF0b3JzLmJvb2xlYW4pLFxuICAgICAgZm9yY2VkSlNPTlBhcnNpbmc6IHZhbGlkYXRvcnMudHJhbnNpdGlvbmFsKHZhbGlkYXRvcnMuYm9vbGVhbiksXG4gICAgICBjbGFyaWZ5VGltZW91dEVycm9yOiB2YWxpZGF0b3JzLnRyYW5zaXRpb25hbCh2YWxpZGF0b3JzLmJvb2xlYW4pXG4gICAgfSwgZmFsc2UpO1xuICB9XG5cbiAgLy8gZmlsdGVyIG91dCBza2lwcGVkIGludGVyY2VwdG9yc1xuICB2YXIgcmVxdWVzdEludGVyY2VwdG9yQ2hhaW4gPSBbXTtcbiAgdmFyIHN5bmNocm9ub3VzUmVxdWVzdEludGVyY2VwdG9ycyA9IHRydWU7XG4gIHRoaXMuaW50ZXJjZXB0b3JzLnJlcXVlc3QuZm9yRWFjaChmdW5jdGlvbiB1bnNoaWZ0UmVxdWVzdEludGVyY2VwdG9ycyhpbnRlcmNlcHRvcikge1xuICAgIGlmICh0eXBlb2YgaW50ZXJjZXB0b3IucnVuV2hlbiA9PT0gJ2Z1bmN0aW9uJyAmJiBpbnRlcmNlcHRvci5ydW5XaGVuKGNvbmZpZykgPT09IGZhbHNlKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgc3luY2hyb25vdXNSZXF1ZXN0SW50ZXJjZXB0b3JzID0gc3luY2hyb25vdXNSZXF1ZXN0SW50ZXJjZXB0b3JzICYmIGludGVyY2VwdG9yLnN5bmNocm9ub3VzO1xuXG4gICAgcmVxdWVzdEludGVyY2VwdG9yQ2hhaW4udW5zaGlmdChpbnRlcmNlcHRvci5mdWxmaWxsZWQsIGludGVyY2VwdG9yLnJlamVjdGVkKTtcbiAgfSk7XG5cbiAgdmFyIHJlc3BvbnNlSW50ZXJjZXB0b3JDaGFpbiA9IFtdO1xuICB0aGlzLmludGVyY2VwdG9ycy5yZXNwb25zZS5mb3JFYWNoKGZ1bmN0aW9uIHB1c2hSZXNwb25zZUludGVyY2VwdG9ycyhpbnRlcmNlcHRvcikge1xuICAgIHJlc3BvbnNlSW50ZXJjZXB0b3JDaGFpbi5wdXNoKGludGVyY2VwdG9yLmZ1bGZpbGxlZCwgaW50ZXJjZXB0b3IucmVqZWN0ZWQpO1xuICB9KTtcblxuICB2YXIgcHJvbWlzZTtcblxuICBpZiAoIXN5bmNocm9ub3VzUmVxdWVzdEludGVyY2VwdG9ycykge1xuICAgIHZhciBjaGFpbiA9IFtkaXNwYXRjaFJlcXVlc3QsIHVuZGVmaW5lZF07XG5cbiAgICBBcnJheS5wcm90b3R5cGUudW5zaGlmdC5hcHBseShjaGFpbiwgcmVxdWVzdEludGVyY2VwdG9yQ2hhaW4pO1xuICAgIGNoYWluID0gY2hhaW4uY29uY2F0KHJlc3BvbnNlSW50ZXJjZXB0b3JDaGFpbik7XG5cbiAgICBwcm9taXNlID0gUHJvbWlzZS5yZXNvbHZlKGNvbmZpZyk7XG4gICAgd2hpbGUgKGNoYWluLmxlbmd0aCkge1xuICAgICAgcHJvbWlzZSA9IHByb21pc2UudGhlbihjaGFpbi5zaGlmdCgpLCBjaGFpbi5zaGlmdCgpKTtcbiAgICB9XG5cbiAgICByZXR1cm4gcHJvbWlzZTtcbiAgfVxuXG5cbiAgdmFyIG5ld0NvbmZpZyA9IGNvbmZpZztcbiAgd2hpbGUgKHJlcXVlc3RJbnRlcmNlcHRvckNoYWluLmxlbmd0aCkge1xuICAgIHZhciBvbkZ1bGZpbGxlZCA9IHJlcXVlc3RJbnRlcmNlcHRvckNoYWluLnNoaWZ0KCk7XG4gICAgdmFyIG9uUmVqZWN0ZWQgPSByZXF1ZXN0SW50ZXJjZXB0b3JDaGFpbi5zaGlmdCgpO1xuICAgIHRyeSB7XG4gICAgICBuZXdDb25maWcgPSBvbkZ1bGZpbGxlZChuZXdDb25maWcpO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICBvblJlamVjdGVkKGVycm9yKTtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxuXG4gIHRyeSB7XG4gICAgcHJvbWlzZSA9IGRpc3BhdGNoUmVxdWVzdChuZXdDb25maWcpO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIHJldHVybiBQcm9taXNlLnJlamVjdChlcnJvcik7XG4gIH1cblxuICB3aGlsZSAocmVzcG9uc2VJbnRlcmNlcHRvckNoYWluLmxlbmd0aCkge1xuICAgIHByb21pc2UgPSBwcm9taXNlLnRoZW4ocmVzcG9uc2VJbnRlcmNlcHRvckNoYWluLnNoaWZ0KCksIHJlc3BvbnNlSW50ZXJjZXB0b3JDaGFpbi5zaGlmdCgpKTtcbiAgfVxuXG4gIHJldHVybiBwcm9taXNlO1xufTtcblxuQXhpb3MucHJvdG90eXBlLmdldFVyaSA9IGZ1bmN0aW9uIGdldFVyaShjb25maWcpIHtcbiAgY29uZmlnID0gbWVyZ2VDb25maWcodGhpcy5kZWZhdWx0cywgY29uZmlnKTtcbiAgcmV0dXJuIGJ1aWxkVVJMKGNvbmZpZy51cmwsIGNvbmZpZy5wYXJhbXMsIGNvbmZpZy5wYXJhbXNTZXJpYWxpemVyKS5yZXBsYWNlKC9eXFw/LywgJycpO1xufTtcblxuLy8gUHJvdmlkZSBhbGlhc2VzIGZvciBzdXBwb3J0ZWQgcmVxdWVzdCBtZXRob2RzXG51dGlscy5mb3JFYWNoKFsnZGVsZXRlJywgJ2dldCcsICdoZWFkJywgJ29wdGlvbnMnXSwgZnVuY3Rpb24gZm9yRWFjaE1ldGhvZE5vRGF0YShtZXRob2QpIHtcbiAgLyplc2xpbnQgZnVuYy1uYW1lczowKi9cbiAgQXhpb3MucHJvdG90eXBlW21ldGhvZF0gPSBmdW5jdGlvbih1cmwsIGNvbmZpZykge1xuICAgIHJldHVybiB0aGlzLnJlcXVlc3QobWVyZ2VDb25maWcoY29uZmlnIHx8IHt9LCB7XG4gICAgICBtZXRob2Q6IG1ldGhvZCxcbiAgICAgIHVybDogdXJsLFxuICAgICAgZGF0YTogKGNvbmZpZyB8fCB7fSkuZGF0YVxuICAgIH0pKTtcbiAgfTtcbn0pO1xuXG51dGlscy5mb3JFYWNoKFsncG9zdCcsICdwdXQnLCAncGF0Y2gnXSwgZnVuY3Rpb24gZm9yRWFjaE1ldGhvZFdpdGhEYXRhKG1ldGhvZCkge1xuICAvKmVzbGludCBmdW5jLW5hbWVzOjAqL1xuICBBeGlvcy5wcm90b3R5cGVbbWV0aG9kXSA9IGZ1bmN0aW9uKHVybCwgZGF0YSwgY29uZmlnKSB7XG4gICAgcmV0dXJuIHRoaXMucmVxdWVzdChtZXJnZUNvbmZpZyhjb25maWcgfHwge30sIHtcbiAgICAgIG1ldGhvZDogbWV0aG9kLFxuICAgICAgdXJsOiB1cmwsXG4gICAgICBkYXRhOiBkYXRhXG4gICAgfSkpO1xuICB9O1xufSk7XG5cbm1vZHVsZS5leHBvcnRzID0gQXhpb3M7XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vLi4vdXRpbHMnKTtcblxuZnVuY3Rpb24gSW50ZXJjZXB0b3JNYW5hZ2VyKCkge1xuICB0aGlzLmhhbmRsZXJzID0gW107XG59XG5cbi8qKlxuICogQWRkIGEgbmV3IGludGVyY2VwdG9yIHRvIHRoZSBzdGFja1xuICpcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bGZpbGxlZCBUaGUgZnVuY3Rpb24gdG8gaGFuZGxlIGB0aGVuYCBmb3IgYSBgUHJvbWlzZWBcbiAqIEBwYXJhbSB7RnVuY3Rpb259IHJlamVjdGVkIFRoZSBmdW5jdGlvbiB0byBoYW5kbGUgYHJlamVjdGAgZm9yIGEgYFByb21pc2VgXG4gKlxuICogQHJldHVybiB7TnVtYmVyfSBBbiBJRCB1c2VkIHRvIHJlbW92ZSBpbnRlcmNlcHRvciBsYXRlclxuICovXG5JbnRlcmNlcHRvck1hbmFnZXIucHJvdG90eXBlLnVzZSA9IGZ1bmN0aW9uIHVzZShmdWxmaWxsZWQsIHJlamVjdGVkLCBvcHRpb25zKSB7XG4gIHRoaXMuaGFuZGxlcnMucHVzaCh7XG4gICAgZnVsZmlsbGVkOiBmdWxmaWxsZWQsXG4gICAgcmVqZWN0ZWQ6IHJlamVjdGVkLFxuICAgIHN5bmNocm9ub3VzOiBvcHRpb25zID8gb3B0aW9ucy5zeW5jaHJvbm91cyA6IGZhbHNlLFxuICAgIHJ1bldoZW46IG9wdGlvbnMgPyBvcHRpb25zLnJ1bldoZW4gOiBudWxsXG4gIH0pO1xuICByZXR1cm4gdGhpcy5oYW5kbGVycy5sZW5ndGggLSAxO1xufTtcblxuLyoqXG4gKiBSZW1vdmUgYW4gaW50ZXJjZXB0b3IgZnJvbSB0aGUgc3RhY2tcbiAqXG4gKiBAcGFyYW0ge051bWJlcn0gaWQgVGhlIElEIHRoYXQgd2FzIHJldHVybmVkIGJ5IGB1c2VgXG4gKi9cbkludGVyY2VwdG9yTWFuYWdlci5wcm90b3R5cGUuZWplY3QgPSBmdW5jdGlvbiBlamVjdChpZCkge1xuICBpZiAodGhpcy5oYW5kbGVyc1tpZF0pIHtcbiAgICB0aGlzLmhhbmRsZXJzW2lkXSA9IG51bGw7XG4gIH1cbn07XG5cbi8qKlxuICogSXRlcmF0ZSBvdmVyIGFsbCB0aGUgcmVnaXN0ZXJlZCBpbnRlcmNlcHRvcnNcbiAqXG4gKiBUaGlzIG1ldGhvZCBpcyBwYXJ0aWN1bGFybHkgdXNlZnVsIGZvciBza2lwcGluZyBvdmVyIGFueVxuICogaW50ZXJjZXB0b3JzIHRoYXQgbWF5IGhhdmUgYmVjb21lIGBudWxsYCBjYWxsaW5nIGBlamVjdGAuXG4gKlxuICogQHBhcmFtIHtGdW5jdGlvbn0gZm4gVGhlIGZ1bmN0aW9uIHRvIGNhbGwgZm9yIGVhY2ggaW50ZXJjZXB0b3JcbiAqL1xuSW50ZXJjZXB0b3JNYW5hZ2VyLnByb3RvdHlwZS5mb3JFYWNoID0gZnVuY3Rpb24gZm9yRWFjaChmbikge1xuICB1dGlscy5mb3JFYWNoKHRoaXMuaGFuZGxlcnMsIGZ1bmN0aW9uIGZvckVhY2hIYW5kbGVyKGgpIHtcbiAgICBpZiAoaCAhPT0gbnVsbCkge1xuICAgICAgZm4oaCk7XG4gICAgfVxuICB9KTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gSW50ZXJjZXB0b3JNYW5hZ2VyO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgaXNBYnNvbHV0ZVVSTCA9IHJlcXVpcmUoJy4uL2hlbHBlcnMvaXNBYnNvbHV0ZVVSTCcpO1xudmFyIGNvbWJpbmVVUkxzID0gcmVxdWlyZSgnLi4vaGVscGVycy9jb21iaW5lVVJMcycpO1xuXG4vKipcbiAqIENyZWF0ZXMgYSBuZXcgVVJMIGJ5IGNvbWJpbmluZyB0aGUgYmFzZVVSTCB3aXRoIHRoZSByZXF1ZXN0ZWRVUkwsXG4gKiBvbmx5IHdoZW4gdGhlIHJlcXVlc3RlZFVSTCBpcyBub3QgYWxyZWFkeSBhbiBhYnNvbHV0ZSBVUkwuXG4gKiBJZiB0aGUgcmVxdWVzdFVSTCBpcyBhYnNvbHV0ZSwgdGhpcyBmdW5jdGlvbiByZXR1cm5zIHRoZSByZXF1ZXN0ZWRVUkwgdW50b3VjaGVkLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBiYXNlVVJMIFRoZSBiYXNlIFVSTFxuICogQHBhcmFtIHtzdHJpbmd9IHJlcXVlc3RlZFVSTCBBYnNvbHV0ZSBvciByZWxhdGl2ZSBVUkwgdG8gY29tYmluZVxuICogQHJldHVybnMge3N0cmluZ30gVGhlIGNvbWJpbmVkIGZ1bGwgcGF0aFxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGJ1aWxkRnVsbFBhdGgoYmFzZVVSTCwgcmVxdWVzdGVkVVJMKSB7XG4gIGlmIChiYXNlVVJMICYmICFpc0Fic29sdXRlVVJMKHJlcXVlc3RlZFVSTCkpIHtcbiAgICByZXR1cm4gY29tYmluZVVSTHMoYmFzZVVSTCwgcmVxdWVzdGVkVVJMKTtcbiAgfVxuICByZXR1cm4gcmVxdWVzdGVkVVJMO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIGVuaGFuY2VFcnJvciA9IHJlcXVpcmUoJy4vZW5oYW5jZUVycm9yJyk7XG5cbi8qKlxuICogQ3JlYXRlIGFuIEVycm9yIHdpdGggdGhlIHNwZWNpZmllZCBtZXNzYWdlLCBjb25maWcsIGVycm9yIGNvZGUsIHJlcXVlc3QgYW5kIHJlc3BvbnNlLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBtZXNzYWdlIFRoZSBlcnJvciBtZXNzYWdlLlxuICogQHBhcmFtIHtPYmplY3R9IGNvbmZpZyBUaGUgY29uZmlnLlxuICogQHBhcmFtIHtzdHJpbmd9IFtjb2RlXSBUaGUgZXJyb3IgY29kZSAoZm9yIGV4YW1wbGUsICdFQ09OTkFCT1JURUQnKS5cbiAqIEBwYXJhbSB7T2JqZWN0fSBbcmVxdWVzdF0gVGhlIHJlcXVlc3QuXG4gKiBAcGFyYW0ge09iamVjdH0gW3Jlc3BvbnNlXSBUaGUgcmVzcG9uc2UuXG4gKiBAcmV0dXJucyB7RXJyb3J9IFRoZSBjcmVhdGVkIGVycm9yLlxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGNyZWF0ZUVycm9yKG1lc3NhZ2UsIGNvbmZpZywgY29kZSwgcmVxdWVzdCwgcmVzcG9uc2UpIHtcbiAgdmFyIGVycm9yID0gbmV3IEVycm9yKG1lc3NhZ2UpO1xuICByZXR1cm4gZW5oYW5jZUVycm9yKGVycm9yLCBjb25maWcsIGNvZGUsIHJlcXVlc3QsIHJlc3BvbnNlKTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vLi4vdXRpbHMnKTtcbnZhciB0cmFuc2Zvcm1EYXRhID0gcmVxdWlyZSgnLi90cmFuc2Zvcm1EYXRhJyk7XG52YXIgaXNDYW5jZWwgPSByZXF1aXJlKCcuLi9jYW5jZWwvaXNDYW5jZWwnKTtcbnZhciBkZWZhdWx0cyA9IHJlcXVpcmUoJy4uL2RlZmF1bHRzJyk7XG52YXIgQ2FuY2VsID0gcmVxdWlyZSgnLi4vY2FuY2VsL0NhbmNlbCcpO1xuXG4vKipcbiAqIFRocm93cyBhIGBDYW5jZWxgIGlmIGNhbmNlbGxhdGlvbiBoYXMgYmVlbiByZXF1ZXN0ZWQuXG4gKi9cbmZ1bmN0aW9uIHRocm93SWZDYW5jZWxsYXRpb25SZXF1ZXN0ZWQoY29uZmlnKSB7XG4gIGlmIChjb25maWcuY2FuY2VsVG9rZW4pIHtcbiAgICBjb25maWcuY2FuY2VsVG9rZW4udGhyb3dJZlJlcXVlc3RlZCgpO1xuICB9XG5cbiAgaWYgKGNvbmZpZy5zaWduYWwgJiYgY29uZmlnLnNpZ25hbC5hYm9ydGVkKSB7XG4gICAgdGhyb3cgbmV3IENhbmNlbCgnY2FuY2VsZWQnKTtcbiAgfVxufVxuXG4vKipcbiAqIERpc3BhdGNoIGEgcmVxdWVzdCB0byB0aGUgc2VydmVyIHVzaW5nIHRoZSBjb25maWd1cmVkIGFkYXB0ZXIuXG4gKlxuICogQHBhcmFtIHtvYmplY3R9IGNvbmZpZyBUaGUgY29uZmlnIHRoYXQgaXMgdG8gYmUgdXNlZCBmb3IgdGhlIHJlcXVlc3RcbiAqIEByZXR1cm5zIHtQcm9taXNlfSBUaGUgUHJvbWlzZSB0byBiZSBmdWxmaWxsZWRcbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBkaXNwYXRjaFJlcXVlc3QoY29uZmlnKSB7XG4gIHRocm93SWZDYW5jZWxsYXRpb25SZXF1ZXN0ZWQoY29uZmlnKTtcblxuICAvLyBFbnN1cmUgaGVhZGVycyBleGlzdFxuICBjb25maWcuaGVhZGVycyA9IGNvbmZpZy5oZWFkZXJzIHx8IHt9O1xuXG4gIC8vIFRyYW5zZm9ybSByZXF1ZXN0IGRhdGFcbiAgY29uZmlnLmRhdGEgPSB0cmFuc2Zvcm1EYXRhLmNhbGwoXG4gICAgY29uZmlnLFxuICAgIGNvbmZpZy5kYXRhLFxuICAgIGNvbmZpZy5oZWFkZXJzLFxuICAgIGNvbmZpZy50cmFuc2Zvcm1SZXF1ZXN0XG4gICk7XG5cbiAgLy8gRmxhdHRlbiBoZWFkZXJzXG4gIGNvbmZpZy5oZWFkZXJzID0gdXRpbHMubWVyZ2UoXG4gICAgY29uZmlnLmhlYWRlcnMuY29tbW9uIHx8IHt9LFxuICAgIGNvbmZpZy5oZWFkZXJzW2NvbmZpZy5tZXRob2RdIHx8IHt9LFxuICAgIGNvbmZpZy5oZWFkZXJzXG4gICk7XG5cbiAgdXRpbHMuZm9yRWFjaChcbiAgICBbJ2RlbGV0ZScsICdnZXQnLCAnaGVhZCcsICdwb3N0JywgJ3B1dCcsICdwYXRjaCcsICdjb21tb24nXSxcbiAgICBmdW5jdGlvbiBjbGVhbkhlYWRlckNvbmZpZyhtZXRob2QpIHtcbiAgICAgIGRlbGV0ZSBjb25maWcuaGVhZGVyc1ttZXRob2RdO1xuICAgIH1cbiAgKTtcblxuICB2YXIgYWRhcHRlciA9IGNvbmZpZy5hZGFwdGVyIHx8IGRlZmF1bHRzLmFkYXB0ZXI7XG5cbiAgcmV0dXJuIGFkYXB0ZXIoY29uZmlnKS50aGVuKGZ1bmN0aW9uIG9uQWRhcHRlclJlc29sdXRpb24ocmVzcG9uc2UpIHtcbiAgICB0aHJvd0lmQ2FuY2VsbGF0aW9uUmVxdWVzdGVkKGNvbmZpZyk7XG5cbiAgICAvLyBUcmFuc2Zvcm0gcmVzcG9uc2UgZGF0YVxuICAgIHJlc3BvbnNlLmRhdGEgPSB0cmFuc2Zvcm1EYXRhLmNhbGwoXG4gICAgICBjb25maWcsXG4gICAgICByZXNwb25zZS5kYXRhLFxuICAgICAgcmVzcG9uc2UuaGVhZGVycyxcbiAgICAgIGNvbmZpZy50cmFuc2Zvcm1SZXNwb25zZVxuICAgICk7XG5cbiAgICByZXR1cm4gcmVzcG9uc2U7XG4gIH0sIGZ1bmN0aW9uIG9uQWRhcHRlclJlamVjdGlvbihyZWFzb24pIHtcbiAgICBpZiAoIWlzQ2FuY2VsKHJlYXNvbikpIHtcbiAgICAgIHRocm93SWZDYW5jZWxsYXRpb25SZXF1ZXN0ZWQoY29uZmlnKTtcblxuICAgICAgLy8gVHJhbnNmb3JtIHJlc3BvbnNlIGRhdGFcbiAgICAgIGlmIChyZWFzb24gJiYgcmVhc29uLnJlc3BvbnNlKSB7XG4gICAgICAgIHJlYXNvbi5yZXNwb25zZS5kYXRhID0gdHJhbnNmb3JtRGF0YS5jYWxsKFxuICAgICAgICAgIGNvbmZpZyxcbiAgICAgICAgICByZWFzb24ucmVzcG9uc2UuZGF0YSxcbiAgICAgICAgICByZWFzb24ucmVzcG9uc2UuaGVhZGVycyxcbiAgICAgICAgICBjb25maWcudHJhbnNmb3JtUmVzcG9uc2VcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QocmVhc29uKTtcbiAgfSk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIFVwZGF0ZSBhbiBFcnJvciB3aXRoIHRoZSBzcGVjaWZpZWQgY29uZmlnLCBlcnJvciBjb2RlLCBhbmQgcmVzcG9uc2UuXG4gKlxuICogQHBhcmFtIHtFcnJvcn0gZXJyb3IgVGhlIGVycm9yIHRvIHVwZGF0ZS5cbiAqIEBwYXJhbSB7T2JqZWN0fSBjb25maWcgVGhlIGNvbmZpZy5cbiAqIEBwYXJhbSB7c3RyaW5nfSBbY29kZV0gVGhlIGVycm9yIGNvZGUgKGZvciBleGFtcGxlLCAnRUNPTk5BQk9SVEVEJykuXG4gKiBAcGFyYW0ge09iamVjdH0gW3JlcXVlc3RdIFRoZSByZXF1ZXN0LlxuICogQHBhcmFtIHtPYmplY3R9IFtyZXNwb25zZV0gVGhlIHJlc3BvbnNlLlxuICogQHJldHVybnMge0Vycm9yfSBUaGUgZXJyb3IuXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gZW5oYW5jZUVycm9yKGVycm9yLCBjb25maWcsIGNvZGUsIHJlcXVlc3QsIHJlc3BvbnNlKSB7XG4gIGVycm9yLmNvbmZpZyA9IGNvbmZpZztcbiAgaWYgKGNvZGUpIHtcbiAgICBlcnJvci5jb2RlID0gY29kZTtcbiAgfVxuXG4gIGVycm9yLnJlcXVlc3QgPSByZXF1ZXN0O1xuICBlcnJvci5yZXNwb25zZSA9IHJlc3BvbnNlO1xuICBlcnJvci5pc0F4aW9zRXJyb3IgPSB0cnVlO1xuXG4gIGVycm9yLnRvSlNPTiA9IGZ1bmN0aW9uIHRvSlNPTigpIHtcbiAgICByZXR1cm4ge1xuICAgICAgLy8gU3RhbmRhcmRcbiAgICAgIG1lc3NhZ2U6IHRoaXMubWVzc2FnZSxcbiAgICAgIG5hbWU6IHRoaXMubmFtZSxcbiAgICAgIC8vIE1pY3Jvc29mdFxuICAgICAgZGVzY3JpcHRpb246IHRoaXMuZGVzY3JpcHRpb24sXG4gICAgICBudW1iZXI6IHRoaXMubnVtYmVyLFxuICAgICAgLy8gTW96aWxsYVxuICAgICAgZmlsZU5hbWU6IHRoaXMuZmlsZU5hbWUsXG4gICAgICBsaW5lTnVtYmVyOiB0aGlzLmxpbmVOdW1iZXIsXG4gICAgICBjb2x1bW5OdW1iZXI6IHRoaXMuY29sdW1uTnVtYmVyLFxuICAgICAgc3RhY2s6IHRoaXMuc3RhY2ssXG4gICAgICAvLyBBeGlvc1xuICAgICAgY29uZmlnOiB0aGlzLmNvbmZpZyxcbiAgICAgIGNvZGU6IHRoaXMuY29kZSxcbiAgICAgIHN0YXR1czogdGhpcy5yZXNwb25zZSAmJiB0aGlzLnJlc3BvbnNlLnN0YXR1cyA/IHRoaXMucmVzcG9uc2Uuc3RhdHVzIDogbnVsbFxuICAgIH07XG4gIH07XG4gIHJldHVybiBlcnJvcjtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4uL3V0aWxzJyk7XG5cbi8qKlxuICogQ29uZmlnLXNwZWNpZmljIG1lcmdlLWZ1bmN0aW9uIHdoaWNoIGNyZWF0ZXMgYSBuZXcgY29uZmlnLW9iamVjdFxuICogYnkgbWVyZ2luZyB0d28gY29uZmlndXJhdGlvbiBvYmplY3RzIHRvZ2V0aGVyLlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBjb25maWcxXG4gKiBAcGFyYW0ge09iamVjdH0gY29uZmlnMlxuICogQHJldHVybnMge09iamVjdH0gTmV3IG9iamVjdCByZXN1bHRpbmcgZnJvbSBtZXJnaW5nIGNvbmZpZzIgdG8gY29uZmlnMVxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIG1lcmdlQ29uZmlnKGNvbmZpZzEsIGNvbmZpZzIpIHtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXBhcmFtLXJlYXNzaWduXG4gIGNvbmZpZzIgPSBjb25maWcyIHx8IHt9O1xuICB2YXIgY29uZmlnID0ge307XG5cbiAgZnVuY3Rpb24gZ2V0TWVyZ2VkVmFsdWUodGFyZ2V0LCBzb3VyY2UpIHtcbiAgICBpZiAodXRpbHMuaXNQbGFpbk9iamVjdCh0YXJnZXQpICYmIHV0aWxzLmlzUGxhaW5PYmplY3Qoc291cmNlKSkge1xuICAgICAgcmV0dXJuIHV0aWxzLm1lcmdlKHRhcmdldCwgc291cmNlKTtcbiAgICB9IGVsc2UgaWYgKHV0aWxzLmlzUGxhaW5PYmplY3Qoc291cmNlKSkge1xuICAgICAgcmV0dXJuIHV0aWxzLm1lcmdlKHt9LCBzb3VyY2UpO1xuICAgIH0gZWxzZSBpZiAodXRpbHMuaXNBcnJheShzb3VyY2UpKSB7XG4gICAgICByZXR1cm4gc291cmNlLnNsaWNlKCk7XG4gICAgfVxuICAgIHJldHVybiBzb3VyY2U7XG4gIH1cblxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgY29uc2lzdGVudC1yZXR1cm5cbiAgZnVuY3Rpb24gbWVyZ2VEZWVwUHJvcGVydGllcyhwcm9wKSB7XG4gICAgaWYgKCF1dGlscy5pc1VuZGVmaW5lZChjb25maWcyW3Byb3BdKSkge1xuICAgICAgcmV0dXJuIGdldE1lcmdlZFZhbHVlKGNvbmZpZzFbcHJvcF0sIGNvbmZpZzJbcHJvcF0pO1xuICAgIH0gZWxzZSBpZiAoIXV0aWxzLmlzVW5kZWZpbmVkKGNvbmZpZzFbcHJvcF0pKSB7XG4gICAgICByZXR1cm4gZ2V0TWVyZ2VkVmFsdWUodW5kZWZpbmVkLCBjb25maWcxW3Byb3BdKTtcbiAgICB9XG4gIH1cblxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgY29uc2lzdGVudC1yZXR1cm5cbiAgZnVuY3Rpb24gdmFsdWVGcm9tQ29uZmlnMihwcm9wKSB7XG4gICAgaWYgKCF1dGlscy5pc1VuZGVmaW5lZChjb25maWcyW3Byb3BdKSkge1xuICAgICAgcmV0dXJuIGdldE1lcmdlZFZhbHVlKHVuZGVmaW5lZCwgY29uZmlnMltwcm9wXSk7XG4gICAgfVxuICB9XG5cbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGNvbnNpc3RlbnQtcmV0dXJuXG4gIGZ1bmN0aW9uIGRlZmF1bHRUb0NvbmZpZzIocHJvcCkge1xuICAgIGlmICghdXRpbHMuaXNVbmRlZmluZWQoY29uZmlnMltwcm9wXSkpIHtcbiAgICAgIHJldHVybiBnZXRNZXJnZWRWYWx1ZSh1bmRlZmluZWQsIGNvbmZpZzJbcHJvcF0pO1xuICAgIH0gZWxzZSBpZiAoIXV0aWxzLmlzVW5kZWZpbmVkKGNvbmZpZzFbcHJvcF0pKSB7XG4gICAgICByZXR1cm4gZ2V0TWVyZ2VkVmFsdWUodW5kZWZpbmVkLCBjb25maWcxW3Byb3BdKTtcbiAgICB9XG4gIH1cblxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgY29uc2lzdGVudC1yZXR1cm5cbiAgZnVuY3Rpb24gbWVyZ2VEaXJlY3RLZXlzKHByb3ApIHtcbiAgICBpZiAocHJvcCBpbiBjb25maWcyKSB7XG4gICAgICByZXR1cm4gZ2V0TWVyZ2VkVmFsdWUoY29uZmlnMVtwcm9wXSwgY29uZmlnMltwcm9wXSk7XG4gICAgfSBlbHNlIGlmIChwcm9wIGluIGNvbmZpZzEpIHtcbiAgICAgIHJldHVybiBnZXRNZXJnZWRWYWx1ZSh1bmRlZmluZWQsIGNvbmZpZzFbcHJvcF0pO1xuICAgIH1cbiAgfVxuXG4gIHZhciBtZXJnZU1hcCA9IHtcbiAgICAndXJsJzogdmFsdWVGcm9tQ29uZmlnMixcbiAgICAnbWV0aG9kJzogdmFsdWVGcm9tQ29uZmlnMixcbiAgICAnZGF0YSc6IHZhbHVlRnJvbUNvbmZpZzIsXG4gICAgJ2Jhc2VVUkwnOiBkZWZhdWx0VG9Db25maWcyLFxuICAgICd0cmFuc2Zvcm1SZXF1ZXN0JzogZGVmYXVsdFRvQ29uZmlnMixcbiAgICAndHJhbnNmb3JtUmVzcG9uc2UnOiBkZWZhdWx0VG9Db25maWcyLFxuICAgICdwYXJhbXNTZXJpYWxpemVyJzogZGVmYXVsdFRvQ29uZmlnMixcbiAgICAndGltZW91dCc6IGRlZmF1bHRUb0NvbmZpZzIsXG4gICAgJ3RpbWVvdXRNZXNzYWdlJzogZGVmYXVsdFRvQ29uZmlnMixcbiAgICAnd2l0aENyZWRlbnRpYWxzJzogZGVmYXVsdFRvQ29uZmlnMixcbiAgICAnYWRhcHRlcic6IGRlZmF1bHRUb0NvbmZpZzIsXG4gICAgJ3Jlc3BvbnNlVHlwZSc6IGRlZmF1bHRUb0NvbmZpZzIsXG4gICAgJ3hzcmZDb29raWVOYW1lJzogZGVmYXVsdFRvQ29uZmlnMixcbiAgICAneHNyZkhlYWRlck5hbWUnOiBkZWZhdWx0VG9Db25maWcyLFxuICAgICdvblVwbG9hZFByb2dyZXNzJzogZGVmYXVsdFRvQ29uZmlnMixcbiAgICAnb25Eb3dubG9hZFByb2dyZXNzJzogZGVmYXVsdFRvQ29uZmlnMixcbiAgICAnZGVjb21wcmVzcyc6IGRlZmF1bHRUb0NvbmZpZzIsXG4gICAgJ21heENvbnRlbnRMZW5ndGgnOiBkZWZhdWx0VG9Db25maWcyLFxuICAgICdtYXhCb2R5TGVuZ3RoJzogZGVmYXVsdFRvQ29uZmlnMixcbiAgICAndHJhbnNwb3J0JzogZGVmYXVsdFRvQ29uZmlnMixcbiAgICAnaHR0cEFnZW50JzogZGVmYXVsdFRvQ29uZmlnMixcbiAgICAnaHR0cHNBZ2VudCc6IGRlZmF1bHRUb0NvbmZpZzIsXG4gICAgJ2NhbmNlbFRva2VuJzogZGVmYXVsdFRvQ29uZmlnMixcbiAgICAnc29ja2V0UGF0aCc6IGRlZmF1bHRUb0NvbmZpZzIsXG4gICAgJ3Jlc3BvbnNlRW5jb2RpbmcnOiBkZWZhdWx0VG9Db25maWcyLFxuICAgICd2YWxpZGF0ZVN0YXR1cyc6IG1lcmdlRGlyZWN0S2V5c1xuICB9O1xuXG4gIHV0aWxzLmZvckVhY2goT2JqZWN0LmtleXMoY29uZmlnMSkuY29uY2F0KE9iamVjdC5rZXlzKGNvbmZpZzIpKSwgZnVuY3Rpb24gY29tcHV0ZUNvbmZpZ1ZhbHVlKHByb3ApIHtcbiAgICB2YXIgbWVyZ2UgPSBtZXJnZU1hcFtwcm9wXSB8fCBtZXJnZURlZXBQcm9wZXJ0aWVzO1xuICAgIHZhciBjb25maWdWYWx1ZSA9IG1lcmdlKHByb3ApO1xuICAgICh1dGlscy5pc1VuZGVmaW5lZChjb25maWdWYWx1ZSkgJiYgbWVyZ2UgIT09IG1lcmdlRGlyZWN0S2V5cykgfHwgKGNvbmZpZ1twcm9wXSA9IGNvbmZpZ1ZhbHVlKTtcbiAgfSk7XG5cbiAgcmV0dXJuIGNvbmZpZztcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBjcmVhdGVFcnJvciA9IHJlcXVpcmUoJy4vY3JlYXRlRXJyb3InKTtcblxuLyoqXG4gKiBSZXNvbHZlIG9yIHJlamVjdCBhIFByb21pc2UgYmFzZWQgb24gcmVzcG9uc2Ugc3RhdHVzLlxuICpcbiAqIEBwYXJhbSB7RnVuY3Rpb259IHJlc29sdmUgQSBmdW5jdGlvbiB0aGF0IHJlc29sdmVzIHRoZSBwcm9taXNlLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gcmVqZWN0IEEgZnVuY3Rpb24gdGhhdCByZWplY3RzIHRoZSBwcm9taXNlLlxuICogQHBhcmFtIHtvYmplY3R9IHJlc3BvbnNlIFRoZSByZXNwb25zZS5cbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBzZXR0bGUocmVzb2x2ZSwgcmVqZWN0LCByZXNwb25zZSkge1xuICB2YXIgdmFsaWRhdGVTdGF0dXMgPSByZXNwb25zZS5jb25maWcudmFsaWRhdGVTdGF0dXM7XG4gIGlmICghcmVzcG9uc2Uuc3RhdHVzIHx8ICF2YWxpZGF0ZVN0YXR1cyB8fCB2YWxpZGF0ZVN0YXR1cyhyZXNwb25zZS5zdGF0dXMpKSB7XG4gICAgcmVzb2x2ZShyZXNwb25zZSk7XG4gIH0gZWxzZSB7XG4gICAgcmVqZWN0KGNyZWF0ZUVycm9yKFxuICAgICAgJ1JlcXVlc3QgZmFpbGVkIHdpdGggc3RhdHVzIGNvZGUgJyArIHJlc3BvbnNlLnN0YXR1cyxcbiAgICAgIHJlc3BvbnNlLmNvbmZpZyxcbiAgICAgIG51bGwsXG4gICAgICByZXNwb25zZS5yZXF1ZXN0LFxuICAgICAgcmVzcG9uc2VcbiAgICApKTtcbiAgfVxufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi8uLi91dGlscycpO1xudmFyIGRlZmF1bHRzID0gcmVxdWlyZSgnLi4vZGVmYXVsdHMnKTtcblxuLyoqXG4gKiBUcmFuc2Zvcm0gdGhlIGRhdGEgZm9yIGEgcmVxdWVzdCBvciBhIHJlc3BvbnNlXG4gKlxuICogQHBhcmFtIHtPYmplY3R8U3RyaW5nfSBkYXRhIFRoZSBkYXRhIHRvIGJlIHRyYW5zZm9ybWVkXG4gKiBAcGFyYW0ge0FycmF5fSBoZWFkZXJzIFRoZSBoZWFkZXJzIGZvciB0aGUgcmVxdWVzdCBvciByZXNwb25zZVxuICogQHBhcmFtIHtBcnJheXxGdW5jdGlvbn0gZm5zIEEgc2luZ2xlIGZ1bmN0aW9uIG9yIEFycmF5IG9mIGZ1bmN0aW9uc1xuICogQHJldHVybnMgeyp9IFRoZSByZXN1bHRpbmcgdHJhbnNmb3JtZWQgZGF0YVxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIHRyYW5zZm9ybURhdGEoZGF0YSwgaGVhZGVycywgZm5zKSB7XG4gIHZhciBjb250ZXh0ID0gdGhpcyB8fCBkZWZhdWx0cztcbiAgLyplc2xpbnQgbm8tcGFyYW0tcmVhc3NpZ246MCovXG4gIHV0aWxzLmZvckVhY2goZm5zLCBmdW5jdGlvbiB0cmFuc2Zvcm0oZm4pIHtcbiAgICBkYXRhID0gZm4uY2FsbChjb250ZXh0LCBkYXRhLCBoZWFkZXJzKTtcbiAgfSk7XG5cbiAgcmV0dXJuIGRhdGE7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLi91dGlscycpO1xudmFyIG5vcm1hbGl6ZUhlYWRlck5hbWUgPSByZXF1aXJlKCcuLi9oZWxwZXJzL25vcm1hbGl6ZUhlYWRlck5hbWUnKTtcbnZhciBlbmhhbmNlRXJyb3IgPSByZXF1aXJlKCcuLi9jb3JlL2VuaGFuY2VFcnJvcicpO1xudmFyIHRyYW5zaXRpb25hbERlZmF1bHRzID0gcmVxdWlyZSgnLi90cmFuc2l0aW9uYWwnKTtcblxudmFyIERFRkFVTFRfQ09OVEVOVF9UWVBFID0ge1xuICAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZCdcbn07XG5cbmZ1bmN0aW9uIHNldENvbnRlbnRUeXBlSWZVbnNldChoZWFkZXJzLCB2YWx1ZSkge1xuICBpZiAoIXV0aWxzLmlzVW5kZWZpbmVkKGhlYWRlcnMpICYmIHV0aWxzLmlzVW5kZWZpbmVkKGhlYWRlcnNbJ0NvbnRlbnQtVHlwZSddKSkge1xuICAgIGhlYWRlcnNbJ0NvbnRlbnQtVHlwZSddID0gdmFsdWU7XG4gIH1cbn1cblxuZnVuY3Rpb24gZ2V0RGVmYXVsdEFkYXB0ZXIoKSB7XG4gIHZhciBhZGFwdGVyO1xuICBpZiAodHlwZW9mIFhNTEh0dHBSZXF1ZXN0ICE9PSAndW5kZWZpbmVkJykge1xuICAgIC8vIEZvciBicm93c2VycyB1c2UgWEhSIGFkYXB0ZXJcbiAgICBhZGFwdGVyID0gcmVxdWlyZSgnLi4vYWRhcHRlcnMveGhyJyk7XG4gIH0gZWxzZSBpZiAodHlwZW9mIHByb2Nlc3MgIT09ICd1bmRlZmluZWQnICYmIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChwcm9jZXNzKSA9PT0gJ1tvYmplY3QgcHJvY2Vzc10nKSB7XG4gICAgLy8gRm9yIG5vZGUgdXNlIEhUVFAgYWRhcHRlclxuICAgIGFkYXB0ZXIgPSByZXF1aXJlKCcuLi9hZGFwdGVycy9odHRwJyk7XG4gIH1cbiAgcmV0dXJuIGFkYXB0ZXI7XG59XG5cbmZ1bmN0aW9uIHN0cmluZ2lmeVNhZmVseShyYXdWYWx1ZSwgcGFyc2VyLCBlbmNvZGVyKSB7XG4gIGlmICh1dGlscy5pc1N0cmluZyhyYXdWYWx1ZSkpIHtcbiAgICB0cnkge1xuICAgICAgKHBhcnNlciB8fCBKU09OLnBhcnNlKShyYXdWYWx1ZSk7XG4gICAgICByZXR1cm4gdXRpbHMudHJpbShyYXdWYWx1ZSk7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgaWYgKGUubmFtZSAhPT0gJ1N5bnRheEVycm9yJykge1xuICAgICAgICB0aHJvdyBlO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiAoZW5jb2RlciB8fCBKU09OLnN0cmluZ2lmeSkocmF3VmFsdWUpO1xufVxuXG52YXIgZGVmYXVsdHMgPSB7XG5cbiAgdHJhbnNpdGlvbmFsOiB0cmFuc2l0aW9uYWxEZWZhdWx0cyxcblxuICBhZGFwdGVyOiBnZXREZWZhdWx0QWRhcHRlcigpLFxuXG4gIHRyYW5zZm9ybVJlcXVlc3Q6IFtmdW5jdGlvbiB0cmFuc2Zvcm1SZXF1ZXN0KGRhdGEsIGhlYWRlcnMpIHtcbiAgICBub3JtYWxpemVIZWFkZXJOYW1lKGhlYWRlcnMsICdBY2NlcHQnKTtcbiAgICBub3JtYWxpemVIZWFkZXJOYW1lKGhlYWRlcnMsICdDb250ZW50LVR5cGUnKTtcblxuICAgIGlmICh1dGlscy5pc0Zvcm1EYXRhKGRhdGEpIHx8XG4gICAgICB1dGlscy5pc0FycmF5QnVmZmVyKGRhdGEpIHx8XG4gICAgICB1dGlscy5pc0J1ZmZlcihkYXRhKSB8fFxuICAgICAgdXRpbHMuaXNTdHJlYW0oZGF0YSkgfHxcbiAgICAgIHV0aWxzLmlzRmlsZShkYXRhKSB8fFxuICAgICAgdXRpbHMuaXNCbG9iKGRhdGEpXG4gICAgKSB7XG4gICAgICByZXR1cm4gZGF0YTtcbiAgICB9XG4gICAgaWYgKHV0aWxzLmlzQXJyYXlCdWZmZXJWaWV3KGRhdGEpKSB7XG4gICAgICByZXR1cm4gZGF0YS5idWZmZXI7XG4gICAgfVxuICAgIGlmICh1dGlscy5pc1VSTFNlYXJjaFBhcmFtcyhkYXRhKSkge1xuICAgICAgc2V0Q29udGVudFR5cGVJZlVuc2V0KGhlYWRlcnMsICdhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQ7Y2hhcnNldD11dGYtOCcpO1xuICAgICAgcmV0dXJuIGRhdGEudG9TdHJpbmcoKTtcbiAgICB9XG4gICAgaWYgKHV0aWxzLmlzT2JqZWN0KGRhdGEpIHx8IChoZWFkZXJzICYmIGhlYWRlcnNbJ0NvbnRlbnQtVHlwZSddID09PSAnYXBwbGljYXRpb24vanNvbicpKSB7XG4gICAgICBzZXRDb250ZW50VHlwZUlmVW5zZXQoaGVhZGVycywgJ2FwcGxpY2F0aW9uL2pzb24nKTtcbiAgICAgIHJldHVybiBzdHJpbmdpZnlTYWZlbHkoZGF0YSk7XG4gICAgfVxuICAgIHJldHVybiBkYXRhO1xuICB9XSxcblxuICB0cmFuc2Zvcm1SZXNwb25zZTogW2Z1bmN0aW9uIHRyYW5zZm9ybVJlc3BvbnNlKGRhdGEpIHtcbiAgICB2YXIgdHJhbnNpdGlvbmFsID0gdGhpcy50cmFuc2l0aW9uYWwgfHwgZGVmYXVsdHMudHJhbnNpdGlvbmFsO1xuICAgIHZhciBzaWxlbnRKU09OUGFyc2luZyA9IHRyYW5zaXRpb25hbCAmJiB0cmFuc2l0aW9uYWwuc2lsZW50SlNPTlBhcnNpbmc7XG4gICAgdmFyIGZvcmNlZEpTT05QYXJzaW5nID0gdHJhbnNpdGlvbmFsICYmIHRyYW5zaXRpb25hbC5mb3JjZWRKU09OUGFyc2luZztcbiAgICB2YXIgc3RyaWN0SlNPTlBhcnNpbmcgPSAhc2lsZW50SlNPTlBhcnNpbmcgJiYgdGhpcy5yZXNwb25zZVR5cGUgPT09ICdqc29uJztcblxuICAgIGlmIChzdHJpY3RKU09OUGFyc2luZyB8fCAoZm9yY2VkSlNPTlBhcnNpbmcgJiYgdXRpbHMuaXNTdHJpbmcoZGF0YSkgJiYgZGF0YS5sZW5ndGgpKSB7XG4gICAgICB0cnkge1xuICAgICAgICByZXR1cm4gSlNPTi5wYXJzZShkYXRhKTtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgaWYgKHN0cmljdEpTT05QYXJzaW5nKSB7XG4gICAgICAgICAgaWYgKGUubmFtZSA9PT0gJ1N5bnRheEVycm9yJykge1xuICAgICAgICAgICAgdGhyb3cgZW5oYW5jZUVycm9yKGUsIHRoaXMsICdFX0pTT05fUEFSU0UnKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgdGhyb3cgZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBkYXRhO1xuICB9XSxcblxuICAvKipcbiAgICogQSB0aW1lb3V0IGluIG1pbGxpc2Vjb25kcyB0byBhYm9ydCBhIHJlcXVlc3QuIElmIHNldCB0byAwIChkZWZhdWx0KSBhXG4gICAqIHRpbWVvdXQgaXMgbm90IGNyZWF0ZWQuXG4gICAqL1xuICB0aW1lb3V0OiAwLFxuXG4gIHhzcmZDb29raWVOYW1lOiAnWFNSRi1UT0tFTicsXG4gIHhzcmZIZWFkZXJOYW1lOiAnWC1YU1JGLVRPS0VOJyxcblxuICBtYXhDb250ZW50TGVuZ3RoOiAtMSxcbiAgbWF4Qm9keUxlbmd0aDogLTEsXG5cbiAgdmFsaWRhdGVTdGF0dXM6IGZ1bmN0aW9uIHZhbGlkYXRlU3RhdHVzKHN0YXR1cykge1xuICAgIHJldHVybiBzdGF0dXMgPj0gMjAwICYmIHN0YXR1cyA8IDMwMDtcbiAgfSxcblxuICBoZWFkZXJzOiB7XG4gICAgY29tbW9uOiB7XG4gICAgICAnQWNjZXB0JzogJ2FwcGxpY2F0aW9uL2pzb24sIHRleHQvcGxhaW4sICovKidcbiAgICB9XG4gIH1cbn07XG5cbnV0aWxzLmZvckVhY2goWydkZWxldGUnLCAnZ2V0JywgJ2hlYWQnXSwgZnVuY3Rpb24gZm9yRWFjaE1ldGhvZE5vRGF0YShtZXRob2QpIHtcbiAgZGVmYXVsdHMuaGVhZGVyc1ttZXRob2RdID0ge307XG59KTtcblxudXRpbHMuZm9yRWFjaChbJ3Bvc3QnLCAncHV0JywgJ3BhdGNoJ10sIGZ1bmN0aW9uIGZvckVhY2hNZXRob2RXaXRoRGF0YShtZXRob2QpIHtcbiAgZGVmYXVsdHMuaGVhZGVyc1ttZXRob2RdID0gdXRpbHMubWVyZ2UoREVGQVVMVF9DT05URU5UX1RZUEUpO1xufSk7XG5cbm1vZHVsZS5leHBvcnRzID0gZGVmYXVsdHM7XG4iLCIndXNlIHN0cmljdCc7XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBzaWxlbnRKU09OUGFyc2luZzogdHJ1ZSxcbiAgZm9yY2VkSlNPTlBhcnNpbmc6IHRydWUsXG4gIGNsYXJpZnlUaW1lb3V0RXJyb3I6IGZhbHNlXG59O1xuIiwibW9kdWxlLmV4cG9ydHMgPSB7XG4gIFwidmVyc2lvblwiOiBcIjAuMjYuMVwiXG59OyIsIid1c2Ugc3RyaWN0JztcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBiaW5kKGZuLCB0aGlzQXJnKSB7XG4gIHJldHVybiBmdW5jdGlvbiB3cmFwKCkge1xuICAgIHZhciBhcmdzID0gbmV3IEFycmF5KGFyZ3VtZW50cy5sZW5ndGgpO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYXJncy5sZW5ndGg7IGkrKykge1xuICAgICAgYXJnc1tpXSA9IGFyZ3VtZW50c1tpXTtcbiAgICB9XG4gICAgcmV0dXJuIGZuLmFwcGx5KHRoaXNBcmcsIGFyZ3MpO1xuICB9O1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi8uLi91dGlscycpO1xuXG5mdW5jdGlvbiBlbmNvZGUodmFsKSB7XG4gIHJldHVybiBlbmNvZGVVUklDb21wb25lbnQodmFsKS5cbiAgICByZXBsYWNlKC8lM0EvZ2ksICc6JykuXG4gICAgcmVwbGFjZSgvJTI0L2csICckJykuXG4gICAgcmVwbGFjZSgvJTJDL2dpLCAnLCcpLlxuICAgIHJlcGxhY2UoLyUyMC9nLCAnKycpLlxuICAgIHJlcGxhY2UoLyU1Qi9naSwgJ1snKS5cbiAgICByZXBsYWNlKC8lNUQvZ2ksICddJyk7XG59XG5cbi8qKlxuICogQnVpbGQgYSBVUkwgYnkgYXBwZW5kaW5nIHBhcmFtcyB0byB0aGUgZW5kXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHVybCBUaGUgYmFzZSBvZiB0aGUgdXJsIChlLmcuLCBodHRwOi8vd3d3Lmdvb2dsZS5jb20pXG4gKiBAcGFyYW0ge29iamVjdH0gW3BhcmFtc10gVGhlIHBhcmFtcyB0byBiZSBhcHBlbmRlZFxuICogQHJldHVybnMge3N0cmluZ30gVGhlIGZvcm1hdHRlZCB1cmxcbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBidWlsZFVSTCh1cmwsIHBhcmFtcywgcGFyYW1zU2VyaWFsaXplcikge1xuICAvKmVzbGludCBuby1wYXJhbS1yZWFzc2lnbjowKi9cbiAgaWYgKCFwYXJhbXMpIHtcbiAgICByZXR1cm4gdXJsO1xuICB9XG5cbiAgdmFyIHNlcmlhbGl6ZWRQYXJhbXM7XG4gIGlmIChwYXJhbXNTZXJpYWxpemVyKSB7XG4gICAgc2VyaWFsaXplZFBhcmFtcyA9IHBhcmFtc1NlcmlhbGl6ZXIocGFyYW1zKTtcbiAgfSBlbHNlIGlmICh1dGlscy5pc1VSTFNlYXJjaFBhcmFtcyhwYXJhbXMpKSB7XG4gICAgc2VyaWFsaXplZFBhcmFtcyA9IHBhcmFtcy50b1N0cmluZygpO1xuICB9IGVsc2Uge1xuICAgIHZhciBwYXJ0cyA9IFtdO1xuXG4gICAgdXRpbHMuZm9yRWFjaChwYXJhbXMsIGZ1bmN0aW9uIHNlcmlhbGl6ZSh2YWwsIGtleSkge1xuICAgICAgaWYgKHZhbCA9PT0gbnVsbCB8fCB0eXBlb2YgdmFsID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGlmICh1dGlscy5pc0FycmF5KHZhbCkpIHtcbiAgICAgICAga2V5ID0ga2V5ICsgJ1tdJztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHZhbCA9IFt2YWxdO1xuICAgICAgfVxuXG4gICAgICB1dGlscy5mb3JFYWNoKHZhbCwgZnVuY3Rpb24gcGFyc2VWYWx1ZSh2KSB7XG4gICAgICAgIGlmICh1dGlscy5pc0RhdGUodikpIHtcbiAgICAgICAgICB2ID0gdi50b0lTT1N0cmluZygpO1xuICAgICAgICB9IGVsc2UgaWYgKHV0aWxzLmlzT2JqZWN0KHYpKSB7XG4gICAgICAgICAgdiA9IEpTT04uc3RyaW5naWZ5KHYpO1xuICAgICAgICB9XG4gICAgICAgIHBhcnRzLnB1c2goZW5jb2RlKGtleSkgKyAnPScgKyBlbmNvZGUodikpO1xuICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICBzZXJpYWxpemVkUGFyYW1zID0gcGFydHMuam9pbignJicpO1xuICB9XG5cbiAgaWYgKHNlcmlhbGl6ZWRQYXJhbXMpIHtcbiAgICB2YXIgaGFzaG1hcmtJbmRleCA9IHVybC5pbmRleE9mKCcjJyk7XG4gICAgaWYgKGhhc2htYXJrSW5kZXggIT09IC0xKSB7XG4gICAgICB1cmwgPSB1cmwuc2xpY2UoMCwgaGFzaG1hcmtJbmRleCk7XG4gICAgfVxuXG4gICAgdXJsICs9ICh1cmwuaW5kZXhPZignPycpID09PSAtMSA/ICc/JyA6ICcmJykgKyBzZXJpYWxpemVkUGFyYW1zO1xuICB9XG5cbiAgcmV0dXJuIHVybDtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbi8qKlxuICogQ3JlYXRlcyBhIG5ldyBVUkwgYnkgY29tYmluaW5nIHRoZSBzcGVjaWZpZWQgVVJMc1xuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBiYXNlVVJMIFRoZSBiYXNlIFVSTFxuICogQHBhcmFtIHtzdHJpbmd9IHJlbGF0aXZlVVJMIFRoZSByZWxhdGl2ZSBVUkxcbiAqIEByZXR1cm5zIHtzdHJpbmd9IFRoZSBjb21iaW5lZCBVUkxcbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBjb21iaW5lVVJMcyhiYXNlVVJMLCByZWxhdGl2ZVVSTCkge1xuICByZXR1cm4gcmVsYXRpdmVVUkxcbiAgICA/IGJhc2VVUkwucmVwbGFjZSgvXFwvKyQvLCAnJykgKyAnLycgKyByZWxhdGl2ZVVSTC5yZXBsYWNlKC9eXFwvKy8sICcnKVxuICAgIDogYmFzZVVSTDtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vLi4vdXRpbHMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSAoXG4gIHV0aWxzLmlzU3RhbmRhcmRCcm93c2VyRW52KCkgP1xuXG4gIC8vIFN0YW5kYXJkIGJyb3dzZXIgZW52cyBzdXBwb3J0IGRvY3VtZW50LmNvb2tpZVxuICAgIChmdW5jdGlvbiBzdGFuZGFyZEJyb3dzZXJFbnYoKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICB3cml0ZTogZnVuY3Rpb24gd3JpdGUobmFtZSwgdmFsdWUsIGV4cGlyZXMsIHBhdGgsIGRvbWFpbiwgc2VjdXJlKSB7XG4gICAgICAgICAgdmFyIGNvb2tpZSA9IFtdO1xuICAgICAgICAgIGNvb2tpZS5wdXNoKG5hbWUgKyAnPScgKyBlbmNvZGVVUklDb21wb25lbnQodmFsdWUpKTtcblxuICAgICAgICAgIGlmICh1dGlscy5pc051bWJlcihleHBpcmVzKSkge1xuICAgICAgICAgICAgY29va2llLnB1c2goJ2V4cGlyZXM9JyArIG5ldyBEYXRlKGV4cGlyZXMpLnRvR01UU3RyaW5nKCkpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmICh1dGlscy5pc1N0cmluZyhwYXRoKSkge1xuICAgICAgICAgICAgY29va2llLnB1c2goJ3BhdGg9JyArIHBhdGgpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmICh1dGlscy5pc1N0cmluZyhkb21haW4pKSB7XG4gICAgICAgICAgICBjb29raWUucHVzaCgnZG9tYWluPScgKyBkb21haW4pO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmIChzZWN1cmUgPT09IHRydWUpIHtcbiAgICAgICAgICAgIGNvb2tpZS5wdXNoKCdzZWN1cmUnKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBkb2N1bWVudC5jb29raWUgPSBjb29raWUuam9pbignOyAnKTtcbiAgICAgICAgfSxcblxuICAgICAgICByZWFkOiBmdW5jdGlvbiByZWFkKG5hbWUpIHtcbiAgICAgICAgICB2YXIgbWF0Y2ggPSBkb2N1bWVudC5jb29raWUubWF0Y2gobmV3IFJlZ0V4cCgnKF58O1xcXFxzKikoJyArIG5hbWUgKyAnKT0oW147XSopJykpO1xuICAgICAgICAgIHJldHVybiAobWF0Y2ggPyBkZWNvZGVVUklDb21wb25lbnQobWF0Y2hbM10pIDogbnVsbCk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgcmVtb3ZlOiBmdW5jdGlvbiByZW1vdmUobmFtZSkge1xuICAgICAgICAgIHRoaXMud3JpdGUobmFtZSwgJycsIERhdGUubm93KCkgLSA4NjQwMDAwMCk7XG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgfSkoKSA6XG5cbiAgLy8gTm9uIHN0YW5kYXJkIGJyb3dzZXIgZW52ICh3ZWIgd29ya2VycywgcmVhY3QtbmF0aXZlKSBsYWNrIG5lZWRlZCBzdXBwb3J0LlxuICAgIChmdW5jdGlvbiBub25TdGFuZGFyZEJyb3dzZXJFbnYoKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICB3cml0ZTogZnVuY3Rpb24gd3JpdGUoKSB7fSxcbiAgICAgICAgcmVhZDogZnVuY3Rpb24gcmVhZCgpIHsgcmV0dXJuIG51bGw7IH0sXG4gICAgICAgIHJlbW92ZTogZnVuY3Rpb24gcmVtb3ZlKCkge31cbiAgICAgIH07XG4gICAgfSkoKVxuKTtcbiIsIid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBEZXRlcm1pbmVzIHdoZXRoZXIgdGhlIHNwZWNpZmllZCBVUkwgaXMgYWJzb2x1dGVcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gdXJsIFRoZSBVUkwgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdGhlIHNwZWNpZmllZCBVUkwgaXMgYWJzb2x1dGUsIG90aGVyd2lzZSBmYWxzZVxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGlzQWJzb2x1dGVVUkwodXJsKSB7XG4gIC8vIEEgVVJMIGlzIGNvbnNpZGVyZWQgYWJzb2x1dGUgaWYgaXQgYmVnaW5zIHdpdGggXCI8c2NoZW1lPjovL1wiIG9yIFwiLy9cIiAocHJvdG9jb2wtcmVsYXRpdmUgVVJMKS5cbiAgLy8gUkZDIDM5ODYgZGVmaW5lcyBzY2hlbWUgbmFtZSBhcyBhIHNlcXVlbmNlIG9mIGNoYXJhY3RlcnMgYmVnaW5uaW5nIHdpdGggYSBsZXR0ZXIgYW5kIGZvbGxvd2VkXG4gIC8vIGJ5IGFueSBjb21iaW5hdGlvbiBvZiBsZXR0ZXJzLCBkaWdpdHMsIHBsdXMsIHBlcmlvZCwgb3IgaHlwaGVuLlxuICByZXR1cm4gL14oW2Etel1bYS16XFxkK1xcLS5dKjopP1xcL1xcLy9pLnRlc3QodXJsKTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vLi4vdXRpbHMnKTtcblxuLyoqXG4gKiBEZXRlcm1pbmVzIHdoZXRoZXIgdGhlIHBheWxvYWQgaXMgYW4gZXJyb3IgdGhyb3duIGJ5IEF4aW9zXG4gKlxuICogQHBhcmFtIHsqfSBwYXlsb2FkIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB0aGUgcGF5bG9hZCBpcyBhbiBlcnJvciB0aHJvd24gYnkgQXhpb3MsIG90aGVyd2lzZSBmYWxzZVxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGlzQXhpb3NFcnJvcihwYXlsb2FkKSB7XG4gIHJldHVybiB1dGlscy5pc09iamVjdChwYXlsb2FkKSAmJiAocGF5bG9hZC5pc0F4aW9zRXJyb3IgPT09IHRydWUpO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi8uLi91dGlscycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IChcbiAgdXRpbHMuaXNTdGFuZGFyZEJyb3dzZXJFbnYoKSA/XG5cbiAgLy8gU3RhbmRhcmQgYnJvd3NlciBlbnZzIGhhdmUgZnVsbCBzdXBwb3J0IG9mIHRoZSBBUElzIG5lZWRlZCB0byB0ZXN0XG4gIC8vIHdoZXRoZXIgdGhlIHJlcXVlc3QgVVJMIGlzIG9mIHRoZSBzYW1lIG9yaWdpbiBhcyBjdXJyZW50IGxvY2F0aW9uLlxuICAgIChmdW5jdGlvbiBzdGFuZGFyZEJyb3dzZXJFbnYoKSB7XG4gICAgICB2YXIgbXNpZSA9IC8obXNpZXx0cmlkZW50KS9pLnRlc3QobmF2aWdhdG9yLnVzZXJBZ2VudCk7XG4gICAgICB2YXIgdXJsUGFyc2luZ05vZGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdhJyk7XG4gICAgICB2YXIgb3JpZ2luVVJMO1xuXG4gICAgICAvKipcbiAgICAqIFBhcnNlIGEgVVJMIHRvIGRpc2NvdmVyIGl0J3MgY29tcG9uZW50c1xuICAgICpcbiAgICAqIEBwYXJhbSB7U3RyaW5nfSB1cmwgVGhlIFVSTCB0byBiZSBwYXJzZWRcbiAgICAqIEByZXR1cm5zIHtPYmplY3R9XG4gICAgKi9cbiAgICAgIGZ1bmN0aW9uIHJlc29sdmVVUkwodXJsKSB7XG4gICAgICAgIHZhciBocmVmID0gdXJsO1xuXG4gICAgICAgIGlmIChtc2llKSB7XG4gICAgICAgIC8vIElFIG5lZWRzIGF0dHJpYnV0ZSBzZXQgdHdpY2UgdG8gbm9ybWFsaXplIHByb3BlcnRpZXNcbiAgICAgICAgICB1cmxQYXJzaW5nTm9kZS5zZXRBdHRyaWJ1dGUoJ2hyZWYnLCBocmVmKTtcbiAgICAgICAgICBocmVmID0gdXJsUGFyc2luZ05vZGUuaHJlZjtcbiAgICAgICAgfVxuXG4gICAgICAgIHVybFBhcnNpbmdOb2RlLnNldEF0dHJpYnV0ZSgnaHJlZicsIGhyZWYpO1xuXG4gICAgICAgIC8vIHVybFBhcnNpbmdOb2RlIHByb3ZpZGVzIHRoZSBVcmxVdGlscyBpbnRlcmZhY2UgLSBodHRwOi8vdXJsLnNwZWMud2hhdHdnLm9yZy8jdXJsdXRpbHNcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICBocmVmOiB1cmxQYXJzaW5nTm9kZS5ocmVmLFxuICAgICAgICAgIHByb3RvY29sOiB1cmxQYXJzaW5nTm9kZS5wcm90b2NvbCA/IHVybFBhcnNpbmdOb2RlLnByb3RvY29sLnJlcGxhY2UoLzokLywgJycpIDogJycsXG4gICAgICAgICAgaG9zdDogdXJsUGFyc2luZ05vZGUuaG9zdCxcbiAgICAgICAgICBzZWFyY2g6IHVybFBhcnNpbmdOb2RlLnNlYXJjaCA/IHVybFBhcnNpbmdOb2RlLnNlYXJjaC5yZXBsYWNlKC9eXFw/LywgJycpIDogJycsXG4gICAgICAgICAgaGFzaDogdXJsUGFyc2luZ05vZGUuaGFzaCA/IHVybFBhcnNpbmdOb2RlLmhhc2gucmVwbGFjZSgvXiMvLCAnJykgOiAnJyxcbiAgICAgICAgICBob3N0bmFtZTogdXJsUGFyc2luZ05vZGUuaG9zdG5hbWUsXG4gICAgICAgICAgcG9ydDogdXJsUGFyc2luZ05vZGUucG9ydCxcbiAgICAgICAgICBwYXRobmFtZTogKHVybFBhcnNpbmdOb2RlLnBhdGhuYW1lLmNoYXJBdCgwKSA9PT0gJy8nKSA/XG4gICAgICAgICAgICB1cmxQYXJzaW5nTm9kZS5wYXRobmFtZSA6XG4gICAgICAgICAgICAnLycgKyB1cmxQYXJzaW5nTm9kZS5wYXRobmFtZVxuICAgICAgICB9O1xuICAgICAgfVxuXG4gICAgICBvcmlnaW5VUkwgPSByZXNvbHZlVVJMKHdpbmRvdy5sb2NhdGlvbi5ocmVmKTtcblxuICAgICAgLyoqXG4gICAgKiBEZXRlcm1pbmUgaWYgYSBVUkwgc2hhcmVzIHRoZSBzYW1lIG9yaWdpbiBhcyB0aGUgY3VycmVudCBsb2NhdGlvblxuICAgICpcbiAgICAqIEBwYXJhbSB7U3RyaW5nfSByZXF1ZXN0VVJMIFRoZSBVUkwgdG8gdGVzdFxuICAgICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgVVJMIHNoYXJlcyB0aGUgc2FtZSBvcmlnaW4sIG90aGVyd2lzZSBmYWxzZVxuICAgICovXG4gICAgICByZXR1cm4gZnVuY3Rpb24gaXNVUkxTYW1lT3JpZ2luKHJlcXVlc3RVUkwpIHtcbiAgICAgICAgdmFyIHBhcnNlZCA9ICh1dGlscy5pc1N0cmluZyhyZXF1ZXN0VVJMKSkgPyByZXNvbHZlVVJMKHJlcXVlc3RVUkwpIDogcmVxdWVzdFVSTDtcbiAgICAgICAgcmV0dXJuIChwYXJzZWQucHJvdG9jb2wgPT09IG9yaWdpblVSTC5wcm90b2NvbCAmJlxuICAgICAgICAgICAgcGFyc2VkLmhvc3QgPT09IG9yaWdpblVSTC5ob3N0KTtcbiAgICAgIH07XG4gICAgfSkoKSA6XG5cbiAgLy8gTm9uIHN0YW5kYXJkIGJyb3dzZXIgZW52cyAod2ViIHdvcmtlcnMsIHJlYWN0LW5hdGl2ZSkgbGFjayBuZWVkZWQgc3VwcG9ydC5cbiAgICAoZnVuY3Rpb24gbm9uU3RhbmRhcmRCcm93c2VyRW52KCkge1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uIGlzVVJMU2FtZU9yaWdpbigpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9O1xuICAgIH0pKClcbik7XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4uL3V0aWxzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gbm9ybWFsaXplSGVhZGVyTmFtZShoZWFkZXJzLCBub3JtYWxpemVkTmFtZSkge1xuICB1dGlscy5mb3JFYWNoKGhlYWRlcnMsIGZ1bmN0aW9uIHByb2Nlc3NIZWFkZXIodmFsdWUsIG5hbWUpIHtcbiAgICBpZiAobmFtZSAhPT0gbm9ybWFsaXplZE5hbWUgJiYgbmFtZS50b1VwcGVyQ2FzZSgpID09PSBub3JtYWxpemVkTmFtZS50b1VwcGVyQ2FzZSgpKSB7XG4gICAgICBoZWFkZXJzW25vcm1hbGl6ZWROYW1lXSA9IHZhbHVlO1xuICAgICAgZGVsZXRlIGhlYWRlcnNbbmFtZV07XG4gICAgfVxuICB9KTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vLi4vdXRpbHMnKTtcblxuLy8gSGVhZGVycyB3aG9zZSBkdXBsaWNhdGVzIGFyZSBpZ25vcmVkIGJ5IG5vZGVcbi8vIGMuZi4gaHR0cHM6Ly9ub2RlanMub3JnL2FwaS9odHRwLmh0bWwjaHR0cF9tZXNzYWdlX2hlYWRlcnNcbnZhciBpZ25vcmVEdXBsaWNhdGVPZiA9IFtcbiAgJ2FnZScsICdhdXRob3JpemF0aW9uJywgJ2NvbnRlbnQtbGVuZ3RoJywgJ2NvbnRlbnQtdHlwZScsICdldGFnJyxcbiAgJ2V4cGlyZXMnLCAnZnJvbScsICdob3N0JywgJ2lmLW1vZGlmaWVkLXNpbmNlJywgJ2lmLXVubW9kaWZpZWQtc2luY2UnLFxuICAnbGFzdC1tb2RpZmllZCcsICdsb2NhdGlvbicsICdtYXgtZm9yd2FyZHMnLCAncHJveHktYXV0aG9yaXphdGlvbicsXG4gICdyZWZlcmVyJywgJ3JldHJ5LWFmdGVyJywgJ3VzZXItYWdlbnQnXG5dO1xuXG4vKipcbiAqIFBhcnNlIGhlYWRlcnMgaW50byBhbiBvYmplY3RcbiAqXG4gKiBgYGBcbiAqIERhdGU6IFdlZCwgMjcgQXVnIDIwMTQgMDg6NTg6NDkgR01UXG4gKiBDb250ZW50LVR5cGU6IGFwcGxpY2F0aW9uL2pzb25cbiAqIENvbm5lY3Rpb246IGtlZXAtYWxpdmVcbiAqIFRyYW5zZmVyLUVuY29kaW5nOiBjaHVua2VkXG4gKiBgYGBcbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gaGVhZGVycyBIZWFkZXJzIG5lZWRpbmcgdG8gYmUgcGFyc2VkXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBIZWFkZXJzIHBhcnNlZCBpbnRvIGFuIG9iamVjdFxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIHBhcnNlSGVhZGVycyhoZWFkZXJzKSB7XG4gIHZhciBwYXJzZWQgPSB7fTtcbiAgdmFyIGtleTtcbiAgdmFyIHZhbDtcbiAgdmFyIGk7XG5cbiAgaWYgKCFoZWFkZXJzKSB7IHJldHVybiBwYXJzZWQ7IH1cblxuICB1dGlscy5mb3JFYWNoKGhlYWRlcnMuc3BsaXQoJ1xcbicpLCBmdW5jdGlvbiBwYXJzZXIobGluZSkge1xuICAgIGkgPSBsaW5lLmluZGV4T2YoJzonKTtcbiAgICBrZXkgPSB1dGlscy50cmltKGxpbmUuc3Vic3RyKDAsIGkpKS50b0xvd2VyQ2FzZSgpO1xuICAgIHZhbCA9IHV0aWxzLnRyaW0obGluZS5zdWJzdHIoaSArIDEpKTtcblxuICAgIGlmIChrZXkpIHtcbiAgICAgIGlmIChwYXJzZWRba2V5XSAmJiBpZ25vcmVEdXBsaWNhdGVPZi5pbmRleE9mKGtleSkgPj0gMCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBpZiAoa2V5ID09PSAnc2V0LWNvb2tpZScpIHtcbiAgICAgICAgcGFyc2VkW2tleV0gPSAocGFyc2VkW2tleV0gPyBwYXJzZWRba2V5XSA6IFtdKS5jb25jYXQoW3ZhbF0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcGFyc2VkW2tleV0gPSBwYXJzZWRba2V5XSA/IHBhcnNlZFtrZXldICsgJywgJyArIHZhbCA6IHZhbDtcbiAgICAgIH1cbiAgICB9XG4gIH0pO1xuXG4gIHJldHVybiBwYXJzZWQ7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIFN5bnRhY3RpYyBzdWdhciBmb3IgaW52b2tpbmcgYSBmdW5jdGlvbiBhbmQgZXhwYW5kaW5nIGFuIGFycmF5IGZvciBhcmd1bWVudHMuXG4gKlxuICogQ29tbW9uIHVzZSBjYXNlIHdvdWxkIGJlIHRvIHVzZSBgRnVuY3Rpb24ucHJvdG90eXBlLmFwcGx5YC5cbiAqXG4gKiAgYGBganNcbiAqICBmdW5jdGlvbiBmKHgsIHksIHopIHt9XG4gKiAgdmFyIGFyZ3MgPSBbMSwgMiwgM107XG4gKiAgZi5hcHBseShudWxsLCBhcmdzKTtcbiAqICBgYGBcbiAqXG4gKiBXaXRoIGBzcHJlYWRgIHRoaXMgZXhhbXBsZSBjYW4gYmUgcmUtd3JpdHRlbi5cbiAqXG4gKiAgYGBganNcbiAqICBzcHJlYWQoZnVuY3Rpb24oeCwgeSwgeikge30pKFsxLCAyLCAzXSk7XG4gKiAgYGBgXG4gKlxuICogQHBhcmFtIHtGdW5jdGlvbn0gY2FsbGJhY2tcbiAqIEByZXR1cm5zIHtGdW5jdGlvbn1cbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBzcHJlYWQoY2FsbGJhY2spIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIHdyYXAoYXJyKSB7XG4gICAgcmV0dXJuIGNhbGxiYWNrLmFwcGx5KG51bGwsIGFycik7XG4gIH07XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgVkVSU0lPTiA9IHJlcXVpcmUoJy4uL2Vudi9kYXRhJykudmVyc2lvbjtcblxudmFyIHZhbGlkYXRvcnMgPSB7fTtcblxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGZ1bmMtbmFtZXNcblsnb2JqZWN0JywgJ2Jvb2xlYW4nLCAnbnVtYmVyJywgJ2Z1bmN0aW9uJywgJ3N0cmluZycsICdzeW1ib2wnXS5mb3JFYWNoKGZ1bmN0aW9uKHR5cGUsIGkpIHtcbiAgdmFsaWRhdG9yc1t0eXBlXSA9IGZ1bmN0aW9uIHZhbGlkYXRvcih0aGluZykge1xuICAgIHJldHVybiB0eXBlb2YgdGhpbmcgPT09IHR5cGUgfHwgJ2EnICsgKGkgPCAxID8gJ24gJyA6ICcgJykgKyB0eXBlO1xuICB9O1xufSk7XG5cbnZhciBkZXByZWNhdGVkV2FybmluZ3MgPSB7fTtcblxuLyoqXG4gKiBUcmFuc2l0aW9uYWwgb3B0aW9uIHZhbGlkYXRvclxuICogQHBhcmFtIHtmdW5jdGlvbnxib29sZWFuP30gdmFsaWRhdG9yIC0gc2V0IHRvIGZhbHNlIGlmIHRoZSB0cmFuc2l0aW9uYWwgb3B0aW9uIGhhcyBiZWVuIHJlbW92ZWRcbiAqIEBwYXJhbSB7c3RyaW5nP30gdmVyc2lvbiAtIGRlcHJlY2F0ZWQgdmVyc2lvbiAvIHJlbW92ZWQgc2luY2UgdmVyc2lvblxuICogQHBhcmFtIHtzdHJpbmc/fSBtZXNzYWdlIC0gc29tZSBtZXNzYWdlIHdpdGggYWRkaXRpb25hbCBpbmZvXG4gKiBAcmV0dXJucyB7ZnVuY3Rpb259XG4gKi9cbnZhbGlkYXRvcnMudHJhbnNpdGlvbmFsID0gZnVuY3Rpb24gdHJhbnNpdGlvbmFsKHZhbGlkYXRvciwgdmVyc2lvbiwgbWVzc2FnZSkge1xuICBmdW5jdGlvbiBmb3JtYXRNZXNzYWdlKG9wdCwgZGVzYykge1xuICAgIHJldHVybiAnW0F4aW9zIHYnICsgVkVSU0lPTiArICddIFRyYW5zaXRpb25hbCBvcHRpb24gXFwnJyArIG9wdCArICdcXCcnICsgZGVzYyArIChtZXNzYWdlID8gJy4gJyArIG1lc3NhZ2UgOiAnJyk7XG4gIH1cblxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZnVuYy1uYW1lc1xuICByZXR1cm4gZnVuY3Rpb24odmFsdWUsIG9wdCwgb3B0cykge1xuICAgIGlmICh2YWxpZGF0b3IgPT09IGZhbHNlKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoZm9ybWF0TWVzc2FnZShvcHQsICcgaGFzIGJlZW4gcmVtb3ZlZCcgKyAodmVyc2lvbiA/ICcgaW4gJyArIHZlcnNpb24gOiAnJykpKTtcbiAgICB9XG5cbiAgICBpZiAodmVyc2lvbiAmJiAhZGVwcmVjYXRlZFdhcm5pbmdzW29wdF0pIHtcbiAgICAgIGRlcHJlY2F0ZWRXYXJuaW5nc1tvcHRdID0gdHJ1ZTtcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb25zb2xlXG4gICAgICBjb25zb2xlLndhcm4oXG4gICAgICAgIGZvcm1hdE1lc3NhZ2UoXG4gICAgICAgICAgb3B0LFxuICAgICAgICAgICcgaGFzIGJlZW4gZGVwcmVjYXRlZCBzaW5jZSB2JyArIHZlcnNpb24gKyAnIGFuZCB3aWxsIGJlIHJlbW92ZWQgaW4gdGhlIG5lYXIgZnV0dXJlJ1xuICAgICAgICApXG4gICAgICApO1xuICAgIH1cblxuICAgIHJldHVybiB2YWxpZGF0b3IgPyB2YWxpZGF0b3IodmFsdWUsIG9wdCwgb3B0cykgOiB0cnVlO1xuICB9O1xufTtcblxuLyoqXG4gKiBBc3NlcnQgb2JqZWN0J3MgcHJvcGVydGllcyB0eXBlXG4gKiBAcGFyYW0ge29iamVjdH0gb3B0aW9uc1xuICogQHBhcmFtIHtvYmplY3R9IHNjaGVtYVxuICogQHBhcmFtIHtib29sZWFuP30gYWxsb3dVbmtub3duXG4gKi9cblxuZnVuY3Rpb24gYXNzZXJ0T3B0aW9ucyhvcHRpb25zLCBzY2hlbWEsIGFsbG93VW5rbm93bikge1xuICBpZiAodHlwZW9mIG9wdGlvbnMgIT09ICdvYmplY3QnKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignb3B0aW9ucyBtdXN0IGJlIGFuIG9iamVjdCcpO1xuICB9XG4gIHZhciBrZXlzID0gT2JqZWN0LmtleXMob3B0aW9ucyk7XG4gIHZhciBpID0ga2V5cy5sZW5ndGg7XG4gIHdoaWxlIChpLS0gPiAwKSB7XG4gICAgdmFyIG9wdCA9IGtleXNbaV07XG4gICAgdmFyIHZhbGlkYXRvciA9IHNjaGVtYVtvcHRdO1xuICAgIGlmICh2YWxpZGF0b3IpIHtcbiAgICAgIHZhciB2YWx1ZSA9IG9wdGlvbnNbb3B0XTtcbiAgICAgIHZhciByZXN1bHQgPSB2YWx1ZSA9PT0gdW5kZWZpbmVkIHx8IHZhbGlkYXRvcih2YWx1ZSwgb3B0LCBvcHRpb25zKTtcbiAgICAgIGlmIChyZXN1bHQgIT09IHRydWUpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignb3B0aW9uICcgKyBvcHQgKyAnIG11c3QgYmUgJyArIHJlc3VsdCk7XG4gICAgICB9XG4gICAgICBjb250aW51ZTtcbiAgICB9XG4gICAgaWYgKGFsbG93VW5rbm93biAhPT0gdHJ1ZSkge1xuICAgICAgdGhyb3cgRXJyb3IoJ1Vua25vd24gb3B0aW9uICcgKyBvcHQpO1xuICAgIH1cbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgYXNzZXJ0T3B0aW9uczogYXNzZXJ0T3B0aW9ucyxcbiAgdmFsaWRhdG9yczogdmFsaWRhdG9yc1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIGJpbmQgPSByZXF1aXJlKCcuL2hlbHBlcnMvYmluZCcpO1xuXG4vLyB1dGlscyBpcyBhIGxpYnJhcnkgb2YgZ2VuZXJpYyBoZWxwZXIgZnVuY3Rpb25zIG5vbi1zcGVjaWZpYyB0byBheGlvc1xuXG52YXIgdG9TdHJpbmcgPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nO1xuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGFuIEFycmF5XG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYW4gQXJyYXksIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc0FycmF5KHZhbCkge1xuICByZXR1cm4gQXJyYXkuaXNBcnJheSh2YWwpO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIHVuZGVmaW5lZFxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHRoZSB2YWx1ZSBpcyB1bmRlZmluZWQsIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc1VuZGVmaW5lZCh2YWwpIHtcbiAgcmV0dXJuIHR5cGVvZiB2YWwgPT09ICd1bmRlZmluZWQnO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgQnVmZmVyXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYSBCdWZmZXIsIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc0J1ZmZlcih2YWwpIHtcbiAgcmV0dXJuIHZhbCAhPT0gbnVsbCAmJiAhaXNVbmRlZmluZWQodmFsKSAmJiB2YWwuY29uc3RydWN0b3IgIT09IG51bGwgJiYgIWlzVW5kZWZpbmVkKHZhbC5jb25zdHJ1Y3RvcilcbiAgICAmJiB0eXBlb2YgdmFsLmNvbnN0cnVjdG9yLmlzQnVmZmVyID09PSAnZnVuY3Rpb24nICYmIHZhbC5jb25zdHJ1Y3Rvci5pc0J1ZmZlcih2YWwpO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGFuIEFycmF5QnVmZmVyXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYW4gQXJyYXlCdWZmZXIsIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc0FycmF5QnVmZmVyKHZhbCkge1xuICByZXR1cm4gdG9TdHJpbmcuY2FsbCh2YWwpID09PSAnW29iamVjdCBBcnJheUJ1ZmZlcl0nO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgRm9ybURhdGFcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhbiBGb3JtRGF0YSwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzRm9ybURhdGEodmFsKSB7XG4gIHJldHVybiB0b1N0cmluZy5jYWxsKHZhbCkgPT09ICdbb2JqZWN0IEZvcm1EYXRhXSc7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYSB2aWV3IG9uIGFuIEFycmF5QnVmZmVyXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYSB2aWV3IG9uIGFuIEFycmF5QnVmZmVyLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNBcnJheUJ1ZmZlclZpZXcodmFsKSB7XG4gIHZhciByZXN1bHQ7XG4gIGlmICgodHlwZW9mIEFycmF5QnVmZmVyICE9PSAndW5kZWZpbmVkJykgJiYgKEFycmF5QnVmZmVyLmlzVmlldykpIHtcbiAgICByZXN1bHQgPSBBcnJheUJ1ZmZlci5pc1ZpZXcodmFsKTtcbiAgfSBlbHNlIHtcbiAgICByZXN1bHQgPSAodmFsKSAmJiAodmFsLmJ1ZmZlcikgJiYgKGlzQXJyYXlCdWZmZXIodmFsLmJ1ZmZlcikpO1xuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYSBTdHJpbmdcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIFN0cmluZywgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzU3RyaW5nKHZhbCkge1xuICByZXR1cm4gdHlwZW9mIHZhbCA9PT0gJ3N0cmluZyc7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYSBOdW1iZXJcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIE51bWJlciwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzTnVtYmVyKHZhbCkge1xuICByZXR1cm4gdHlwZW9mIHZhbCA9PT0gJ251bWJlcic7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYW4gT2JqZWN0XG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYW4gT2JqZWN0LCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNPYmplY3QodmFsKSB7XG4gIHJldHVybiB2YWwgIT09IG51bGwgJiYgdHlwZW9mIHZhbCA9PT0gJ29iamVjdCc7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYSBwbGFpbiBPYmplY3RcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJuIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgcGxhaW4gT2JqZWN0LCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNQbGFpbk9iamVjdCh2YWwpIHtcbiAgaWYgKHRvU3RyaW5nLmNhbGwodmFsKSAhPT0gJ1tvYmplY3QgT2JqZWN0XScpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICB2YXIgcHJvdG90eXBlID0gT2JqZWN0LmdldFByb3RvdHlwZU9mKHZhbCk7XG4gIHJldHVybiBwcm90b3R5cGUgPT09IG51bGwgfHwgcHJvdG90eXBlID09PSBPYmplY3QucHJvdG90eXBlO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgRGF0ZVxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgRGF0ZSwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzRGF0ZSh2YWwpIHtcbiAgcmV0dXJuIHRvU3RyaW5nLmNhbGwodmFsKSA9PT0gJ1tvYmplY3QgRGF0ZV0nO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgRmlsZVxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgRmlsZSwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzRmlsZSh2YWwpIHtcbiAgcmV0dXJuIHRvU3RyaW5nLmNhbGwodmFsKSA9PT0gJ1tvYmplY3QgRmlsZV0nO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgQmxvYlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgQmxvYiwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzQmxvYih2YWwpIHtcbiAgcmV0dXJuIHRvU3RyaW5nLmNhbGwodmFsKSA9PT0gJ1tvYmplY3QgQmxvYl0nO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgRnVuY3Rpb25cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIEZ1bmN0aW9uLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNGdW5jdGlvbih2YWwpIHtcbiAgcmV0dXJuIHRvU3RyaW5nLmNhbGwodmFsKSA9PT0gJ1tvYmplY3QgRnVuY3Rpb25dJztcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIFN0cmVhbVxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgU3RyZWFtLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNTdHJlYW0odmFsKSB7XG4gIHJldHVybiBpc09iamVjdCh2YWwpICYmIGlzRnVuY3Rpb24odmFsLnBpcGUpO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgVVJMU2VhcmNoUGFyYW1zIG9iamVjdFxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgVVJMU2VhcmNoUGFyYW1zIG9iamVjdCwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzVVJMU2VhcmNoUGFyYW1zKHZhbCkge1xuICByZXR1cm4gdG9TdHJpbmcuY2FsbCh2YWwpID09PSAnW29iamVjdCBVUkxTZWFyY2hQYXJhbXNdJztcbn1cblxuLyoqXG4gKiBUcmltIGV4Y2VzcyB3aGl0ZXNwYWNlIG9mZiB0aGUgYmVnaW5uaW5nIGFuZCBlbmQgb2YgYSBzdHJpbmdcbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gc3RyIFRoZSBTdHJpbmcgdG8gdHJpbVxuICogQHJldHVybnMge1N0cmluZ30gVGhlIFN0cmluZyBmcmVlZCBvZiBleGNlc3Mgd2hpdGVzcGFjZVxuICovXG5mdW5jdGlvbiB0cmltKHN0cikge1xuICByZXR1cm4gc3RyLnRyaW0gPyBzdHIudHJpbSgpIDogc3RyLnJlcGxhY2UoL15cXHMrfFxccyskL2csICcnKTtcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgd2UncmUgcnVubmluZyBpbiBhIHN0YW5kYXJkIGJyb3dzZXIgZW52aXJvbm1lbnRcbiAqXG4gKiBUaGlzIGFsbG93cyBheGlvcyB0byBydW4gaW4gYSB3ZWIgd29ya2VyLCBhbmQgcmVhY3QtbmF0aXZlLlxuICogQm90aCBlbnZpcm9ubWVudHMgc3VwcG9ydCBYTUxIdHRwUmVxdWVzdCwgYnV0IG5vdCBmdWxseSBzdGFuZGFyZCBnbG9iYWxzLlxuICpcbiAqIHdlYiB3b3JrZXJzOlxuICogIHR5cGVvZiB3aW5kb3cgLT4gdW5kZWZpbmVkXG4gKiAgdHlwZW9mIGRvY3VtZW50IC0+IHVuZGVmaW5lZFxuICpcbiAqIHJlYWN0LW5hdGl2ZTpcbiAqICBuYXZpZ2F0b3IucHJvZHVjdCAtPiAnUmVhY3ROYXRpdmUnXG4gKiBuYXRpdmVzY3JpcHRcbiAqICBuYXZpZ2F0b3IucHJvZHVjdCAtPiAnTmF0aXZlU2NyaXB0JyBvciAnTlMnXG4gKi9cbmZ1bmN0aW9uIGlzU3RhbmRhcmRCcm93c2VyRW52KCkge1xuICBpZiAodHlwZW9mIG5hdmlnYXRvciAhPT0gJ3VuZGVmaW5lZCcgJiYgKG5hdmlnYXRvci5wcm9kdWN0ID09PSAnUmVhY3ROYXRpdmUnIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmF2aWdhdG9yLnByb2R1Y3QgPT09ICdOYXRpdmVTY3JpcHQnIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmF2aWdhdG9yLnByb2R1Y3QgPT09ICdOUycpKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIHJldHVybiAoXG4gICAgdHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiZcbiAgICB0eXBlb2YgZG9jdW1lbnQgIT09ICd1bmRlZmluZWQnXG4gICk7XG59XG5cbi8qKlxuICogSXRlcmF0ZSBvdmVyIGFuIEFycmF5IG9yIGFuIE9iamVjdCBpbnZva2luZyBhIGZ1bmN0aW9uIGZvciBlYWNoIGl0ZW0uXG4gKlxuICogSWYgYG9iamAgaXMgYW4gQXJyYXkgY2FsbGJhY2sgd2lsbCBiZSBjYWxsZWQgcGFzc2luZ1xuICogdGhlIHZhbHVlLCBpbmRleCwgYW5kIGNvbXBsZXRlIGFycmF5IGZvciBlYWNoIGl0ZW0uXG4gKlxuICogSWYgJ29iaicgaXMgYW4gT2JqZWN0IGNhbGxiYWNrIHdpbGwgYmUgY2FsbGVkIHBhc3NpbmdcbiAqIHRoZSB2YWx1ZSwga2V5LCBhbmQgY29tcGxldGUgb2JqZWN0IGZvciBlYWNoIHByb3BlcnR5LlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fEFycmF5fSBvYmogVGhlIG9iamVjdCB0byBpdGVyYXRlXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmbiBUaGUgY2FsbGJhY2sgdG8gaW52b2tlIGZvciBlYWNoIGl0ZW1cbiAqL1xuZnVuY3Rpb24gZm9yRWFjaChvYmosIGZuKSB7XG4gIC8vIERvbid0IGJvdGhlciBpZiBubyB2YWx1ZSBwcm92aWRlZFxuICBpZiAob2JqID09PSBudWxsIHx8IHR5cGVvZiBvYmogPT09ICd1bmRlZmluZWQnKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLy8gRm9yY2UgYW4gYXJyYXkgaWYgbm90IGFscmVhZHkgc29tZXRoaW5nIGl0ZXJhYmxlXG4gIGlmICh0eXBlb2Ygb2JqICE9PSAnb2JqZWN0Jykge1xuICAgIC8qZXNsaW50IG5vLXBhcmFtLXJlYXNzaWduOjAqL1xuICAgIG9iaiA9IFtvYmpdO1xuICB9XG5cbiAgaWYgKGlzQXJyYXkob2JqKSkge1xuICAgIC8vIEl0ZXJhdGUgb3ZlciBhcnJheSB2YWx1ZXNcbiAgICBmb3IgKHZhciBpID0gMCwgbCA9IG9iai5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgIGZuLmNhbGwobnVsbCwgb2JqW2ldLCBpLCBvYmopO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICAvLyBJdGVyYXRlIG92ZXIgb2JqZWN0IGtleXNcbiAgICBmb3IgKHZhciBrZXkgaW4gb2JqKSB7XG4gICAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwga2V5KSkge1xuICAgICAgICBmbi5jYWxsKG51bGwsIG9ialtrZXldLCBrZXksIG9iaik7XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbi8qKlxuICogQWNjZXB0cyB2YXJhcmdzIGV4cGVjdGluZyBlYWNoIGFyZ3VtZW50IHRvIGJlIGFuIG9iamVjdCwgdGhlblxuICogaW1tdXRhYmx5IG1lcmdlcyB0aGUgcHJvcGVydGllcyBvZiBlYWNoIG9iamVjdCBhbmQgcmV0dXJucyByZXN1bHQuXG4gKlxuICogV2hlbiBtdWx0aXBsZSBvYmplY3RzIGNvbnRhaW4gdGhlIHNhbWUga2V5IHRoZSBsYXRlciBvYmplY3QgaW5cbiAqIHRoZSBhcmd1bWVudHMgbGlzdCB3aWxsIHRha2UgcHJlY2VkZW5jZS5cbiAqXG4gKiBFeGFtcGxlOlxuICpcbiAqIGBgYGpzXG4gKiB2YXIgcmVzdWx0ID0gbWVyZ2Uoe2ZvbzogMTIzfSwge2ZvbzogNDU2fSk7XG4gKiBjb25zb2xlLmxvZyhyZXN1bHQuZm9vKTsgLy8gb3V0cHV0cyA0NTZcbiAqIGBgYFxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmoxIE9iamVjdCB0byBtZXJnZVxuICogQHJldHVybnMge09iamVjdH0gUmVzdWx0IG9mIGFsbCBtZXJnZSBwcm9wZXJ0aWVzXG4gKi9cbmZ1bmN0aW9uIG1lcmdlKC8qIG9iajEsIG9iajIsIG9iajMsIC4uLiAqLykge1xuICB2YXIgcmVzdWx0ID0ge307XG4gIGZ1bmN0aW9uIGFzc2lnblZhbHVlKHZhbCwga2V5KSB7XG4gICAgaWYgKGlzUGxhaW5PYmplY3QocmVzdWx0W2tleV0pICYmIGlzUGxhaW5PYmplY3QodmFsKSkge1xuICAgICAgcmVzdWx0W2tleV0gPSBtZXJnZShyZXN1bHRba2V5XSwgdmFsKTtcbiAgICB9IGVsc2UgaWYgKGlzUGxhaW5PYmplY3QodmFsKSkge1xuICAgICAgcmVzdWx0W2tleV0gPSBtZXJnZSh7fSwgdmFsKTtcbiAgICB9IGVsc2UgaWYgKGlzQXJyYXkodmFsKSkge1xuICAgICAgcmVzdWx0W2tleV0gPSB2YWwuc2xpY2UoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmVzdWx0W2tleV0gPSB2YWw7XG4gICAgfVxuICB9XG5cbiAgZm9yICh2YXIgaSA9IDAsIGwgPSBhcmd1bWVudHMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgZm9yRWFjaChhcmd1bWVudHNbaV0sIGFzc2lnblZhbHVlKTtcbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufVxuXG4vKipcbiAqIEV4dGVuZHMgb2JqZWN0IGEgYnkgbXV0YWJseSBhZGRpbmcgdG8gaXQgdGhlIHByb3BlcnRpZXMgb2Ygb2JqZWN0IGIuXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IGEgVGhlIG9iamVjdCB0byBiZSBleHRlbmRlZFxuICogQHBhcmFtIHtPYmplY3R9IGIgVGhlIG9iamVjdCB0byBjb3B5IHByb3BlcnRpZXMgZnJvbVxuICogQHBhcmFtIHtPYmplY3R9IHRoaXNBcmcgVGhlIG9iamVjdCB0byBiaW5kIGZ1bmN0aW9uIHRvXG4gKiBAcmV0dXJuIHtPYmplY3R9IFRoZSByZXN1bHRpbmcgdmFsdWUgb2Ygb2JqZWN0IGFcbiAqL1xuZnVuY3Rpb24gZXh0ZW5kKGEsIGIsIHRoaXNBcmcpIHtcbiAgZm9yRWFjaChiLCBmdW5jdGlvbiBhc3NpZ25WYWx1ZSh2YWwsIGtleSkge1xuICAgIGlmICh0aGlzQXJnICYmIHR5cGVvZiB2YWwgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIGFba2V5XSA9IGJpbmQodmFsLCB0aGlzQXJnKTtcbiAgICB9IGVsc2Uge1xuICAgICAgYVtrZXldID0gdmFsO1xuICAgIH1cbiAgfSk7XG4gIHJldHVybiBhO1xufVxuXG4vKipcbiAqIFJlbW92ZSBieXRlIG9yZGVyIG1hcmtlci4gVGhpcyBjYXRjaGVzIEVGIEJCIEJGICh0aGUgVVRGLTggQk9NKVxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBjb250ZW50IHdpdGggQk9NXG4gKiBAcmV0dXJuIHtzdHJpbmd9IGNvbnRlbnQgdmFsdWUgd2l0aG91dCBCT01cbiAqL1xuZnVuY3Rpb24gc3RyaXBCT00oY29udGVudCkge1xuICBpZiAoY29udGVudC5jaGFyQ29kZUF0KDApID09PSAweEZFRkYpIHtcbiAgICBjb250ZW50ID0gY29udGVudC5zbGljZSgxKTtcbiAgfVxuICByZXR1cm4gY29udGVudDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIGlzQXJyYXk6IGlzQXJyYXksXG4gIGlzQXJyYXlCdWZmZXI6IGlzQXJyYXlCdWZmZXIsXG4gIGlzQnVmZmVyOiBpc0J1ZmZlcixcbiAgaXNGb3JtRGF0YTogaXNGb3JtRGF0YSxcbiAgaXNBcnJheUJ1ZmZlclZpZXc6IGlzQXJyYXlCdWZmZXJWaWV3LFxuICBpc1N0cmluZzogaXNTdHJpbmcsXG4gIGlzTnVtYmVyOiBpc051bWJlcixcbiAgaXNPYmplY3Q6IGlzT2JqZWN0LFxuICBpc1BsYWluT2JqZWN0OiBpc1BsYWluT2JqZWN0LFxuICBpc1VuZGVmaW5lZDogaXNVbmRlZmluZWQsXG4gIGlzRGF0ZTogaXNEYXRlLFxuICBpc0ZpbGU6IGlzRmlsZSxcbiAgaXNCbG9iOiBpc0Jsb2IsXG4gIGlzRnVuY3Rpb246IGlzRnVuY3Rpb24sXG4gIGlzU3RyZWFtOiBpc1N0cmVhbSxcbiAgaXNVUkxTZWFyY2hQYXJhbXM6IGlzVVJMU2VhcmNoUGFyYW1zLFxuICBpc1N0YW5kYXJkQnJvd3NlckVudjogaXNTdGFuZGFyZEJyb3dzZXJFbnYsXG4gIGZvckVhY2g6IGZvckVhY2gsXG4gIG1lcmdlOiBtZXJnZSxcbiAgZXh0ZW5kOiBleHRlbmQsXG4gIHRyaW06IHRyaW0sXG4gIHN0cmlwQk9NOiBzdHJpcEJPTVxufTtcbiIsIi8vIEltcG9ydHNcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fIGZyb20gXCIuLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvc291cmNlTWFwcy5qc1wiO1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyBmcm9tIFwiLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qc1wiO1xudmFyIF9fX0NTU19MT0FERVJfRVhQT1JUX19fID0gX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fKF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18pO1xuX19fQ1NTX0xPQURFUl9FWFBPUlRfX18ucHVzaChbbW9kdWxlLmlkLCBcIkBpbXBvcnQgdXJsKGh0dHBzOi8vZm9udHMuZ29vZ2xlYXBpcy5jb20vY3NzMj9mYW1pbHk9TW9udHNlcnJhdDp3Z2h0QDUwMDs2MDAmZGlzcGxheT1zd2FwKTtcIl0pO1xuLy8gTW9kdWxlXG5fX19DU1NfTE9BREVSX0VYUE9SVF9fXy5wdXNoKFttb2R1bGUuaWQsIFwiYm9keXtiYWNrZ3JvdW5kLWNvbG9yOiNhZGQ4ZTY7Ym94LXNpemluZzpib3JkZXItYm94O21hcmdpbjowO3BhZGRpbmc6MH0uV0lDQm93aUdheW9uY3lkcmF0WXcsLk9QbTFVRWFpTmhtR3F4QzF0b2JOe2ZvbnQtZmFtaWx5OlxcXCJNb250c2VycmF0XFxcIixzYW5zLXNlcmlmO2ZvbnQtd2VpZ2h0OjUwMDtmb250LXNpemU6MTZweDtjb2xvcjojMzEzMDMwO3RleHQtZGVjb3JhdGlvbjpub25lfVwiLCBcIlwiLHtcInZlcnNpb25cIjozLFwic291cmNlc1wiOltcIndlYnBhY2s6Ly8uL2NsaWVudC9zdHlsZXMuY3NzXCJdLFwibmFtZXNcIjpbXSxcIm1hcHBpbmdzXCI6XCJBQUVBLEtBQ0Usd0JBQUEsQ0FDQSxxQkFBQSxDQUNBLFFBQUEsQ0FDQSxTQUFBLENBR0YsNENBRUUsbUNBQUEsQ0FDQSxlQUFBLENBQ0EsY0FBQSxDQUNBLGFBQUEsQ0FDQSxvQkFBQVwiLFwic291cmNlc0NvbnRlbnRcIjpbXCJAaW1wb3J0IHVybCgnaHR0cHM6Ly9mb250cy5nb29nbGVhcGlzLmNvbS9jc3MyP2ZhbWlseT1Nb250c2VycmF0OndnaHRANTAwOzYwMCZkaXNwbGF5PXN3YXAnKTtcXG5cXG5ib2R5IHtcXG4gIGJhY2tncm91bmQtY29sb3I6IGxpZ2h0Ymx1ZTtcXG4gIGJveC1zaXppbmc6IGJvcmRlci1ib3g7XFxuICBtYXJnaW46IDA7XFxuICBwYWRkaW5nOiAwO1xcbn1cXG5cXG4uYnJhbmQsXFxuLm5hdl9saW5rcyB7XFxuICBmb250LWZhbWlseTogJ01vbnRzZXJyYXQnLCBzYW5zLXNlcmlmO1xcbiAgZm9udC13ZWlnaHQ6IDUwMDtcXG4gIGZvbnQtc2l6ZTogMTZweDtcXG4gIGNvbG9yOiAjMzEzMDMwO1xcbiAgdGV4dC1kZWNvcmF0aW9uOiBub25lO1xcbn1cXG5cIl0sXCJzb3VyY2VSb290XCI6XCJcIn1dKTtcbi8vIEV4cG9ydHNcbl9fX0NTU19MT0FERVJfRVhQT1JUX19fLmxvY2FscyA9IHtcblx0XCJicmFuZFwiOiBcIldJQ0Jvd2lHYXlvbmN5ZHJhdFl3XCIsXG5cdFwibmF2X2xpbmtzXCI6IFwiT1BtMVVFYWlOaG1HcXhDMXRvYk5cIlxufTtcbmV4cG9ydCBkZWZhdWx0IF9fX0NTU19MT0FERVJfRVhQT1JUX19fO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qXG4gIE1JVCBMaWNlbnNlIGh0dHA6Ly93d3cub3BlbnNvdXJjZS5vcmcvbGljZW5zZXMvbWl0LWxpY2Vuc2UucGhwXG4gIEF1dGhvciBUb2JpYXMgS29wcGVycyBAc29rcmFcbiovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChjc3NXaXRoTWFwcGluZ1RvU3RyaW5nKSB7XG4gIHZhciBsaXN0ID0gW107IC8vIHJldHVybiB0aGUgbGlzdCBvZiBtb2R1bGVzIGFzIGNzcyBzdHJpbmdcblxuICBsaXN0LnRvU3RyaW5nID0gZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG4gICAgcmV0dXJuIHRoaXMubWFwKGZ1bmN0aW9uIChpdGVtKSB7XG4gICAgICB2YXIgY29udGVudCA9IFwiXCI7XG4gICAgICB2YXIgbmVlZExheWVyID0gdHlwZW9mIGl0ZW1bNV0gIT09IFwidW5kZWZpbmVkXCI7XG5cbiAgICAgIGlmIChpdGVtWzRdKSB7XG4gICAgICAgIGNvbnRlbnQgKz0gXCJAc3VwcG9ydHMgKFwiLmNvbmNhdChpdGVtWzRdLCBcIikge1wiKTtcbiAgICAgIH1cblxuICAgICAgaWYgKGl0ZW1bMl0pIHtcbiAgICAgICAgY29udGVudCArPSBcIkBtZWRpYSBcIi5jb25jYXQoaXRlbVsyXSwgXCIge1wiKTtcbiAgICAgIH1cblxuICAgICAgaWYgKG5lZWRMYXllcikge1xuICAgICAgICBjb250ZW50ICs9IFwiQGxheWVyXCIuY29uY2F0KGl0ZW1bNV0ubGVuZ3RoID4gMCA/IFwiIFwiLmNvbmNhdChpdGVtWzVdKSA6IFwiXCIsIFwiIHtcIik7XG4gICAgICB9XG5cbiAgICAgIGNvbnRlbnQgKz0gY3NzV2l0aE1hcHBpbmdUb1N0cmluZyhpdGVtKTtcblxuICAgICAgaWYgKG5lZWRMYXllcikge1xuICAgICAgICBjb250ZW50ICs9IFwifVwiO1xuICAgICAgfVxuXG4gICAgICBpZiAoaXRlbVsyXSkge1xuICAgICAgICBjb250ZW50ICs9IFwifVwiO1xuICAgICAgfVxuXG4gICAgICBpZiAoaXRlbVs0XSkge1xuICAgICAgICBjb250ZW50ICs9IFwifVwiO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gY29udGVudDtcbiAgICB9KS5qb2luKFwiXCIpO1xuICB9OyAvLyBpbXBvcnQgYSBsaXN0IG9mIG1vZHVsZXMgaW50byB0aGUgbGlzdFxuXG5cbiAgbGlzdC5pID0gZnVuY3Rpb24gaShtb2R1bGVzLCBtZWRpYSwgZGVkdXBlLCBzdXBwb3J0cywgbGF5ZXIpIHtcbiAgICBpZiAodHlwZW9mIG1vZHVsZXMgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgIG1vZHVsZXMgPSBbW251bGwsIG1vZHVsZXMsIHVuZGVmaW5lZF1dO1xuICAgIH1cblxuICAgIHZhciBhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzID0ge307XG5cbiAgICBpZiAoZGVkdXBlKSB7XG4gICAgICBmb3IgKHZhciBrID0gMDsgayA8IHRoaXMubGVuZ3RoOyBrKyspIHtcbiAgICAgICAgdmFyIGlkID0gdGhpc1trXVswXTtcblxuICAgICAgICBpZiAoaWQgIT0gbnVsbCkge1xuICAgICAgICAgIGFscmVhZHlJbXBvcnRlZE1vZHVsZXNbaWRdID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIGZvciAodmFyIF9rID0gMDsgX2sgPCBtb2R1bGVzLmxlbmd0aDsgX2srKykge1xuICAgICAgdmFyIGl0ZW0gPSBbXS5jb25jYXQobW9kdWxlc1tfa10pO1xuXG4gICAgICBpZiAoZGVkdXBlICYmIGFscmVhZHlJbXBvcnRlZE1vZHVsZXNbaXRlbVswXV0pIHtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG5cbiAgICAgIGlmICh0eXBlb2YgbGF5ZXIgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBpdGVtWzVdID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICAgICAgaXRlbVs1XSA9IGxheWVyO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGl0ZW1bMV0gPSBcIkBsYXllclwiLmNvbmNhdChpdGVtWzVdLmxlbmd0aCA+IDAgPyBcIiBcIi5jb25jYXQoaXRlbVs1XSkgOiBcIlwiLCBcIiB7XCIpLmNvbmNhdChpdGVtWzFdLCBcIn1cIik7XG4gICAgICAgICAgaXRlbVs1XSA9IGxheWVyO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmIChtZWRpYSkge1xuICAgICAgICBpZiAoIWl0ZW1bMl0pIHtcbiAgICAgICAgICBpdGVtWzJdID0gbWVkaWE7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaXRlbVsxXSA9IFwiQG1lZGlhIFwiLmNvbmNhdChpdGVtWzJdLCBcIiB7XCIpLmNvbmNhdChpdGVtWzFdLCBcIn1cIik7XG4gICAgICAgICAgaXRlbVsyXSA9IG1lZGlhO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmIChzdXBwb3J0cykge1xuICAgICAgICBpZiAoIWl0ZW1bNF0pIHtcbiAgICAgICAgICBpdGVtWzRdID0gXCJcIi5jb25jYXQoc3VwcG9ydHMpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGl0ZW1bMV0gPSBcIkBzdXBwb3J0cyAoXCIuY29uY2F0KGl0ZW1bNF0sIFwiKSB7XCIpLmNvbmNhdChpdGVtWzFdLCBcIn1cIik7XG4gICAgICAgICAgaXRlbVs0XSA9IHN1cHBvcnRzO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGxpc3QucHVzaChpdGVtKTtcbiAgICB9XG4gIH07XG5cbiAgcmV0dXJuIGxpc3Q7XG59OyIsIlwidXNlIHN0cmljdFwiO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdGVtKSB7XG4gIHZhciBjb250ZW50ID0gaXRlbVsxXTtcbiAgdmFyIGNzc01hcHBpbmcgPSBpdGVtWzNdO1xuXG4gIGlmICghY3NzTWFwcGluZykge1xuICAgIHJldHVybiBjb250ZW50O1xuICB9XG5cbiAgaWYgKHR5cGVvZiBidG9hID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICB2YXIgYmFzZTY0ID0gYnRvYSh1bmVzY2FwZShlbmNvZGVVUklDb21wb25lbnQoSlNPTi5zdHJpbmdpZnkoY3NzTWFwcGluZykpKSk7XG4gICAgdmFyIGRhdGEgPSBcInNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LFwiLmNvbmNhdChiYXNlNjQpO1xuICAgIHZhciBzb3VyY2VNYXBwaW5nID0gXCIvKiMgXCIuY29uY2F0KGRhdGEsIFwiICovXCIpO1xuICAgIHZhciBzb3VyY2VVUkxzID0gY3NzTWFwcGluZy5zb3VyY2VzLm1hcChmdW5jdGlvbiAoc291cmNlKSB7XG4gICAgICByZXR1cm4gXCIvKiMgc291cmNlVVJMPVwiLmNvbmNhdChjc3NNYXBwaW5nLnNvdXJjZVJvb3QgfHwgXCJcIikuY29uY2F0KHNvdXJjZSwgXCIgKi9cIik7XG4gICAgfSk7XG4gICAgcmV0dXJuIFtjb250ZW50XS5jb25jYXQoc291cmNlVVJMcykuY29uY2F0KFtzb3VyY2VNYXBwaW5nXSkuam9pbihcIlxcblwiKTtcbiAgfVxuXG4gIHJldHVybiBbY29udGVudF0uam9pbihcIlxcblwiKTtcbn07IiwiKGZ1bmN0aW9uKCkge1xuICB2YXIgZXhwYW5kSVB2NiwgaXBhZGRyLCBpcHY0UGFydCwgaXB2NFJlZ2V4ZXMsIGlwdjZQYXJ0LCBpcHY2UmVnZXhlcywgbWF0Y2hDSURSLCByb290LCB6b25lSW5kZXg7XG5cbiAgaXBhZGRyID0ge307XG5cbiAgcm9vdCA9IHRoaXM7XG5cbiAgaWYgKCh0eXBlb2YgbW9kdWxlICE9PSBcInVuZGVmaW5lZFwiICYmIG1vZHVsZSAhPT0gbnVsbCkgJiYgbW9kdWxlLmV4cG9ydHMpIHtcbiAgICBtb2R1bGUuZXhwb3J0cyA9IGlwYWRkcjtcbiAgfSBlbHNlIHtcbiAgICByb290WydpcGFkZHInXSA9IGlwYWRkcjtcbiAgfVxuXG4gIG1hdGNoQ0lEUiA9IGZ1bmN0aW9uKGZpcnN0LCBzZWNvbmQsIHBhcnRTaXplLCBjaWRyQml0cykge1xuICAgIHZhciBwYXJ0LCBzaGlmdDtcbiAgICBpZiAoZmlyc3QubGVuZ3RoICE9PSBzZWNvbmQubGVuZ3RoKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJpcGFkZHI6IGNhbm5vdCBtYXRjaCBDSURSIGZvciBvYmplY3RzIHdpdGggZGlmZmVyZW50IGxlbmd0aHNcIik7XG4gICAgfVxuICAgIHBhcnQgPSAwO1xuICAgIHdoaWxlIChjaWRyQml0cyA+IDApIHtcbiAgICAgIHNoaWZ0ID0gcGFydFNpemUgLSBjaWRyQml0cztcbiAgICAgIGlmIChzaGlmdCA8IDApIHtcbiAgICAgICAgc2hpZnQgPSAwO1xuICAgICAgfVxuICAgICAgaWYgKGZpcnN0W3BhcnRdID4+IHNoaWZ0ICE9PSBzZWNvbmRbcGFydF0gPj4gc2hpZnQpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgICAgY2lkckJpdHMgLT0gcGFydFNpemU7XG4gICAgICBwYXJ0ICs9IDE7XG4gICAgfVxuICAgIHJldHVybiB0cnVlO1xuICB9O1xuXG4gIGlwYWRkci5zdWJuZXRNYXRjaCA9IGZ1bmN0aW9uKGFkZHJlc3MsIHJhbmdlTGlzdCwgZGVmYXVsdE5hbWUpIHtcbiAgICB2YXIgaywgbGVuLCByYW5nZU5hbWUsIHJhbmdlU3VibmV0cywgc3VibmV0O1xuICAgIGlmIChkZWZhdWx0TmFtZSA9PSBudWxsKSB7XG4gICAgICBkZWZhdWx0TmFtZSA9ICd1bmljYXN0JztcbiAgICB9XG4gICAgZm9yIChyYW5nZU5hbWUgaW4gcmFuZ2VMaXN0KSB7XG4gICAgICByYW5nZVN1Ym5ldHMgPSByYW5nZUxpc3RbcmFuZ2VOYW1lXTtcbiAgICAgIGlmIChyYW5nZVN1Ym5ldHNbMF0gJiYgIShyYW5nZVN1Ym5ldHNbMF0gaW5zdGFuY2VvZiBBcnJheSkpIHtcbiAgICAgICAgcmFuZ2VTdWJuZXRzID0gW3JhbmdlU3VibmV0c107XG4gICAgICB9XG4gICAgICBmb3IgKGsgPSAwLCBsZW4gPSByYW5nZVN1Ym5ldHMubGVuZ3RoOyBrIDwgbGVuOyBrKyspIHtcbiAgICAgICAgc3VibmV0ID0gcmFuZ2VTdWJuZXRzW2tdO1xuICAgICAgICBpZiAoYWRkcmVzcy5raW5kKCkgPT09IHN1Ym5ldFswXS5raW5kKCkpIHtcbiAgICAgICAgICBpZiAoYWRkcmVzcy5tYXRjaC5hcHBseShhZGRyZXNzLCBzdWJuZXQpKSB7XG4gICAgICAgICAgICByZXR1cm4gcmFuZ2VOYW1lO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gZGVmYXVsdE5hbWU7XG4gIH07XG5cbiAgaXBhZGRyLklQdjQgPSAoZnVuY3Rpb24oKSB7XG4gICAgZnVuY3Rpb24gSVB2NChvY3RldHMpIHtcbiAgICAgIHZhciBrLCBsZW4sIG9jdGV0O1xuICAgICAgaWYgKG9jdGV0cy5sZW5ndGggIT09IDQpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiaXBhZGRyOiBpcHY0IG9jdGV0IGNvdW50IHNob3VsZCBiZSA0XCIpO1xuICAgICAgfVxuICAgICAgZm9yIChrID0gMCwgbGVuID0gb2N0ZXRzLmxlbmd0aDsgayA8IGxlbjsgaysrKSB7XG4gICAgICAgIG9jdGV0ID0gb2N0ZXRzW2tdO1xuICAgICAgICBpZiAoISgoMCA8PSBvY3RldCAmJiBvY3RldCA8PSAyNTUpKSkge1xuICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcImlwYWRkcjogaXB2NCBvY3RldCBzaG91bGQgZml0IGluIDggYml0c1wiKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgdGhpcy5vY3RldHMgPSBvY3RldHM7XG4gICAgfVxuXG4gICAgSVB2NC5wcm90b3R5cGUua2luZCA9IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuICdpcHY0JztcbiAgICB9O1xuXG4gICAgSVB2NC5wcm90b3R5cGUudG9TdHJpbmcgPSBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiB0aGlzLm9jdGV0cy5qb2luKFwiLlwiKTtcbiAgICB9O1xuXG4gICAgSVB2NC5wcm90b3R5cGUudG9Ob3JtYWxpemVkU3RyaW5nID0gZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gdGhpcy50b1N0cmluZygpO1xuICAgIH07XG5cbiAgICBJUHY0LnByb3RvdHlwZS50b0J5dGVBcnJheSA9IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIHRoaXMub2N0ZXRzLnNsaWNlKDApO1xuICAgIH07XG5cbiAgICBJUHY0LnByb3RvdHlwZS5tYXRjaCA9IGZ1bmN0aW9uKG90aGVyLCBjaWRyUmFuZ2UpIHtcbiAgICAgIHZhciByZWY7XG4gICAgICBpZiAoY2lkclJhbmdlID09PSB2b2lkIDApIHtcbiAgICAgICAgcmVmID0gb3RoZXIsIG90aGVyID0gcmVmWzBdLCBjaWRyUmFuZ2UgPSByZWZbMV07XG4gICAgICB9XG4gICAgICBpZiAob3RoZXIua2luZCgpICE9PSAnaXB2NCcpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiaXBhZGRyOiBjYW5ub3QgbWF0Y2ggaXB2NCBhZGRyZXNzIHdpdGggbm9uLWlwdjQgb25lXCIpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIG1hdGNoQ0lEUih0aGlzLm9jdGV0cywgb3RoZXIub2N0ZXRzLCA4LCBjaWRyUmFuZ2UpO1xuICAgIH07XG5cbiAgICBJUHY0LnByb3RvdHlwZS5TcGVjaWFsUmFuZ2VzID0ge1xuICAgICAgdW5zcGVjaWZpZWQ6IFtbbmV3IElQdjQoWzAsIDAsIDAsIDBdKSwgOF1dLFxuICAgICAgYnJvYWRjYXN0OiBbW25ldyBJUHY0KFsyNTUsIDI1NSwgMjU1LCAyNTVdKSwgMzJdXSxcbiAgICAgIG11bHRpY2FzdDogW1tuZXcgSVB2NChbMjI0LCAwLCAwLCAwXSksIDRdXSxcbiAgICAgIGxpbmtMb2NhbDogW1tuZXcgSVB2NChbMTY5LCAyNTQsIDAsIDBdKSwgMTZdXSxcbiAgICAgIGxvb3BiYWNrOiBbW25ldyBJUHY0KFsxMjcsIDAsIDAsIDBdKSwgOF1dLFxuICAgICAgY2FycmllckdyYWRlTmF0OiBbW25ldyBJUHY0KFsxMDAsIDY0LCAwLCAwXSksIDEwXV0sXG4gICAgICBcInByaXZhdGVcIjogW1tuZXcgSVB2NChbMTAsIDAsIDAsIDBdKSwgOF0sIFtuZXcgSVB2NChbMTcyLCAxNiwgMCwgMF0pLCAxMl0sIFtuZXcgSVB2NChbMTkyLCAxNjgsIDAsIDBdKSwgMTZdXSxcbiAgICAgIHJlc2VydmVkOiBbW25ldyBJUHY0KFsxOTIsIDAsIDAsIDBdKSwgMjRdLCBbbmV3IElQdjQoWzE5MiwgMCwgMiwgMF0pLCAyNF0sIFtuZXcgSVB2NChbMTkyLCA4OCwgOTksIDBdKSwgMjRdLCBbbmV3IElQdjQoWzE5OCwgNTEsIDEwMCwgMF0pLCAyNF0sIFtuZXcgSVB2NChbMjAzLCAwLCAxMTMsIDBdKSwgMjRdLCBbbmV3IElQdjQoWzI0MCwgMCwgMCwgMF0pLCA0XV1cbiAgICB9O1xuXG4gICAgSVB2NC5wcm90b3R5cGUucmFuZ2UgPSBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiBpcGFkZHIuc3VibmV0TWF0Y2godGhpcywgdGhpcy5TcGVjaWFsUmFuZ2VzKTtcbiAgICB9O1xuXG4gICAgSVB2NC5wcm90b3R5cGUudG9JUHY0TWFwcGVkQWRkcmVzcyA9IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIGlwYWRkci5JUHY2LnBhcnNlKFwiOjpmZmZmOlwiICsgKHRoaXMudG9TdHJpbmcoKSkpO1xuICAgIH07XG5cbiAgICBJUHY0LnByb3RvdHlwZS5wcmVmaXhMZW5ndGhGcm9tU3VibmV0TWFzayA9IGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIGNpZHIsIGksIGssIG9jdGV0LCBzdG9wLCB6ZXJvcywgemVyb3RhYmxlO1xuICAgICAgemVyb3RhYmxlID0ge1xuICAgICAgICAwOiA4LFxuICAgICAgICAxMjg6IDcsXG4gICAgICAgIDE5MjogNixcbiAgICAgICAgMjI0OiA1LFxuICAgICAgICAyNDA6IDQsXG4gICAgICAgIDI0ODogMyxcbiAgICAgICAgMjUyOiAyLFxuICAgICAgICAyNTQ6IDEsXG4gICAgICAgIDI1NTogMFxuICAgICAgfTtcbiAgICAgIGNpZHIgPSAwO1xuICAgICAgc3RvcCA9IGZhbHNlO1xuICAgICAgZm9yIChpID0gayA9IDM7IGsgPj0gMDsgaSA9IGsgKz0gLTEpIHtcbiAgICAgICAgb2N0ZXQgPSB0aGlzLm9jdGV0c1tpXTtcbiAgICAgICAgaWYgKG9jdGV0IGluIHplcm90YWJsZSkge1xuICAgICAgICAgIHplcm9zID0gemVyb3RhYmxlW29jdGV0XTtcbiAgICAgICAgICBpZiAoc3RvcCAmJiB6ZXJvcyAhPT0gMCkge1xuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmICh6ZXJvcyAhPT0gOCkge1xuICAgICAgICAgICAgc3RvcCA9IHRydWU7XG4gICAgICAgICAgfVxuICAgICAgICAgIGNpZHIgKz0gemVyb3M7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiAzMiAtIGNpZHI7XG4gICAgfTtcblxuICAgIHJldHVybiBJUHY0O1xuXG4gIH0pKCk7XG5cbiAgaXB2NFBhcnQgPSBcIigwP1xcXFxkK3wweFthLWYwLTldKylcIjtcblxuICBpcHY0UmVnZXhlcyA9IHtcbiAgICBmb3VyT2N0ZXQ6IG5ldyBSZWdFeHAoXCJeXCIgKyBpcHY0UGFydCArIFwiXFxcXC5cIiArIGlwdjRQYXJ0ICsgXCJcXFxcLlwiICsgaXB2NFBhcnQgKyBcIlxcXFwuXCIgKyBpcHY0UGFydCArIFwiJFwiLCAnaScpLFxuICAgIGxvbmdWYWx1ZTogbmV3IFJlZ0V4cChcIl5cIiArIGlwdjRQYXJ0ICsgXCIkXCIsICdpJylcbiAgfTtcblxuICBpcGFkZHIuSVB2NC5wYXJzZXIgPSBmdW5jdGlvbihzdHJpbmcpIHtcbiAgICB2YXIgbWF0Y2gsIHBhcnNlSW50QXV0bywgcGFydCwgc2hpZnQsIHZhbHVlO1xuICAgIHBhcnNlSW50QXV0byA9IGZ1bmN0aW9uKHN0cmluZykge1xuICAgICAgaWYgKHN0cmluZ1swXSA9PT0gXCIwXCIgJiYgc3RyaW5nWzFdICE9PSBcInhcIikge1xuICAgICAgICByZXR1cm4gcGFyc2VJbnQoc3RyaW5nLCA4KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBwYXJzZUludChzdHJpbmcpO1xuICAgICAgfVxuICAgIH07XG4gICAgaWYgKG1hdGNoID0gc3RyaW5nLm1hdGNoKGlwdjRSZWdleGVzLmZvdXJPY3RldCkpIHtcbiAgICAgIHJldHVybiAoZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciBrLCBsZW4sIHJlZiwgcmVzdWx0cztcbiAgICAgICAgcmVmID0gbWF0Y2guc2xpY2UoMSwgNik7XG4gICAgICAgIHJlc3VsdHMgPSBbXTtcbiAgICAgICAgZm9yIChrID0gMCwgbGVuID0gcmVmLmxlbmd0aDsgayA8IGxlbjsgaysrKSB7XG4gICAgICAgICAgcGFydCA9IHJlZltrXTtcbiAgICAgICAgICByZXN1bHRzLnB1c2gocGFyc2VJbnRBdXRvKHBhcnQpKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVzdWx0cztcbiAgICAgIH0pKCk7XG4gICAgfSBlbHNlIGlmIChtYXRjaCA9IHN0cmluZy5tYXRjaChpcHY0UmVnZXhlcy5sb25nVmFsdWUpKSB7XG4gICAgICB2YWx1ZSA9IHBhcnNlSW50QXV0byhtYXRjaFsxXSk7XG4gICAgICBpZiAodmFsdWUgPiAweGZmZmZmZmZmIHx8IHZhbHVlIDwgMCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJpcGFkZHI6IGFkZHJlc3Mgb3V0c2lkZSBkZWZpbmVkIHJhbmdlXCIpO1xuICAgICAgfVxuICAgICAgcmV0dXJuICgoZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciBrLCByZXN1bHRzO1xuICAgICAgICByZXN1bHRzID0gW107XG4gICAgICAgIGZvciAoc2hpZnQgPSBrID0gMDsgayA8PSAyNDsgc2hpZnQgPSBrICs9IDgpIHtcbiAgICAgICAgICByZXN1bHRzLnB1c2goKHZhbHVlID4+IHNoaWZ0KSAmIDB4ZmYpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXN1bHRzO1xuICAgICAgfSkoKSkucmV2ZXJzZSgpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gIH07XG5cbiAgaXBhZGRyLklQdjYgPSAoZnVuY3Rpb24oKSB7XG4gICAgZnVuY3Rpb24gSVB2NihwYXJ0cywgem9uZUlkKSB7XG4gICAgICB2YXIgaSwgaywgbCwgbGVuLCBwYXJ0LCByZWY7XG4gICAgICBpZiAocGFydHMubGVuZ3RoID09PSAxNikge1xuICAgICAgICB0aGlzLnBhcnRzID0gW107XG4gICAgICAgIGZvciAoaSA9IGsgPSAwOyBrIDw9IDE0OyBpID0gayArPSAyKSB7XG4gICAgICAgICAgdGhpcy5wYXJ0cy5wdXNoKChwYXJ0c1tpXSA8PCA4KSB8IHBhcnRzW2kgKyAxXSk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAocGFydHMubGVuZ3RoID09PSA4KSB7XG4gICAgICAgIHRoaXMucGFydHMgPSBwYXJ0cztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcImlwYWRkcjogaXB2NiBwYXJ0IGNvdW50IHNob3VsZCBiZSA4IG9yIDE2XCIpO1xuICAgICAgfVxuICAgICAgcmVmID0gdGhpcy5wYXJ0cztcbiAgICAgIGZvciAobCA9IDAsIGxlbiA9IHJlZi5sZW5ndGg7IGwgPCBsZW47IGwrKykge1xuICAgICAgICBwYXJ0ID0gcmVmW2xdO1xuICAgICAgICBpZiAoISgoMCA8PSBwYXJ0ICYmIHBhcnQgPD0gMHhmZmZmKSkpIHtcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJpcGFkZHI6IGlwdjYgcGFydCBzaG91bGQgZml0IGluIDE2IGJpdHNcIik7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmICh6b25lSWQpIHtcbiAgICAgICAgdGhpcy56b25lSWQgPSB6b25lSWQ7XG4gICAgICB9XG4gICAgfVxuXG4gICAgSVB2Ni5wcm90b3R5cGUua2luZCA9IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuICdpcHY2JztcbiAgICB9O1xuXG4gICAgSVB2Ni5wcm90b3R5cGUudG9TdHJpbmcgPSBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiB0aGlzLnRvTm9ybWFsaXplZFN0cmluZygpLnJlcGxhY2UoLygoXnw6KSgwKDp8JCkpKykvLCAnOjonKTtcbiAgICB9O1xuXG4gICAgSVB2Ni5wcm90b3R5cGUudG9SRkM1OTUyU3RyaW5nID0gZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgYmVzdE1hdGNoSW5kZXgsIGJlc3RNYXRjaExlbmd0aCwgbWF0Y2gsIHJlZ2V4LCBzdHJpbmc7XG4gICAgICByZWdleCA9IC8oKF58OikoMCg6fCQpKXsyLH0pL2c7XG4gICAgICBzdHJpbmcgPSB0aGlzLnRvTm9ybWFsaXplZFN0cmluZygpO1xuICAgICAgYmVzdE1hdGNoSW5kZXggPSAwO1xuICAgICAgYmVzdE1hdGNoTGVuZ3RoID0gLTE7XG4gICAgICB3aGlsZSAoKG1hdGNoID0gcmVnZXguZXhlYyhzdHJpbmcpKSkge1xuICAgICAgICBpZiAobWF0Y2hbMF0ubGVuZ3RoID4gYmVzdE1hdGNoTGVuZ3RoKSB7XG4gICAgICAgICAgYmVzdE1hdGNoSW5kZXggPSBtYXRjaC5pbmRleDtcbiAgICAgICAgICBiZXN0TWF0Y2hMZW5ndGggPSBtYXRjaFswXS5sZW5ndGg7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChiZXN0TWF0Y2hMZW5ndGggPCAwKSB7XG4gICAgICAgIHJldHVybiBzdHJpbmc7XG4gICAgICB9XG4gICAgICByZXR1cm4gc3RyaW5nLnN1YnN0cmluZygwLCBiZXN0TWF0Y2hJbmRleCkgKyAnOjonICsgc3RyaW5nLnN1YnN0cmluZyhiZXN0TWF0Y2hJbmRleCArIGJlc3RNYXRjaExlbmd0aCk7XG4gICAgfTtcblxuICAgIElQdjYucHJvdG90eXBlLnRvQnl0ZUFycmF5ID0gZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgYnl0ZXMsIGssIGxlbiwgcGFydCwgcmVmO1xuICAgICAgYnl0ZXMgPSBbXTtcbiAgICAgIHJlZiA9IHRoaXMucGFydHM7XG4gICAgICBmb3IgKGsgPSAwLCBsZW4gPSByZWYubGVuZ3RoOyBrIDwgbGVuOyBrKyspIHtcbiAgICAgICAgcGFydCA9IHJlZltrXTtcbiAgICAgICAgYnl0ZXMucHVzaChwYXJ0ID4+IDgpO1xuICAgICAgICBieXRlcy5wdXNoKHBhcnQgJiAweGZmKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBieXRlcztcbiAgICB9O1xuXG4gICAgSVB2Ni5wcm90b3R5cGUudG9Ob3JtYWxpemVkU3RyaW5nID0gZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgYWRkciwgcGFydCwgc3VmZml4O1xuICAgICAgYWRkciA9ICgoZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciBrLCBsZW4sIHJlZiwgcmVzdWx0cztcbiAgICAgICAgcmVmID0gdGhpcy5wYXJ0cztcbiAgICAgICAgcmVzdWx0cyA9IFtdO1xuICAgICAgICBmb3IgKGsgPSAwLCBsZW4gPSByZWYubGVuZ3RoOyBrIDwgbGVuOyBrKyspIHtcbiAgICAgICAgICBwYXJ0ID0gcmVmW2tdO1xuICAgICAgICAgIHJlc3VsdHMucHVzaChwYXJ0LnRvU3RyaW5nKDE2KSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlc3VsdHM7XG4gICAgICB9KS5jYWxsKHRoaXMpKS5qb2luKFwiOlwiKTtcbiAgICAgIHN1ZmZpeCA9ICcnO1xuICAgICAgaWYgKHRoaXMuem9uZUlkKSB7XG4gICAgICAgIHN1ZmZpeCA9ICclJyArIHRoaXMuem9uZUlkO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGFkZHIgKyBzdWZmaXg7XG4gICAgfTtcblxuICAgIElQdjYucHJvdG90eXBlLnRvRml4ZWRMZW5ndGhTdHJpbmcgPSBmdW5jdGlvbigpIHtcbiAgICAgIHZhciBhZGRyLCBwYXJ0LCBzdWZmaXg7XG4gICAgICBhZGRyID0gKChmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIGssIGxlbiwgcmVmLCByZXN1bHRzO1xuICAgICAgICByZWYgPSB0aGlzLnBhcnRzO1xuICAgICAgICByZXN1bHRzID0gW107XG4gICAgICAgIGZvciAoayA9IDAsIGxlbiA9IHJlZi5sZW5ndGg7IGsgPCBsZW47IGsrKykge1xuICAgICAgICAgIHBhcnQgPSByZWZba107XG4gICAgICAgICAgcmVzdWx0cy5wdXNoKHBhcnQudG9TdHJpbmcoMTYpLnBhZFN0YXJ0KDQsICcwJykpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXN1bHRzO1xuICAgICAgfSkuY2FsbCh0aGlzKSkuam9pbihcIjpcIik7XG4gICAgICBzdWZmaXggPSAnJztcbiAgICAgIGlmICh0aGlzLnpvbmVJZCkge1xuICAgICAgICBzdWZmaXggPSAnJScgKyB0aGlzLnpvbmVJZDtcbiAgICAgIH1cbiAgICAgIHJldHVybiBhZGRyICsgc3VmZml4O1xuICAgIH07XG5cbiAgICBJUHY2LnByb3RvdHlwZS5tYXRjaCA9IGZ1bmN0aW9uKG90aGVyLCBjaWRyUmFuZ2UpIHtcbiAgICAgIHZhciByZWY7XG4gICAgICBpZiAoY2lkclJhbmdlID09PSB2b2lkIDApIHtcbiAgICAgICAgcmVmID0gb3RoZXIsIG90aGVyID0gcmVmWzBdLCBjaWRyUmFuZ2UgPSByZWZbMV07XG4gICAgICB9XG4gICAgICBpZiAob3RoZXIua2luZCgpICE9PSAnaXB2NicpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiaXBhZGRyOiBjYW5ub3QgbWF0Y2ggaXB2NiBhZGRyZXNzIHdpdGggbm9uLWlwdjYgb25lXCIpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIG1hdGNoQ0lEUih0aGlzLnBhcnRzLCBvdGhlci5wYXJ0cywgMTYsIGNpZHJSYW5nZSk7XG4gICAgfTtcblxuICAgIElQdjYucHJvdG90eXBlLlNwZWNpYWxSYW5nZXMgPSB7XG4gICAgICB1bnNwZWNpZmllZDogW25ldyBJUHY2KFswLCAwLCAwLCAwLCAwLCAwLCAwLCAwXSksIDEyOF0sXG4gICAgICBsaW5rTG9jYWw6IFtuZXcgSVB2NihbMHhmZTgwLCAwLCAwLCAwLCAwLCAwLCAwLCAwXSksIDEwXSxcbiAgICAgIG11bHRpY2FzdDogW25ldyBJUHY2KFsweGZmMDAsIDAsIDAsIDAsIDAsIDAsIDAsIDBdKSwgOF0sXG4gICAgICBsb29wYmFjazogW25ldyBJUHY2KFswLCAwLCAwLCAwLCAwLCAwLCAwLCAxXSksIDEyOF0sXG4gICAgICB1bmlxdWVMb2NhbDogW25ldyBJUHY2KFsweGZjMDAsIDAsIDAsIDAsIDAsIDAsIDAsIDBdKSwgN10sXG4gICAgICBpcHY0TWFwcGVkOiBbbmV3IElQdjYoWzAsIDAsIDAsIDAsIDAsIDB4ZmZmZiwgMCwgMF0pLCA5Nl0sXG4gICAgICByZmM2MTQ1OiBbbmV3IElQdjYoWzAsIDAsIDAsIDAsIDB4ZmZmZiwgMCwgMCwgMF0pLCA5Nl0sXG4gICAgICByZmM2MDUyOiBbbmV3IElQdjYoWzB4NjQsIDB4ZmY5YiwgMCwgMCwgMCwgMCwgMCwgMF0pLCA5Nl0sXG4gICAgICAnNnRvNCc6IFtuZXcgSVB2NihbMHgyMDAyLCAwLCAwLCAwLCAwLCAwLCAwLCAwXSksIDE2XSxcbiAgICAgIHRlcmVkbzogW25ldyBJUHY2KFsweDIwMDEsIDAsIDAsIDAsIDAsIDAsIDAsIDBdKSwgMzJdLFxuICAgICAgcmVzZXJ2ZWQ6IFtbbmV3IElQdjYoWzB4MjAwMSwgMHhkYjgsIDAsIDAsIDAsIDAsIDAsIDBdKSwgMzJdXVxuICAgIH07XG5cbiAgICBJUHY2LnByb3RvdHlwZS5yYW5nZSA9IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIGlwYWRkci5zdWJuZXRNYXRjaCh0aGlzLCB0aGlzLlNwZWNpYWxSYW5nZXMpO1xuICAgIH07XG5cbiAgICBJUHY2LnByb3RvdHlwZS5pc0lQdjRNYXBwZWRBZGRyZXNzID0gZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gdGhpcy5yYW5nZSgpID09PSAnaXB2NE1hcHBlZCc7XG4gICAgfTtcblxuICAgIElQdjYucHJvdG90eXBlLnRvSVB2NEFkZHJlc3MgPSBmdW5jdGlvbigpIHtcbiAgICAgIHZhciBoaWdoLCBsb3csIHJlZjtcbiAgICAgIGlmICghdGhpcy5pc0lQdjRNYXBwZWRBZGRyZXNzKCkpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiaXBhZGRyOiB0cnlpbmcgdG8gY29udmVydCBhIGdlbmVyaWMgaXB2NiBhZGRyZXNzIHRvIGlwdjRcIik7XG4gICAgICB9XG4gICAgICByZWYgPSB0aGlzLnBhcnRzLnNsaWNlKC0yKSwgaGlnaCA9IHJlZlswXSwgbG93ID0gcmVmWzFdO1xuICAgICAgcmV0dXJuIG5ldyBpcGFkZHIuSVB2NChbaGlnaCA+PiA4LCBoaWdoICYgMHhmZiwgbG93ID4+IDgsIGxvdyAmIDB4ZmZdKTtcbiAgICB9O1xuXG4gICAgSVB2Ni5wcm90b3R5cGUucHJlZml4TGVuZ3RoRnJvbVN1Ym5ldE1hc2sgPSBmdW5jdGlvbigpIHtcbiAgICAgIHZhciBjaWRyLCBpLCBrLCBwYXJ0LCBzdG9wLCB6ZXJvcywgemVyb3RhYmxlO1xuICAgICAgemVyb3RhYmxlID0ge1xuICAgICAgICAwOiAxNixcbiAgICAgICAgMzI3Njg6IDE1LFxuICAgICAgICA0OTE1MjogMTQsXG4gICAgICAgIDU3MzQ0OiAxMyxcbiAgICAgICAgNjE0NDA6IDEyLFxuICAgICAgICA2MzQ4ODogMTEsXG4gICAgICAgIDY0NTEyOiAxMCxcbiAgICAgICAgNjUwMjQ6IDksXG4gICAgICAgIDY1MjgwOiA4LFxuICAgICAgICA2NTQwODogNyxcbiAgICAgICAgNjU0NzI6IDYsXG4gICAgICAgIDY1NTA0OiA1LFxuICAgICAgICA2NTUyMDogNCxcbiAgICAgICAgNjU1Mjg6IDMsXG4gICAgICAgIDY1NTMyOiAyLFxuICAgICAgICA2NTUzNDogMSxcbiAgICAgICAgNjU1MzU6IDBcbiAgICAgIH07XG4gICAgICBjaWRyID0gMDtcbiAgICAgIHN0b3AgPSBmYWxzZTtcbiAgICAgIGZvciAoaSA9IGsgPSA3OyBrID49IDA7IGkgPSBrICs9IC0xKSB7XG4gICAgICAgIHBhcnQgPSB0aGlzLnBhcnRzW2ldO1xuICAgICAgICBpZiAocGFydCBpbiB6ZXJvdGFibGUpIHtcbiAgICAgICAgICB6ZXJvcyA9IHplcm90YWJsZVtwYXJ0XTtcbiAgICAgICAgICBpZiAoc3RvcCAmJiB6ZXJvcyAhPT0gMCkge1xuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmICh6ZXJvcyAhPT0gMTYpIHtcbiAgICAgICAgICAgIHN0b3AgPSB0cnVlO1xuICAgICAgICAgIH1cbiAgICAgICAgICBjaWRyICs9IHplcm9zO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gMTI4IC0gY2lkcjtcbiAgICB9O1xuXG4gICAgcmV0dXJuIElQdjY7XG5cbiAgfSkoKTtcblxuICBpcHY2UGFydCA9IFwiKD86WzAtOWEtZl0rOjo/KStcIjtcblxuICB6b25lSW5kZXggPSBcIiVbMC05YS16XXsxLH1cIjtcblxuICBpcHY2UmVnZXhlcyA9IHtcbiAgICB6b25lSW5kZXg6IG5ldyBSZWdFeHAoem9uZUluZGV4LCAnaScpLFxuICAgIFwibmF0aXZlXCI6IG5ldyBSZWdFeHAoXCJeKDo6KT8oXCIgKyBpcHY2UGFydCArIFwiKT8oWzAtOWEtZl0rKT8oOjopPyhcIiArIHpvbmVJbmRleCArIFwiKT8kXCIsICdpJyksXG4gICAgdHJhbnNpdGlvbmFsOiBuZXcgUmVnRXhwKChcIl4oKD86XCIgKyBpcHY2UGFydCArIFwiKXwoPzo6OikoPzpcIiArIGlwdjZQYXJ0ICsgXCIpPylcIikgKyAoaXB2NFBhcnQgKyBcIlxcXFwuXCIgKyBpcHY0UGFydCArIFwiXFxcXC5cIiArIGlwdjRQYXJ0ICsgXCJcXFxcLlwiICsgaXB2NFBhcnQpICsgKFwiKFwiICsgem9uZUluZGV4ICsgXCIpPyRcIiksICdpJylcbiAgfTtcblxuICBleHBhbmRJUHY2ID0gZnVuY3Rpb24oc3RyaW5nLCBwYXJ0cykge1xuICAgIHZhciBjb2xvbkNvdW50LCBsYXN0Q29sb24sIHBhcnQsIHJlcGxhY2VtZW50LCByZXBsYWNlbWVudENvdW50LCB6b25lSWQ7XG4gICAgaWYgKHN0cmluZy5pbmRleE9mKCc6OicpICE9PSBzdHJpbmcubGFzdEluZGV4T2YoJzo6JykpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICB6b25lSWQgPSAoc3RyaW5nLm1hdGNoKGlwdjZSZWdleGVzWyd6b25lSW5kZXgnXSkgfHwgW10pWzBdO1xuICAgIGlmICh6b25lSWQpIHtcbiAgICAgIHpvbmVJZCA9IHpvbmVJZC5zdWJzdHJpbmcoMSk7XG4gICAgICBzdHJpbmcgPSBzdHJpbmcucmVwbGFjZSgvJS4rJC8sICcnKTtcbiAgICB9XG4gICAgY29sb25Db3VudCA9IDA7XG4gICAgbGFzdENvbG9uID0gLTE7XG4gICAgd2hpbGUgKChsYXN0Q29sb24gPSBzdHJpbmcuaW5kZXhPZignOicsIGxhc3RDb2xvbiArIDEpKSA+PSAwKSB7XG4gICAgICBjb2xvbkNvdW50Kys7XG4gICAgfVxuICAgIGlmIChzdHJpbmcuc3Vic3RyKDAsIDIpID09PSAnOjonKSB7XG4gICAgICBjb2xvbkNvdW50LS07XG4gICAgfVxuICAgIGlmIChzdHJpbmcuc3Vic3RyKC0yLCAyKSA9PT0gJzo6Jykge1xuICAgICAgY29sb25Db3VudC0tO1xuICAgIH1cbiAgICBpZiAoY29sb25Db3VudCA+IHBhcnRzKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgcmVwbGFjZW1lbnRDb3VudCA9IHBhcnRzIC0gY29sb25Db3VudDtcbiAgICByZXBsYWNlbWVudCA9ICc6JztcbiAgICB3aGlsZSAocmVwbGFjZW1lbnRDb3VudC0tKSB7XG4gICAgICByZXBsYWNlbWVudCArPSAnMDonO1xuICAgIH1cbiAgICBzdHJpbmcgPSBzdHJpbmcucmVwbGFjZSgnOjonLCByZXBsYWNlbWVudCk7XG4gICAgaWYgKHN0cmluZ1swXSA9PT0gJzonKSB7XG4gICAgICBzdHJpbmcgPSBzdHJpbmcuc2xpY2UoMSk7XG4gICAgfVxuICAgIGlmIChzdHJpbmdbc3RyaW5nLmxlbmd0aCAtIDFdID09PSAnOicpIHtcbiAgICAgIHN0cmluZyA9IHN0cmluZy5zbGljZSgwLCAtMSk7XG4gICAgfVxuICAgIHBhcnRzID0gKGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIGssIGxlbiwgcmVmLCByZXN1bHRzO1xuICAgICAgcmVmID0gc3RyaW5nLnNwbGl0KFwiOlwiKTtcbiAgICAgIHJlc3VsdHMgPSBbXTtcbiAgICAgIGZvciAoayA9IDAsIGxlbiA9IHJlZi5sZW5ndGg7IGsgPCBsZW47IGsrKykge1xuICAgICAgICBwYXJ0ID0gcmVmW2tdO1xuICAgICAgICByZXN1bHRzLnB1c2gocGFyc2VJbnQocGFydCwgMTYpKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHRzO1xuICAgIH0pKCk7XG4gICAgcmV0dXJuIHtcbiAgICAgIHBhcnRzOiBwYXJ0cyxcbiAgICAgIHpvbmVJZDogem9uZUlkXG4gICAgfTtcbiAgfTtcblxuICBpcGFkZHIuSVB2Ni5wYXJzZXIgPSBmdW5jdGlvbihzdHJpbmcpIHtcbiAgICB2YXIgYWRkciwgaywgbGVuLCBtYXRjaCwgb2N0ZXQsIG9jdGV0cywgem9uZUlkO1xuICAgIGlmIChpcHY2UmVnZXhlc1snbmF0aXZlJ10udGVzdChzdHJpbmcpKSB7XG4gICAgICByZXR1cm4gZXhwYW5kSVB2NihzdHJpbmcsIDgpO1xuICAgIH0gZWxzZSBpZiAobWF0Y2ggPSBzdHJpbmcubWF0Y2goaXB2NlJlZ2V4ZXNbJ3RyYW5zaXRpb25hbCddKSkge1xuICAgICAgem9uZUlkID0gbWF0Y2hbNl0gfHwgJyc7XG4gICAgICBhZGRyID0gZXhwYW5kSVB2NihtYXRjaFsxXS5zbGljZSgwLCAtMSkgKyB6b25lSWQsIDYpO1xuICAgICAgaWYgKGFkZHIucGFydHMpIHtcbiAgICAgICAgb2N0ZXRzID0gW3BhcnNlSW50KG1hdGNoWzJdKSwgcGFyc2VJbnQobWF0Y2hbM10pLCBwYXJzZUludChtYXRjaFs0XSksIHBhcnNlSW50KG1hdGNoWzVdKV07XG4gICAgICAgIGZvciAoayA9IDAsIGxlbiA9IG9jdGV0cy5sZW5ndGg7IGsgPCBsZW47IGsrKykge1xuICAgICAgICAgIG9jdGV0ID0gb2N0ZXRzW2tdO1xuICAgICAgICAgIGlmICghKCgwIDw9IG9jdGV0ICYmIG9jdGV0IDw9IDI1NSkpKSB7XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgYWRkci5wYXJ0cy5wdXNoKG9jdGV0c1swXSA8PCA4IHwgb2N0ZXRzWzFdKTtcbiAgICAgICAgYWRkci5wYXJ0cy5wdXNoKG9jdGV0c1syXSA8PCA4IHwgb2N0ZXRzWzNdKTtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICBwYXJ0czogYWRkci5wYXJ0cyxcbiAgICAgICAgICB6b25lSWQ6IGFkZHIuem9uZUlkXG4gICAgICAgIH07XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBudWxsO1xuICB9O1xuXG4gIGlwYWRkci5JUHY0LmlzSVB2NCA9IGlwYWRkci5JUHY2LmlzSVB2NiA9IGZ1bmN0aW9uKHN0cmluZykge1xuICAgIHJldHVybiB0aGlzLnBhcnNlcihzdHJpbmcpICE9PSBudWxsO1xuICB9O1xuXG4gIGlwYWRkci5JUHY0LmlzVmFsaWQgPSBmdW5jdGlvbihzdHJpbmcpIHtcbiAgICB2YXIgZTtcbiAgICB0cnkge1xuICAgICAgbmV3IHRoaXModGhpcy5wYXJzZXIoc3RyaW5nKSk7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9IGNhdGNoIChlcnJvcjEpIHtcbiAgICAgIGUgPSBlcnJvcjE7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9O1xuXG4gIGlwYWRkci5JUHY0LmlzVmFsaWRGb3VyUGFydERlY2ltYWwgPSBmdW5jdGlvbihzdHJpbmcpIHtcbiAgICBpZiAoaXBhZGRyLklQdjQuaXNWYWxpZChzdHJpbmcpICYmIHN0cmluZy5tYXRjaCgvXigwfFsxLTldXFxkKikoXFwuKDB8WzEtOV1cXGQqKSl7M30kLykpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9O1xuXG4gIGlwYWRkci5JUHY2LmlzVmFsaWQgPSBmdW5jdGlvbihzdHJpbmcpIHtcbiAgICB2YXIgYWRkciwgZTtcbiAgICBpZiAodHlwZW9mIHN0cmluZyA9PT0gXCJzdHJpbmdcIiAmJiBzdHJpbmcuaW5kZXhPZihcIjpcIikgPT09IC0xKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIHRyeSB7XG4gICAgICBhZGRyID0gdGhpcy5wYXJzZXIoc3RyaW5nKTtcbiAgICAgIG5ldyB0aGlzKGFkZHIucGFydHMsIGFkZHIuem9uZUlkKTtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH0gY2F0Y2ggKGVycm9yMSkge1xuICAgICAgZSA9IGVycm9yMTtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH07XG5cbiAgaXBhZGRyLklQdjQucGFyc2UgPSBmdW5jdGlvbihzdHJpbmcpIHtcbiAgICB2YXIgcGFydHM7XG4gICAgcGFydHMgPSB0aGlzLnBhcnNlcihzdHJpbmcpO1xuICAgIGlmIChwYXJ0cyA9PT0gbnVsbCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiaXBhZGRyOiBzdHJpbmcgaXMgbm90IGZvcm1hdHRlZCBsaWtlIGlwIGFkZHJlc3NcIik7XG4gICAgfVxuICAgIHJldHVybiBuZXcgdGhpcyhwYXJ0cyk7XG4gIH07XG5cbiAgaXBhZGRyLklQdjYucGFyc2UgPSBmdW5jdGlvbihzdHJpbmcpIHtcbiAgICB2YXIgYWRkcjtcbiAgICBhZGRyID0gdGhpcy5wYXJzZXIoc3RyaW5nKTtcbiAgICBpZiAoYWRkci5wYXJ0cyA9PT0gbnVsbCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiaXBhZGRyOiBzdHJpbmcgaXMgbm90IGZvcm1hdHRlZCBsaWtlIGlwIGFkZHJlc3NcIik7XG4gICAgfVxuICAgIHJldHVybiBuZXcgdGhpcyhhZGRyLnBhcnRzLCBhZGRyLnpvbmVJZCk7XG4gIH07XG5cbiAgaXBhZGRyLklQdjQucGFyc2VDSURSID0gZnVuY3Rpb24oc3RyaW5nKSB7XG4gICAgdmFyIG1hc2tMZW5ndGgsIG1hdGNoLCBwYXJzZWQ7XG4gICAgaWYgKG1hdGNoID0gc3RyaW5nLm1hdGNoKC9eKC4rKVxcLyhcXGQrKSQvKSkge1xuICAgICAgbWFza0xlbmd0aCA9IHBhcnNlSW50KG1hdGNoWzJdKTtcbiAgICAgIGlmIChtYXNrTGVuZ3RoID49IDAgJiYgbWFza0xlbmd0aCA8PSAzMikge1xuICAgICAgICBwYXJzZWQgPSBbdGhpcy5wYXJzZShtYXRjaFsxXSksIG1hc2tMZW5ndGhdO1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkocGFyc2VkLCAndG9TdHJpbmcnLCB7XG4gICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuam9pbignLycpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiBwYXJzZWQ7XG4gICAgICB9XG4gICAgfVxuICAgIHRocm93IG5ldyBFcnJvcihcImlwYWRkcjogc3RyaW5nIGlzIG5vdCBmb3JtYXR0ZWQgbGlrZSBhbiBJUHY0IENJRFIgcmFuZ2VcIik7XG4gIH07XG5cbiAgaXBhZGRyLklQdjQuc3VibmV0TWFza0Zyb21QcmVmaXhMZW5ndGggPSBmdW5jdGlvbihwcmVmaXgpIHtcbiAgICB2YXIgZmlsbGVkT2N0ZXRDb3VudCwgaiwgb2N0ZXRzO1xuICAgIHByZWZpeCA9IHBhcnNlSW50KHByZWZpeCk7XG4gICAgaWYgKHByZWZpeCA8IDAgfHwgcHJlZml4ID4gMzIpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignaXBhZGRyOiBpbnZhbGlkIElQdjQgcHJlZml4IGxlbmd0aCcpO1xuICAgIH1cbiAgICBvY3RldHMgPSBbMCwgMCwgMCwgMF07XG4gICAgaiA9IDA7XG4gICAgZmlsbGVkT2N0ZXRDb3VudCA9IE1hdGguZmxvb3IocHJlZml4IC8gOCk7XG4gICAgd2hpbGUgKGogPCBmaWxsZWRPY3RldENvdW50KSB7XG4gICAgICBvY3RldHNbal0gPSAyNTU7XG4gICAgICBqKys7XG4gICAgfVxuICAgIGlmIChmaWxsZWRPY3RldENvdW50IDwgNCkge1xuICAgICAgb2N0ZXRzW2ZpbGxlZE9jdGV0Q291bnRdID0gTWF0aC5wb3coMiwgcHJlZml4ICUgOCkgLSAxIDw8IDggLSAocHJlZml4ICUgOCk7XG4gICAgfVxuICAgIHJldHVybiBuZXcgdGhpcyhvY3RldHMpO1xuICB9O1xuXG4gIGlwYWRkci5JUHY0LmJyb2FkY2FzdEFkZHJlc3NGcm9tQ0lEUiA9IGZ1bmN0aW9uKHN0cmluZykge1xuICAgIHZhciBjaWRyLCBlcnJvciwgaSwgaXBJbnRlcmZhY2VPY3RldHMsIG9jdGV0cywgc3VibmV0TWFza09jdGV0cztcbiAgICB0cnkge1xuICAgICAgY2lkciA9IHRoaXMucGFyc2VDSURSKHN0cmluZyk7XG4gICAgICBpcEludGVyZmFjZU9jdGV0cyA9IGNpZHJbMF0udG9CeXRlQXJyYXkoKTtcbiAgICAgIHN1Ym5ldE1hc2tPY3RldHMgPSB0aGlzLnN1Ym5ldE1hc2tGcm9tUHJlZml4TGVuZ3RoKGNpZHJbMV0pLnRvQnl0ZUFycmF5KCk7XG4gICAgICBvY3RldHMgPSBbXTtcbiAgICAgIGkgPSAwO1xuICAgICAgd2hpbGUgKGkgPCA0KSB7XG4gICAgICAgIG9jdGV0cy5wdXNoKHBhcnNlSW50KGlwSW50ZXJmYWNlT2N0ZXRzW2ldLCAxMCkgfCBwYXJzZUludChzdWJuZXRNYXNrT2N0ZXRzW2ldLCAxMCkgXiAyNTUpO1xuICAgICAgICBpKys7XG4gICAgICB9XG4gICAgICByZXR1cm4gbmV3IHRoaXMob2N0ZXRzKTtcbiAgICB9IGNhdGNoIChlcnJvcjEpIHtcbiAgICAgIGVycm9yID0gZXJyb3IxO1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdpcGFkZHI6IHRoZSBhZGRyZXNzIGRvZXMgbm90IGhhdmUgSVB2NCBDSURSIGZvcm1hdCcpO1xuICAgIH1cbiAgfTtcblxuICBpcGFkZHIuSVB2NC5uZXR3b3JrQWRkcmVzc0Zyb21DSURSID0gZnVuY3Rpb24oc3RyaW5nKSB7XG4gICAgdmFyIGNpZHIsIGVycm9yLCBpLCBpcEludGVyZmFjZU9jdGV0cywgb2N0ZXRzLCBzdWJuZXRNYXNrT2N0ZXRzO1xuICAgIHRyeSB7XG4gICAgICBjaWRyID0gdGhpcy5wYXJzZUNJRFIoc3RyaW5nKTtcbiAgICAgIGlwSW50ZXJmYWNlT2N0ZXRzID0gY2lkclswXS50b0J5dGVBcnJheSgpO1xuICAgICAgc3VibmV0TWFza09jdGV0cyA9IHRoaXMuc3VibmV0TWFza0Zyb21QcmVmaXhMZW5ndGgoY2lkclsxXSkudG9CeXRlQXJyYXkoKTtcbiAgICAgIG9jdGV0cyA9IFtdO1xuICAgICAgaSA9IDA7XG4gICAgICB3aGlsZSAoaSA8IDQpIHtcbiAgICAgICAgb2N0ZXRzLnB1c2gocGFyc2VJbnQoaXBJbnRlcmZhY2VPY3RldHNbaV0sIDEwKSAmIHBhcnNlSW50KHN1Ym5ldE1hc2tPY3RldHNbaV0sIDEwKSk7XG4gICAgICAgIGkrKztcbiAgICAgIH1cbiAgICAgIHJldHVybiBuZXcgdGhpcyhvY3RldHMpO1xuICAgIH0gY2F0Y2ggKGVycm9yMSkge1xuICAgICAgZXJyb3IgPSBlcnJvcjE7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ2lwYWRkcjogdGhlIGFkZHJlc3MgZG9lcyBub3QgaGF2ZSBJUHY0IENJRFIgZm9ybWF0Jyk7XG4gICAgfVxuICB9O1xuXG4gIGlwYWRkci5JUHY2LnBhcnNlQ0lEUiA9IGZ1bmN0aW9uKHN0cmluZykge1xuICAgIHZhciBtYXNrTGVuZ3RoLCBtYXRjaCwgcGFyc2VkO1xuICAgIGlmIChtYXRjaCA9IHN0cmluZy5tYXRjaCgvXiguKylcXC8oXFxkKykkLykpIHtcbiAgICAgIG1hc2tMZW5ndGggPSBwYXJzZUludChtYXRjaFsyXSk7XG4gICAgICBpZiAobWFza0xlbmd0aCA+PSAwICYmIG1hc2tMZW5ndGggPD0gMTI4KSB7XG4gICAgICAgIHBhcnNlZCA9IFt0aGlzLnBhcnNlKG1hdGNoWzFdKSwgbWFza0xlbmd0aF07XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShwYXJzZWQsICd0b1N0cmluZycsIHtcbiAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5qb2luKCcvJyk7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIHBhcnNlZDtcbiAgICAgIH1cbiAgICB9XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiaXBhZGRyOiBzdHJpbmcgaXMgbm90IGZvcm1hdHRlZCBsaWtlIGFuIElQdjYgQ0lEUiByYW5nZVwiKTtcbiAgfTtcblxuICBpcGFkZHIuaXNWYWxpZCA9IGZ1bmN0aW9uKHN0cmluZykge1xuICAgIHJldHVybiBpcGFkZHIuSVB2Ni5pc1ZhbGlkKHN0cmluZykgfHwgaXBhZGRyLklQdjQuaXNWYWxpZChzdHJpbmcpO1xuICB9O1xuXG4gIGlwYWRkci5wYXJzZSA9IGZ1bmN0aW9uKHN0cmluZykge1xuICAgIGlmIChpcGFkZHIuSVB2Ni5pc1ZhbGlkKHN0cmluZykpIHtcbiAgICAgIHJldHVybiBpcGFkZHIuSVB2Ni5wYXJzZShzdHJpbmcpO1xuICAgIH0gZWxzZSBpZiAoaXBhZGRyLklQdjQuaXNWYWxpZChzdHJpbmcpKSB7XG4gICAgICByZXR1cm4gaXBhZGRyLklQdjQucGFyc2Uoc3RyaW5nKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiaXBhZGRyOiB0aGUgYWRkcmVzcyBoYXMgbmVpdGhlciBJUHY2IG5vciBJUHY0IGZvcm1hdFwiKTtcbiAgICB9XG4gIH07XG5cbiAgaXBhZGRyLnBhcnNlQ0lEUiA9IGZ1bmN0aW9uKHN0cmluZykge1xuICAgIHZhciBlO1xuICAgIHRyeSB7XG4gICAgICByZXR1cm4gaXBhZGRyLklQdjYucGFyc2VDSURSKHN0cmluZyk7XG4gICAgfSBjYXRjaCAoZXJyb3IxKSB7XG4gICAgICBlID0gZXJyb3IxO1xuICAgICAgdHJ5IHtcbiAgICAgICAgcmV0dXJuIGlwYWRkci5JUHY0LnBhcnNlQ0lEUihzdHJpbmcpO1xuICAgICAgfSBjYXRjaCAoZXJyb3IxKSB7XG4gICAgICAgIGUgPSBlcnJvcjE7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcImlwYWRkcjogdGhlIGFkZHJlc3MgaGFzIG5laXRoZXIgSVB2NiBub3IgSVB2NCBDSURSIGZvcm1hdFwiKTtcbiAgICAgIH1cbiAgICB9XG4gIH07XG5cbiAgaXBhZGRyLmZyb21CeXRlQXJyYXkgPSBmdW5jdGlvbihieXRlcykge1xuICAgIHZhciBsZW5ndGg7XG4gICAgbGVuZ3RoID0gYnl0ZXMubGVuZ3RoO1xuICAgIGlmIChsZW5ndGggPT09IDQpIHtcbiAgICAgIHJldHVybiBuZXcgaXBhZGRyLklQdjQoYnl0ZXMpO1xuICAgIH0gZWxzZSBpZiAobGVuZ3RoID09PSAxNikge1xuICAgICAgcmV0dXJuIG5ldyBpcGFkZHIuSVB2NihieXRlcyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcImlwYWRkcjogdGhlIGJpbmFyeSBpbnB1dCBpcyBuZWl0aGVyIGFuIElQdjYgbm9yIElQdjQgYWRkcmVzc1wiKTtcbiAgICB9XG4gIH07XG5cbiAgaXBhZGRyLnByb2Nlc3MgPSBmdW5jdGlvbihzdHJpbmcpIHtcbiAgICB2YXIgYWRkcjtcbiAgICBhZGRyID0gdGhpcy5wYXJzZShzdHJpbmcpO1xuICAgIGlmIChhZGRyLmtpbmQoKSA9PT0gJ2lwdjYnICYmIGFkZHIuaXNJUHY0TWFwcGVkQWRkcmVzcygpKSB7XG4gICAgICByZXR1cm4gYWRkci50b0lQdjRBZGRyZXNzKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBhZGRyO1xuICAgIH1cbiAgfTtcblxufSkuY2FsbCh0aGlzKTtcbiIsIi8qKlxuICogQGxpY2Vuc2UgUmVhY3RcbiAqIHJlYWN0LWRvbS5wcm9kdWN0aW9uLm1pbi5qc1xuICpcbiAqIENvcHlyaWdodCAoYykgRmFjZWJvb2ssIEluYy4gYW5kIGl0cyBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG4vKlxuIE1vZGVybml6ciAzLjAuMHByZSAoQ3VzdG9tIEJ1aWxkKSB8IE1JVFxuKi9cbid1c2Ugc3RyaWN0Jzt2YXIgYWE9cmVxdWlyZShcInJlYWN0XCIpLGJhPXJlcXVpcmUoXCJzY2hlZHVsZXJcIik7ZnVuY3Rpb24gcChhKXtmb3IodmFyIGI9XCJodHRwczovL3JlYWN0anMub3JnL2RvY3MvZXJyb3ItZGVjb2Rlci5odG1sP2ludmFyaWFudD1cIithLGM9MTtjPGFyZ3VtZW50cy5sZW5ndGg7YysrKWIrPVwiJmFyZ3NbXT1cIitlbmNvZGVVUklDb21wb25lbnQoYXJndW1lbnRzW2NdKTtyZXR1cm5cIk1pbmlmaWVkIFJlYWN0IGVycm9yICNcIithK1wiOyB2aXNpdCBcIitiK1wiIGZvciB0aGUgZnVsbCBtZXNzYWdlIG9yIHVzZSB0aGUgbm9uLW1pbmlmaWVkIGRldiBlbnZpcm9ubWVudCBmb3IgZnVsbCBlcnJvcnMgYW5kIGFkZGl0aW9uYWwgaGVscGZ1bCB3YXJuaW5ncy5cIn12YXIgY2E9bmV3IFNldCxkYT17fTtmdW5jdGlvbiBlYShhLGIpe2ZhKGEsYik7ZmEoYStcIkNhcHR1cmVcIixiKX1cbmZ1bmN0aW9uIGZhKGEsYil7ZGFbYV09Yjtmb3IoYT0wO2E8Yi5sZW5ndGg7YSsrKWNhLmFkZChiW2FdKX1cbnZhciBoYT0hKFwidW5kZWZpbmVkXCI9PT10eXBlb2Ygd2luZG93fHxcInVuZGVmaW5lZFwiPT09dHlwZW9mIHdpbmRvdy5kb2N1bWVudHx8XCJ1bmRlZmluZWRcIj09PXR5cGVvZiB3aW5kb3cuZG9jdW1lbnQuY3JlYXRlRWxlbWVudCksaWE9T2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eSxqYT0vXls6QS1aX2EtelxcdTAwQzAtXFx1MDBENlxcdTAwRDgtXFx1MDBGNlxcdTAwRjgtXFx1MDJGRlxcdTAzNzAtXFx1MDM3RFxcdTAzN0YtXFx1MUZGRlxcdTIwMEMtXFx1MjAwRFxcdTIwNzAtXFx1MjE4RlxcdTJDMDAtXFx1MkZFRlxcdTMwMDEtXFx1RDdGRlxcdUY5MDAtXFx1RkRDRlxcdUZERjAtXFx1RkZGRF1bOkEtWl9hLXpcXHUwMEMwLVxcdTAwRDZcXHUwMEQ4LVxcdTAwRjZcXHUwMEY4LVxcdTAyRkZcXHUwMzcwLVxcdTAzN0RcXHUwMzdGLVxcdTFGRkZcXHUyMDBDLVxcdTIwMERcXHUyMDcwLVxcdTIxOEZcXHUyQzAwLVxcdTJGRUZcXHUzMDAxLVxcdUQ3RkZcXHVGOTAwLVxcdUZEQ0ZcXHVGREYwLVxcdUZGRkRcXC0uMC05XFx1MDBCN1xcdTAzMDAtXFx1MDM2RlxcdTIwM0YtXFx1MjA0MF0qJC8sa2E9XG57fSxsYT17fTtmdW5jdGlvbiBtYShhKXtpZihpYS5jYWxsKGxhLGEpKXJldHVybiEwO2lmKGlhLmNhbGwoa2EsYSkpcmV0dXJuITE7aWYoamEudGVzdChhKSlyZXR1cm4gbGFbYV09ITA7a2FbYV09ITA7cmV0dXJuITF9ZnVuY3Rpb24gbmEoYSxiLGMsZCl7aWYobnVsbCE9PWMmJjA9PT1jLnR5cGUpcmV0dXJuITE7c3dpdGNoKHR5cGVvZiBiKXtjYXNlIFwiZnVuY3Rpb25cIjpjYXNlIFwic3ltYm9sXCI6cmV0dXJuITA7Y2FzZSBcImJvb2xlYW5cIjppZihkKXJldHVybiExO2lmKG51bGwhPT1jKXJldHVybiFjLmFjY2VwdHNCb29sZWFuczthPWEudG9Mb3dlckNhc2UoKS5zbGljZSgwLDUpO3JldHVyblwiZGF0YS1cIiE9PWEmJlwiYXJpYS1cIiE9PWE7ZGVmYXVsdDpyZXR1cm4hMX19XG5mdW5jdGlvbiBvYShhLGIsYyxkKXtpZihudWxsPT09Ynx8XCJ1bmRlZmluZWRcIj09PXR5cGVvZiBifHxuYShhLGIsYyxkKSlyZXR1cm4hMDtpZihkKXJldHVybiExO2lmKG51bGwhPT1jKXN3aXRjaChjLnR5cGUpe2Nhc2UgMzpyZXR1cm4hYjtjYXNlIDQ6cmV0dXJuITE9PT1iO2Nhc2UgNTpyZXR1cm4gaXNOYU4oYik7Y2FzZSA2OnJldHVybiBpc05hTihiKXx8MT5ifXJldHVybiExfWZ1bmN0aW9uIHEoYSxiLGMsZCxlLGYsZyl7dGhpcy5hY2NlcHRzQm9vbGVhbnM9Mj09PWJ8fDM9PT1ifHw0PT09Yjt0aGlzLmF0dHJpYnV0ZU5hbWU9ZDt0aGlzLmF0dHJpYnV0ZU5hbWVzcGFjZT1lO3RoaXMubXVzdFVzZVByb3BlcnR5PWM7dGhpcy5wcm9wZXJ0eU5hbWU9YTt0aGlzLnR5cGU9Yjt0aGlzLnNhbml0aXplVVJMPWY7dGhpcy5yZW1vdmVFbXB0eVN0cmluZz1nfXZhciB6PXt9O1xuXCJjaGlsZHJlbiBkYW5nZXJvdXNseVNldElubmVySFRNTCBkZWZhdWx0VmFsdWUgZGVmYXVsdENoZWNrZWQgaW5uZXJIVE1MIHN1cHByZXNzQ29udGVudEVkaXRhYmxlV2FybmluZyBzdXBwcmVzc0h5ZHJhdGlvbldhcm5pbmcgc3R5bGVcIi5zcGxpdChcIiBcIikuZm9yRWFjaChmdW5jdGlvbihhKXt6W2FdPW5ldyBxKGEsMCwhMSxhLG51bGwsITEsITEpfSk7W1tcImFjY2VwdENoYXJzZXRcIixcImFjY2VwdC1jaGFyc2V0XCJdLFtcImNsYXNzTmFtZVwiLFwiY2xhc3NcIl0sW1wiaHRtbEZvclwiLFwiZm9yXCJdLFtcImh0dHBFcXVpdlwiLFwiaHR0cC1lcXVpdlwiXV0uZm9yRWFjaChmdW5jdGlvbihhKXt2YXIgYj1hWzBdO3pbYl09bmV3IHEoYiwxLCExLGFbMV0sbnVsbCwhMSwhMSl9KTtbXCJjb250ZW50RWRpdGFibGVcIixcImRyYWdnYWJsZVwiLFwic3BlbGxDaGVja1wiLFwidmFsdWVcIl0uZm9yRWFjaChmdW5jdGlvbihhKXt6W2FdPW5ldyBxKGEsMiwhMSxhLnRvTG93ZXJDYXNlKCksbnVsbCwhMSwhMSl9KTtcbltcImF1dG9SZXZlcnNlXCIsXCJleHRlcm5hbFJlc291cmNlc1JlcXVpcmVkXCIsXCJmb2N1c2FibGVcIixcInByZXNlcnZlQWxwaGFcIl0uZm9yRWFjaChmdW5jdGlvbihhKXt6W2FdPW5ldyBxKGEsMiwhMSxhLG51bGwsITEsITEpfSk7XCJhbGxvd0Z1bGxTY3JlZW4gYXN5bmMgYXV0b0ZvY3VzIGF1dG9QbGF5IGNvbnRyb2xzIGRlZmF1bHQgZGVmZXIgZGlzYWJsZWQgZGlzYWJsZVBpY3R1cmVJblBpY3R1cmUgZGlzYWJsZVJlbW90ZVBsYXliYWNrIGZvcm1Ob1ZhbGlkYXRlIGhpZGRlbiBsb29wIG5vTW9kdWxlIG5vVmFsaWRhdGUgb3BlbiBwbGF5c0lubGluZSByZWFkT25seSByZXF1aXJlZCByZXZlcnNlZCBzY29wZWQgc2VhbWxlc3MgaXRlbVNjb3BlXCIuc3BsaXQoXCIgXCIpLmZvckVhY2goZnVuY3Rpb24oYSl7elthXT1uZXcgcShhLDMsITEsYS50b0xvd2VyQ2FzZSgpLG51bGwsITEsITEpfSk7XG5bXCJjaGVja2VkXCIsXCJtdWx0aXBsZVwiLFwibXV0ZWRcIixcInNlbGVjdGVkXCJdLmZvckVhY2goZnVuY3Rpb24oYSl7elthXT1uZXcgcShhLDMsITAsYSxudWxsLCExLCExKX0pO1tcImNhcHR1cmVcIixcImRvd25sb2FkXCJdLmZvckVhY2goZnVuY3Rpb24oYSl7elthXT1uZXcgcShhLDQsITEsYSxudWxsLCExLCExKX0pO1tcImNvbHNcIixcInJvd3NcIixcInNpemVcIixcInNwYW5cIl0uZm9yRWFjaChmdW5jdGlvbihhKXt6W2FdPW5ldyBxKGEsNiwhMSxhLG51bGwsITEsITEpfSk7W1wicm93U3BhblwiLFwic3RhcnRcIl0uZm9yRWFjaChmdW5jdGlvbihhKXt6W2FdPW5ldyBxKGEsNSwhMSxhLnRvTG93ZXJDYXNlKCksbnVsbCwhMSwhMSl9KTt2YXIgcGE9L1tcXC06XShbYS16XSkvZztmdW5jdGlvbiBxYShhKXtyZXR1cm4gYVsxXS50b1VwcGVyQ2FzZSgpfVxuXCJhY2NlbnQtaGVpZ2h0IGFsaWdubWVudC1iYXNlbGluZSBhcmFiaWMtZm9ybSBiYXNlbGluZS1zaGlmdCBjYXAtaGVpZ2h0IGNsaXAtcGF0aCBjbGlwLXJ1bGUgY29sb3ItaW50ZXJwb2xhdGlvbiBjb2xvci1pbnRlcnBvbGF0aW9uLWZpbHRlcnMgY29sb3ItcHJvZmlsZSBjb2xvci1yZW5kZXJpbmcgZG9taW5hbnQtYmFzZWxpbmUgZW5hYmxlLWJhY2tncm91bmQgZmlsbC1vcGFjaXR5IGZpbGwtcnVsZSBmbG9vZC1jb2xvciBmbG9vZC1vcGFjaXR5IGZvbnQtZmFtaWx5IGZvbnQtc2l6ZSBmb250LXNpemUtYWRqdXN0IGZvbnQtc3RyZXRjaCBmb250LXN0eWxlIGZvbnQtdmFyaWFudCBmb250LXdlaWdodCBnbHlwaC1uYW1lIGdseXBoLW9yaWVudGF0aW9uLWhvcml6b250YWwgZ2x5cGgtb3JpZW50YXRpb24tdmVydGljYWwgaG9yaXotYWR2LXggaG9yaXotb3JpZ2luLXggaW1hZ2UtcmVuZGVyaW5nIGxldHRlci1zcGFjaW5nIGxpZ2h0aW5nLWNvbG9yIG1hcmtlci1lbmQgbWFya2VyLW1pZCBtYXJrZXItc3RhcnQgb3ZlcmxpbmUtcG9zaXRpb24gb3ZlcmxpbmUtdGhpY2tuZXNzIHBhaW50LW9yZGVyIHBhbm9zZS0xIHBvaW50ZXItZXZlbnRzIHJlbmRlcmluZy1pbnRlbnQgc2hhcGUtcmVuZGVyaW5nIHN0b3AtY29sb3Igc3RvcC1vcGFjaXR5IHN0cmlrZXRocm91Z2gtcG9zaXRpb24gc3RyaWtldGhyb3VnaC10aGlja25lc3Mgc3Ryb2tlLWRhc2hhcnJheSBzdHJva2UtZGFzaG9mZnNldCBzdHJva2UtbGluZWNhcCBzdHJva2UtbGluZWpvaW4gc3Ryb2tlLW1pdGVybGltaXQgc3Ryb2tlLW9wYWNpdHkgc3Ryb2tlLXdpZHRoIHRleHQtYW5jaG9yIHRleHQtZGVjb3JhdGlvbiB0ZXh0LXJlbmRlcmluZyB1bmRlcmxpbmUtcG9zaXRpb24gdW5kZXJsaW5lLXRoaWNrbmVzcyB1bmljb2RlLWJpZGkgdW5pY29kZS1yYW5nZSB1bml0cy1wZXItZW0gdi1hbHBoYWJldGljIHYtaGFuZ2luZyB2LWlkZW9ncmFwaGljIHYtbWF0aGVtYXRpY2FsIHZlY3Rvci1lZmZlY3QgdmVydC1hZHYteSB2ZXJ0LW9yaWdpbi14IHZlcnQtb3JpZ2luLXkgd29yZC1zcGFjaW5nIHdyaXRpbmctbW9kZSB4bWxuczp4bGluayB4LWhlaWdodFwiLnNwbGl0KFwiIFwiKS5mb3JFYWNoKGZ1bmN0aW9uKGEpe3ZhciBiPWEucmVwbGFjZShwYSxcbnFhKTt6W2JdPW5ldyBxKGIsMSwhMSxhLG51bGwsITEsITEpfSk7XCJ4bGluazphY3R1YXRlIHhsaW5rOmFyY3JvbGUgeGxpbms6cm9sZSB4bGluazpzaG93IHhsaW5rOnRpdGxlIHhsaW5rOnR5cGVcIi5zcGxpdChcIiBcIikuZm9yRWFjaChmdW5jdGlvbihhKXt2YXIgYj1hLnJlcGxhY2UocGEscWEpO3pbYl09bmV3IHEoYiwxLCExLGEsXCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hsaW5rXCIsITEsITEpfSk7W1wieG1sOmJhc2VcIixcInhtbDpsYW5nXCIsXCJ4bWw6c3BhY2VcIl0uZm9yRWFjaChmdW5jdGlvbihhKXt2YXIgYj1hLnJlcGxhY2UocGEscWEpO3pbYl09bmV3IHEoYiwxLCExLGEsXCJodHRwOi8vd3d3LnczLm9yZy9YTUwvMTk5OC9uYW1lc3BhY2VcIiwhMSwhMSl9KTtbXCJ0YWJJbmRleFwiLFwiY3Jvc3NPcmlnaW5cIl0uZm9yRWFjaChmdW5jdGlvbihhKXt6W2FdPW5ldyBxKGEsMSwhMSxhLnRvTG93ZXJDYXNlKCksbnVsbCwhMSwhMSl9KTtcbnoueGxpbmtIcmVmPW5ldyBxKFwieGxpbmtIcmVmXCIsMSwhMSxcInhsaW5rOmhyZWZcIixcImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGxpbmtcIiwhMCwhMSk7W1wic3JjXCIsXCJocmVmXCIsXCJhY3Rpb25cIixcImZvcm1BY3Rpb25cIl0uZm9yRWFjaChmdW5jdGlvbihhKXt6W2FdPW5ldyBxKGEsMSwhMSxhLnRvTG93ZXJDYXNlKCksbnVsbCwhMCwhMCl9KTtcbmZ1bmN0aW9uIHJhKGEsYixjLGQpe3ZhciBlPXouaGFzT3duUHJvcGVydHkoYik/eltiXTpudWxsO2lmKG51bGwhPT1lPzAhPT1lLnR5cGU6ZHx8ISgyPGIubGVuZ3RoKXx8XCJvXCIhPT1iWzBdJiZcIk9cIiE9PWJbMF18fFwiblwiIT09YlsxXSYmXCJOXCIhPT1iWzFdKW9hKGIsYyxlLGQpJiYoYz1udWxsKSxkfHxudWxsPT09ZT9tYShiKSYmKG51bGw9PT1jP2EucmVtb3ZlQXR0cmlidXRlKGIpOmEuc2V0QXR0cmlidXRlKGIsXCJcIitjKSk6ZS5tdXN0VXNlUHJvcGVydHk/YVtlLnByb3BlcnR5TmFtZV09bnVsbD09PWM/Mz09PWUudHlwZT8hMTpcIlwiOmM6KGI9ZS5hdHRyaWJ1dGVOYW1lLGQ9ZS5hdHRyaWJ1dGVOYW1lc3BhY2UsbnVsbD09PWM/YS5yZW1vdmVBdHRyaWJ1dGUoYik6KGU9ZS50eXBlLGM9Mz09PWV8fDQ9PT1lJiYhMD09PWM/XCJcIjpcIlwiK2MsZD9hLnNldEF0dHJpYnV0ZU5TKGQsYixjKTphLnNldEF0dHJpYnV0ZShiLGMpKSl9XG52YXIgc2E9YWEuX19TRUNSRVRfSU5URVJOQUxTX0RPX05PVF9VU0VfT1JfWU9VX1dJTExfQkVfRklSRUQsdGE9U3ltYm9sLmZvcihcInJlYWN0LmVsZW1lbnRcIiksdWE9U3ltYm9sLmZvcihcInJlYWN0LnBvcnRhbFwiKSx2YT1TeW1ib2wuZm9yKFwicmVhY3QuZnJhZ21lbnRcIiksd2E9U3ltYm9sLmZvcihcInJlYWN0LnN0cmljdF9tb2RlXCIpLHhhPVN5bWJvbC5mb3IoXCJyZWFjdC5wcm9maWxlclwiKSx5YT1TeW1ib2wuZm9yKFwicmVhY3QucHJvdmlkZXJcIiksQWE9U3ltYm9sLmZvcihcInJlYWN0LmNvbnRleHRcIiksQmE9U3ltYm9sLmZvcihcInJlYWN0LmZvcndhcmRfcmVmXCIpLENhPVN5bWJvbC5mb3IoXCJyZWFjdC5zdXNwZW5zZVwiKSxEYT1TeW1ib2wuZm9yKFwicmVhY3Quc3VzcGVuc2VfbGlzdFwiKSxFYT1TeW1ib2wuZm9yKFwicmVhY3QubWVtb1wiKSxGYT1TeW1ib2wuZm9yKFwicmVhY3QubGF6eVwiKTtTeW1ib2wuZm9yKFwicmVhY3Quc2NvcGVcIik7U3ltYm9sLmZvcihcInJlYWN0LmRlYnVnX3RyYWNlX21vZGVcIik7XG52YXIgR2E9U3ltYm9sLmZvcihcInJlYWN0Lm9mZnNjcmVlblwiKTtTeW1ib2wuZm9yKFwicmVhY3QubGVnYWN5X2hpZGRlblwiKTtTeW1ib2wuZm9yKFwicmVhY3QuY2FjaGVcIik7U3ltYm9sLmZvcihcInJlYWN0LnRyYWNpbmdfbWFya2VyXCIpO3ZhciBIYT1TeW1ib2wuaXRlcmF0b3I7ZnVuY3Rpb24gSWEoYSl7aWYobnVsbD09PWF8fFwib2JqZWN0XCIhPT10eXBlb2YgYSlyZXR1cm4gbnVsbDthPUhhJiZhW0hhXXx8YVtcIkBAaXRlcmF0b3JcIl07cmV0dXJuXCJmdW5jdGlvblwiPT09dHlwZW9mIGE/YTpudWxsfXZhciBBPU9iamVjdC5hc3NpZ24sSmE7ZnVuY3Rpb24gS2EoYSl7aWYodm9pZCAwPT09SmEpdHJ5e3Rocm93IEVycm9yKCk7fWNhdGNoKGMpe3ZhciBiPWMuc3RhY2sudHJpbSgpLm1hdGNoKC9cXG4oICooYXQgKT8pLyk7SmE9YiYmYlsxXXx8XCJcIn1yZXR1cm5cIlxcblwiK0phK2F9dmFyIExhPSExO1xuZnVuY3Rpb24gTWEoYSxiKXtpZighYXx8TGEpcmV0dXJuXCJcIjtMYT0hMDt2YXIgYz1FcnJvci5wcmVwYXJlU3RhY2tUcmFjZTtFcnJvci5wcmVwYXJlU3RhY2tUcmFjZT12b2lkIDA7dHJ5e2lmKGIpaWYoYj1mdW5jdGlvbigpe3Rocm93IEVycm9yKCk7fSxPYmplY3QuZGVmaW5lUHJvcGVydHkoYi5wcm90b3R5cGUsXCJwcm9wc1wiLHtzZXQ6ZnVuY3Rpb24oKXt0aHJvdyBFcnJvcigpO319KSxcIm9iamVjdFwiPT09dHlwZW9mIFJlZmxlY3QmJlJlZmxlY3QuY29uc3RydWN0KXt0cnl7UmVmbGVjdC5jb25zdHJ1Y3QoYixbXSl9Y2F0Y2gobCl7dmFyIGQ9bH1SZWZsZWN0LmNvbnN0cnVjdChhLFtdLGIpfWVsc2V7dHJ5e2IuY2FsbCgpfWNhdGNoKGwpe2Q9bH1hLmNhbGwoYi5wcm90b3R5cGUpfWVsc2V7dHJ5e3Rocm93IEVycm9yKCk7fWNhdGNoKGwpe2Q9bH1hKCl9fWNhdGNoKGwpe2lmKGwmJmQmJlwic3RyaW5nXCI9PT10eXBlb2YgbC5zdGFjayl7Zm9yKHZhciBlPWwuc3RhY2suc3BsaXQoXCJcXG5cIiksXG5mPWQuc3RhY2suc3BsaXQoXCJcXG5cIiksZz1lLmxlbmd0aC0xLGg9Zi5sZW5ndGgtMTsxPD1nJiYwPD1oJiZlW2ddIT09ZltoXTspaC0tO2Zvcig7MTw9ZyYmMDw9aDtnLS0saC0tKWlmKGVbZ10hPT1mW2hdKXtpZigxIT09Z3x8MSE9PWgpe2RvIGlmKGctLSxoLS0sMD5ofHxlW2ddIT09ZltoXSl7dmFyIGs9XCJcXG5cIitlW2ddLnJlcGxhY2UoXCIgYXQgbmV3IFwiLFwiIGF0IFwiKTthLmRpc3BsYXlOYW1lJiZrLmluY2x1ZGVzKFwiPGFub255bW91cz5cIikmJihrPWsucmVwbGFjZShcIjxhbm9ueW1vdXM+XCIsYS5kaXNwbGF5TmFtZSkpO3JldHVybiBrfXdoaWxlKDE8PWcmJjA8PWgpfWJyZWFrfX19ZmluYWxseXtMYT0hMSxFcnJvci5wcmVwYXJlU3RhY2tUcmFjZT1jfXJldHVybihhPWE/YS5kaXNwbGF5TmFtZXx8YS5uYW1lOlwiXCIpP0thKGEpOlwiXCJ9XG5mdW5jdGlvbiBOYShhKXtzd2l0Y2goYS50YWcpe2Nhc2UgNTpyZXR1cm4gS2EoYS50eXBlKTtjYXNlIDE2OnJldHVybiBLYShcIkxhenlcIik7Y2FzZSAxMzpyZXR1cm4gS2EoXCJTdXNwZW5zZVwiKTtjYXNlIDE5OnJldHVybiBLYShcIlN1c3BlbnNlTGlzdFwiKTtjYXNlIDA6Y2FzZSAyOmNhc2UgMTU6cmV0dXJuIGE9TWEoYS50eXBlLCExKSxhO2Nhc2UgMTE6cmV0dXJuIGE9TWEoYS50eXBlLnJlbmRlciwhMSksYTtjYXNlIDE6cmV0dXJuIGE9TWEoYS50eXBlLCEwKSxhO2RlZmF1bHQ6cmV0dXJuXCJcIn19XG5mdW5jdGlvbiBPYShhKXtpZihudWxsPT1hKXJldHVybiBudWxsO2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBhKXJldHVybiBhLmRpc3BsYXlOYW1lfHxhLm5hbWV8fG51bGw7aWYoXCJzdHJpbmdcIj09PXR5cGVvZiBhKXJldHVybiBhO3N3aXRjaChhKXtjYXNlIHZhOnJldHVyblwiRnJhZ21lbnRcIjtjYXNlIHVhOnJldHVyblwiUG9ydGFsXCI7Y2FzZSB4YTpyZXR1cm5cIlByb2ZpbGVyXCI7Y2FzZSB3YTpyZXR1cm5cIlN0cmljdE1vZGVcIjtjYXNlIENhOnJldHVyblwiU3VzcGVuc2VcIjtjYXNlIERhOnJldHVyblwiU3VzcGVuc2VMaXN0XCJ9aWYoXCJvYmplY3RcIj09PXR5cGVvZiBhKXN3aXRjaChhLiQkdHlwZW9mKXtjYXNlIEFhOnJldHVybihhLmRpc3BsYXlOYW1lfHxcIkNvbnRleHRcIikrXCIuQ29uc3VtZXJcIjtjYXNlIHlhOnJldHVybihhLl9jb250ZXh0LmRpc3BsYXlOYW1lfHxcIkNvbnRleHRcIikrXCIuUHJvdmlkZXJcIjtjYXNlIEJhOnZhciBiPWEucmVuZGVyO2E9YS5kaXNwbGF5TmFtZTthfHwoYT1iLmRpc3BsYXlOYW1lfHxcbmIubmFtZXx8XCJcIixhPVwiXCIhPT1hP1wiRm9yd2FyZFJlZihcIithK1wiKVwiOlwiRm9yd2FyZFJlZlwiKTtyZXR1cm4gYTtjYXNlIEVhOnJldHVybiBiPWEuZGlzcGxheU5hbWV8fG51bGwsbnVsbCE9PWI/YjpPYShhLnR5cGUpfHxcIk1lbW9cIjtjYXNlIEZhOmI9YS5fcGF5bG9hZDthPWEuX2luaXQ7dHJ5e3JldHVybiBPYShhKGIpKX1jYXRjaChjKXt9fXJldHVybiBudWxsfVxuZnVuY3Rpb24gUGEoYSl7dmFyIGI9YS50eXBlO3N3aXRjaChhLnRhZyl7Y2FzZSAyNDpyZXR1cm5cIkNhY2hlXCI7Y2FzZSA5OnJldHVybihiLmRpc3BsYXlOYW1lfHxcIkNvbnRleHRcIikrXCIuQ29uc3VtZXJcIjtjYXNlIDEwOnJldHVybihiLl9jb250ZXh0LmRpc3BsYXlOYW1lfHxcIkNvbnRleHRcIikrXCIuUHJvdmlkZXJcIjtjYXNlIDE4OnJldHVyblwiRGVoeWRyYXRlZEZyYWdtZW50XCI7Y2FzZSAxMTpyZXR1cm4gYT1iLnJlbmRlcixhPWEuZGlzcGxheU5hbWV8fGEubmFtZXx8XCJcIixiLmRpc3BsYXlOYW1lfHwoXCJcIiE9PWE/XCJGb3J3YXJkUmVmKFwiK2ErXCIpXCI6XCJGb3J3YXJkUmVmXCIpO2Nhc2UgNzpyZXR1cm5cIkZyYWdtZW50XCI7Y2FzZSA1OnJldHVybiBiO2Nhc2UgNDpyZXR1cm5cIlBvcnRhbFwiO2Nhc2UgMzpyZXR1cm5cIlJvb3RcIjtjYXNlIDY6cmV0dXJuXCJUZXh0XCI7Y2FzZSAxNjpyZXR1cm4gT2EoYik7Y2FzZSA4OnJldHVybiBiPT09d2E/XCJTdHJpY3RNb2RlXCI6XCJNb2RlXCI7Y2FzZSAyMjpyZXR1cm5cIk9mZnNjcmVlblwiO1xuY2FzZSAxMjpyZXR1cm5cIlByb2ZpbGVyXCI7Y2FzZSAyMTpyZXR1cm5cIlNjb3BlXCI7Y2FzZSAxMzpyZXR1cm5cIlN1c3BlbnNlXCI7Y2FzZSAxOTpyZXR1cm5cIlN1c3BlbnNlTGlzdFwiO2Nhc2UgMjU6cmV0dXJuXCJUcmFjaW5nTWFya2VyXCI7Y2FzZSAxOmNhc2UgMDpjYXNlIDE3OmNhc2UgMjpjYXNlIDE0OmNhc2UgMTU6aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGIpcmV0dXJuIGIuZGlzcGxheU5hbWV8fGIubmFtZXx8bnVsbDtpZihcInN0cmluZ1wiPT09dHlwZW9mIGIpcmV0dXJuIGJ9cmV0dXJuIG51bGx9ZnVuY3Rpb24gUWEoYSl7c3dpdGNoKHR5cGVvZiBhKXtjYXNlIFwiYm9vbGVhblwiOmNhc2UgXCJudW1iZXJcIjpjYXNlIFwic3RyaW5nXCI6Y2FzZSBcInVuZGVmaW5lZFwiOnJldHVybiBhO2Nhc2UgXCJvYmplY3RcIjpyZXR1cm4gYTtkZWZhdWx0OnJldHVyblwiXCJ9fVxuZnVuY3Rpb24gUmEoYSl7dmFyIGI9YS50eXBlO3JldHVybihhPWEubm9kZU5hbWUpJiZcImlucHV0XCI9PT1hLnRvTG93ZXJDYXNlKCkmJihcImNoZWNrYm94XCI9PT1ifHxcInJhZGlvXCI9PT1iKX1cbmZ1bmN0aW9uIFNhKGEpe3ZhciBiPVJhKGEpP1wiY2hlY2tlZFwiOlwidmFsdWVcIixjPU9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoYS5jb25zdHJ1Y3Rvci5wcm90b3R5cGUsYiksZD1cIlwiK2FbYl07aWYoIWEuaGFzT3duUHJvcGVydHkoYikmJlwidW5kZWZpbmVkXCIhPT10eXBlb2YgYyYmXCJmdW5jdGlvblwiPT09dHlwZW9mIGMuZ2V0JiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgYy5zZXQpe3ZhciBlPWMuZ2V0LGY9Yy5zZXQ7T2JqZWN0LmRlZmluZVByb3BlcnR5KGEsYix7Y29uZmlndXJhYmxlOiEwLGdldDpmdW5jdGlvbigpe3JldHVybiBlLmNhbGwodGhpcyl9LHNldDpmdW5jdGlvbihhKXtkPVwiXCIrYTtmLmNhbGwodGhpcyxhKX19KTtPYmplY3QuZGVmaW5lUHJvcGVydHkoYSxiLHtlbnVtZXJhYmxlOmMuZW51bWVyYWJsZX0pO3JldHVybntnZXRWYWx1ZTpmdW5jdGlvbigpe3JldHVybiBkfSxzZXRWYWx1ZTpmdW5jdGlvbihhKXtkPVwiXCIrYX0sc3RvcFRyYWNraW5nOmZ1bmN0aW9uKCl7YS5fdmFsdWVUcmFja2VyPVxubnVsbDtkZWxldGUgYVtiXX19fX1mdW5jdGlvbiBUYShhKXthLl92YWx1ZVRyYWNrZXJ8fChhLl92YWx1ZVRyYWNrZXI9U2EoYSkpfWZ1bmN0aW9uIFVhKGEpe2lmKCFhKXJldHVybiExO3ZhciBiPWEuX3ZhbHVlVHJhY2tlcjtpZighYilyZXR1cm4hMDt2YXIgYz1iLmdldFZhbHVlKCk7dmFyIGQ9XCJcIjthJiYoZD1SYShhKT9hLmNoZWNrZWQ/XCJ0cnVlXCI6XCJmYWxzZVwiOmEudmFsdWUpO2E9ZDtyZXR1cm4gYSE9PWM/KGIuc2V0VmFsdWUoYSksITApOiExfWZ1bmN0aW9uIFZhKGEpe2E9YXx8KFwidW5kZWZpbmVkXCIhPT10eXBlb2YgZG9jdW1lbnQ/ZG9jdW1lbnQ6dm9pZCAwKTtpZihcInVuZGVmaW5lZFwiPT09dHlwZW9mIGEpcmV0dXJuIG51bGw7dHJ5e3JldHVybiBhLmFjdGl2ZUVsZW1lbnR8fGEuYm9keX1jYXRjaChiKXtyZXR1cm4gYS5ib2R5fX1cbmZ1bmN0aW9uIFdhKGEsYil7dmFyIGM9Yi5jaGVja2VkO3JldHVybiBBKHt9LGIse2RlZmF1bHRDaGVja2VkOnZvaWQgMCxkZWZhdWx0VmFsdWU6dm9pZCAwLHZhbHVlOnZvaWQgMCxjaGVja2VkOm51bGwhPWM/YzphLl93cmFwcGVyU3RhdGUuaW5pdGlhbENoZWNrZWR9KX1mdW5jdGlvbiBYYShhLGIpe3ZhciBjPW51bGw9PWIuZGVmYXVsdFZhbHVlP1wiXCI6Yi5kZWZhdWx0VmFsdWUsZD1udWxsIT1iLmNoZWNrZWQ/Yi5jaGVja2VkOmIuZGVmYXVsdENoZWNrZWQ7Yz1RYShudWxsIT1iLnZhbHVlP2IudmFsdWU6Yyk7YS5fd3JhcHBlclN0YXRlPXtpbml0aWFsQ2hlY2tlZDpkLGluaXRpYWxWYWx1ZTpjLGNvbnRyb2xsZWQ6XCJjaGVja2JveFwiPT09Yi50eXBlfHxcInJhZGlvXCI9PT1iLnR5cGU/bnVsbCE9Yi5jaGVja2VkOm51bGwhPWIudmFsdWV9fWZ1bmN0aW9uIFlhKGEsYil7Yj1iLmNoZWNrZWQ7bnVsbCE9YiYmcmEoYSxcImNoZWNrZWRcIixiLCExKX1cbmZ1bmN0aW9uIFphKGEsYil7WWEoYSxiKTt2YXIgYz1RYShiLnZhbHVlKSxkPWIudHlwZTtpZihudWxsIT1jKWlmKFwibnVtYmVyXCI9PT1kKXtpZigwPT09YyYmXCJcIj09PWEudmFsdWV8fGEudmFsdWUhPWMpYS52YWx1ZT1cIlwiK2N9ZWxzZSBhLnZhbHVlIT09XCJcIitjJiYoYS52YWx1ZT1cIlwiK2MpO2Vsc2UgaWYoXCJzdWJtaXRcIj09PWR8fFwicmVzZXRcIj09PWQpe2EucmVtb3ZlQXR0cmlidXRlKFwidmFsdWVcIik7cmV0dXJufWIuaGFzT3duUHJvcGVydHkoXCJ2YWx1ZVwiKT8kYShhLGIudHlwZSxjKTpiLmhhc093blByb3BlcnR5KFwiZGVmYXVsdFZhbHVlXCIpJiYkYShhLGIudHlwZSxRYShiLmRlZmF1bHRWYWx1ZSkpO251bGw9PWIuY2hlY2tlZCYmbnVsbCE9Yi5kZWZhdWx0Q2hlY2tlZCYmKGEuZGVmYXVsdENoZWNrZWQ9ISFiLmRlZmF1bHRDaGVja2VkKX1cbmZ1bmN0aW9uIGFiKGEsYixjKXtpZihiLmhhc093blByb3BlcnR5KFwidmFsdWVcIil8fGIuaGFzT3duUHJvcGVydHkoXCJkZWZhdWx0VmFsdWVcIikpe3ZhciBkPWIudHlwZTtpZighKFwic3VibWl0XCIhPT1kJiZcInJlc2V0XCIhPT1kfHx2b2lkIDAhPT1iLnZhbHVlJiZudWxsIT09Yi52YWx1ZSkpcmV0dXJuO2I9XCJcIithLl93cmFwcGVyU3RhdGUuaW5pdGlhbFZhbHVlO2N8fGI9PT1hLnZhbHVlfHwoYS52YWx1ZT1iKTthLmRlZmF1bHRWYWx1ZT1ifWM9YS5uYW1lO1wiXCIhPT1jJiYoYS5uYW1lPVwiXCIpO2EuZGVmYXVsdENoZWNrZWQ9ISFhLl93cmFwcGVyU3RhdGUuaW5pdGlhbENoZWNrZWQ7XCJcIiE9PWMmJihhLm5hbWU9Yyl9XG5mdW5jdGlvbiAkYShhLGIsYyl7aWYoXCJudW1iZXJcIiE9PWJ8fFZhKGEub3duZXJEb2N1bWVudCkhPT1hKW51bGw9PWM/YS5kZWZhdWx0VmFsdWU9XCJcIithLl93cmFwcGVyU3RhdGUuaW5pdGlhbFZhbHVlOmEuZGVmYXVsdFZhbHVlIT09XCJcIitjJiYoYS5kZWZhdWx0VmFsdWU9XCJcIitjKX12YXIgYmI9QXJyYXkuaXNBcnJheTtcbmZ1bmN0aW9uIGNiKGEsYixjLGQpe2E9YS5vcHRpb25zO2lmKGIpe2I9e307Zm9yKHZhciBlPTA7ZTxjLmxlbmd0aDtlKyspYltcIiRcIitjW2VdXT0hMDtmb3IoYz0wO2M8YS5sZW5ndGg7YysrKWU9Yi5oYXNPd25Qcm9wZXJ0eShcIiRcIithW2NdLnZhbHVlKSxhW2NdLnNlbGVjdGVkIT09ZSYmKGFbY10uc2VsZWN0ZWQ9ZSksZSYmZCYmKGFbY10uZGVmYXVsdFNlbGVjdGVkPSEwKX1lbHNle2M9XCJcIitRYShjKTtiPW51bGw7Zm9yKGU9MDtlPGEubGVuZ3RoO2UrKyl7aWYoYVtlXS52YWx1ZT09PWMpe2FbZV0uc2VsZWN0ZWQ9ITA7ZCYmKGFbZV0uZGVmYXVsdFNlbGVjdGVkPSEwKTtyZXR1cm59bnVsbCE9PWJ8fGFbZV0uZGlzYWJsZWR8fChiPWFbZV0pfW51bGwhPT1iJiYoYi5zZWxlY3RlZD0hMCl9fVxuZnVuY3Rpb24gZGIoYSxiKXtpZihudWxsIT1iLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MKXRocm93IEVycm9yKHAoOTEpKTtyZXR1cm4gQSh7fSxiLHt2YWx1ZTp2b2lkIDAsZGVmYXVsdFZhbHVlOnZvaWQgMCxjaGlsZHJlbjpcIlwiK2EuX3dyYXBwZXJTdGF0ZS5pbml0aWFsVmFsdWV9KX1mdW5jdGlvbiBlYihhLGIpe3ZhciBjPWIudmFsdWU7aWYobnVsbD09Yyl7Yz1iLmNoaWxkcmVuO2I9Yi5kZWZhdWx0VmFsdWU7aWYobnVsbCE9Yyl7aWYobnVsbCE9Yil0aHJvdyBFcnJvcihwKDkyKSk7aWYoYmIoYykpe2lmKDE8Yy5sZW5ndGgpdGhyb3cgRXJyb3IocCg5MykpO2M9Y1swXX1iPWN9bnVsbD09YiYmKGI9XCJcIik7Yz1ifWEuX3dyYXBwZXJTdGF0ZT17aW5pdGlhbFZhbHVlOlFhKGMpfX1cbmZ1bmN0aW9uIGZiKGEsYil7dmFyIGM9UWEoYi52YWx1ZSksZD1RYShiLmRlZmF1bHRWYWx1ZSk7bnVsbCE9YyYmKGM9XCJcIitjLGMhPT1hLnZhbHVlJiYoYS52YWx1ZT1jKSxudWxsPT1iLmRlZmF1bHRWYWx1ZSYmYS5kZWZhdWx0VmFsdWUhPT1jJiYoYS5kZWZhdWx0VmFsdWU9YykpO251bGwhPWQmJihhLmRlZmF1bHRWYWx1ZT1cIlwiK2QpfWZ1bmN0aW9uIGdiKGEpe3ZhciBiPWEudGV4dENvbnRlbnQ7Yj09PWEuX3dyYXBwZXJTdGF0ZS5pbml0aWFsVmFsdWUmJlwiXCIhPT1iJiZudWxsIT09YiYmKGEudmFsdWU9Yil9ZnVuY3Rpb24gaGIoYSl7c3dpdGNoKGEpe2Nhc2UgXCJzdmdcIjpyZXR1cm5cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCI7Y2FzZSBcIm1hdGhcIjpyZXR1cm5cImh0dHA6Ly93d3cudzMub3JnLzE5OTgvTWF0aC9NYXRoTUxcIjtkZWZhdWx0OnJldHVyblwiaHR0cDovL3d3dy53My5vcmcvMTk5OS94aHRtbFwifX1cbmZ1bmN0aW9uIGliKGEsYil7cmV0dXJuIG51bGw9PWF8fFwiaHR0cDovL3d3dy53My5vcmcvMTk5OS94aHRtbFwiPT09YT9oYihiKTpcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCI9PT1hJiZcImZvcmVpZ25PYmplY3RcIj09PWI/XCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hodG1sXCI6YX1cbnZhciBqYixrYj1mdW5jdGlvbihhKXtyZXR1cm5cInVuZGVmaW5lZFwiIT09dHlwZW9mIE1TQXBwJiZNU0FwcC5leGVjVW5zYWZlTG9jYWxGdW5jdGlvbj9mdW5jdGlvbihiLGMsZCxlKXtNU0FwcC5leGVjVW5zYWZlTG9jYWxGdW5jdGlvbihmdW5jdGlvbigpe3JldHVybiBhKGIsYyxkLGUpfSl9OmF9KGZ1bmN0aW9uKGEsYil7aWYoXCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiIT09YS5uYW1lc3BhY2VVUkl8fFwiaW5uZXJIVE1MXCJpbiBhKWEuaW5uZXJIVE1MPWI7ZWxzZXtqYj1qYnx8ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtqYi5pbm5lckhUTUw9XCI8c3ZnPlwiK2IudmFsdWVPZigpLnRvU3RyaW5nKCkrXCI8L3N2Zz5cIjtmb3IoYj1qYi5maXJzdENoaWxkO2EuZmlyc3RDaGlsZDspYS5yZW1vdmVDaGlsZChhLmZpcnN0Q2hpbGQpO2Zvcig7Yi5maXJzdENoaWxkOylhLmFwcGVuZENoaWxkKGIuZmlyc3RDaGlsZCl9fSk7XG5mdW5jdGlvbiBsYihhLGIpe2lmKGIpe3ZhciBjPWEuZmlyc3RDaGlsZDtpZihjJiZjPT09YS5sYXN0Q2hpbGQmJjM9PT1jLm5vZGVUeXBlKXtjLm5vZGVWYWx1ZT1iO3JldHVybn19YS50ZXh0Q29udGVudD1ifVxudmFyIG1iPXthbmltYXRpb25JdGVyYXRpb25Db3VudDohMCxhc3BlY3RSYXRpbzohMCxib3JkZXJJbWFnZU91dHNldDohMCxib3JkZXJJbWFnZVNsaWNlOiEwLGJvcmRlckltYWdlV2lkdGg6ITAsYm94RmxleDohMCxib3hGbGV4R3JvdXA6ITAsYm94T3JkaW5hbEdyb3VwOiEwLGNvbHVtbkNvdW50OiEwLGNvbHVtbnM6ITAsZmxleDohMCxmbGV4R3JvdzohMCxmbGV4UG9zaXRpdmU6ITAsZmxleFNocmluazohMCxmbGV4TmVnYXRpdmU6ITAsZmxleE9yZGVyOiEwLGdyaWRBcmVhOiEwLGdyaWRSb3c6ITAsZ3JpZFJvd0VuZDohMCxncmlkUm93U3BhbjohMCxncmlkUm93U3RhcnQ6ITAsZ3JpZENvbHVtbjohMCxncmlkQ29sdW1uRW5kOiEwLGdyaWRDb2x1bW5TcGFuOiEwLGdyaWRDb2x1bW5TdGFydDohMCxmb250V2VpZ2h0OiEwLGxpbmVDbGFtcDohMCxsaW5lSGVpZ2h0OiEwLG9wYWNpdHk6ITAsb3JkZXI6ITAsb3JwaGFuczohMCx0YWJTaXplOiEwLHdpZG93czohMCx6SW5kZXg6ITAsXG56b29tOiEwLGZpbGxPcGFjaXR5OiEwLGZsb29kT3BhY2l0eTohMCxzdG9wT3BhY2l0eTohMCxzdHJva2VEYXNoYXJyYXk6ITAsc3Ryb2tlRGFzaG9mZnNldDohMCxzdHJva2VNaXRlcmxpbWl0OiEwLHN0cm9rZU9wYWNpdHk6ITAsc3Ryb2tlV2lkdGg6ITB9LG5iPVtcIldlYmtpdFwiLFwibXNcIixcIk1velwiLFwiT1wiXTtPYmplY3Qua2V5cyhtYikuZm9yRWFjaChmdW5jdGlvbihhKXtuYi5mb3JFYWNoKGZ1bmN0aW9uKGIpe2I9YithLmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpK2Euc3Vic3RyaW5nKDEpO21iW2JdPW1iW2FdfSl9KTtmdW5jdGlvbiBvYihhLGIsYyl7cmV0dXJuIG51bGw9PWJ8fFwiYm9vbGVhblwiPT09dHlwZW9mIGJ8fFwiXCI9PT1iP1wiXCI6Y3x8XCJudW1iZXJcIiE9PXR5cGVvZiBifHwwPT09Ynx8bWIuaGFzT3duUHJvcGVydHkoYSkmJm1iW2FdPyhcIlwiK2IpLnRyaW0oKTpiK1wicHhcIn1cbmZ1bmN0aW9uIHBiKGEsYil7YT1hLnN0eWxlO2Zvcih2YXIgYyBpbiBiKWlmKGIuaGFzT3duUHJvcGVydHkoYykpe3ZhciBkPTA9PT1jLmluZGV4T2YoXCItLVwiKSxlPW9iKGMsYltjXSxkKTtcImZsb2F0XCI9PT1jJiYoYz1cImNzc0Zsb2F0XCIpO2Q/YS5zZXRQcm9wZXJ0eShjLGUpOmFbY109ZX19dmFyIHFiPUEoe21lbnVpdGVtOiEwfSx7YXJlYTohMCxiYXNlOiEwLGJyOiEwLGNvbDohMCxlbWJlZDohMCxocjohMCxpbWc6ITAsaW5wdXQ6ITAsa2V5Z2VuOiEwLGxpbms6ITAsbWV0YTohMCxwYXJhbTohMCxzb3VyY2U6ITAsdHJhY2s6ITAsd2JyOiEwfSk7XG5mdW5jdGlvbiByYihhLGIpe2lmKGIpe2lmKHFiW2FdJiYobnVsbCE9Yi5jaGlsZHJlbnx8bnVsbCE9Yi5kYW5nZXJvdXNseVNldElubmVySFRNTCkpdGhyb3cgRXJyb3IocCgxMzcsYSkpO2lmKG51bGwhPWIuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwpe2lmKG51bGwhPWIuY2hpbGRyZW4pdGhyb3cgRXJyb3IocCg2MCkpO2lmKFwib2JqZWN0XCIhPT10eXBlb2YgYi5kYW5nZXJvdXNseVNldElubmVySFRNTHx8IShcIl9faHRtbFwiaW4gYi5kYW5nZXJvdXNseVNldElubmVySFRNTCkpdGhyb3cgRXJyb3IocCg2MSkpO31pZihudWxsIT1iLnN0eWxlJiZcIm9iamVjdFwiIT09dHlwZW9mIGIuc3R5bGUpdGhyb3cgRXJyb3IocCg2MikpO319XG5mdW5jdGlvbiBzYihhLGIpe2lmKC0xPT09YS5pbmRleE9mKFwiLVwiKSlyZXR1cm5cInN0cmluZ1wiPT09dHlwZW9mIGIuaXM7c3dpdGNoKGEpe2Nhc2UgXCJhbm5vdGF0aW9uLXhtbFwiOmNhc2UgXCJjb2xvci1wcm9maWxlXCI6Y2FzZSBcImZvbnQtZmFjZVwiOmNhc2UgXCJmb250LWZhY2Utc3JjXCI6Y2FzZSBcImZvbnQtZmFjZS11cmlcIjpjYXNlIFwiZm9udC1mYWNlLWZvcm1hdFwiOmNhc2UgXCJmb250LWZhY2UtbmFtZVwiOmNhc2UgXCJtaXNzaW5nLWdseXBoXCI6cmV0dXJuITE7ZGVmYXVsdDpyZXR1cm4hMH19dmFyIHRiPW51bGw7ZnVuY3Rpb24gdWIoYSl7YT1hLnRhcmdldHx8YS5zcmNFbGVtZW50fHx3aW5kb3c7YS5jb3JyZXNwb25kaW5nVXNlRWxlbWVudCYmKGE9YS5jb3JyZXNwb25kaW5nVXNlRWxlbWVudCk7cmV0dXJuIDM9PT1hLm5vZGVUeXBlP2EucGFyZW50Tm9kZTphfXZhciB2Yj1udWxsLHdiPW51bGwseGI9bnVsbDtcbmZ1bmN0aW9uIHliKGEpe2lmKGE9emIoYSkpe2lmKFwiZnVuY3Rpb25cIiE9PXR5cGVvZiB2Yil0aHJvdyBFcnJvcihwKDI4MCkpO3ZhciBiPWEuc3RhdGVOb2RlO2ImJihiPUFiKGIpLHZiKGEuc3RhdGVOb2RlLGEudHlwZSxiKSl9fWZ1bmN0aW9uIEJiKGEpe3diP3hiP3hiLnB1c2goYSk6eGI9W2FdOndiPWF9ZnVuY3Rpb24gQ2IoKXtpZih3Yil7dmFyIGE9d2IsYj14Yjt4Yj13Yj1udWxsO3liKGEpO2lmKGIpZm9yKGE9MDthPGIubGVuZ3RoO2ErKyl5YihiW2FdKX19ZnVuY3Rpb24gRGIoYSxiKXtyZXR1cm4gYShiKX1mdW5jdGlvbiBFYigpe312YXIgRmI9ITE7ZnVuY3Rpb24gR2IoYSxiLGMpe2lmKEZiKXJldHVybiBhKGIsYyk7RmI9ITA7dHJ5e3JldHVybiBEYihhLGIsYyl9ZmluYWxseXtpZihGYj0hMSxudWxsIT09d2J8fG51bGwhPT14YilFYigpLENiKCl9fVxuZnVuY3Rpb24gSGIoYSxiKXt2YXIgYz1hLnN0YXRlTm9kZTtpZihudWxsPT09YylyZXR1cm4gbnVsbDt2YXIgZD1BYihjKTtpZihudWxsPT09ZClyZXR1cm4gbnVsbDtjPWRbYl07YTpzd2l0Y2goYil7Y2FzZSBcIm9uQ2xpY2tcIjpjYXNlIFwib25DbGlja0NhcHR1cmVcIjpjYXNlIFwib25Eb3VibGVDbGlja1wiOmNhc2UgXCJvbkRvdWJsZUNsaWNrQ2FwdHVyZVwiOmNhc2UgXCJvbk1vdXNlRG93blwiOmNhc2UgXCJvbk1vdXNlRG93bkNhcHR1cmVcIjpjYXNlIFwib25Nb3VzZU1vdmVcIjpjYXNlIFwib25Nb3VzZU1vdmVDYXB0dXJlXCI6Y2FzZSBcIm9uTW91c2VVcFwiOmNhc2UgXCJvbk1vdXNlVXBDYXB0dXJlXCI6Y2FzZSBcIm9uTW91c2VFbnRlclwiOihkPSFkLmRpc2FibGVkKXx8KGE9YS50eXBlLGQ9IShcImJ1dHRvblwiPT09YXx8XCJpbnB1dFwiPT09YXx8XCJzZWxlY3RcIj09PWF8fFwidGV4dGFyZWFcIj09PWEpKTthPSFkO2JyZWFrIGE7ZGVmYXVsdDphPSExfWlmKGEpcmV0dXJuIG51bGw7aWYoYyYmXCJmdW5jdGlvblwiIT09XG50eXBlb2YgYyl0aHJvdyBFcnJvcihwKDIzMSxiLHR5cGVvZiBjKSk7cmV0dXJuIGN9dmFyIEliPSExO2lmKGhhKXRyeXt2YXIgSmI9e307T2JqZWN0LmRlZmluZVByb3BlcnR5KEpiLFwicGFzc2l2ZVwiLHtnZXQ6ZnVuY3Rpb24oKXtJYj0hMH19KTt3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihcInRlc3RcIixKYixKYik7d2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJ0ZXN0XCIsSmIsSmIpfWNhdGNoKGEpe0liPSExfWZ1bmN0aW9uIEtiKGEsYixjLGQsZSxmLGcsaCxrKXt2YXIgbD1BcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMsMyk7dHJ5e2IuYXBwbHkoYyxsKX1jYXRjaChtKXt0aGlzLm9uRXJyb3IobSl9fXZhciBMYj0hMSxNYj1udWxsLE5iPSExLE9iPW51bGwsUGI9e29uRXJyb3I6ZnVuY3Rpb24oYSl7TGI9ITA7TWI9YX19O2Z1bmN0aW9uIFFiKGEsYixjLGQsZSxmLGcsaCxrKXtMYj0hMTtNYj1udWxsO0tiLmFwcGx5KFBiLGFyZ3VtZW50cyl9XG5mdW5jdGlvbiBSYihhLGIsYyxkLGUsZixnLGgsayl7UWIuYXBwbHkodGhpcyxhcmd1bWVudHMpO2lmKExiKXtpZihMYil7dmFyIGw9TWI7TGI9ITE7TWI9bnVsbH1lbHNlIHRocm93IEVycm9yKHAoMTk4KSk7TmJ8fChOYj0hMCxPYj1sKX19ZnVuY3Rpb24gU2IoYSl7dmFyIGI9YSxjPWE7aWYoYS5hbHRlcm5hdGUpZm9yKDtiLnJldHVybjspYj1iLnJldHVybjtlbHNle2E9YjtkbyBiPWEsMCE9PShiLmZsYWdzJjQwOTgpJiYoYz1iLnJldHVybiksYT1iLnJldHVybjt3aGlsZShhKX1yZXR1cm4gMz09PWIudGFnP2M6bnVsbH1mdW5jdGlvbiBUYihhKXtpZigxMz09PWEudGFnKXt2YXIgYj1hLm1lbW9pemVkU3RhdGU7bnVsbD09PWImJihhPWEuYWx0ZXJuYXRlLG51bGwhPT1hJiYoYj1hLm1lbW9pemVkU3RhdGUpKTtpZihudWxsIT09YilyZXR1cm4gYi5kZWh5ZHJhdGVkfXJldHVybiBudWxsfWZ1bmN0aW9uIFViKGEpe2lmKFNiKGEpIT09YSl0aHJvdyBFcnJvcihwKDE4OCkpO31cbmZ1bmN0aW9uIFZiKGEpe3ZhciBiPWEuYWx0ZXJuYXRlO2lmKCFiKXtiPVNiKGEpO2lmKG51bGw9PT1iKXRocm93IEVycm9yKHAoMTg4KSk7cmV0dXJuIGIhPT1hP251bGw6YX1mb3IodmFyIGM9YSxkPWI7Oyl7dmFyIGU9Yy5yZXR1cm47aWYobnVsbD09PWUpYnJlYWs7dmFyIGY9ZS5hbHRlcm5hdGU7aWYobnVsbD09PWYpe2Q9ZS5yZXR1cm47aWYobnVsbCE9PWQpe2M9ZDtjb250aW51ZX1icmVha31pZihlLmNoaWxkPT09Zi5jaGlsZCl7Zm9yKGY9ZS5jaGlsZDtmOyl7aWYoZj09PWMpcmV0dXJuIFViKGUpLGE7aWYoZj09PWQpcmV0dXJuIFViKGUpLGI7Zj1mLnNpYmxpbmd9dGhyb3cgRXJyb3IocCgxODgpKTt9aWYoYy5yZXR1cm4hPT1kLnJldHVybiljPWUsZD1mO2Vsc2V7Zm9yKHZhciBnPSExLGg9ZS5jaGlsZDtoOyl7aWYoaD09PWMpe2c9ITA7Yz1lO2Q9ZjticmVha31pZihoPT09ZCl7Zz0hMDtkPWU7Yz1mO2JyZWFrfWg9aC5zaWJsaW5nfWlmKCFnKXtmb3IoaD1mLmNoaWxkO2g7KXtpZihoPT09XG5jKXtnPSEwO2M9ZjtkPWU7YnJlYWt9aWYoaD09PWQpe2c9ITA7ZD1mO2M9ZTticmVha31oPWguc2libGluZ31pZighZyl0aHJvdyBFcnJvcihwKDE4OSkpO319aWYoYy5hbHRlcm5hdGUhPT1kKXRocm93IEVycm9yKHAoMTkwKSk7fWlmKDMhPT1jLnRhZyl0aHJvdyBFcnJvcihwKDE4OCkpO3JldHVybiBjLnN0YXRlTm9kZS5jdXJyZW50PT09Yz9hOmJ9ZnVuY3Rpb24gV2IoYSl7YT1WYihhKTtyZXR1cm4gbnVsbCE9PWE/WGIoYSk6bnVsbH1mdW5jdGlvbiBYYihhKXtpZig1PT09YS50YWd8fDY9PT1hLnRhZylyZXR1cm4gYTtmb3IoYT1hLmNoaWxkO251bGwhPT1hOyl7dmFyIGI9WGIoYSk7aWYobnVsbCE9PWIpcmV0dXJuIGI7YT1hLnNpYmxpbmd9cmV0dXJuIG51bGx9XG52YXIgWWI9YmEudW5zdGFibGVfc2NoZWR1bGVDYWxsYmFjayxaYj1iYS51bnN0YWJsZV9jYW5jZWxDYWxsYmFjaywkYj1iYS51bnN0YWJsZV9zaG91bGRZaWVsZCxhYz1iYS51bnN0YWJsZV9yZXF1ZXN0UGFpbnQsRD1iYS51bnN0YWJsZV9ub3csYmM9YmEudW5zdGFibGVfZ2V0Q3VycmVudFByaW9yaXR5TGV2ZWwsY2M9YmEudW5zdGFibGVfSW1tZWRpYXRlUHJpb3JpdHksZGM9YmEudW5zdGFibGVfVXNlckJsb2NraW5nUHJpb3JpdHksZWM9YmEudW5zdGFibGVfTm9ybWFsUHJpb3JpdHksZmM9YmEudW5zdGFibGVfTG93UHJpb3JpdHksZ2M9YmEudW5zdGFibGVfSWRsZVByaW9yaXR5LGhjPW51bGwsaWM9bnVsbDtmdW5jdGlvbiBqYyhhKXtpZihpYyYmXCJmdW5jdGlvblwiPT09dHlwZW9mIGljLm9uQ29tbWl0RmliZXJSb290KXRyeXtpYy5vbkNvbW1pdEZpYmVyUm9vdChoYyxhLHZvaWQgMCwxMjg9PT0oYS5jdXJyZW50LmZsYWdzJjEyOCkpfWNhdGNoKGIpe319XG52YXIgbGM9TWF0aC5jbHozMj9NYXRoLmNsejMyOmtjLG1jPU1hdGgubG9nLG5jPU1hdGguTE4yO2Z1bmN0aW9uIGtjKGEpe2E+Pj49MDtyZXR1cm4gMD09PWE/MzI6MzEtKG1jKGEpL25jfDApfDB9dmFyIG9jPTY0LHBjPTQxOTQzMDQ7XG5mdW5jdGlvbiBxYyhhKXtzd2l0Y2goYSYtYSl7Y2FzZSAxOnJldHVybiAxO2Nhc2UgMjpyZXR1cm4gMjtjYXNlIDQ6cmV0dXJuIDQ7Y2FzZSA4OnJldHVybiA4O2Nhc2UgMTY6cmV0dXJuIDE2O2Nhc2UgMzI6cmV0dXJuIDMyO2Nhc2UgNjQ6Y2FzZSAxMjg6Y2FzZSAyNTY6Y2FzZSA1MTI6Y2FzZSAxMDI0OmNhc2UgMjA0ODpjYXNlIDQwOTY6Y2FzZSA4MTkyOmNhc2UgMTYzODQ6Y2FzZSAzMjc2ODpjYXNlIDY1NTM2OmNhc2UgMTMxMDcyOmNhc2UgMjYyMTQ0OmNhc2UgNTI0Mjg4OmNhc2UgMTA0ODU3NjpjYXNlIDIwOTcxNTI6cmV0dXJuIGEmNDE5NDI0MDtjYXNlIDQxOTQzMDQ6Y2FzZSA4Mzg4NjA4OmNhc2UgMTY3NzcyMTY6Y2FzZSAzMzU1NDQzMjpjYXNlIDY3MTA4ODY0OnJldHVybiBhJjEzMDAyMzQyNDtjYXNlIDEzNDIxNzcyODpyZXR1cm4gMTM0MjE3NzI4O2Nhc2UgMjY4NDM1NDU2OnJldHVybiAyNjg0MzU0NTY7Y2FzZSA1MzY4NzA5MTI6cmV0dXJuIDUzNjg3MDkxMjtjYXNlIDEwNzM3NDE4MjQ6cmV0dXJuIDEwNzM3NDE4MjQ7XG5kZWZhdWx0OnJldHVybiBhfX1mdW5jdGlvbiByYyhhLGIpe3ZhciBjPWEucGVuZGluZ0xhbmVzO2lmKDA9PT1jKXJldHVybiAwO3ZhciBkPTAsZT1hLnN1c3BlbmRlZExhbmVzLGY9YS5waW5nZWRMYW5lcyxnPWMmMjY4NDM1NDU1O2lmKDAhPT1nKXt2YXIgaD1nJn5lOzAhPT1oP2Q9cWMoaCk6KGYmPWcsMCE9PWYmJihkPXFjKGYpKSl9ZWxzZSBnPWMmfmUsMCE9PWc/ZD1xYyhnKTowIT09ZiYmKGQ9cWMoZikpO2lmKDA9PT1kKXJldHVybiAwO2lmKDAhPT1iJiZiIT09ZCYmMD09PShiJmUpJiYoZT1kJi1kLGY9YiYtYixlPj1mfHwxNj09PWUmJjAhPT0oZiY0MTk0MjQwKSkpcmV0dXJuIGI7MCE9PShkJjQpJiYoZHw9YyYxNik7Yj1hLmVudGFuZ2xlZExhbmVzO2lmKDAhPT1iKWZvcihhPWEuZW50YW5nbGVtZW50cyxiJj1kOzA8YjspYz0zMS1sYyhiKSxlPTE8PGMsZHw9YVtjXSxiJj1+ZTtyZXR1cm4gZH1cbmZ1bmN0aW9uIHNjKGEsYil7c3dpdGNoKGEpe2Nhc2UgMTpjYXNlIDI6Y2FzZSA0OnJldHVybiBiKzI1MDtjYXNlIDg6Y2FzZSAxNjpjYXNlIDMyOmNhc2UgNjQ6Y2FzZSAxMjg6Y2FzZSAyNTY6Y2FzZSA1MTI6Y2FzZSAxMDI0OmNhc2UgMjA0ODpjYXNlIDQwOTY6Y2FzZSA4MTkyOmNhc2UgMTYzODQ6Y2FzZSAzMjc2ODpjYXNlIDY1NTM2OmNhc2UgMTMxMDcyOmNhc2UgMjYyMTQ0OmNhc2UgNTI0Mjg4OmNhc2UgMTA0ODU3NjpjYXNlIDIwOTcxNTI6cmV0dXJuIGIrNUUzO2Nhc2UgNDE5NDMwNDpjYXNlIDgzODg2MDg6Y2FzZSAxNjc3NzIxNjpjYXNlIDMzNTU0NDMyOmNhc2UgNjcxMDg4NjQ6cmV0dXJuLTE7Y2FzZSAxMzQyMTc3Mjg6Y2FzZSAyNjg0MzU0NTY6Y2FzZSA1MzY4NzA5MTI6Y2FzZSAxMDczNzQxODI0OnJldHVybi0xO2RlZmF1bHQ6cmV0dXJuLTF9fVxuZnVuY3Rpb24gdGMoYSxiKXtmb3IodmFyIGM9YS5zdXNwZW5kZWRMYW5lcyxkPWEucGluZ2VkTGFuZXMsZT1hLmV4cGlyYXRpb25UaW1lcyxmPWEucGVuZGluZ0xhbmVzOzA8Zjspe3ZhciBnPTMxLWxjKGYpLGg9MTw8ZyxrPWVbZ107aWYoLTE9PT1rKXtpZigwPT09KGgmYyl8fDAhPT0oaCZkKSllW2ddPXNjKGgsYil9ZWxzZSBrPD1iJiYoYS5leHBpcmVkTGFuZXN8PWgpO2YmPX5ofX1mdW5jdGlvbiB1YyhhKXthPWEucGVuZGluZ0xhbmVzJi0xMDczNzQxODI1O3JldHVybiAwIT09YT9hOmEmMTA3Mzc0MTgyND8xMDczNzQxODI0OjB9ZnVuY3Rpb24gdmMoYSl7Zm9yKHZhciBiPVtdLGM9MDszMT5jO2MrKyliLnB1c2goYSk7cmV0dXJuIGJ9ZnVuY3Rpb24gd2MoYSxiLGMpe2EucGVuZGluZ0xhbmVzfD1iOzUzNjg3MDkxMiE9PWImJihhLnN1c3BlbmRlZExhbmVzPTAsYS5waW5nZWRMYW5lcz0wKTthPWEuZXZlbnRUaW1lcztiPTMxLWxjKGIpO2FbYl09Y31cbmZ1bmN0aW9uIHhjKGEsYil7dmFyIGM9YS5wZW5kaW5nTGFuZXMmfmI7YS5wZW5kaW5nTGFuZXM9YjthLnN1c3BlbmRlZExhbmVzPTA7YS5waW5nZWRMYW5lcz0wO2EuZXhwaXJlZExhbmVzJj1iO2EubXV0YWJsZVJlYWRMYW5lcyY9YjthLmVudGFuZ2xlZExhbmVzJj1iO2I9YS5lbnRhbmdsZW1lbnRzO3ZhciBkPWEuZXZlbnRUaW1lcztmb3IoYT1hLmV4cGlyYXRpb25UaW1lczswPGM7KXt2YXIgZT0zMS1sYyhjKSxmPTE8PGU7YltlXT0wO2RbZV09LTE7YVtlXT0tMTtjJj1+Zn19ZnVuY3Rpb24geWMoYSxiKXt2YXIgYz1hLmVudGFuZ2xlZExhbmVzfD1iO2ZvcihhPWEuZW50YW5nbGVtZW50cztjOyl7dmFyIGQ9MzEtbGMoYyksZT0xPDxkO2UmYnxhW2RdJmImJihhW2RdfD1iKTtjJj1+ZX19dmFyIEU9MDtmdW5jdGlvbiB6YyhhKXthJj0tYTtyZXR1cm4gMTxhPzQ8YT8wIT09KGEmMjY4NDM1NDU1KT8xNjo1MzY4NzA5MTI6NDoxfVxudmFyIEFjLEJjLENjLERjLEVjLEZjPSExLEdjPVtdLEhjPW51bGwsSWM9bnVsbCxKYz1udWxsLEtjPW5ldyBNYXAsTGM9bmV3IE1hcCxNYz1bXSxOYz1cIm1vdXNlZG93biBtb3VzZXVwIHRvdWNoY2FuY2VsIHRvdWNoZW5kIHRvdWNoc3RhcnQgYXV4Y2xpY2sgZGJsY2xpY2sgcG9pbnRlcmNhbmNlbCBwb2ludGVyZG93biBwb2ludGVydXAgZHJhZ2VuZCBkcmFnc3RhcnQgZHJvcCBjb21wb3NpdGlvbmVuZCBjb21wb3NpdGlvbnN0YXJ0IGtleWRvd24ga2V5cHJlc3Mga2V5dXAgaW5wdXQgdGV4dElucHV0IGNvcHkgY3V0IHBhc3RlIGNsaWNrIGNoYW5nZSBjb250ZXh0bWVudSByZXNldCBzdWJtaXRcIi5zcGxpdChcIiBcIik7XG5mdW5jdGlvbiBPYyhhLGIpe3N3aXRjaChhKXtjYXNlIFwiZm9jdXNpblwiOmNhc2UgXCJmb2N1c291dFwiOkhjPW51bGw7YnJlYWs7Y2FzZSBcImRyYWdlbnRlclwiOmNhc2UgXCJkcmFnbGVhdmVcIjpJYz1udWxsO2JyZWFrO2Nhc2UgXCJtb3VzZW92ZXJcIjpjYXNlIFwibW91c2VvdXRcIjpKYz1udWxsO2JyZWFrO2Nhc2UgXCJwb2ludGVyb3ZlclwiOmNhc2UgXCJwb2ludGVyb3V0XCI6S2MuZGVsZXRlKGIucG9pbnRlcklkKTticmVhaztjYXNlIFwiZ290cG9pbnRlcmNhcHR1cmVcIjpjYXNlIFwibG9zdHBvaW50ZXJjYXB0dXJlXCI6TGMuZGVsZXRlKGIucG9pbnRlcklkKX19XG5mdW5jdGlvbiBQYyhhLGIsYyxkLGUsZil7aWYobnVsbD09PWF8fGEubmF0aXZlRXZlbnQhPT1mKXJldHVybiBhPXtibG9ja2VkT246Yixkb21FdmVudE5hbWU6YyxldmVudFN5c3RlbUZsYWdzOmQsbmF0aXZlRXZlbnQ6Zix0YXJnZXRDb250YWluZXJzOltlXX0sbnVsbCE9PWImJihiPXpiKGIpLG51bGwhPT1iJiZCYyhiKSksYTthLmV2ZW50U3lzdGVtRmxhZ3N8PWQ7Yj1hLnRhcmdldENvbnRhaW5lcnM7bnVsbCE9PWUmJi0xPT09Yi5pbmRleE9mKGUpJiZiLnB1c2goZSk7cmV0dXJuIGF9XG5mdW5jdGlvbiBRYyhhLGIsYyxkLGUpe3N3aXRjaChiKXtjYXNlIFwiZm9jdXNpblwiOnJldHVybiBIYz1QYyhIYyxhLGIsYyxkLGUpLCEwO2Nhc2UgXCJkcmFnZW50ZXJcIjpyZXR1cm4gSWM9UGMoSWMsYSxiLGMsZCxlKSwhMDtjYXNlIFwibW91c2VvdmVyXCI6cmV0dXJuIEpjPVBjKEpjLGEsYixjLGQsZSksITA7Y2FzZSBcInBvaW50ZXJvdmVyXCI6dmFyIGY9ZS5wb2ludGVySWQ7S2Muc2V0KGYsUGMoS2MuZ2V0KGYpfHxudWxsLGEsYixjLGQsZSkpO3JldHVybiEwO2Nhc2UgXCJnb3Rwb2ludGVyY2FwdHVyZVwiOnJldHVybiBmPWUucG9pbnRlcklkLExjLnNldChmLFBjKExjLmdldChmKXx8bnVsbCxhLGIsYyxkLGUpKSwhMH1yZXR1cm4hMX1cbmZ1bmN0aW9uIFJjKGEpe3ZhciBiPVNjKGEudGFyZ2V0KTtpZihudWxsIT09Yil7dmFyIGM9U2IoYik7aWYobnVsbCE9PWMpaWYoYj1jLnRhZywxMz09PWIpe2lmKGI9VGIoYyksbnVsbCE9PWIpe2EuYmxvY2tlZE9uPWI7RWMoYS5wcmlvcml0eSxmdW5jdGlvbigpe0NjKGMpfSk7cmV0dXJufX1lbHNlIGlmKDM9PT1iJiZjLnN0YXRlTm9kZS5jdXJyZW50Lm1lbW9pemVkU3RhdGUuaXNEZWh5ZHJhdGVkKXthLmJsb2NrZWRPbj0zPT09Yy50YWc/Yy5zdGF0ZU5vZGUuY29udGFpbmVySW5mbzpudWxsO3JldHVybn19YS5ibG9ja2VkT249bnVsbH1cbmZ1bmN0aW9uIFRjKGEpe2lmKG51bGwhPT1hLmJsb2NrZWRPbilyZXR1cm4hMTtmb3IodmFyIGI9YS50YXJnZXRDb250YWluZXJzOzA8Yi5sZW5ndGg7KXt2YXIgYz1VYyhhLmRvbUV2ZW50TmFtZSxhLmV2ZW50U3lzdGVtRmxhZ3MsYlswXSxhLm5hdGl2ZUV2ZW50KTtpZihudWxsPT09Yyl7Yz1hLm5hdGl2ZUV2ZW50O3ZhciBkPW5ldyBjLmNvbnN0cnVjdG9yKGMudHlwZSxjKTt0Yj1kO2MudGFyZ2V0LmRpc3BhdGNoRXZlbnQoZCk7dGI9bnVsbH1lbHNlIHJldHVybiBiPXpiKGMpLG51bGwhPT1iJiZCYyhiKSxhLmJsb2NrZWRPbj1jLCExO2Iuc2hpZnQoKX1yZXR1cm4hMH1mdW5jdGlvbiBWYyhhLGIsYyl7VGMoYSkmJmMuZGVsZXRlKGIpfWZ1bmN0aW9uIFdjKCl7RmM9ITE7bnVsbCE9PUhjJiZUYyhIYykmJihIYz1udWxsKTtudWxsIT09SWMmJlRjKEljKSYmKEljPW51bGwpO251bGwhPT1KYyYmVGMoSmMpJiYoSmM9bnVsbCk7S2MuZm9yRWFjaChWYyk7TGMuZm9yRWFjaChWYyl9XG5mdW5jdGlvbiBYYyhhLGIpe2EuYmxvY2tlZE9uPT09YiYmKGEuYmxvY2tlZE9uPW51bGwsRmN8fChGYz0hMCxiYS51bnN0YWJsZV9zY2hlZHVsZUNhbGxiYWNrKGJhLnVuc3RhYmxlX05vcm1hbFByaW9yaXR5LFdjKSkpfVxuZnVuY3Rpb24gWWMoYSl7ZnVuY3Rpb24gYihiKXtyZXR1cm4gWGMoYixhKX1pZigwPEdjLmxlbmd0aCl7WGMoR2NbMF0sYSk7Zm9yKHZhciBjPTE7YzxHYy5sZW5ndGg7YysrKXt2YXIgZD1HY1tjXTtkLmJsb2NrZWRPbj09PWEmJihkLmJsb2NrZWRPbj1udWxsKX19bnVsbCE9PUhjJiZYYyhIYyxhKTtudWxsIT09SWMmJlhjKEljLGEpO251bGwhPT1KYyYmWGMoSmMsYSk7S2MuZm9yRWFjaChiKTtMYy5mb3JFYWNoKGIpO2ZvcihjPTA7YzxNYy5sZW5ndGg7YysrKWQ9TWNbY10sZC5ibG9ja2VkT249PT1hJiYoZC5ibG9ja2VkT249bnVsbCk7Zm9yKDswPE1jLmxlbmd0aCYmKGM9TWNbMF0sbnVsbD09PWMuYmxvY2tlZE9uKTspUmMoYyksbnVsbD09PWMuYmxvY2tlZE9uJiZNYy5zaGlmdCgpfXZhciBaYz1zYS5SZWFjdEN1cnJlbnRCYXRjaENvbmZpZztcbmZ1bmN0aW9uICRjKGEsYixjLGQpe3ZhciBlPUUsZj1aYy50cmFuc2l0aW9uO1pjLnRyYW5zaXRpb249bnVsbDt0cnl7RT0xLGFkKGEsYixjLGQpfWZpbmFsbHl7RT1lLFpjLnRyYW5zaXRpb249Zn19ZnVuY3Rpb24gYmQoYSxiLGMsZCl7dmFyIGU9RSxmPVpjLnRyYW5zaXRpb247WmMudHJhbnNpdGlvbj1udWxsO3RyeXtFPTQsYWQoYSxiLGMsZCl9ZmluYWxseXtFPWUsWmMudHJhbnNpdGlvbj1mfX1cbmZ1bmN0aW9uIGFkKGEsYixjLGQpe3ZhciBlPVVjKGEsYixjLGQpO2lmKG51bGw9PT1lKWNkKGEsYixkLGRkLGMpLE9jKGEsZCk7ZWxzZSBpZihRYyhlLGEsYixjLGQpKWQuc3RvcFByb3BhZ2F0aW9uKCk7ZWxzZSBpZihPYyhhLGQpLGImNCYmLTE8TmMuaW5kZXhPZihhKSl7Zm9yKDtudWxsIT09ZTspe3ZhciBmPXpiKGUpO251bGwhPT1mJiZBYyhmKTtmPVVjKGEsYixjLGQpO251bGw9PT1mJiZjZChhLGIsZCxkZCxjKTtpZihmPT09ZSlicmVhaztlPWZ9bnVsbCE9PWUmJmQuc3RvcFByb3BhZ2F0aW9uKCl9ZWxzZSBjZChhLGIsZCxudWxsLGMpfXZhciBkZD1udWxsO1xuZnVuY3Rpb24gVWMoYSxiLGMsZCl7ZGQ9bnVsbDthPXViKGQpO2E9U2MoYSk7aWYobnVsbCE9PWEpaWYoYj1TYihhKSxudWxsPT09YilhPW51bGw7ZWxzZSBpZihjPWIudGFnLDEzPT09Yyl7YT1UYihiKTtpZihudWxsIT09YSlyZXR1cm4gYTthPW51bGx9ZWxzZSBpZigzPT09Yyl7aWYoYi5zdGF0ZU5vZGUuY3VycmVudC5tZW1vaXplZFN0YXRlLmlzRGVoeWRyYXRlZClyZXR1cm4gMz09PWIudGFnP2Iuc3RhdGVOb2RlLmNvbnRhaW5lckluZm86bnVsbDthPW51bGx9ZWxzZSBiIT09YSYmKGE9bnVsbCk7ZGQ9YTtyZXR1cm4gbnVsbH1cbmZ1bmN0aW9uIGVkKGEpe3N3aXRjaChhKXtjYXNlIFwiY2FuY2VsXCI6Y2FzZSBcImNsaWNrXCI6Y2FzZSBcImNsb3NlXCI6Y2FzZSBcImNvbnRleHRtZW51XCI6Y2FzZSBcImNvcHlcIjpjYXNlIFwiY3V0XCI6Y2FzZSBcImF1eGNsaWNrXCI6Y2FzZSBcImRibGNsaWNrXCI6Y2FzZSBcImRyYWdlbmRcIjpjYXNlIFwiZHJhZ3N0YXJ0XCI6Y2FzZSBcImRyb3BcIjpjYXNlIFwiZm9jdXNpblwiOmNhc2UgXCJmb2N1c291dFwiOmNhc2UgXCJpbnB1dFwiOmNhc2UgXCJpbnZhbGlkXCI6Y2FzZSBcImtleWRvd25cIjpjYXNlIFwia2V5cHJlc3NcIjpjYXNlIFwia2V5dXBcIjpjYXNlIFwibW91c2Vkb3duXCI6Y2FzZSBcIm1vdXNldXBcIjpjYXNlIFwicGFzdGVcIjpjYXNlIFwicGF1c2VcIjpjYXNlIFwicGxheVwiOmNhc2UgXCJwb2ludGVyY2FuY2VsXCI6Y2FzZSBcInBvaW50ZXJkb3duXCI6Y2FzZSBcInBvaW50ZXJ1cFwiOmNhc2UgXCJyYXRlY2hhbmdlXCI6Y2FzZSBcInJlc2V0XCI6Y2FzZSBcInJlc2l6ZVwiOmNhc2UgXCJzZWVrZWRcIjpjYXNlIFwic3VibWl0XCI6Y2FzZSBcInRvdWNoY2FuY2VsXCI6Y2FzZSBcInRvdWNoZW5kXCI6Y2FzZSBcInRvdWNoc3RhcnRcIjpjYXNlIFwidm9sdW1lY2hhbmdlXCI6Y2FzZSBcImNoYW5nZVwiOmNhc2UgXCJzZWxlY3Rpb25jaGFuZ2VcIjpjYXNlIFwidGV4dElucHV0XCI6Y2FzZSBcImNvbXBvc2l0aW9uc3RhcnRcIjpjYXNlIFwiY29tcG9zaXRpb25lbmRcIjpjYXNlIFwiY29tcG9zaXRpb251cGRhdGVcIjpjYXNlIFwiYmVmb3JlYmx1clwiOmNhc2UgXCJhZnRlcmJsdXJcIjpjYXNlIFwiYmVmb3JlaW5wdXRcIjpjYXNlIFwiYmx1clwiOmNhc2UgXCJmdWxsc2NyZWVuY2hhbmdlXCI6Y2FzZSBcImZvY3VzXCI6Y2FzZSBcImhhc2hjaGFuZ2VcIjpjYXNlIFwicG9wc3RhdGVcIjpjYXNlIFwic2VsZWN0XCI6Y2FzZSBcInNlbGVjdHN0YXJ0XCI6cmV0dXJuIDE7Y2FzZSBcImRyYWdcIjpjYXNlIFwiZHJhZ2VudGVyXCI6Y2FzZSBcImRyYWdleGl0XCI6Y2FzZSBcImRyYWdsZWF2ZVwiOmNhc2UgXCJkcmFnb3ZlclwiOmNhc2UgXCJtb3VzZW1vdmVcIjpjYXNlIFwibW91c2VvdXRcIjpjYXNlIFwibW91c2VvdmVyXCI6Y2FzZSBcInBvaW50ZXJtb3ZlXCI6Y2FzZSBcInBvaW50ZXJvdXRcIjpjYXNlIFwicG9pbnRlcm92ZXJcIjpjYXNlIFwic2Nyb2xsXCI6Y2FzZSBcInRvZ2dsZVwiOmNhc2UgXCJ0b3VjaG1vdmVcIjpjYXNlIFwid2hlZWxcIjpjYXNlIFwibW91c2VlbnRlclwiOmNhc2UgXCJtb3VzZWxlYXZlXCI6Y2FzZSBcInBvaW50ZXJlbnRlclwiOmNhc2UgXCJwb2ludGVybGVhdmVcIjpyZXR1cm4gNDtcbmNhc2UgXCJtZXNzYWdlXCI6c3dpdGNoKGJjKCkpe2Nhc2UgY2M6cmV0dXJuIDE7Y2FzZSBkYzpyZXR1cm4gNDtjYXNlIGVjOmNhc2UgZmM6cmV0dXJuIDE2O2Nhc2UgZ2M6cmV0dXJuIDUzNjg3MDkxMjtkZWZhdWx0OnJldHVybiAxNn1kZWZhdWx0OnJldHVybiAxNn19dmFyIGZkPW51bGwsZ2Q9bnVsbCxoZD1udWxsO2Z1bmN0aW9uIGlkKCl7aWYoaGQpcmV0dXJuIGhkO3ZhciBhLGI9Z2QsYz1iLmxlbmd0aCxkLGU9XCJ2YWx1ZVwiaW4gZmQ/ZmQudmFsdWU6ZmQudGV4dENvbnRlbnQsZj1lLmxlbmd0aDtmb3IoYT0wO2E8YyYmYlthXT09PWVbYV07YSsrKTt2YXIgZz1jLWE7Zm9yKGQ9MTtkPD1nJiZiW2MtZF09PT1lW2YtZF07ZCsrKTtyZXR1cm4gaGQ9ZS5zbGljZShhLDE8ZD8xLWQ6dm9pZCAwKX1cbmZ1bmN0aW9uIGpkKGEpe3ZhciBiPWEua2V5Q29kZTtcImNoYXJDb2RlXCJpbiBhPyhhPWEuY2hhckNvZGUsMD09PWEmJjEzPT09YiYmKGE9MTMpKTphPWI7MTA9PT1hJiYoYT0xMyk7cmV0dXJuIDMyPD1hfHwxMz09PWE/YTowfWZ1bmN0aW9uIGtkKCl7cmV0dXJuITB9ZnVuY3Rpb24gbGQoKXtyZXR1cm4hMX1cbmZ1bmN0aW9uIG1kKGEpe2Z1bmN0aW9uIGIoYixkLGUsZixnKXt0aGlzLl9yZWFjdE5hbWU9Yjt0aGlzLl90YXJnZXRJbnN0PWU7dGhpcy50eXBlPWQ7dGhpcy5uYXRpdmVFdmVudD1mO3RoaXMudGFyZ2V0PWc7dGhpcy5jdXJyZW50VGFyZ2V0PW51bGw7Zm9yKHZhciBjIGluIGEpYS5oYXNPd25Qcm9wZXJ0eShjKSYmKGI9YVtjXSx0aGlzW2NdPWI/YihmKTpmW2NdKTt0aGlzLmlzRGVmYXVsdFByZXZlbnRlZD0obnVsbCE9Zi5kZWZhdWx0UHJldmVudGVkP2YuZGVmYXVsdFByZXZlbnRlZDohMT09PWYucmV0dXJuVmFsdWUpP2tkOmxkO3RoaXMuaXNQcm9wYWdhdGlvblN0b3BwZWQ9bGQ7cmV0dXJuIHRoaXN9QShiLnByb3RvdHlwZSx7cHJldmVudERlZmF1bHQ6ZnVuY3Rpb24oKXt0aGlzLmRlZmF1bHRQcmV2ZW50ZWQ9ITA7dmFyIGE9dGhpcy5uYXRpdmVFdmVudDthJiYoYS5wcmV2ZW50RGVmYXVsdD9hLnByZXZlbnREZWZhdWx0KCk6XCJ1bmtub3duXCIhPT10eXBlb2YgYS5yZXR1cm5WYWx1ZSYmXG4oYS5yZXR1cm5WYWx1ZT0hMSksdGhpcy5pc0RlZmF1bHRQcmV2ZW50ZWQ9a2QpfSxzdG9wUHJvcGFnYXRpb246ZnVuY3Rpb24oKXt2YXIgYT10aGlzLm5hdGl2ZUV2ZW50O2EmJihhLnN0b3BQcm9wYWdhdGlvbj9hLnN0b3BQcm9wYWdhdGlvbigpOlwidW5rbm93blwiIT09dHlwZW9mIGEuY2FuY2VsQnViYmxlJiYoYS5jYW5jZWxCdWJibGU9ITApLHRoaXMuaXNQcm9wYWdhdGlvblN0b3BwZWQ9a2QpfSxwZXJzaXN0OmZ1bmN0aW9uKCl7fSxpc1BlcnNpc3RlbnQ6a2R9KTtyZXR1cm4gYn1cbnZhciBuZD17ZXZlbnRQaGFzZTowLGJ1YmJsZXM6MCxjYW5jZWxhYmxlOjAsdGltZVN0YW1wOmZ1bmN0aW9uKGEpe3JldHVybiBhLnRpbWVTdGFtcHx8RGF0ZS5ub3coKX0sZGVmYXVsdFByZXZlbnRlZDowLGlzVHJ1c3RlZDowfSxvZD1tZChuZCkscGQ9QSh7fSxuZCx7dmlldzowLGRldGFpbDowfSkscWQ9bWQocGQpLHJkLHNkLHRkLHZkPUEoe30scGQse3NjcmVlblg6MCxzY3JlZW5ZOjAsY2xpZW50WDowLGNsaWVudFk6MCxwYWdlWDowLHBhZ2VZOjAsY3RybEtleTowLHNoaWZ0S2V5OjAsYWx0S2V5OjAsbWV0YUtleTowLGdldE1vZGlmaWVyU3RhdGU6dWQsYnV0dG9uOjAsYnV0dG9uczowLHJlbGF0ZWRUYXJnZXQ6ZnVuY3Rpb24oYSl7cmV0dXJuIHZvaWQgMD09PWEucmVsYXRlZFRhcmdldD9hLmZyb21FbGVtZW50PT09YS5zcmNFbGVtZW50P2EudG9FbGVtZW50OmEuZnJvbUVsZW1lbnQ6YS5yZWxhdGVkVGFyZ2V0fSxtb3ZlbWVudFg6ZnVuY3Rpb24oYSl7aWYoXCJtb3ZlbWVudFhcImluXG5hKXJldHVybiBhLm1vdmVtZW50WDthIT09dGQmJih0ZCYmXCJtb3VzZW1vdmVcIj09PWEudHlwZT8ocmQ9YS5zY3JlZW5YLXRkLnNjcmVlblgsc2Q9YS5zY3JlZW5ZLXRkLnNjcmVlblkpOnNkPXJkPTAsdGQ9YSk7cmV0dXJuIHJkfSxtb3ZlbWVudFk6ZnVuY3Rpb24oYSl7cmV0dXJuXCJtb3ZlbWVudFlcImluIGE/YS5tb3ZlbWVudFk6c2R9fSksd2Q9bWQodmQpLHhkPUEoe30sdmQse2RhdGFUcmFuc2ZlcjowfSkseWQ9bWQoeGQpLHpkPUEoe30scGQse3JlbGF0ZWRUYXJnZXQ6MH0pLEFkPW1kKHpkKSxCZD1BKHt9LG5kLHthbmltYXRpb25OYW1lOjAsZWxhcHNlZFRpbWU6MCxwc2V1ZG9FbGVtZW50OjB9KSxDZD1tZChCZCksRGQ9QSh7fSxuZCx7Y2xpcGJvYXJkRGF0YTpmdW5jdGlvbihhKXtyZXR1cm5cImNsaXBib2FyZERhdGFcImluIGE/YS5jbGlwYm9hcmREYXRhOndpbmRvdy5jbGlwYm9hcmREYXRhfX0pLEVkPW1kKERkKSxGZD1BKHt9LG5kLHtkYXRhOjB9KSxHZD1tZChGZCksSGQ9e0VzYzpcIkVzY2FwZVwiLFxuU3BhY2ViYXI6XCIgXCIsTGVmdDpcIkFycm93TGVmdFwiLFVwOlwiQXJyb3dVcFwiLFJpZ2h0OlwiQXJyb3dSaWdodFwiLERvd246XCJBcnJvd0Rvd25cIixEZWw6XCJEZWxldGVcIixXaW46XCJPU1wiLE1lbnU6XCJDb250ZXh0TWVudVwiLEFwcHM6XCJDb250ZXh0TWVudVwiLFNjcm9sbDpcIlNjcm9sbExvY2tcIixNb3pQcmludGFibGVLZXk6XCJVbmlkZW50aWZpZWRcIn0sSWQ9ezg6XCJCYWNrc3BhY2VcIiw5OlwiVGFiXCIsMTI6XCJDbGVhclwiLDEzOlwiRW50ZXJcIiwxNjpcIlNoaWZ0XCIsMTc6XCJDb250cm9sXCIsMTg6XCJBbHRcIiwxOTpcIlBhdXNlXCIsMjA6XCJDYXBzTG9ja1wiLDI3OlwiRXNjYXBlXCIsMzI6XCIgXCIsMzM6XCJQYWdlVXBcIiwzNDpcIlBhZ2VEb3duXCIsMzU6XCJFbmRcIiwzNjpcIkhvbWVcIiwzNzpcIkFycm93TGVmdFwiLDM4OlwiQXJyb3dVcFwiLDM5OlwiQXJyb3dSaWdodFwiLDQwOlwiQXJyb3dEb3duXCIsNDU6XCJJbnNlcnRcIiw0NjpcIkRlbGV0ZVwiLDExMjpcIkYxXCIsMTEzOlwiRjJcIiwxMTQ6XCJGM1wiLDExNTpcIkY0XCIsMTE2OlwiRjVcIiwxMTc6XCJGNlwiLDExODpcIkY3XCIsXG4xMTk6XCJGOFwiLDEyMDpcIkY5XCIsMTIxOlwiRjEwXCIsMTIyOlwiRjExXCIsMTIzOlwiRjEyXCIsMTQ0OlwiTnVtTG9ja1wiLDE0NTpcIlNjcm9sbExvY2tcIiwyMjQ6XCJNZXRhXCJ9LEpkPXtBbHQ6XCJhbHRLZXlcIixDb250cm9sOlwiY3RybEtleVwiLE1ldGE6XCJtZXRhS2V5XCIsU2hpZnQ6XCJzaGlmdEtleVwifTtmdW5jdGlvbiBLZChhKXt2YXIgYj10aGlzLm5hdGl2ZUV2ZW50O3JldHVybiBiLmdldE1vZGlmaWVyU3RhdGU/Yi5nZXRNb2RpZmllclN0YXRlKGEpOihhPUpkW2FdKT8hIWJbYV06ITF9ZnVuY3Rpb24gdWQoKXtyZXR1cm4gS2R9XG52YXIgTGQ9QSh7fSxwZCx7a2V5OmZ1bmN0aW9uKGEpe2lmKGEua2V5KXt2YXIgYj1IZFthLmtleV18fGEua2V5O2lmKFwiVW5pZGVudGlmaWVkXCIhPT1iKXJldHVybiBifXJldHVyblwia2V5cHJlc3NcIj09PWEudHlwZT8oYT1qZChhKSwxMz09PWE/XCJFbnRlclwiOlN0cmluZy5mcm9tQ2hhckNvZGUoYSkpOlwia2V5ZG93blwiPT09YS50eXBlfHxcImtleXVwXCI9PT1hLnR5cGU/SWRbYS5rZXlDb2RlXXx8XCJVbmlkZW50aWZpZWRcIjpcIlwifSxjb2RlOjAsbG9jYXRpb246MCxjdHJsS2V5OjAsc2hpZnRLZXk6MCxhbHRLZXk6MCxtZXRhS2V5OjAscmVwZWF0OjAsbG9jYWxlOjAsZ2V0TW9kaWZpZXJTdGF0ZTp1ZCxjaGFyQ29kZTpmdW5jdGlvbihhKXtyZXR1cm5cImtleXByZXNzXCI9PT1hLnR5cGU/amQoYSk6MH0sa2V5Q29kZTpmdW5jdGlvbihhKXtyZXR1cm5cImtleWRvd25cIj09PWEudHlwZXx8XCJrZXl1cFwiPT09YS50eXBlP2Eua2V5Q29kZTowfSx3aGljaDpmdW5jdGlvbihhKXtyZXR1cm5cImtleXByZXNzXCI9PT1cbmEudHlwZT9qZChhKTpcImtleWRvd25cIj09PWEudHlwZXx8XCJrZXl1cFwiPT09YS50eXBlP2Eua2V5Q29kZTowfX0pLE1kPW1kKExkKSxOZD1BKHt9LHZkLHtwb2ludGVySWQ6MCx3aWR0aDowLGhlaWdodDowLHByZXNzdXJlOjAsdGFuZ2VudGlhbFByZXNzdXJlOjAsdGlsdFg6MCx0aWx0WTowLHR3aXN0OjAscG9pbnRlclR5cGU6MCxpc1ByaW1hcnk6MH0pLE9kPW1kKE5kKSxQZD1BKHt9LHBkLHt0b3VjaGVzOjAsdGFyZ2V0VG91Y2hlczowLGNoYW5nZWRUb3VjaGVzOjAsYWx0S2V5OjAsbWV0YUtleTowLGN0cmxLZXk6MCxzaGlmdEtleTowLGdldE1vZGlmaWVyU3RhdGU6dWR9KSxRZD1tZChQZCksUmQ9QSh7fSxuZCx7cHJvcGVydHlOYW1lOjAsZWxhcHNlZFRpbWU6MCxwc2V1ZG9FbGVtZW50OjB9KSxTZD1tZChSZCksVGQ9QSh7fSx2ZCx7ZGVsdGFYOmZ1bmN0aW9uKGEpe3JldHVyblwiZGVsdGFYXCJpbiBhP2EuZGVsdGFYOlwid2hlZWxEZWx0YVhcImluIGE/LWEud2hlZWxEZWx0YVg6MH0sXG5kZWx0YVk6ZnVuY3Rpb24oYSl7cmV0dXJuXCJkZWx0YVlcImluIGE/YS5kZWx0YVk6XCJ3aGVlbERlbHRhWVwiaW4gYT8tYS53aGVlbERlbHRhWTpcIndoZWVsRGVsdGFcImluIGE/LWEud2hlZWxEZWx0YTowfSxkZWx0YVo6MCxkZWx0YU1vZGU6MH0pLFVkPW1kKFRkKSxWZD1bOSwxMywyNywzMl0sV2Q9aGEmJlwiQ29tcG9zaXRpb25FdmVudFwiaW4gd2luZG93LFhkPW51bGw7aGEmJlwiZG9jdW1lbnRNb2RlXCJpbiBkb2N1bWVudCYmKFhkPWRvY3VtZW50LmRvY3VtZW50TW9kZSk7dmFyIFlkPWhhJiZcIlRleHRFdmVudFwiaW4gd2luZG93JiYhWGQsWmQ9aGEmJighV2R8fFhkJiY4PFhkJiYxMT49WGQpLCRkPVN0cmluZy5mcm9tQ2hhckNvZGUoMzIpLGFlPSExO1xuZnVuY3Rpb24gYmUoYSxiKXtzd2l0Y2goYSl7Y2FzZSBcImtleXVwXCI6cmV0dXJuLTEhPT1WZC5pbmRleE9mKGIua2V5Q29kZSk7Y2FzZSBcImtleWRvd25cIjpyZXR1cm4gMjI5IT09Yi5rZXlDb2RlO2Nhc2UgXCJrZXlwcmVzc1wiOmNhc2UgXCJtb3VzZWRvd25cIjpjYXNlIFwiZm9jdXNvdXRcIjpyZXR1cm4hMDtkZWZhdWx0OnJldHVybiExfX1mdW5jdGlvbiBjZShhKXthPWEuZGV0YWlsO3JldHVyblwib2JqZWN0XCI9PT10eXBlb2YgYSYmXCJkYXRhXCJpbiBhP2EuZGF0YTpudWxsfXZhciBkZT0hMTtmdW5jdGlvbiBlZShhLGIpe3N3aXRjaChhKXtjYXNlIFwiY29tcG9zaXRpb25lbmRcIjpyZXR1cm4gY2UoYik7Y2FzZSBcImtleXByZXNzXCI6aWYoMzIhPT1iLndoaWNoKXJldHVybiBudWxsO2FlPSEwO3JldHVybiAkZDtjYXNlIFwidGV4dElucHV0XCI6cmV0dXJuIGE9Yi5kYXRhLGE9PT0kZCYmYWU/bnVsbDphO2RlZmF1bHQ6cmV0dXJuIG51bGx9fVxuZnVuY3Rpb24gZmUoYSxiKXtpZihkZSlyZXR1cm5cImNvbXBvc2l0aW9uZW5kXCI9PT1hfHwhV2QmJmJlKGEsYik/KGE9aWQoKSxoZD1nZD1mZD1udWxsLGRlPSExLGEpOm51bGw7c3dpdGNoKGEpe2Nhc2UgXCJwYXN0ZVwiOnJldHVybiBudWxsO2Nhc2UgXCJrZXlwcmVzc1wiOmlmKCEoYi5jdHJsS2V5fHxiLmFsdEtleXx8Yi5tZXRhS2V5KXx8Yi5jdHJsS2V5JiZiLmFsdEtleSl7aWYoYi5jaGFyJiYxPGIuY2hhci5sZW5ndGgpcmV0dXJuIGIuY2hhcjtpZihiLndoaWNoKXJldHVybiBTdHJpbmcuZnJvbUNoYXJDb2RlKGIud2hpY2gpfXJldHVybiBudWxsO2Nhc2UgXCJjb21wb3NpdGlvbmVuZFwiOnJldHVybiBaZCYmXCJrb1wiIT09Yi5sb2NhbGU/bnVsbDpiLmRhdGE7ZGVmYXVsdDpyZXR1cm4gbnVsbH19XG52YXIgZ2U9e2NvbG9yOiEwLGRhdGU6ITAsZGF0ZXRpbWU6ITAsXCJkYXRldGltZS1sb2NhbFwiOiEwLGVtYWlsOiEwLG1vbnRoOiEwLG51bWJlcjohMCxwYXNzd29yZDohMCxyYW5nZTohMCxzZWFyY2g6ITAsdGVsOiEwLHRleHQ6ITAsdGltZTohMCx1cmw6ITAsd2VlazohMH07ZnVuY3Rpb24gaGUoYSl7dmFyIGI9YSYmYS5ub2RlTmFtZSYmYS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpO3JldHVyblwiaW5wdXRcIj09PWI/ISFnZVthLnR5cGVdOlwidGV4dGFyZWFcIj09PWI/ITA6ITF9ZnVuY3Rpb24gaWUoYSxiLGMsZCl7QmIoZCk7Yj1qZShiLFwib25DaGFuZ2VcIik7MDxiLmxlbmd0aCYmKGM9bmV3IG9kKFwib25DaGFuZ2VcIixcImNoYW5nZVwiLG51bGwsYyxkKSxhLnB1c2goe2V2ZW50OmMsbGlzdGVuZXJzOmJ9KSl9dmFyIGtlPW51bGwsbGU9bnVsbDtmdW5jdGlvbiBtZShhKXtuZShhLDApfWZ1bmN0aW9uIG9lKGEpe3ZhciBiPXBlKGEpO2lmKFVhKGIpKXJldHVybiBhfVxuZnVuY3Rpb24gcWUoYSxiKXtpZihcImNoYW5nZVwiPT09YSlyZXR1cm4gYn12YXIgcmU9ITE7aWYoaGEpe3ZhciBzZTtpZihoYSl7dmFyIHRlPVwib25pbnB1dFwiaW4gZG9jdW1lbnQ7aWYoIXRlKXt2YXIgdWU9ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTt1ZS5zZXRBdHRyaWJ1dGUoXCJvbmlucHV0XCIsXCJyZXR1cm47XCIpO3RlPVwiZnVuY3Rpb25cIj09PXR5cGVvZiB1ZS5vbmlucHV0fXNlPXRlfWVsc2Ugc2U9ITE7cmU9c2UmJighZG9jdW1lbnQuZG9jdW1lbnRNb2RlfHw5PGRvY3VtZW50LmRvY3VtZW50TW9kZSl9ZnVuY3Rpb24gdmUoKXtrZSYmKGtlLmRldGFjaEV2ZW50KFwib25wcm9wZXJ0eWNoYW5nZVwiLHdlKSxsZT1rZT1udWxsKX1mdW5jdGlvbiB3ZShhKXtpZihcInZhbHVlXCI9PT1hLnByb3BlcnR5TmFtZSYmb2UobGUpKXt2YXIgYj1bXTtpZShiLGxlLGEsdWIoYSkpO0diKG1lLGIpfX1cbmZ1bmN0aW9uIHhlKGEsYixjKXtcImZvY3VzaW5cIj09PWE/KHZlKCksa2U9YixsZT1jLGtlLmF0dGFjaEV2ZW50KFwib25wcm9wZXJ0eWNoYW5nZVwiLHdlKSk6XCJmb2N1c291dFwiPT09YSYmdmUoKX1mdW5jdGlvbiB5ZShhKXtpZihcInNlbGVjdGlvbmNoYW5nZVwiPT09YXx8XCJrZXl1cFwiPT09YXx8XCJrZXlkb3duXCI9PT1hKXJldHVybiBvZShsZSl9ZnVuY3Rpb24gemUoYSxiKXtpZihcImNsaWNrXCI9PT1hKXJldHVybiBvZShiKX1mdW5jdGlvbiBBZShhLGIpe2lmKFwiaW5wdXRcIj09PWF8fFwiY2hhbmdlXCI9PT1hKXJldHVybiBvZShiKX1mdW5jdGlvbiBCZShhLGIpe3JldHVybiBhPT09YiYmKDAhPT1hfHwxL2E9PT0xL2IpfHxhIT09YSYmYiE9PWJ9dmFyIENlPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBPYmplY3QuaXM/T2JqZWN0LmlzOkJlO1xuZnVuY3Rpb24gRGUoYSxiKXtpZihDZShhLGIpKXJldHVybiEwO2lmKFwib2JqZWN0XCIhPT10eXBlb2YgYXx8bnVsbD09PWF8fFwib2JqZWN0XCIhPT10eXBlb2YgYnx8bnVsbD09PWIpcmV0dXJuITE7dmFyIGM9T2JqZWN0LmtleXMoYSksZD1PYmplY3Qua2V5cyhiKTtpZihjLmxlbmd0aCE9PWQubGVuZ3RoKXJldHVybiExO2ZvcihkPTA7ZDxjLmxlbmd0aDtkKyspe3ZhciBlPWNbZF07aWYoIWlhLmNhbGwoYixlKXx8IUNlKGFbZV0sYltlXSkpcmV0dXJuITF9cmV0dXJuITB9ZnVuY3Rpb24gRWUoYSl7Zm9yKDthJiZhLmZpcnN0Q2hpbGQ7KWE9YS5maXJzdENoaWxkO3JldHVybiBhfVxuZnVuY3Rpb24gRmUoYSxiKXt2YXIgYz1FZShhKTthPTA7Zm9yKHZhciBkO2M7KXtpZigzPT09Yy5ub2RlVHlwZSl7ZD1hK2MudGV4dENvbnRlbnQubGVuZ3RoO2lmKGE8PWImJmQ+PWIpcmV0dXJue25vZGU6YyxvZmZzZXQ6Yi1hfTthPWR9YTp7Zm9yKDtjOyl7aWYoYy5uZXh0U2libGluZyl7Yz1jLm5leHRTaWJsaW5nO2JyZWFrIGF9Yz1jLnBhcmVudE5vZGV9Yz12b2lkIDB9Yz1FZShjKX19ZnVuY3Rpb24gR2UoYSxiKXtyZXR1cm4gYSYmYj9hPT09Yj8hMDphJiYzPT09YS5ub2RlVHlwZT8hMTpiJiYzPT09Yi5ub2RlVHlwZT9HZShhLGIucGFyZW50Tm9kZSk6XCJjb250YWluc1wiaW4gYT9hLmNvbnRhaW5zKGIpOmEuY29tcGFyZURvY3VtZW50UG9zaXRpb24/ISEoYS5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbihiKSYxNik6ITE6ITF9XG5mdW5jdGlvbiBIZSgpe2Zvcih2YXIgYT13aW5kb3csYj1WYSgpO2IgaW5zdGFuY2VvZiBhLkhUTUxJRnJhbWVFbGVtZW50Oyl7dHJ5e3ZhciBjPVwic3RyaW5nXCI9PT10eXBlb2YgYi5jb250ZW50V2luZG93LmxvY2F0aW9uLmhyZWZ9Y2F0Y2goZCl7Yz0hMX1pZihjKWE9Yi5jb250ZW50V2luZG93O2Vsc2UgYnJlYWs7Yj1WYShhLmRvY3VtZW50KX1yZXR1cm4gYn1mdW5jdGlvbiBJZShhKXt2YXIgYj1hJiZhLm5vZGVOYW1lJiZhLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7cmV0dXJuIGImJihcImlucHV0XCI9PT1iJiYoXCJ0ZXh0XCI9PT1hLnR5cGV8fFwic2VhcmNoXCI9PT1hLnR5cGV8fFwidGVsXCI9PT1hLnR5cGV8fFwidXJsXCI9PT1hLnR5cGV8fFwicGFzc3dvcmRcIj09PWEudHlwZSl8fFwidGV4dGFyZWFcIj09PWJ8fFwidHJ1ZVwiPT09YS5jb250ZW50RWRpdGFibGUpfVxuZnVuY3Rpb24gSmUoYSl7dmFyIGI9SGUoKSxjPWEuZm9jdXNlZEVsZW0sZD1hLnNlbGVjdGlvblJhbmdlO2lmKGIhPT1jJiZjJiZjLm93bmVyRG9jdW1lbnQmJkdlKGMub3duZXJEb2N1bWVudC5kb2N1bWVudEVsZW1lbnQsYykpe2lmKG51bGwhPT1kJiZJZShjKSlpZihiPWQuc3RhcnQsYT1kLmVuZCx2b2lkIDA9PT1hJiYoYT1iKSxcInNlbGVjdGlvblN0YXJ0XCJpbiBjKWMuc2VsZWN0aW9uU3RhcnQ9YixjLnNlbGVjdGlvbkVuZD1NYXRoLm1pbihhLGMudmFsdWUubGVuZ3RoKTtlbHNlIGlmKGE9KGI9Yy5vd25lckRvY3VtZW50fHxkb2N1bWVudCkmJmIuZGVmYXVsdFZpZXd8fHdpbmRvdyxhLmdldFNlbGVjdGlvbil7YT1hLmdldFNlbGVjdGlvbigpO3ZhciBlPWMudGV4dENvbnRlbnQubGVuZ3RoLGY9TWF0aC5taW4oZC5zdGFydCxlKTtkPXZvaWQgMD09PWQuZW5kP2Y6TWF0aC5taW4oZC5lbmQsZSk7IWEuZXh0ZW5kJiZmPmQmJihlPWQsZD1mLGY9ZSk7ZT1GZShjLGYpO3ZhciBnPUZlKGMsXG5kKTtlJiZnJiYoMSE9PWEucmFuZ2VDb3VudHx8YS5hbmNob3JOb2RlIT09ZS5ub2RlfHxhLmFuY2hvck9mZnNldCE9PWUub2Zmc2V0fHxhLmZvY3VzTm9kZSE9PWcubm9kZXx8YS5mb2N1c09mZnNldCE9PWcub2Zmc2V0KSYmKGI9Yi5jcmVhdGVSYW5nZSgpLGIuc2V0U3RhcnQoZS5ub2RlLGUub2Zmc2V0KSxhLnJlbW92ZUFsbFJhbmdlcygpLGY+ZD8oYS5hZGRSYW5nZShiKSxhLmV4dGVuZChnLm5vZGUsZy5vZmZzZXQpKTooYi5zZXRFbmQoZy5ub2RlLGcub2Zmc2V0KSxhLmFkZFJhbmdlKGIpKSl9Yj1bXTtmb3IoYT1jO2E9YS5wYXJlbnROb2RlOykxPT09YS5ub2RlVHlwZSYmYi5wdXNoKHtlbGVtZW50OmEsbGVmdDphLnNjcm9sbExlZnQsdG9wOmEuc2Nyb2xsVG9wfSk7XCJmdW5jdGlvblwiPT09dHlwZW9mIGMuZm9jdXMmJmMuZm9jdXMoKTtmb3IoYz0wO2M8Yi5sZW5ndGg7YysrKWE9YltjXSxhLmVsZW1lbnQuc2Nyb2xsTGVmdD1hLmxlZnQsYS5lbGVtZW50LnNjcm9sbFRvcD1hLnRvcH19XG52YXIgS2U9aGEmJlwiZG9jdW1lbnRNb2RlXCJpbiBkb2N1bWVudCYmMTE+PWRvY3VtZW50LmRvY3VtZW50TW9kZSxMZT1udWxsLE1lPW51bGwsTmU9bnVsbCxPZT0hMTtcbmZ1bmN0aW9uIFBlKGEsYixjKXt2YXIgZD1jLndpbmRvdz09PWM/Yy5kb2N1bWVudDo5PT09Yy5ub2RlVHlwZT9jOmMub3duZXJEb2N1bWVudDtPZXx8bnVsbD09TGV8fExlIT09VmEoZCl8fChkPUxlLFwic2VsZWN0aW9uU3RhcnRcImluIGQmJkllKGQpP2Q9e3N0YXJ0OmQuc2VsZWN0aW9uU3RhcnQsZW5kOmQuc2VsZWN0aW9uRW5kfTooZD0oZC5vd25lckRvY3VtZW50JiZkLm93bmVyRG9jdW1lbnQuZGVmYXVsdFZpZXd8fHdpbmRvdykuZ2V0U2VsZWN0aW9uKCksZD17YW5jaG9yTm9kZTpkLmFuY2hvck5vZGUsYW5jaG9yT2Zmc2V0OmQuYW5jaG9yT2Zmc2V0LGZvY3VzTm9kZTpkLmZvY3VzTm9kZSxmb2N1c09mZnNldDpkLmZvY3VzT2Zmc2V0fSksTmUmJkRlKE5lLGQpfHwoTmU9ZCxkPWplKE1lLFwib25TZWxlY3RcIiksMDxkLmxlbmd0aCYmKGI9bmV3IG9kKFwib25TZWxlY3RcIixcInNlbGVjdFwiLG51bGwsYixjKSxhLnB1c2goe2V2ZW50OmIsbGlzdGVuZXJzOmR9KSxiLnRhcmdldD1MZSkpKX1cbmZ1bmN0aW9uIFFlKGEsYil7dmFyIGM9e307Y1thLnRvTG93ZXJDYXNlKCldPWIudG9Mb3dlckNhc2UoKTtjW1wiV2Via2l0XCIrYV09XCJ3ZWJraXRcIitiO2NbXCJNb3pcIithXT1cIm1velwiK2I7cmV0dXJuIGN9dmFyIFJlPXthbmltYXRpb25lbmQ6UWUoXCJBbmltYXRpb25cIixcIkFuaW1hdGlvbkVuZFwiKSxhbmltYXRpb25pdGVyYXRpb246UWUoXCJBbmltYXRpb25cIixcIkFuaW1hdGlvbkl0ZXJhdGlvblwiKSxhbmltYXRpb25zdGFydDpRZShcIkFuaW1hdGlvblwiLFwiQW5pbWF0aW9uU3RhcnRcIiksdHJhbnNpdGlvbmVuZDpRZShcIlRyYW5zaXRpb25cIixcIlRyYW5zaXRpb25FbmRcIil9LFNlPXt9LFRlPXt9O1xuaGEmJihUZT1kb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpLnN0eWxlLFwiQW5pbWF0aW9uRXZlbnRcImluIHdpbmRvd3x8KGRlbGV0ZSBSZS5hbmltYXRpb25lbmQuYW5pbWF0aW9uLGRlbGV0ZSBSZS5hbmltYXRpb25pdGVyYXRpb24uYW5pbWF0aW9uLGRlbGV0ZSBSZS5hbmltYXRpb25zdGFydC5hbmltYXRpb24pLFwiVHJhbnNpdGlvbkV2ZW50XCJpbiB3aW5kb3d8fGRlbGV0ZSBSZS50cmFuc2l0aW9uZW5kLnRyYW5zaXRpb24pO2Z1bmN0aW9uIFVlKGEpe2lmKFNlW2FdKXJldHVybiBTZVthXTtpZighUmVbYV0pcmV0dXJuIGE7dmFyIGI9UmVbYV0sYztmb3IoYyBpbiBiKWlmKGIuaGFzT3duUHJvcGVydHkoYykmJmMgaW4gVGUpcmV0dXJuIFNlW2FdPWJbY107cmV0dXJuIGF9dmFyIFZlPVVlKFwiYW5pbWF0aW9uZW5kXCIpLFdlPVVlKFwiYW5pbWF0aW9uaXRlcmF0aW9uXCIpLFhlPVVlKFwiYW5pbWF0aW9uc3RhcnRcIiksWWU9VWUoXCJ0cmFuc2l0aW9uZW5kXCIpLFplPW5ldyBNYXAsJGU9XCJhYm9ydCBhdXhDbGljayBjYW5jZWwgY2FuUGxheSBjYW5QbGF5VGhyb3VnaCBjbGljayBjbG9zZSBjb250ZXh0TWVudSBjb3B5IGN1dCBkcmFnIGRyYWdFbmQgZHJhZ0VudGVyIGRyYWdFeGl0IGRyYWdMZWF2ZSBkcmFnT3ZlciBkcmFnU3RhcnQgZHJvcCBkdXJhdGlvbkNoYW5nZSBlbXB0aWVkIGVuY3J5cHRlZCBlbmRlZCBlcnJvciBnb3RQb2ludGVyQ2FwdHVyZSBpbnB1dCBpbnZhbGlkIGtleURvd24ga2V5UHJlc3Mga2V5VXAgbG9hZCBsb2FkZWREYXRhIGxvYWRlZE1ldGFkYXRhIGxvYWRTdGFydCBsb3N0UG9pbnRlckNhcHR1cmUgbW91c2VEb3duIG1vdXNlTW92ZSBtb3VzZU91dCBtb3VzZU92ZXIgbW91c2VVcCBwYXN0ZSBwYXVzZSBwbGF5IHBsYXlpbmcgcG9pbnRlckNhbmNlbCBwb2ludGVyRG93biBwb2ludGVyTW92ZSBwb2ludGVyT3V0IHBvaW50ZXJPdmVyIHBvaW50ZXJVcCBwcm9ncmVzcyByYXRlQ2hhbmdlIHJlc2V0IHJlc2l6ZSBzZWVrZWQgc2Vla2luZyBzdGFsbGVkIHN1Ym1pdCBzdXNwZW5kIHRpbWVVcGRhdGUgdG91Y2hDYW5jZWwgdG91Y2hFbmQgdG91Y2hTdGFydCB2b2x1bWVDaGFuZ2Ugc2Nyb2xsIHRvZ2dsZSB0b3VjaE1vdmUgd2FpdGluZyB3aGVlbFwiLnNwbGl0KFwiIFwiKTtcbmZ1bmN0aW9uIGFmKGEsYil7WmUuc2V0KGEsYik7ZWEoYixbYV0pfWZvcih2YXIgYmY9MDtiZjwkZS5sZW5ndGg7YmYrKyl7dmFyIGNmPSRlW2JmXSxkZj1jZi50b0xvd2VyQ2FzZSgpLGVmPWNmWzBdLnRvVXBwZXJDYXNlKCkrY2Yuc2xpY2UoMSk7YWYoZGYsXCJvblwiK2VmKX1hZihWZSxcIm9uQW5pbWF0aW9uRW5kXCIpO2FmKFdlLFwib25BbmltYXRpb25JdGVyYXRpb25cIik7YWYoWGUsXCJvbkFuaW1hdGlvblN0YXJ0XCIpO2FmKFwiZGJsY2xpY2tcIixcIm9uRG91YmxlQ2xpY2tcIik7YWYoXCJmb2N1c2luXCIsXCJvbkZvY3VzXCIpO2FmKFwiZm9jdXNvdXRcIixcIm9uQmx1clwiKTthZihZZSxcIm9uVHJhbnNpdGlvbkVuZFwiKTtmYShcIm9uTW91c2VFbnRlclwiLFtcIm1vdXNlb3V0XCIsXCJtb3VzZW92ZXJcIl0pO2ZhKFwib25Nb3VzZUxlYXZlXCIsW1wibW91c2VvdXRcIixcIm1vdXNlb3ZlclwiXSk7ZmEoXCJvblBvaW50ZXJFbnRlclwiLFtcInBvaW50ZXJvdXRcIixcInBvaW50ZXJvdmVyXCJdKTtcbmZhKFwib25Qb2ludGVyTGVhdmVcIixbXCJwb2ludGVyb3V0XCIsXCJwb2ludGVyb3ZlclwiXSk7ZWEoXCJvbkNoYW5nZVwiLFwiY2hhbmdlIGNsaWNrIGZvY3VzaW4gZm9jdXNvdXQgaW5wdXQga2V5ZG93biBrZXl1cCBzZWxlY3Rpb25jaGFuZ2VcIi5zcGxpdChcIiBcIikpO2VhKFwib25TZWxlY3RcIixcImZvY3Vzb3V0IGNvbnRleHRtZW51IGRyYWdlbmQgZm9jdXNpbiBrZXlkb3duIGtleXVwIG1vdXNlZG93biBtb3VzZXVwIHNlbGVjdGlvbmNoYW5nZVwiLnNwbGl0KFwiIFwiKSk7ZWEoXCJvbkJlZm9yZUlucHV0XCIsW1wiY29tcG9zaXRpb25lbmRcIixcImtleXByZXNzXCIsXCJ0ZXh0SW5wdXRcIixcInBhc3RlXCJdKTtlYShcIm9uQ29tcG9zaXRpb25FbmRcIixcImNvbXBvc2l0aW9uZW5kIGZvY3Vzb3V0IGtleWRvd24ga2V5cHJlc3Mga2V5dXAgbW91c2Vkb3duXCIuc3BsaXQoXCIgXCIpKTtlYShcIm9uQ29tcG9zaXRpb25TdGFydFwiLFwiY29tcG9zaXRpb25zdGFydCBmb2N1c291dCBrZXlkb3duIGtleXByZXNzIGtleXVwIG1vdXNlZG93blwiLnNwbGl0KFwiIFwiKSk7XG5lYShcIm9uQ29tcG9zaXRpb25VcGRhdGVcIixcImNvbXBvc2l0aW9udXBkYXRlIGZvY3Vzb3V0IGtleWRvd24ga2V5cHJlc3Mga2V5dXAgbW91c2Vkb3duXCIuc3BsaXQoXCIgXCIpKTt2YXIgZmY9XCJhYm9ydCBjYW5wbGF5IGNhbnBsYXl0aHJvdWdoIGR1cmF0aW9uY2hhbmdlIGVtcHRpZWQgZW5jcnlwdGVkIGVuZGVkIGVycm9yIGxvYWRlZGRhdGEgbG9hZGVkbWV0YWRhdGEgbG9hZHN0YXJ0IHBhdXNlIHBsYXkgcGxheWluZyBwcm9ncmVzcyByYXRlY2hhbmdlIHJlc2l6ZSBzZWVrZWQgc2Vla2luZyBzdGFsbGVkIHN1c3BlbmQgdGltZXVwZGF0ZSB2b2x1bWVjaGFuZ2Ugd2FpdGluZ1wiLnNwbGl0KFwiIFwiKSxnZj1uZXcgU2V0KFwiY2FuY2VsIGNsb3NlIGludmFsaWQgbG9hZCBzY3JvbGwgdG9nZ2xlXCIuc3BsaXQoXCIgXCIpLmNvbmNhdChmZikpO1xuZnVuY3Rpb24gaGYoYSxiLGMpe3ZhciBkPWEudHlwZXx8XCJ1bmtub3duLWV2ZW50XCI7YS5jdXJyZW50VGFyZ2V0PWM7UmIoZCxiLHZvaWQgMCxhKTthLmN1cnJlbnRUYXJnZXQ9bnVsbH1cbmZ1bmN0aW9uIG5lKGEsYil7Yj0wIT09KGImNCk7Zm9yKHZhciBjPTA7YzxhLmxlbmd0aDtjKyspe3ZhciBkPWFbY10sZT1kLmV2ZW50O2Q9ZC5saXN0ZW5lcnM7YTp7dmFyIGY9dm9pZCAwO2lmKGIpZm9yKHZhciBnPWQubGVuZ3RoLTE7MDw9ZztnLS0pe3ZhciBoPWRbZ10saz1oLmluc3RhbmNlLGw9aC5jdXJyZW50VGFyZ2V0O2g9aC5saXN0ZW5lcjtpZihrIT09ZiYmZS5pc1Byb3BhZ2F0aW9uU3RvcHBlZCgpKWJyZWFrIGE7aGYoZSxoLGwpO2Y9a31lbHNlIGZvcihnPTA7ZzxkLmxlbmd0aDtnKyspe2g9ZFtnXTtrPWguaW5zdGFuY2U7bD1oLmN1cnJlbnRUYXJnZXQ7aD1oLmxpc3RlbmVyO2lmKGshPT1mJiZlLmlzUHJvcGFnYXRpb25TdG9wcGVkKCkpYnJlYWsgYTtoZihlLGgsbCk7Zj1rfX19aWYoTmIpdGhyb3cgYT1PYixOYj0hMSxPYj1udWxsLGE7fVxuZnVuY3Rpb24gRihhLGIpe3ZhciBjPWJbamZdO3ZvaWQgMD09PWMmJihjPWJbamZdPW5ldyBTZXQpO3ZhciBkPWErXCJfX2J1YmJsZVwiO2MuaGFzKGQpfHwoa2YoYixhLDIsITEpLGMuYWRkKGQpKX1mdW5jdGlvbiBsZihhLGIsYyl7dmFyIGQ9MDtiJiYoZHw9NCk7a2YoYyxhLGQsYil9dmFyIG1mPVwiX3JlYWN0TGlzdGVuaW5nXCIrTWF0aC5yYW5kb20oKS50b1N0cmluZygzNikuc2xpY2UoMik7ZnVuY3Rpb24gbmYoYSl7aWYoIWFbbWZdKXthW21mXT0hMDtjYS5mb3JFYWNoKGZ1bmN0aW9uKGIpe1wic2VsZWN0aW9uY2hhbmdlXCIhPT1iJiYoZ2YuaGFzKGIpfHxsZihiLCExLGEpLGxmKGIsITAsYSkpfSk7dmFyIGI9OT09PWEubm9kZVR5cGU/YTphLm93bmVyRG9jdW1lbnQ7bnVsbD09PWJ8fGJbbWZdfHwoYlttZl09ITAsbGYoXCJzZWxlY3Rpb25jaGFuZ2VcIiwhMSxiKSl9fVxuZnVuY3Rpb24ga2YoYSxiLGMsZCl7c3dpdGNoKGVkKGIpKXtjYXNlIDE6dmFyIGU9JGM7YnJlYWs7Y2FzZSA0OmU9YmQ7YnJlYWs7ZGVmYXVsdDplPWFkfWM9ZS5iaW5kKG51bGwsYixjLGEpO2U9dm9pZCAwOyFJYnx8XCJ0b3VjaHN0YXJ0XCIhPT1iJiZcInRvdWNobW92ZVwiIT09YiYmXCJ3aGVlbFwiIT09Ynx8KGU9ITApO2Q/dm9pZCAwIT09ZT9hLmFkZEV2ZW50TGlzdGVuZXIoYixjLHtjYXB0dXJlOiEwLHBhc3NpdmU6ZX0pOmEuYWRkRXZlbnRMaXN0ZW5lcihiLGMsITApOnZvaWQgMCE9PWU/YS5hZGRFdmVudExpc3RlbmVyKGIsYyx7cGFzc2l2ZTplfSk6YS5hZGRFdmVudExpc3RlbmVyKGIsYywhMSl9XG5mdW5jdGlvbiBjZChhLGIsYyxkLGUpe3ZhciBmPWQ7aWYoMD09PShiJjEpJiYwPT09KGImMikmJm51bGwhPT1kKWE6Zm9yKDs7KXtpZihudWxsPT09ZClyZXR1cm47dmFyIGc9ZC50YWc7aWYoMz09PWd8fDQ9PT1nKXt2YXIgaD1kLnN0YXRlTm9kZS5jb250YWluZXJJbmZvO2lmKGg9PT1lfHw4PT09aC5ub2RlVHlwZSYmaC5wYXJlbnROb2RlPT09ZSlicmVhaztpZig0PT09Zylmb3IoZz1kLnJldHVybjtudWxsIT09Zzspe3ZhciBrPWcudGFnO2lmKDM9PT1rfHw0PT09aylpZihrPWcuc3RhdGVOb2RlLmNvbnRhaW5lckluZm8saz09PWV8fDg9PT1rLm5vZGVUeXBlJiZrLnBhcmVudE5vZGU9PT1lKXJldHVybjtnPWcucmV0dXJufWZvcig7bnVsbCE9PWg7KXtnPVNjKGgpO2lmKG51bGw9PT1nKXJldHVybjtrPWcudGFnO2lmKDU9PT1rfHw2PT09ayl7ZD1mPWc7Y29udGludWUgYX1oPWgucGFyZW50Tm9kZX19ZD1kLnJldHVybn1HYihmdW5jdGlvbigpe3ZhciBkPWYsZT11YihjKSxnPVtdO1xuYTp7dmFyIGg9WmUuZ2V0KGEpO2lmKHZvaWQgMCE9PWgpe3ZhciBrPW9kLG49YTtzd2l0Y2goYSl7Y2FzZSBcImtleXByZXNzXCI6aWYoMD09PWpkKGMpKWJyZWFrIGE7Y2FzZSBcImtleWRvd25cIjpjYXNlIFwia2V5dXBcIjprPU1kO2JyZWFrO2Nhc2UgXCJmb2N1c2luXCI6bj1cImZvY3VzXCI7az1BZDticmVhaztjYXNlIFwiZm9jdXNvdXRcIjpuPVwiYmx1clwiO2s9QWQ7YnJlYWs7Y2FzZSBcImJlZm9yZWJsdXJcIjpjYXNlIFwiYWZ0ZXJibHVyXCI6az1BZDticmVhaztjYXNlIFwiY2xpY2tcIjppZigyPT09Yy5idXR0b24pYnJlYWsgYTtjYXNlIFwiYXV4Y2xpY2tcIjpjYXNlIFwiZGJsY2xpY2tcIjpjYXNlIFwibW91c2Vkb3duXCI6Y2FzZSBcIm1vdXNlbW92ZVwiOmNhc2UgXCJtb3VzZXVwXCI6Y2FzZSBcIm1vdXNlb3V0XCI6Y2FzZSBcIm1vdXNlb3ZlclwiOmNhc2UgXCJjb250ZXh0bWVudVwiOms9d2Q7YnJlYWs7Y2FzZSBcImRyYWdcIjpjYXNlIFwiZHJhZ2VuZFwiOmNhc2UgXCJkcmFnZW50ZXJcIjpjYXNlIFwiZHJhZ2V4aXRcIjpjYXNlIFwiZHJhZ2xlYXZlXCI6Y2FzZSBcImRyYWdvdmVyXCI6Y2FzZSBcImRyYWdzdGFydFwiOmNhc2UgXCJkcm9wXCI6az1cbnlkO2JyZWFrO2Nhc2UgXCJ0b3VjaGNhbmNlbFwiOmNhc2UgXCJ0b3VjaGVuZFwiOmNhc2UgXCJ0b3VjaG1vdmVcIjpjYXNlIFwidG91Y2hzdGFydFwiOms9UWQ7YnJlYWs7Y2FzZSBWZTpjYXNlIFdlOmNhc2UgWGU6az1DZDticmVhaztjYXNlIFllOms9U2Q7YnJlYWs7Y2FzZSBcInNjcm9sbFwiOms9cWQ7YnJlYWs7Y2FzZSBcIndoZWVsXCI6az1VZDticmVhaztjYXNlIFwiY29weVwiOmNhc2UgXCJjdXRcIjpjYXNlIFwicGFzdGVcIjprPUVkO2JyZWFrO2Nhc2UgXCJnb3Rwb2ludGVyY2FwdHVyZVwiOmNhc2UgXCJsb3N0cG9pbnRlcmNhcHR1cmVcIjpjYXNlIFwicG9pbnRlcmNhbmNlbFwiOmNhc2UgXCJwb2ludGVyZG93blwiOmNhc2UgXCJwb2ludGVybW92ZVwiOmNhc2UgXCJwb2ludGVyb3V0XCI6Y2FzZSBcInBvaW50ZXJvdmVyXCI6Y2FzZSBcInBvaW50ZXJ1cFwiOms9T2R9dmFyIHY9MCE9PShiJjQpLEM9IXYmJlwic2Nyb2xsXCI9PT1hLHQ9dj9udWxsIT09aD9oK1wiQ2FwdHVyZVwiOm51bGw6aDt2PVtdO2Zvcih2YXIgcj1kLHg7bnVsbCE9PVxucjspe3g9cjt2YXIgQj14LnN0YXRlTm9kZTs1PT09eC50YWcmJm51bGwhPT1CJiYoeD1CLG51bGwhPT10JiYoQj1IYihyLHQpLG51bGwhPUImJnYucHVzaChvZihyLEIseCkpKSk7aWYoQylicmVhaztyPXIucmV0dXJufTA8di5sZW5ndGgmJihoPW5ldyBrKGgsbixudWxsLGMsZSksZy5wdXNoKHtldmVudDpoLGxpc3RlbmVyczp2fSkpfX1pZigwPT09KGImNykpe2E6e2g9XCJtb3VzZW92ZXJcIj09PWF8fFwicG9pbnRlcm92ZXJcIj09PWE7az1cIm1vdXNlb3V0XCI9PT1hfHxcInBvaW50ZXJvdXRcIj09PWE7aWYoaCYmYyE9PXRiJiYobj1jLnJlbGF0ZWRUYXJnZXR8fGMuZnJvbUVsZW1lbnQpJiYoU2Mobil8fG5bcGZdKSlicmVhayBhO2lmKGt8fGgpe2g9ZS53aW5kb3c9PT1lP2U6KGg9ZS5vd25lckRvY3VtZW50KT9oLmRlZmF1bHRWaWV3fHxoLnBhcmVudFdpbmRvdzp3aW5kb3c7aWYoayl7aWYobj1jLnJlbGF0ZWRUYXJnZXR8fGMudG9FbGVtZW50LGs9ZCxuPW4/U2Mobik6bnVsbCxudWxsIT09XG5uJiYoQz1TYihuKSxuIT09Q3x8NSE9PW4udGFnJiY2IT09bi50YWcpKW49bnVsbH1lbHNlIGs9bnVsbCxuPWQ7aWYoayE9PW4pe3Y9d2Q7Qj1cIm9uTW91c2VMZWF2ZVwiO3Q9XCJvbk1vdXNlRW50ZXJcIjtyPVwibW91c2VcIjtpZihcInBvaW50ZXJvdXRcIj09PWF8fFwicG9pbnRlcm92ZXJcIj09PWEpdj1PZCxCPVwib25Qb2ludGVyTGVhdmVcIix0PVwib25Qb2ludGVyRW50ZXJcIixyPVwicG9pbnRlclwiO0M9bnVsbD09az9oOnBlKGspO3g9bnVsbD09bj9oOnBlKG4pO2g9bmV3IHYoQixyK1wibGVhdmVcIixrLGMsZSk7aC50YXJnZXQ9QztoLnJlbGF0ZWRUYXJnZXQ9eDtCPW51bGw7U2MoZSk9PT1kJiYodj1uZXcgdih0LHIrXCJlbnRlclwiLG4sYyxlKSx2LnRhcmdldD14LHYucmVsYXRlZFRhcmdldD1DLEI9dik7Qz1CO2lmKGsmJm4pYjp7dj1rO3Q9bjtyPTA7Zm9yKHg9djt4O3g9cWYoeCkpcisrO3g9MDtmb3IoQj10O0I7Qj1xZihCKSl4Kys7Zm9yKDswPHIteDspdj1xZih2KSxyLS07Zm9yKDswPHgtcjspdD1cbnFmKHQpLHgtLTtmb3IoO3ItLTspe2lmKHY9PT10fHxudWxsIT09dCYmdj09PXQuYWx0ZXJuYXRlKWJyZWFrIGI7dj1xZih2KTt0PXFmKHQpfXY9bnVsbH1lbHNlIHY9bnVsbDtudWxsIT09ayYmcmYoZyxoLGssdiwhMSk7bnVsbCE9PW4mJm51bGwhPT1DJiZyZihnLEMsbix2LCEwKX19fWE6e2g9ZD9wZShkKTp3aW5kb3c7az1oLm5vZGVOYW1lJiZoLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7aWYoXCJzZWxlY3RcIj09PWt8fFwiaW5wdXRcIj09PWsmJlwiZmlsZVwiPT09aC50eXBlKXZhciBPPXFlO2Vsc2UgaWYoaGUoaCkpaWYocmUpTz1BZTtlbHNle089eWU7dmFyIFQ9eGV9ZWxzZShrPWgubm9kZU5hbWUpJiZcImlucHV0XCI9PT1rLnRvTG93ZXJDYXNlKCkmJihcImNoZWNrYm94XCI9PT1oLnR5cGV8fFwicmFkaW9cIj09PWgudHlwZSkmJihPPXplKTtpZihPJiYoTz1PKGEsZCkpKXtpZShnLE8sYyxlKTticmVhayBhfVQmJlQoYSxoLGQpO1wiZm9jdXNvdXRcIj09PWEmJihUPWguX3dyYXBwZXJTdGF0ZSkmJlxuVC5jb250cm9sbGVkJiZcIm51bWJlclwiPT09aC50eXBlJiYkYShoLFwibnVtYmVyXCIsaC52YWx1ZSl9VD1kP3BlKGQpOndpbmRvdztzd2l0Y2goYSl7Y2FzZSBcImZvY3VzaW5cIjppZihoZShUKXx8XCJ0cnVlXCI9PT1ULmNvbnRlbnRFZGl0YWJsZSlMZT1ULE1lPWQsTmU9bnVsbDticmVhaztjYXNlIFwiZm9jdXNvdXRcIjpOZT1NZT1MZT1udWxsO2JyZWFrO2Nhc2UgXCJtb3VzZWRvd25cIjpPZT0hMDticmVhaztjYXNlIFwiY29udGV4dG1lbnVcIjpjYXNlIFwibW91c2V1cFwiOmNhc2UgXCJkcmFnZW5kXCI6T2U9ITE7UGUoZyxjLGUpO2JyZWFrO2Nhc2UgXCJzZWxlY3Rpb25jaGFuZ2VcIjppZihLZSlicmVhaztjYXNlIFwia2V5ZG93blwiOmNhc2UgXCJrZXl1cFwiOlBlKGcsYyxlKX12YXIgemE7aWYoV2QpYjp7c3dpdGNoKGEpe2Nhc2UgXCJjb21wb3NpdGlvbnN0YXJ0XCI6dmFyIEw9XCJvbkNvbXBvc2l0aW9uU3RhcnRcIjticmVhayBiO2Nhc2UgXCJjb21wb3NpdGlvbmVuZFwiOkw9XCJvbkNvbXBvc2l0aW9uRW5kXCI7YnJlYWsgYjtcbmNhc2UgXCJjb21wb3NpdGlvbnVwZGF0ZVwiOkw9XCJvbkNvbXBvc2l0aW9uVXBkYXRlXCI7YnJlYWsgYn1MPXZvaWQgMH1lbHNlIGRlP2JlKGEsYykmJihMPVwib25Db21wb3NpdGlvbkVuZFwiKTpcImtleWRvd25cIj09PWEmJjIyOT09PWMua2V5Q29kZSYmKEw9XCJvbkNvbXBvc2l0aW9uU3RhcnRcIik7TCYmKFpkJiZcImtvXCIhPT1jLmxvY2FsZSYmKGRlfHxcIm9uQ29tcG9zaXRpb25TdGFydFwiIT09TD9cIm9uQ29tcG9zaXRpb25FbmRcIj09PUwmJmRlJiYoemE9aWQoKSk6KGZkPWUsZ2Q9XCJ2YWx1ZVwiaW4gZmQ/ZmQudmFsdWU6ZmQudGV4dENvbnRlbnQsZGU9ITApKSxUPWplKGQsTCksMDxULmxlbmd0aCYmKEw9bmV3IEdkKEwsYSxudWxsLGMsZSksZy5wdXNoKHtldmVudDpMLGxpc3RlbmVyczpUfSksemE/TC5kYXRhPXphOih6YT1jZShjKSxudWxsIT09emEmJihMLmRhdGE9emEpKSkpO2lmKHphPVlkP2VlKGEsYyk6ZmUoYSxjKSlkPWplKGQsXCJvbkJlZm9yZUlucHV0XCIpLDA8ZC5sZW5ndGgmJihlPW5ldyBHZChcIm9uQmVmb3JlSW5wdXRcIixcblwiYmVmb3JlaW5wdXRcIixudWxsLGMsZSksZy5wdXNoKHtldmVudDplLGxpc3RlbmVyczpkfSksZS5kYXRhPXphKX1uZShnLGIpfSl9ZnVuY3Rpb24gb2YoYSxiLGMpe3JldHVybntpbnN0YW5jZTphLGxpc3RlbmVyOmIsY3VycmVudFRhcmdldDpjfX1mdW5jdGlvbiBqZShhLGIpe2Zvcih2YXIgYz1iK1wiQ2FwdHVyZVwiLGQ9W107bnVsbCE9PWE7KXt2YXIgZT1hLGY9ZS5zdGF0ZU5vZGU7NT09PWUudGFnJiZudWxsIT09ZiYmKGU9ZixmPUhiKGEsYyksbnVsbCE9ZiYmZC51bnNoaWZ0KG9mKGEsZixlKSksZj1IYihhLGIpLG51bGwhPWYmJmQucHVzaChvZihhLGYsZSkpKTthPWEucmV0dXJufXJldHVybiBkfWZ1bmN0aW9uIHFmKGEpe2lmKG51bGw9PT1hKXJldHVybiBudWxsO2RvIGE9YS5yZXR1cm47d2hpbGUoYSYmNSE9PWEudGFnKTtyZXR1cm4gYT9hOm51bGx9XG5mdW5jdGlvbiByZihhLGIsYyxkLGUpe2Zvcih2YXIgZj1iLl9yZWFjdE5hbWUsZz1bXTtudWxsIT09YyYmYyE9PWQ7KXt2YXIgaD1jLGs9aC5hbHRlcm5hdGUsbD1oLnN0YXRlTm9kZTtpZihudWxsIT09ayYmaz09PWQpYnJlYWs7NT09PWgudGFnJiZudWxsIT09bCYmKGg9bCxlPyhrPUhiKGMsZiksbnVsbCE9ayYmZy51bnNoaWZ0KG9mKGMsayxoKSkpOmV8fChrPUhiKGMsZiksbnVsbCE9ayYmZy5wdXNoKG9mKGMsayxoKSkpKTtjPWMucmV0dXJufTAhPT1nLmxlbmd0aCYmYS5wdXNoKHtldmVudDpiLGxpc3RlbmVyczpnfSl9dmFyIHNmPS9cXHJcXG4/L2csdGY9L1xcdTAwMDB8XFx1RkZGRC9nO2Z1bmN0aW9uIHVmKGEpe3JldHVybihcInN0cmluZ1wiPT09dHlwZW9mIGE/YTpcIlwiK2EpLnJlcGxhY2Uoc2YsXCJcXG5cIikucmVwbGFjZSh0ZixcIlwiKX1mdW5jdGlvbiB2ZihhLGIsYyl7Yj11ZihiKTtpZih1ZihhKSE9PWImJmMpdGhyb3cgRXJyb3IocCg0MjUpKTt9ZnVuY3Rpb24gd2YoKXt9XG52YXIgeGY9bnVsbDtmdW5jdGlvbiB5ZihhLGIpe3JldHVyblwidGV4dGFyZWFcIj09PWF8fFwibm9zY3JpcHRcIj09PWF8fFwic3RyaW5nXCI9PT10eXBlb2YgYi5jaGlsZHJlbnx8XCJudW1iZXJcIj09PXR5cGVvZiBiLmNoaWxkcmVufHxcIm9iamVjdFwiPT09dHlwZW9mIGIuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwmJm51bGwhPT1iLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MJiZudWxsIT1iLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MLl9faHRtbH1cbnZhciB6Zj1cImZ1bmN0aW9uXCI9PT10eXBlb2Ygc2V0VGltZW91dD9zZXRUaW1lb3V0OnZvaWQgMCxBZj1cImZ1bmN0aW9uXCI9PT10eXBlb2YgY2xlYXJUaW1lb3V0P2NsZWFyVGltZW91dDp2b2lkIDAsQmY9XCJmdW5jdGlvblwiPT09dHlwZW9mIFByb21pc2U/UHJvbWlzZTp2b2lkIDAsRGY9XCJmdW5jdGlvblwiPT09dHlwZW9mIHF1ZXVlTWljcm90YXNrP3F1ZXVlTWljcm90YXNrOlwidW5kZWZpbmVkXCIhPT10eXBlb2YgQmY/ZnVuY3Rpb24oYSl7cmV0dXJuIEJmLnJlc29sdmUobnVsbCkudGhlbihhKS5jYXRjaChDZil9OnpmO2Z1bmN0aW9uIENmKGEpe3NldFRpbWVvdXQoZnVuY3Rpb24oKXt0aHJvdyBhO30pfVxuZnVuY3Rpb24gRWYoYSxiKXt2YXIgYz1iLGQ9MDtkb3t2YXIgZT1jLm5leHRTaWJsaW5nO2EucmVtb3ZlQ2hpbGQoYyk7aWYoZSYmOD09PWUubm9kZVR5cGUpaWYoYz1lLmRhdGEsXCIvJFwiPT09Yyl7aWYoMD09PWQpe2EucmVtb3ZlQ2hpbGQoZSk7WWMoYik7cmV0dXJufWQtLX1lbHNlXCIkXCIhPT1jJiZcIiQ/XCIhPT1jJiZcIiQhXCIhPT1jfHxkKys7Yz1lfXdoaWxlKGMpO1ljKGIpfWZ1bmN0aW9uIEZmKGEpe2Zvcig7bnVsbCE9YTthPWEubmV4dFNpYmxpbmcpe3ZhciBiPWEubm9kZVR5cGU7aWYoMT09PWJ8fDM9PT1iKWJyZWFrO2lmKDg9PT1iKXtiPWEuZGF0YTtpZihcIiRcIj09PWJ8fFwiJCFcIj09PWJ8fFwiJD9cIj09PWIpYnJlYWs7aWYoXCIvJFwiPT09YilyZXR1cm4gbnVsbH19cmV0dXJuIGF9XG5mdW5jdGlvbiBHZihhKXthPWEucHJldmlvdXNTaWJsaW5nO2Zvcih2YXIgYj0wO2E7KXtpZig4PT09YS5ub2RlVHlwZSl7dmFyIGM9YS5kYXRhO2lmKFwiJFwiPT09Y3x8XCIkIVwiPT09Y3x8XCIkP1wiPT09Yyl7aWYoMD09PWIpcmV0dXJuIGE7Yi0tfWVsc2VcIi8kXCI9PT1jJiZiKyt9YT1hLnByZXZpb3VzU2libGluZ31yZXR1cm4gbnVsbH12YXIgSGY9TWF0aC5yYW5kb20oKS50b1N0cmluZygzNikuc2xpY2UoMiksSWY9XCJfX3JlYWN0RmliZXIkXCIrSGYsSmY9XCJfX3JlYWN0UHJvcHMkXCIrSGYscGY9XCJfX3JlYWN0Q29udGFpbmVyJFwiK0hmLGpmPVwiX19yZWFjdEV2ZW50cyRcIitIZixLZj1cIl9fcmVhY3RMaXN0ZW5lcnMkXCIrSGYsTGY9XCJfX3JlYWN0SGFuZGxlcyRcIitIZjtcbmZ1bmN0aW9uIFNjKGEpe3ZhciBiPWFbSWZdO2lmKGIpcmV0dXJuIGI7Zm9yKHZhciBjPWEucGFyZW50Tm9kZTtjOyl7aWYoYj1jW3BmXXx8Y1tJZl0pe2M9Yi5hbHRlcm5hdGU7aWYobnVsbCE9PWIuY2hpbGR8fG51bGwhPT1jJiZudWxsIT09Yy5jaGlsZClmb3IoYT1HZihhKTtudWxsIT09YTspe2lmKGM9YVtJZl0pcmV0dXJuIGM7YT1HZihhKX1yZXR1cm4gYn1hPWM7Yz1hLnBhcmVudE5vZGV9cmV0dXJuIG51bGx9ZnVuY3Rpb24gemIoYSl7YT1hW0lmXXx8YVtwZl07cmV0dXJuIWF8fDUhPT1hLnRhZyYmNiE9PWEudGFnJiYxMyE9PWEudGFnJiYzIT09YS50YWc/bnVsbDphfWZ1bmN0aW9uIHBlKGEpe2lmKDU9PT1hLnRhZ3x8Nj09PWEudGFnKXJldHVybiBhLnN0YXRlTm9kZTt0aHJvdyBFcnJvcihwKDMzKSk7fWZ1bmN0aW9uIEFiKGEpe3JldHVybiBhW0pmXXx8bnVsbH12YXIgTWY9W10sTmY9LTE7ZnVuY3Rpb24gT2YoYSl7cmV0dXJue2N1cnJlbnQ6YX19XG5mdW5jdGlvbiBHKGEpezA+TmZ8fChhLmN1cnJlbnQ9TWZbTmZdLE1mW05mXT1udWxsLE5mLS0pfWZ1bmN0aW9uIEgoYSxiKXtOZisrO01mW05mXT1hLmN1cnJlbnQ7YS5jdXJyZW50PWJ9dmFyIFBmPXt9LEk9T2YoUGYpLFFmPU9mKCExKSxSZj1QZjtmdW5jdGlvbiBTZihhLGIpe3ZhciBjPWEudHlwZS5jb250ZXh0VHlwZXM7aWYoIWMpcmV0dXJuIFBmO3ZhciBkPWEuc3RhdGVOb2RlO2lmKGQmJmQuX19yZWFjdEludGVybmFsTWVtb2l6ZWRVbm1hc2tlZENoaWxkQ29udGV4dD09PWIpcmV0dXJuIGQuX19yZWFjdEludGVybmFsTWVtb2l6ZWRNYXNrZWRDaGlsZENvbnRleHQ7dmFyIGU9e30sZjtmb3IoZiBpbiBjKWVbZl09YltmXTtkJiYoYT1hLnN0YXRlTm9kZSxhLl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkVW5tYXNrZWRDaGlsZENvbnRleHQ9YixhLl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkTWFza2VkQ2hpbGRDb250ZXh0PWUpO3JldHVybiBlfVxuZnVuY3Rpb24gVGYoYSl7YT1hLmNoaWxkQ29udGV4dFR5cGVzO3JldHVybiBudWxsIT09YSYmdm9pZCAwIT09YX1mdW5jdGlvbiBVZigpe0coUWYpO0coSSl9ZnVuY3Rpb24gVmYoYSxiLGMpe2lmKEkuY3VycmVudCE9PVBmKXRocm93IEVycm9yKHAoMTY4KSk7SChJLGIpO0goUWYsYyl9ZnVuY3Rpb24gV2YoYSxiLGMpe3ZhciBkPWEuc3RhdGVOb2RlO2I9Yi5jaGlsZENvbnRleHRUeXBlcztpZihcImZ1bmN0aW9uXCIhPT10eXBlb2YgZC5nZXRDaGlsZENvbnRleHQpcmV0dXJuIGM7ZD1kLmdldENoaWxkQ29udGV4dCgpO2Zvcih2YXIgZSBpbiBkKWlmKCEoZSBpbiBiKSl0aHJvdyBFcnJvcihwKDEwOCxQYShhKXx8XCJVbmtub3duXCIsZSkpO3JldHVybiBBKHt9LGMsZCl9XG5mdW5jdGlvbiBYZihhKXthPShhPWEuc3RhdGVOb2RlKSYmYS5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZE1lcmdlZENoaWxkQ29udGV4dHx8UGY7UmY9SS5jdXJyZW50O0goSSxhKTtIKFFmLFFmLmN1cnJlbnQpO3JldHVybiEwfWZ1bmN0aW9uIFlmKGEsYixjKXt2YXIgZD1hLnN0YXRlTm9kZTtpZighZCl0aHJvdyBFcnJvcihwKDE2OSkpO2M/KGE9V2YoYSxiLFJmKSxkLl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkTWVyZ2VkQ2hpbGRDb250ZXh0PWEsRyhRZiksRyhJKSxIKEksYSkpOkcoUWYpO0goUWYsYyl9dmFyIFpmPW51bGwsJGY9ITEsYWc9ITE7ZnVuY3Rpb24gYmcoYSl7bnVsbD09PVpmP1pmPVthXTpaZi5wdXNoKGEpfWZ1bmN0aW9uIGNnKGEpeyRmPSEwO2JnKGEpfVxuZnVuY3Rpb24gZGcoKXtpZighYWcmJm51bGwhPT1aZil7YWc9ITA7dmFyIGE9MCxiPUU7dHJ5e3ZhciBjPVpmO2ZvcihFPTE7YTxjLmxlbmd0aDthKyspe3ZhciBkPWNbYV07ZG8gZD1kKCEwKTt3aGlsZShudWxsIT09ZCl9WmY9bnVsbDskZj0hMX1jYXRjaChlKXt0aHJvdyBudWxsIT09WmYmJihaZj1aZi5zbGljZShhKzEpKSxZYihjYyxkZyksZTt9ZmluYWxseXtFPWIsYWc9ITF9fXJldHVybiBudWxsfXZhciBlZz1zYS5SZWFjdEN1cnJlbnRCYXRjaENvbmZpZztmdW5jdGlvbiBmZyhhLGIpe2lmKGEmJmEuZGVmYXVsdFByb3BzKXtiPUEoe30sYik7YT1hLmRlZmF1bHRQcm9wcztmb3IodmFyIGMgaW4gYSl2b2lkIDA9PT1iW2NdJiYoYltjXT1hW2NdKTtyZXR1cm4gYn1yZXR1cm4gYn12YXIgZ2c9T2YobnVsbCksaGc9bnVsbCxpZz1udWxsLGpnPW51bGw7ZnVuY3Rpb24ga2coKXtqZz1pZz1oZz1udWxsfVxuZnVuY3Rpb24gbGcoYSl7dmFyIGI9Z2cuY3VycmVudDtHKGdnKTthLl9jdXJyZW50VmFsdWU9Yn1mdW5jdGlvbiBtZyhhLGIsYyl7Zm9yKDtudWxsIT09YTspe3ZhciBkPWEuYWx0ZXJuYXRlOyhhLmNoaWxkTGFuZXMmYikhPT1iPyhhLmNoaWxkTGFuZXN8PWIsbnVsbCE9PWQmJihkLmNoaWxkTGFuZXN8PWIpKTpudWxsIT09ZCYmKGQuY2hpbGRMYW5lcyZiKSE9PWImJihkLmNoaWxkTGFuZXN8PWIpO2lmKGE9PT1jKWJyZWFrO2E9YS5yZXR1cm59fWZ1bmN0aW9uIG5nKGEsYil7aGc9YTtqZz1pZz1udWxsO2E9YS5kZXBlbmRlbmNpZXM7bnVsbCE9PWEmJm51bGwhPT1hLmZpcnN0Q29udGV4dCYmKDAhPT0oYS5sYW5lcyZiKSYmKG9nPSEwKSxhLmZpcnN0Q29udGV4dD1udWxsKX1cbmZ1bmN0aW9uIHBnKGEpe3ZhciBiPWEuX2N1cnJlbnRWYWx1ZTtpZihqZyE9PWEpaWYoYT17Y29udGV4dDphLG1lbW9pemVkVmFsdWU6YixuZXh0Om51bGx9LG51bGw9PT1pZyl7aWYobnVsbD09PWhnKXRocm93IEVycm9yKHAoMzA4KSk7aWc9YTtoZy5kZXBlbmRlbmNpZXM9e2xhbmVzOjAsZmlyc3RDb250ZXh0OmF9fWVsc2UgaWc9aWcubmV4dD1hO3JldHVybiBifXZhciBxZz1udWxsLHJnPSExO2Z1bmN0aW9uIHNnKGEpe2EudXBkYXRlUXVldWU9e2Jhc2VTdGF0ZTphLm1lbW9pemVkU3RhdGUsZmlyc3RCYXNlVXBkYXRlOm51bGwsbGFzdEJhc2VVcGRhdGU6bnVsbCxzaGFyZWQ6e3BlbmRpbmc6bnVsbCxpbnRlcmxlYXZlZDpudWxsLGxhbmVzOjB9LGVmZmVjdHM6bnVsbH19XG5mdW5jdGlvbiB0ZyhhLGIpe2E9YS51cGRhdGVRdWV1ZTtiLnVwZGF0ZVF1ZXVlPT09YSYmKGIudXBkYXRlUXVldWU9e2Jhc2VTdGF0ZTphLmJhc2VTdGF0ZSxmaXJzdEJhc2VVcGRhdGU6YS5maXJzdEJhc2VVcGRhdGUsbGFzdEJhc2VVcGRhdGU6YS5sYXN0QmFzZVVwZGF0ZSxzaGFyZWQ6YS5zaGFyZWQsZWZmZWN0czphLmVmZmVjdHN9KX1mdW5jdGlvbiB1ZyhhLGIpe3JldHVybntldmVudFRpbWU6YSxsYW5lOmIsdGFnOjAscGF5bG9hZDpudWxsLGNhbGxiYWNrOm51bGwsbmV4dDpudWxsfX1cbmZ1bmN0aW9uIHZnKGEsYil7dmFyIGM9YS51cGRhdGVRdWV1ZTtudWxsIT09YyYmKGM9Yy5zaGFyZWQsbnVsbCE9PUomJjAhPT0oYS5tb2RlJjEpJiYwPT09KEsmMik/KGE9Yy5pbnRlcmxlYXZlZCxudWxsPT09YT8oYi5uZXh0PWIsbnVsbD09PXFnP3FnPVtjXTpxZy5wdXNoKGMpKTooYi5uZXh0PWEubmV4dCxhLm5leHQ9YiksYy5pbnRlcmxlYXZlZD1iKTooYT1jLnBlbmRpbmcsbnVsbD09PWE/Yi5uZXh0PWI6KGIubmV4dD1hLm5leHQsYS5uZXh0PWIpLGMucGVuZGluZz1iKSl9ZnVuY3Rpb24gd2coYSxiLGMpe2I9Yi51cGRhdGVRdWV1ZTtpZihudWxsIT09YiYmKGI9Yi5zaGFyZWQsMCE9PShjJjQxOTQyNDApKSl7dmFyIGQ9Yi5sYW5lcztkJj1hLnBlbmRpbmdMYW5lcztjfD1kO2IubGFuZXM9Yzt5YyhhLGMpfX1cbmZ1bmN0aW9uIHhnKGEsYil7dmFyIGM9YS51cGRhdGVRdWV1ZSxkPWEuYWx0ZXJuYXRlO2lmKG51bGwhPT1kJiYoZD1kLnVwZGF0ZVF1ZXVlLGM9PT1kKSl7dmFyIGU9bnVsbCxmPW51bGw7Yz1jLmZpcnN0QmFzZVVwZGF0ZTtpZihudWxsIT09Yyl7ZG97dmFyIGc9e2V2ZW50VGltZTpjLmV2ZW50VGltZSxsYW5lOmMubGFuZSx0YWc6Yy50YWcscGF5bG9hZDpjLnBheWxvYWQsY2FsbGJhY2s6Yy5jYWxsYmFjayxuZXh0Om51bGx9O251bGw9PT1mP2U9Zj1nOmY9Zi5uZXh0PWc7Yz1jLm5leHR9d2hpbGUobnVsbCE9PWMpO251bGw9PT1mP2U9Zj1iOmY9Zi5uZXh0PWJ9ZWxzZSBlPWY9YjtjPXtiYXNlU3RhdGU6ZC5iYXNlU3RhdGUsZmlyc3RCYXNlVXBkYXRlOmUsbGFzdEJhc2VVcGRhdGU6ZixzaGFyZWQ6ZC5zaGFyZWQsZWZmZWN0czpkLmVmZmVjdHN9O2EudXBkYXRlUXVldWU9YztyZXR1cm59YT1jLmxhc3RCYXNlVXBkYXRlO251bGw9PT1hP2MuZmlyc3RCYXNlVXBkYXRlPWI6YS5uZXh0PVxuYjtjLmxhc3RCYXNlVXBkYXRlPWJ9XG5mdW5jdGlvbiB5ZyhhLGIsYyxkKXt2YXIgZT1hLnVwZGF0ZVF1ZXVlO3JnPSExO3ZhciBmPWUuZmlyc3RCYXNlVXBkYXRlLGc9ZS5sYXN0QmFzZVVwZGF0ZSxoPWUuc2hhcmVkLnBlbmRpbmc7aWYobnVsbCE9PWgpe2Uuc2hhcmVkLnBlbmRpbmc9bnVsbDt2YXIgaz1oLGw9ay5uZXh0O2submV4dD1udWxsO251bGw9PT1nP2Y9bDpnLm5leHQ9bDtnPWs7dmFyIG09YS5hbHRlcm5hdGU7bnVsbCE9PW0mJihtPW0udXBkYXRlUXVldWUsaD1tLmxhc3RCYXNlVXBkYXRlLGghPT1nJiYobnVsbD09PWg/bS5maXJzdEJhc2VVcGRhdGU9bDpoLm5leHQ9bCxtLmxhc3RCYXNlVXBkYXRlPWspKX1pZihudWxsIT09Zil7dmFyIHc9ZS5iYXNlU3RhdGU7Zz0wO209bD1rPW51bGw7aD1mO2Rve3ZhciB1PWgubGFuZSx5PWguZXZlbnRUaW1lO2lmKChkJnUpPT09dSl7bnVsbCE9PW0mJihtPW0ubmV4dD17ZXZlbnRUaW1lOnksbGFuZTowLHRhZzpoLnRhZyxwYXlsb2FkOmgucGF5bG9hZCxjYWxsYmFjazpoLmNhbGxiYWNrLFxubmV4dDpudWxsfSk7YTp7dmFyIG49YSx2PWg7dT1iO3k9Yztzd2l0Y2godi50YWcpe2Nhc2UgMTpuPXYucGF5bG9hZDtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2Ygbil7dz1uLmNhbGwoeSx3LHUpO2JyZWFrIGF9dz1uO2JyZWFrIGE7Y2FzZSAzOm4uZmxhZ3M9bi5mbGFncyYtNjU1Mzd8MTI4O2Nhc2UgMDpuPXYucGF5bG9hZDt1PVwiZnVuY3Rpb25cIj09PXR5cGVvZiBuP24uY2FsbCh5LHcsdSk6bjtpZihudWxsPT09dXx8dm9pZCAwPT09dSlicmVhayBhO3c9QSh7fSx3LHUpO2JyZWFrIGE7Y2FzZSAyOnJnPSEwfX1udWxsIT09aC5jYWxsYmFjayYmMCE9PWgubGFuZSYmKGEuZmxhZ3N8PTY0LHU9ZS5lZmZlY3RzLG51bGw9PT11P2UuZWZmZWN0cz1baF06dS5wdXNoKGgpKX1lbHNlIHk9e2V2ZW50VGltZTp5LGxhbmU6dSx0YWc6aC50YWcscGF5bG9hZDpoLnBheWxvYWQsY2FsbGJhY2s6aC5jYWxsYmFjayxuZXh0Om51bGx9LG51bGw9PT1tPyhsPW09eSxrPXcpOm09bS5uZXh0PXksZ3w9dTtcbmg9aC5uZXh0O2lmKG51bGw9PT1oKWlmKGg9ZS5zaGFyZWQucGVuZGluZyxudWxsPT09aClicmVhaztlbHNlIHU9aCxoPXUubmV4dCx1Lm5leHQ9bnVsbCxlLmxhc3RCYXNlVXBkYXRlPXUsZS5zaGFyZWQucGVuZGluZz1udWxsfXdoaWxlKDEpO251bGw9PT1tJiYoaz13KTtlLmJhc2VTdGF0ZT1rO2UuZmlyc3RCYXNlVXBkYXRlPWw7ZS5sYXN0QmFzZVVwZGF0ZT1tO2I9ZS5zaGFyZWQuaW50ZXJsZWF2ZWQ7aWYobnVsbCE9PWIpe2U9YjtkbyBnfD1lLmxhbmUsZT1lLm5leHQ7d2hpbGUoZSE9PWIpfWVsc2UgbnVsbD09PWYmJihlLnNoYXJlZC5sYW5lcz0wKTt6Z3w9ZzthLmxhbmVzPWc7YS5tZW1vaXplZFN0YXRlPXd9fVxuZnVuY3Rpb24gQWcoYSxiLGMpe2E9Yi5lZmZlY3RzO2IuZWZmZWN0cz1udWxsO2lmKG51bGwhPT1hKWZvcihiPTA7YjxhLmxlbmd0aDtiKyspe3ZhciBkPWFbYl0sZT1kLmNhbGxiYWNrO2lmKG51bGwhPT1lKXtkLmNhbGxiYWNrPW51bGw7ZD1jO2lmKFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBlKXRocm93IEVycm9yKHAoMTkxLGUpKTtlLmNhbGwoZCl9fX12YXIgQmc9KG5ldyBhYS5Db21wb25lbnQpLnJlZnM7ZnVuY3Rpb24gQ2coYSxiLGMsZCl7Yj1hLm1lbW9pemVkU3RhdGU7Yz1jKGQsYik7Yz1udWxsPT09Y3x8dm9pZCAwPT09Yz9iOkEoe30sYixjKTthLm1lbW9pemVkU3RhdGU9YzswPT09YS5sYW5lcyYmKGEudXBkYXRlUXVldWUuYmFzZVN0YXRlPWMpfVxudmFyIEZnPXtpc01vdW50ZWQ6ZnVuY3Rpb24oYSl7cmV0dXJuKGE9YS5fcmVhY3RJbnRlcm5hbHMpP1NiKGEpPT09YTohMX0sZW5xdWV1ZVNldFN0YXRlOmZ1bmN0aW9uKGEsYixjKXthPWEuX3JlYWN0SW50ZXJuYWxzO3ZhciBkPU0oKSxlPURnKGEpLGY9dWcoZCxlKTtmLnBheWxvYWQ9Yjt2b2lkIDAhPT1jJiZudWxsIT09YyYmKGYuY2FsbGJhY2s9Yyk7dmcoYSxmKTtiPUVnKGEsZSxkKTtudWxsIT09YiYmd2coYixhLGUpfSxlbnF1ZXVlUmVwbGFjZVN0YXRlOmZ1bmN0aW9uKGEsYixjKXthPWEuX3JlYWN0SW50ZXJuYWxzO3ZhciBkPU0oKSxlPURnKGEpLGY9dWcoZCxlKTtmLnRhZz0xO2YucGF5bG9hZD1iO3ZvaWQgMCE9PWMmJm51bGwhPT1jJiYoZi5jYWxsYmFjaz1jKTt2ZyhhLGYpO2I9RWcoYSxlLGQpO251bGwhPT1iJiZ3ZyhiLGEsZSl9LGVucXVldWVGb3JjZVVwZGF0ZTpmdW5jdGlvbihhLGIpe2E9YS5fcmVhY3RJbnRlcm5hbHM7dmFyIGM9TSgpLGQ9RGcoYSksZT11ZyhjLFxuZCk7ZS50YWc9Mjt2b2lkIDAhPT1iJiZudWxsIT09YiYmKGUuY2FsbGJhY2s9Yik7dmcoYSxlKTtiPUVnKGEsZCxjKTtudWxsIT09YiYmd2coYixhLGQpfX07ZnVuY3Rpb24gR2coYSxiLGMsZCxlLGYsZyl7YT1hLnN0YXRlTm9kZTtyZXR1cm5cImZ1bmN0aW9uXCI9PT10eXBlb2YgYS5zaG91bGRDb21wb25lbnRVcGRhdGU/YS5zaG91bGRDb21wb25lbnRVcGRhdGUoZCxmLGcpOmIucHJvdG90eXBlJiZiLnByb3RvdHlwZS5pc1B1cmVSZWFjdENvbXBvbmVudD8hRGUoYyxkKXx8IURlKGUsZik6ITB9XG5mdW5jdGlvbiBIZyhhLGIsYyl7dmFyIGQ9ITEsZT1QZjt2YXIgZj1iLmNvbnRleHRUeXBlO1wib2JqZWN0XCI9PT10eXBlb2YgZiYmbnVsbCE9PWY/Zj1wZyhmKTooZT1UZihiKT9SZjpJLmN1cnJlbnQsZD1iLmNvbnRleHRUeXBlcyxmPShkPW51bGwhPT1kJiZ2b2lkIDAhPT1kKT9TZihhLGUpOlBmKTtiPW5ldyBiKGMsZik7YS5tZW1vaXplZFN0YXRlPW51bGwhPT1iLnN0YXRlJiZ2b2lkIDAhPT1iLnN0YXRlP2Iuc3RhdGU6bnVsbDtiLnVwZGF0ZXI9Rmc7YS5zdGF0ZU5vZGU9YjtiLl9yZWFjdEludGVybmFscz1hO2QmJihhPWEuc3RhdGVOb2RlLGEuX19yZWFjdEludGVybmFsTWVtb2l6ZWRVbm1hc2tlZENoaWxkQ29udGV4dD1lLGEuX19yZWFjdEludGVybmFsTWVtb2l6ZWRNYXNrZWRDaGlsZENvbnRleHQ9Zik7cmV0dXJuIGJ9XG5mdW5jdGlvbiBJZyhhLGIsYyxkKXthPWIuc3RhdGU7XCJmdW5jdGlvblwiPT09dHlwZW9mIGIuY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyYmYi5jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzKGMsZCk7XCJmdW5jdGlvblwiPT09dHlwZW9mIGIuVU5TQUZFX2NvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMmJmIuVU5TQUZFX2NvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMoYyxkKTtiLnN0YXRlIT09YSYmRmcuZW5xdWV1ZVJlcGxhY2VTdGF0ZShiLGIuc3RhdGUsbnVsbCl9XG5mdW5jdGlvbiBKZyhhLGIsYyxkKXt2YXIgZT1hLnN0YXRlTm9kZTtlLnByb3BzPWM7ZS5zdGF0ZT1hLm1lbW9pemVkU3RhdGU7ZS5yZWZzPUJnO3NnKGEpO3ZhciBmPWIuY29udGV4dFR5cGU7XCJvYmplY3RcIj09PXR5cGVvZiBmJiZudWxsIT09Zj9lLmNvbnRleHQ9cGcoZik6KGY9VGYoYik/UmY6SS5jdXJyZW50LGUuY29udGV4dD1TZihhLGYpKTtlLnN0YXRlPWEubWVtb2l6ZWRTdGF0ZTtmPWIuZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzO1wiZnVuY3Rpb25cIj09PXR5cGVvZiBmJiYoQ2coYSxiLGYsYyksZS5zdGF0ZT1hLm1lbW9pemVkU3RhdGUpO1wiZnVuY3Rpb25cIj09PXR5cGVvZiBiLmdldERlcml2ZWRTdGF0ZUZyb21Qcm9wc3x8XCJmdW5jdGlvblwiPT09dHlwZW9mIGUuZ2V0U25hcHNob3RCZWZvcmVVcGRhdGV8fFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBlLlVOU0FGRV9jb21wb25lbnRXaWxsTW91bnQmJlwiZnVuY3Rpb25cIiE9PXR5cGVvZiBlLmNvbXBvbmVudFdpbGxNb3VudHx8KGI9ZS5zdGF0ZSxcblwiZnVuY3Rpb25cIj09PXR5cGVvZiBlLmNvbXBvbmVudFdpbGxNb3VudCYmZS5jb21wb25lbnRXaWxsTW91bnQoKSxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZS5VTlNBRkVfY29tcG9uZW50V2lsbE1vdW50JiZlLlVOU0FGRV9jb21wb25lbnRXaWxsTW91bnQoKSxiIT09ZS5zdGF0ZSYmRmcuZW5xdWV1ZVJlcGxhY2VTdGF0ZShlLGUuc3RhdGUsbnVsbCkseWcoYSxjLGUsZCksZS5zdGF0ZT1hLm1lbW9pemVkU3RhdGUpO1wiZnVuY3Rpb25cIj09PXR5cGVvZiBlLmNvbXBvbmVudERpZE1vdW50JiYoYS5mbGFnc3w9NDE5NDMwOCl9dmFyIEtnPVtdLExnPTAsTWc9bnVsbCxOZz0wLE9nPVtdLFBnPTAsUWc9bnVsbCxSZz0xLFNnPVwiXCI7ZnVuY3Rpb24gVGcoYSxiKXtLZ1tMZysrXT1OZztLZ1tMZysrXT1NZztNZz1hO05nPWJ9XG5mdW5jdGlvbiBVZyhhLGIsYyl7T2dbUGcrK109Umc7T2dbUGcrK109U2c7T2dbUGcrK109UWc7UWc9YTt2YXIgZD1SZzthPVNnO3ZhciBlPTMyLWxjKGQpLTE7ZCY9figxPDxlKTtjKz0xO3ZhciBmPTMyLWxjKGIpK2U7aWYoMzA8Zil7dmFyIGc9ZS1lJTU7Zj0oZCYoMTw8ZyktMSkudG9TdHJpbmcoMzIpO2Q+Pj1nO2UtPWc7Umc9MTw8MzItbGMoYikrZXxjPDxlfGQ7U2c9ZithfWVsc2UgUmc9MTw8ZnxjPDxlfGQsU2c9YX1mdW5jdGlvbiBWZyhhKXtudWxsIT09YS5yZXR1cm4mJihUZyhhLDEpLFVnKGEsMSwwKSl9ZnVuY3Rpb24gV2coYSl7Zm9yKDthPT09TWc7KU1nPUtnWy0tTGddLEtnW0xnXT1udWxsLE5nPUtnWy0tTGddLEtnW0xnXT1udWxsO2Zvcig7YT09PVFnOylRZz1PZ1stLVBnXSxPZ1tQZ109bnVsbCxTZz1PZ1stLVBnXSxPZ1tQZ109bnVsbCxSZz1PZ1stLVBnXSxPZ1tQZ109bnVsbH12YXIgWGc9bnVsbCxZZz1udWxsLE49ITEsWmc9bnVsbDtcbmZ1bmN0aW9uICRnKGEsYil7dmFyIGM9YWgoNSxudWxsLG51bGwsMCk7Yy5lbGVtZW50VHlwZT1cIkRFTEVURURcIjtjLnN0YXRlTm9kZT1iO2MucmV0dXJuPWE7Yj1hLmRlbGV0aW9ucztudWxsPT09Yj8oYS5kZWxldGlvbnM9W2NdLGEuZmxhZ3N8PTE2KTpiLnB1c2goYyl9XG5mdW5jdGlvbiBiaChhLGIpe3N3aXRjaChhLnRhZyl7Y2FzZSA1OnZhciBjPWEudHlwZTtiPTEhPT1iLm5vZGVUeXBlfHxjLnRvTG93ZXJDYXNlKCkhPT1iLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk/bnVsbDpiO3JldHVybiBudWxsIT09Yj8oYS5zdGF0ZU5vZGU9YixYZz1hLFlnPUZmKGIuZmlyc3RDaGlsZCksITApOiExO2Nhc2UgNjpyZXR1cm4gYj1cIlwiPT09YS5wZW5kaW5nUHJvcHN8fDMhPT1iLm5vZGVUeXBlP251bGw6YixudWxsIT09Yj8oYS5zdGF0ZU5vZGU9YixYZz1hLFlnPW51bGwsITApOiExO2Nhc2UgMTM6cmV0dXJuIGI9OCE9PWIubm9kZVR5cGU/bnVsbDpiLG51bGwhPT1iPyhjPW51bGwhPT1RZz97aWQ6Umcsb3ZlcmZsb3c6U2d9Om51bGwsYS5tZW1vaXplZFN0YXRlPXtkZWh5ZHJhdGVkOmIsdHJlZUNvbnRleHQ6YyxyZXRyeUxhbmU6MTA3Mzc0MTgyNH0sYz1haCgxOCxudWxsLG51bGwsMCksYy5zdGF0ZU5vZGU9YixjLnJldHVybj1hLGEuY2hpbGQ9YyxYZz1hLFlnPVxubnVsbCwhMCk6ITE7ZGVmYXVsdDpyZXR1cm4hMX19ZnVuY3Rpb24gY2goYSl7cmV0dXJuIDAhPT0oYS5tb2RlJjEpJiYwPT09KGEuZmxhZ3MmMTI4KX1mdW5jdGlvbiBkaChhKXtpZihOKXt2YXIgYj1ZZztpZihiKXt2YXIgYz1iO2lmKCFiaChhLGIpKXtpZihjaChhKSl0aHJvdyBFcnJvcihwKDQxOCkpO2I9RmYoYy5uZXh0U2libGluZyk7dmFyIGQ9WGc7YiYmYmgoYSxiKT8kZyhkLGMpOihhLmZsYWdzPWEuZmxhZ3MmLTQwOTd8MixOPSExLFhnPWEpfX1lbHNle2lmKGNoKGEpKXRocm93IEVycm9yKHAoNDE4KSk7YS5mbGFncz1hLmZsYWdzJi00MDk3fDI7Tj0hMTtYZz1hfX19ZnVuY3Rpb24gZWgoYSl7Zm9yKGE9YS5yZXR1cm47bnVsbCE9PWEmJjUhPT1hLnRhZyYmMyE9PWEudGFnJiYxMyE9PWEudGFnOylhPWEucmV0dXJuO1hnPWF9XG5mdW5jdGlvbiBmaChhKXtpZihhIT09WGcpcmV0dXJuITE7aWYoIU4pcmV0dXJuIGVoKGEpLE49ITAsITE7dmFyIGI7KGI9MyE9PWEudGFnKSYmIShiPTUhPT1hLnRhZykmJihiPWEudHlwZSxiPVwiaGVhZFwiIT09YiYmXCJib2R5XCIhPT1iJiYheWYoYS50eXBlLGEubWVtb2l6ZWRQcm9wcykpO2lmKGImJihiPVlnKSl7aWYoY2goYSkpe2ZvcihhPVlnO2E7KWE9RmYoYS5uZXh0U2libGluZyk7dGhyb3cgRXJyb3IocCg0MTgpKTt9Zm9yKDtiOykkZyhhLGIpLGI9RmYoYi5uZXh0U2libGluZyl9ZWgoYSk7aWYoMTM9PT1hLnRhZyl7YT1hLm1lbW9pemVkU3RhdGU7YT1udWxsIT09YT9hLmRlaHlkcmF0ZWQ6bnVsbDtpZighYSl0aHJvdyBFcnJvcihwKDMxNykpO2E6e2E9YS5uZXh0U2libGluZztmb3IoYj0wO2E7KXtpZig4PT09YS5ub2RlVHlwZSl7dmFyIGM9YS5kYXRhO2lmKFwiLyRcIj09PWMpe2lmKDA9PT1iKXtZZz1GZihhLm5leHRTaWJsaW5nKTticmVhayBhfWItLX1lbHNlXCIkXCIhPT1jJiZcblwiJCFcIiE9PWMmJlwiJD9cIiE9PWN8fGIrK31hPWEubmV4dFNpYmxpbmd9WWc9bnVsbH19ZWxzZSBZZz1YZz9GZihhLnN0YXRlTm9kZS5uZXh0U2libGluZyk6bnVsbDtyZXR1cm4hMH1mdW5jdGlvbiBnaCgpe1lnPVhnPW51bGw7Tj0hMX1mdW5jdGlvbiBoaChhKXtudWxsPT09Wmc/Wmc9W2FdOlpnLnB1c2goYSl9XG5mdW5jdGlvbiBpaChhLGIsYyl7YT1jLnJlZjtpZihudWxsIT09YSYmXCJmdW5jdGlvblwiIT09dHlwZW9mIGEmJlwib2JqZWN0XCIhPT10eXBlb2YgYSl7aWYoYy5fb3duZXIpe2M9Yy5fb3duZXI7aWYoYyl7aWYoMSE9PWMudGFnKXRocm93IEVycm9yKHAoMzA5KSk7dmFyIGQ9Yy5zdGF0ZU5vZGV9aWYoIWQpdGhyb3cgRXJyb3IocCgxNDcsYSkpO3ZhciBlPWQsZj1cIlwiK2E7aWYobnVsbCE9PWImJm51bGwhPT1iLnJlZiYmXCJmdW5jdGlvblwiPT09dHlwZW9mIGIucmVmJiZiLnJlZi5fc3RyaW5nUmVmPT09ZilyZXR1cm4gYi5yZWY7Yj1mdW5jdGlvbihhKXt2YXIgYj1lLnJlZnM7Yj09PUJnJiYoYj1lLnJlZnM9e30pO251bGw9PT1hP2RlbGV0ZSBiW2ZdOmJbZl09YX07Yi5fc3RyaW5nUmVmPWY7cmV0dXJuIGJ9aWYoXCJzdHJpbmdcIiE9PXR5cGVvZiBhKXRocm93IEVycm9yKHAoMjg0KSk7aWYoIWMuX293bmVyKXRocm93IEVycm9yKHAoMjkwLGEpKTt9cmV0dXJuIGF9XG5mdW5jdGlvbiBqaChhLGIpe2E9T2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKGIpO3Rocm93IEVycm9yKHAoMzEsXCJbb2JqZWN0IE9iamVjdF1cIj09PWE/XCJvYmplY3Qgd2l0aCBrZXlzIHtcIitPYmplY3Qua2V5cyhiKS5qb2luKFwiLCBcIikrXCJ9XCI6YSkpO31mdW5jdGlvbiBraChhKXt2YXIgYj1hLl9pbml0O3JldHVybiBiKGEuX3BheWxvYWQpfVxuZnVuY3Rpb24gbGgoYSl7ZnVuY3Rpb24gYihiLGMpe2lmKGEpe3ZhciBkPWIuZGVsZXRpb25zO251bGw9PT1kPyhiLmRlbGV0aW9ucz1bY10sYi5mbGFnc3w9MTYpOmQucHVzaChjKX19ZnVuY3Rpb24gYyhjLGQpe2lmKCFhKXJldHVybiBudWxsO2Zvcig7bnVsbCE9PWQ7KWIoYyxkKSxkPWQuc2libGluZztyZXR1cm4gbnVsbH1mdW5jdGlvbiBkKGEsYil7Zm9yKGE9bmV3IE1hcDtudWxsIT09YjspbnVsbCE9PWIua2V5P2Euc2V0KGIua2V5LGIpOmEuc2V0KGIuaW5kZXgsYiksYj1iLnNpYmxpbmc7cmV0dXJuIGF9ZnVuY3Rpb24gZShhLGIpe2E9bWgoYSxiKTthLmluZGV4PTA7YS5zaWJsaW5nPW51bGw7cmV0dXJuIGF9ZnVuY3Rpb24gZihiLGMsZCl7Yi5pbmRleD1kO2lmKCFhKXJldHVybiBiLmZsYWdzfD0xMDQ4NTc2LGM7ZD1iLmFsdGVybmF0ZTtpZihudWxsIT09ZClyZXR1cm4gZD1kLmluZGV4LGQ8Yz8oYi5mbGFnc3w9MixjKTpkO2IuZmxhZ3N8PTI7cmV0dXJuIGN9ZnVuY3Rpb24gZyhiKXthJiZcbm51bGw9PT1iLmFsdGVybmF0ZSYmKGIuZmxhZ3N8PTIpO3JldHVybiBifWZ1bmN0aW9uIGgoYSxiLGMsZCl7aWYobnVsbD09PWJ8fDYhPT1iLnRhZylyZXR1cm4gYj1uaChjLGEubW9kZSxkKSxiLnJldHVybj1hLGI7Yj1lKGIsYyk7Yi5yZXR1cm49YTtyZXR1cm4gYn1mdW5jdGlvbiBrKGEsYixjLGQpe3ZhciBmPWMudHlwZTtpZihmPT09dmEpcmV0dXJuIG0oYSxiLGMucHJvcHMuY2hpbGRyZW4sZCxjLmtleSk7aWYobnVsbCE9PWImJihiLmVsZW1lbnRUeXBlPT09Znx8XCJvYmplY3RcIj09PXR5cGVvZiBmJiZudWxsIT09ZiYmZi4kJHR5cGVvZj09PUZhJiZraChmKT09PWIudHlwZSkpcmV0dXJuIGQ9ZShiLGMucHJvcHMpLGQucmVmPWloKGEsYixjKSxkLnJldHVybj1hLGQ7ZD1vaChjLnR5cGUsYy5rZXksYy5wcm9wcyxudWxsLGEubW9kZSxkKTtkLnJlZj1paChhLGIsYyk7ZC5yZXR1cm49YTtyZXR1cm4gZH1mdW5jdGlvbiBsKGEsYixjLGQpe2lmKG51bGw9PT1ifHw0IT09Yi50YWd8fFxuYi5zdGF0ZU5vZGUuY29udGFpbmVySW5mbyE9PWMuY29udGFpbmVySW5mb3x8Yi5zdGF0ZU5vZGUuaW1wbGVtZW50YXRpb24hPT1jLmltcGxlbWVudGF0aW9uKXJldHVybiBiPXBoKGMsYS5tb2RlLGQpLGIucmV0dXJuPWEsYjtiPWUoYixjLmNoaWxkcmVufHxbXSk7Yi5yZXR1cm49YTtyZXR1cm4gYn1mdW5jdGlvbiBtKGEsYixjLGQsZil7aWYobnVsbD09PWJ8fDchPT1iLnRhZylyZXR1cm4gYj1xaChjLGEubW9kZSxkLGYpLGIucmV0dXJuPWEsYjtiPWUoYixjKTtiLnJldHVybj1hO3JldHVybiBifWZ1bmN0aW9uIHcoYSxiLGMpe2lmKFwic3RyaW5nXCI9PT10eXBlb2YgYiYmXCJcIiE9PWJ8fFwibnVtYmVyXCI9PT10eXBlb2YgYilyZXR1cm4gYj1uaChcIlwiK2IsYS5tb2RlLGMpLGIucmV0dXJuPWEsYjtpZihcIm9iamVjdFwiPT09dHlwZW9mIGImJm51bGwhPT1iKXtzd2l0Y2goYi4kJHR5cGVvZil7Y2FzZSB0YTpyZXR1cm4gYz1vaChiLnR5cGUsYi5rZXksYi5wcm9wcyxudWxsLGEubW9kZSxjKSxcbmMucmVmPWloKGEsbnVsbCxiKSxjLnJldHVybj1hLGM7Y2FzZSB1YTpyZXR1cm4gYj1waChiLGEubW9kZSxjKSxiLnJldHVybj1hLGI7Y2FzZSBGYTp2YXIgZD1iLl9pbml0O3JldHVybiB3KGEsZChiLl9wYXlsb2FkKSxjKX1pZihiYihiKXx8SWEoYikpcmV0dXJuIGI9cWgoYixhLm1vZGUsYyxudWxsKSxiLnJldHVybj1hLGI7amgoYSxiKX1yZXR1cm4gbnVsbH1mdW5jdGlvbiB1KGEsYixjLGQpe3ZhciBlPW51bGwhPT1iP2Iua2V5Om51bGw7aWYoXCJzdHJpbmdcIj09PXR5cGVvZiBjJiZcIlwiIT09Y3x8XCJudW1iZXJcIj09PXR5cGVvZiBjKXJldHVybiBudWxsIT09ZT9udWxsOmgoYSxiLFwiXCIrYyxkKTtpZihcIm9iamVjdFwiPT09dHlwZW9mIGMmJm51bGwhPT1jKXtzd2l0Y2goYy4kJHR5cGVvZil7Y2FzZSB0YTpyZXR1cm4gYy5rZXk9PT1lP2soYSxiLGMsZCk6bnVsbDtjYXNlIHVhOnJldHVybiBjLmtleT09PWU/bChhLGIsYyxkKTpudWxsO2Nhc2UgRmE6cmV0dXJuIGU9Yy5faW5pdCx1KGEsXG5iLGUoYy5fcGF5bG9hZCksZCl9aWYoYmIoYyl8fElhKGMpKXJldHVybiBudWxsIT09ZT9udWxsOm0oYSxiLGMsZCxudWxsKTtqaChhLGMpfXJldHVybiBudWxsfWZ1bmN0aW9uIHkoYSxiLGMsZCxlKXtpZihcInN0cmluZ1wiPT09dHlwZW9mIGQmJlwiXCIhPT1kfHxcIm51bWJlclwiPT09dHlwZW9mIGQpcmV0dXJuIGE9YS5nZXQoYyl8fG51bGwsaChiLGEsXCJcIitkLGUpO2lmKFwib2JqZWN0XCI9PT10eXBlb2YgZCYmbnVsbCE9PWQpe3N3aXRjaChkLiQkdHlwZW9mKXtjYXNlIHRhOnJldHVybiBhPWEuZ2V0KG51bGw9PT1kLmtleT9jOmQua2V5KXx8bnVsbCxrKGIsYSxkLGUpO2Nhc2UgdWE6cmV0dXJuIGE9YS5nZXQobnVsbD09PWQua2V5P2M6ZC5rZXkpfHxudWxsLGwoYixhLGQsZSk7Y2FzZSBGYTp2YXIgZj1kLl9pbml0O3JldHVybiB5KGEsYixjLGYoZC5fcGF5bG9hZCksZSl9aWYoYmIoZCl8fElhKGQpKXJldHVybiBhPWEuZ2V0KGMpfHxudWxsLG0oYixhLGQsZSxudWxsKTtqaChiLGQpfXJldHVybiBudWxsfVxuZnVuY3Rpb24gbihlLGcsaCxrKXtmb3IodmFyIGw9bnVsbCxuPW51bGwsbT1nLHI9Zz0wLHg9bnVsbDtudWxsIT09bSYmcjxoLmxlbmd0aDtyKyspe20uaW5kZXg+cj8oeD1tLG09bnVsbCk6eD1tLnNpYmxpbmc7dmFyIHQ9dShlLG0saFtyXSxrKTtpZihudWxsPT09dCl7bnVsbD09PW0mJihtPXgpO2JyZWFrfWEmJm0mJm51bGw9PT10LmFsdGVybmF0ZSYmYihlLG0pO2c9Zih0LGcscik7bnVsbD09PW4/bD10Om4uc2libGluZz10O249dDttPXh9aWYocj09PWgubGVuZ3RoKXJldHVybiBjKGUsbSksTiYmVGcoZSxyKSxsO2lmKG51bGw9PT1tKXtmb3IoO3I8aC5sZW5ndGg7cisrKW09dyhlLGhbcl0sayksbnVsbCE9PW0mJihnPWYobSxnLHIpLG51bGw9PT1uP2w9bTpuLnNpYmxpbmc9bSxuPW0pO04mJlRnKGUscik7cmV0dXJuIGx9Zm9yKG09ZChlLG0pO3I8aC5sZW5ndGg7cisrKXg9eShtLGUscixoW3JdLGspLG51bGwhPT14JiYoYSYmbnVsbCE9PXguYWx0ZXJuYXRlJiZtLmRlbGV0ZShudWxsPT09XG54LmtleT9yOngua2V5KSxnPWYoeCxnLHIpLG51bGw9PT1uP2w9eDpuLnNpYmxpbmc9eCxuPXgpO2EmJm0uZm9yRWFjaChmdW5jdGlvbihhKXtyZXR1cm4gYihlLGEpfSk7TiYmVGcoZSxyKTtyZXR1cm4gbH1mdW5jdGlvbiB2KGUsZyxoLGspe3ZhciBsPUlhKGgpO2lmKFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBsKXRocm93IEVycm9yKHAoMTUwKSk7aD1sLmNhbGwoaCk7aWYobnVsbD09aCl0aHJvdyBFcnJvcihwKDE1MSkpO2Zvcih2YXIgbT1sPW51bGwsbj1nLHI9Zz0wLHg9bnVsbCx0PWgubmV4dCgpO251bGwhPT1uJiYhdC5kb25lO3IrKyx0PWgubmV4dCgpKXtuLmluZGV4PnI/KHg9bixuPW51bGwpOng9bi5zaWJsaW5nO3ZhciB2PXUoZSxuLHQudmFsdWUsayk7aWYobnVsbD09PXYpe251bGw9PT1uJiYobj14KTticmVha31hJiZuJiZudWxsPT09di5hbHRlcm5hdGUmJmIoZSxuKTtnPWYodixnLHIpO251bGw9PT1tP2w9djptLnNpYmxpbmc9djttPXY7bj14fWlmKHQuZG9uZSlyZXR1cm4gYyhlLFxubiksTiYmVGcoZSxyKSxsO2lmKG51bGw9PT1uKXtmb3IoOyF0LmRvbmU7cisrLHQ9aC5uZXh0KCkpdD13KGUsdC52YWx1ZSxrKSxudWxsIT09dCYmKGc9Zih0LGcsciksbnVsbD09PW0/bD10Om0uc2libGluZz10LG09dCk7TiYmVGcoZSxyKTtyZXR1cm4gbH1mb3Iobj1kKGUsbik7IXQuZG9uZTtyKyssdD1oLm5leHQoKSl0PXkobixlLHIsdC52YWx1ZSxrKSxudWxsIT09dCYmKGEmJm51bGwhPT10LmFsdGVybmF0ZSYmbi5kZWxldGUobnVsbD09PXQua2V5P3I6dC5rZXkpLGc9Zih0LGcsciksbnVsbD09PW0/bD10Om0uc2libGluZz10LG09dCk7YSYmbi5mb3JFYWNoKGZ1bmN0aW9uKGEpe3JldHVybiBiKGUsYSl9KTtOJiZUZyhlLHIpO3JldHVybiBsfWZ1bmN0aW9uIEMoYSxkLGYsaCl7XCJvYmplY3RcIj09PXR5cGVvZiBmJiZudWxsIT09ZiYmZi50eXBlPT09dmEmJm51bGw9PT1mLmtleSYmKGY9Zi5wcm9wcy5jaGlsZHJlbik7aWYoXCJvYmplY3RcIj09PXR5cGVvZiBmJiZudWxsIT09Zil7c3dpdGNoKGYuJCR0eXBlb2Ype2Nhc2UgdGE6YTp7Zm9yKHZhciBrPVxuZi5rZXksbD1kO251bGwhPT1sOyl7aWYobC5rZXk9PT1rKXtrPWYudHlwZTtpZihrPT09dmEpe2lmKDc9PT1sLnRhZyl7YyhhLGwuc2libGluZyk7ZD1lKGwsZi5wcm9wcy5jaGlsZHJlbik7ZC5yZXR1cm49YTthPWQ7YnJlYWsgYX19ZWxzZSBpZihsLmVsZW1lbnRUeXBlPT09a3x8XCJvYmplY3RcIj09PXR5cGVvZiBrJiZudWxsIT09ayYmay4kJHR5cGVvZj09PUZhJiZraChrKT09PWwudHlwZSl7YyhhLGwuc2libGluZyk7ZD1lKGwsZi5wcm9wcyk7ZC5yZWY9aWgoYSxsLGYpO2QucmV0dXJuPWE7YT1kO2JyZWFrIGF9YyhhLGwpO2JyZWFrfWVsc2UgYihhLGwpO2w9bC5zaWJsaW5nfWYudHlwZT09PXZhPyhkPXFoKGYucHJvcHMuY2hpbGRyZW4sYS5tb2RlLGgsZi5rZXkpLGQucmV0dXJuPWEsYT1kKTooaD1vaChmLnR5cGUsZi5rZXksZi5wcm9wcyxudWxsLGEubW9kZSxoKSxoLnJlZj1paChhLGQsZiksaC5yZXR1cm49YSxhPWgpfXJldHVybiBnKGEpO2Nhc2UgdWE6YTp7Zm9yKGw9Zi5rZXk7bnVsbCE9PVxuZDspe2lmKGQua2V5PT09bClpZig0PT09ZC50YWcmJmQuc3RhdGVOb2RlLmNvbnRhaW5lckluZm89PT1mLmNvbnRhaW5lckluZm8mJmQuc3RhdGVOb2RlLmltcGxlbWVudGF0aW9uPT09Zi5pbXBsZW1lbnRhdGlvbil7YyhhLGQuc2libGluZyk7ZD1lKGQsZi5jaGlsZHJlbnx8W10pO2QucmV0dXJuPWE7YT1kO2JyZWFrIGF9ZWxzZXtjKGEsZCk7YnJlYWt9ZWxzZSBiKGEsZCk7ZD1kLnNpYmxpbmd9ZD1waChmLGEubW9kZSxoKTtkLnJldHVybj1hO2E9ZH1yZXR1cm4gZyhhKTtjYXNlIEZhOnJldHVybiBsPWYuX2luaXQsQyhhLGQsbChmLl9wYXlsb2FkKSxoKX1pZihiYihmKSlyZXR1cm4gbihhLGQsZixoKTtpZihJYShmKSlyZXR1cm4gdihhLGQsZixoKTtqaChhLGYpfXJldHVyblwic3RyaW5nXCI9PT10eXBlb2YgZiYmXCJcIiE9PWZ8fFwibnVtYmVyXCI9PT10eXBlb2YgZj8oZj1cIlwiK2YsbnVsbCE9PWQmJjY9PT1kLnRhZz8oYyhhLGQuc2libGluZyksZD1lKGQsZiksZC5yZXR1cm49YSxhPWQpOlxuKGMoYSxkKSxkPW5oKGYsYS5tb2RlLGgpLGQucmV0dXJuPWEsYT1kKSxnKGEpKTpjKGEsZCl9cmV0dXJuIEN9dmFyIHJoPWxoKCEwKSxzaD1saCghMSksdGg9e30sdWg9T2YodGgpLHZoPU9mKHRoKSx3aD1PZih0aCk7ZnVuY3Rpb24geGgoYSl7aWYoYT09PXRoKXRocm93IEVycm9yKHAoMTc0KSk7cmV0dXJuIGF9ZnVuY3Rpb24geWgoYSxiKXtIKHdoLGIpO0godmgsYSk7SCh1aCx0aCk7YT1iLm5vZGVUeXBlO3N3aXRjaChhKXtjYXNlIDk6Y2FzZSAxMTpiPShiPWIuZG9jdW1lbnRFbGVtZW50KT9iLm5hbWVzcGFjZVVSSTppYihudWxsLFwiXCIpO2JyZWFrO2RlZmF1bHQ6YT04PT09YT9iLnBhcmVudE5vZGU6YixiPWEubmFtZXNwYWNlVVJJfHxudWxsLGE9YS50YWdOYW1lLGI9aWIoYixhKX1HKHVoKTtIKHVoLGIpfWZ1bmN0aW9uIHpoKCl7Ryh1aCk7Ryh2aCk7Ryh3aCl9XG5mdW5jdGlvbiBBaChhKXt4aCh3aC5jdXJyZW50KTt2YXIgYj14aCh1aC5jdXJyZW50KTt2YXIgYz1pYihiLGEudHlwZSk7YiE9PWMmJihIKHZoLGEpLEgodWgsYykpfWZ1bmN0aW9uIEJoKGEpe3ZoLmN1cnJlbnQ9PT1hJiYoRyh1aCksRyh2aCkpfXZhciBQPU9mKDApO1xuZnVuY3Rpb24gQ2goYSl7Zm9yKHZhciBiPWE7bnVsbCE9PWI7KXtpZigxMz09PWIudGFnKXt2YXIgYz1iLm1lbW9pemVkU3RhdGU7aWYobnVsbCE9PWMmJihjPWMuZGVoeWRyYXRlZCxudWxsPT09Y3x8XCIkP1wiPT09Yy5kYXRhfHxcIiQhXCI9PT1jLmRhdGEpKXJldHVybiBifWVsc2UgaWYoMTk9PT1iLnRhZyYmdm9pZCAwIT09Yi5tZW1vaXplZFByb3BzLnJldmVhbE9yZGVyKXtpZigwIT09KGIuZmxhZ3MmMTI4KSlyZXR1cm4gYn1lbHNlIGlmKG51bGwhPT1iLmNoaWxkKXtiLmNoaWxkLnJldHVybj1iO2I9Yi5jaGlsZDtjb250aW51ZX1pZihiPT09YSlicmVhaztmb3IoO251bGw9PT1iLnNpYmxpbmc7KXtpZihudWxsPT09Yi5yZXR1cm58fGIucmV0dXJuPT09YSlyZXR1cm4gbnVsbDtiPWIucmV0dXJufWIuc2libGluZy5yZXR1cm49Yi5yZXR1cm47Yj1iLnNpYmxpbmd9cmV0dXJuIG51bGx9dmFyIERoPVtdO1xuZnVuY3Rpb24gRWgoKXtmb3IodmFyIGE9MDthPERoLmxlbmd0aDthKyspRGhbYV0uX3dvcmtJblByb2dyZXNzVmVyc2lvblByaW1hcnk9bnVsbDtEaC5sZW5ndGg9MH12YXIgRmg9c2EuUmVhY3RDdXJyZW50RGlzcGF0Y2hlcixHaD1zYS5SZWFjdEN1cnJlbnRCYXRjaENvbmZpZyxIaD0wLFE9bnVsbCxSPW51bGwsUz1udWxsLEloPSExLEpoPSExLEtoPTAsTGg9MDtmdW5jdGlvbiBVKCl7dGhyb3cgRXJyb3IocCgzMjEpKTt9ZnVuY3Rpb24gTWgoYSxiKXtpZihudWxsPT09YilyZXR1cm4hMTtmb3IodmFyIGM9MDtjPGIubGVuZ3RoJiZjPGEubGVuZ3RoO2MrKylpZighQ2UoYVtjXSxiW2NdKSlyZXR1cm4hMTtyZXR1cm4hMH1cbmZ1bmN0aW9uIE5oKGEsYixjLGQsZSxmKXtIaD1mO1E9YjtiLm1lbW9pemVkU3RhdGU9bnVsbDtiLnVwZGF0ZVF1ZXVlPW51bGw7Yi5sYW5lcz0wO0ZoLmN1cnJlbnQ9bnVsbD09PWF8fG51bGw9PT1hLm1lbW9pemVkU3RhdGU/T2g6UGg7YT1jKGQsZSk7aWYoSmgpe2Y9MDtkb3tKaD0hMTtLaD0wO2lmKDI1PD1mKXRocm93IEVycm9yKHAoMzAxKSk7Zis9MTtTPVI9bnVsbDtiLnVwZGF0ZVF1ZXVlPW51bGw7RmguY3VycmVudD1RaDthPWMoZCxlKX13aGlsZShKaCl9RmguY3VycmVudD1SaDtiPW51bGwhPT1SJiZudWxsIT09Ui5uZXh0O0hoPTA7Uz1SPVE9bnVsbDtJaD0hMTtpZihiKXRocm93IEVycm9yKHAoMzAwKSk7cmV0dXJuIGF9ZnVuY3Rpb24gU2goKXt2YXIgYT0wIT09S2g7S2g9MDtyZXR1cm4gYX1cbmZ1bmN0aW9uIFRoKCl7dmFyIGE9e21lbW9pemVkU3RhdGU6bnVsbCxiYXNlU3RhdGU6bnVsbCxiYXNlUXVldWU6bnVsbCxxdWV1ZTpudWxsLG5leHQ6bnVsbH07bnVsbD09PVM/US5tZW1vaXplZFN0YXRlPVM9YTpTPVMubmV4dD1hO3JldHVybiBTfWZ1bmN0aW9uIFVoKCl7aWYobnVsbD09PVIpe3ZhciBhPVEuYWx0ZXJuYXRlO2E9bnVsbCE9PWE/YS5tZW1vaXplZFN0YXRlOm51bGx9ZWxzZSBhPVIubmV4dDt2YXIgYj1udWxsPT09Uz9RLm1lbW9pemVkU3RhdGU6Uy5uZXh0O2lmKG51bGwhPT1iKVM9YixSPWE7ZWxzZXtpZihudWxsPT09YSl0aHJvdyBFcnJvcihwKDMxMCkpO1I9YTthPXttZW1vaXplZFN0YXRlOlIubWVtb2l6ZWRTdGF0ZSxiYXNlU3RhdGU6Ui5iYXNlU3RhdGUsYmFzZVF1ZXVlOlIuYmFzZVF1ZXVlLHF1ZXVlOlIucXVldWUsbmV4dDpudWxsfTtudWxsPT09Uz9RLm1lbW9pemVkU3RhdGU9Uz1hOlM9Uy5uZXh0PWF9cmV0dXJuIFN9XG5mdW5jdGlvbiBWaChhLGIpe3JldHVyblwiZnVuY3Rpb25cIj09PXR5cGVvZiBiP2IoYSk6Yn1cbmZ1bmN0aW9uIFdoKGEpe3ZhciBiPVVoKCksYz1iLnF1ZXVlO2lmKG51bGw9PT1jKXRocm93IEVycm9yKHAoMzExKSk7Yy5sYXN0UmVuZGVyZWRSZWR1Y2VyPWE7dmFyIGQ9UixlPWQuYmFzZVF1ZXVlLGY9Yy5wZW5kaW5nO2lmKG51bGwhPT1mKXtpZihudWxsIT09ZSl7dmFyIGc9ZS5uZXh0O2UubmV4dD1mLm5leHQ7Zi5uZXh0PWd9ZC5iYXNlUXVldWU9ZT1mO2MucGVuZGluZz1udWxsfWlmKG51bGwhPT1lKXtmPWUubmV4dDtkPWQuYmFzZVN0YXRlO3ZhciBoPWc9bnVsbCxrPW51bGwsbD1mO2Rve3ZhciBtPWwubGFuZTtpZigoSGgmbSk9PT1tKW51bGwhPT1rJiYoaz1rLm5leHQ9e2xhbmU6MCxhY3Rpb246bC5hY3Rpb24saGFzRWFnZXJTdGF0ZTpsLmhhc0VhZ2VyU3RhdGUsZWFnZXJTdGF0ZTpsLmVhZ2VyU3RhdGUsbmV4dDpudWxsfSksZD1sLmhhc0VhZ2VyU3RhdGU/bC5lYWdlclN0YXRlOmEoZCxsLmFjdGlvbik7ZWxzZXt2YXIgdz17bGFuZTptLGFjdGlvbjpsLmFjdGlvbixoYXNFYWdlclN0YXRlOmwuaGFzRWFnZXJTdGF0ZSxcbmVhZ2VyU3RhdGU6bC5lYWdlclN0YXRlLG5leHQ6bnVsbH07bnVsbD09PWs/KGg9az13LGc9ZCk6az1rLm5leHQ9dztRLmxhbmVzfD1tO3pnfD1tfWw9bC5uZXh0fXdoaWxlKG51bGwhPT1sJiZsIT09Zik7bnVsbD09PWs/Zz1kOmsubmV4dD1oO0NlKGQsYi5tZW1vaXplZFN0YXRlKXx8KG9nPSEwKTtiLm1lbW9pemVkU3RhdGU9ZDtiLmJhc2VTdGF0ZT1nO2IuYmFzZVF1ZXVlPWs7Yy5sYXN0UmVuZGVyZWRTdGF0ZT1kfWE9Yy5pbnRlcmxlYXZlZDtpZihudWxsIT09YSl7ZT1hO2RvIGY9ZS5sYW5lLFEubGFuZXN8PWYsemd8PWYsZT1lLm5leHQ7d2hpbGUoZSE9PWEpfWVsc2UgbnVsbD09PWUmJihjLmxhbmVzPTApO3JldHVybltiLm1lbW9pemVkU3RhdGUsYy5kaXNwYXRjaF19XG5mdW5jdGlvbiBYaChhKXt2YXIgYj1VaCgpLGM9Yi5xdWV1ZTtpZihudWxsPT09Yyl0aHJvdyBFcnJvcihwKDMxMSkpO2MubGFzdFJlbmRlcmVkUmVkdWNlcj1hO3ZhciBkPWMuZGlzcGF0Y2gsZT1jLnBlbmRpbmcsZj1iLm1lbW9pemVkU3RhdGU7aWYobnVsbCE9PWUpe2MucGVuZGluZz1udWxsO3ZhciBnPWU9ZS5uZXh0O2RvIGY9YShmLGcuYWN0aW9uKSxnPWcubmV4dDt3aGlsZShnIT09ZSk7Q2UoZixiLm1lbW9pemVkU3RhdGUpfHwob2c9ITApO2IubWVtb2l6ZWRTdGF0ZT1mO251bGw9PT1iLmJhc2VRdWV1ZSYmKGIuYmFzZVN0YXRlPWYpO2MubGFzdFJlbmRlcmVkU3RhdGU9Zn1yZXR1cm5bZixkXX1mdW5jdGlvbiBZaCgpe31cbmZ1bmN0aW9uIFpoKGEsYil7dmFyIGM9USxkPVVoKCksZT1iKCksZj0hQ2UoZC5tZW1vaXplZFN0YXRlLGUpO2YmJihkLm1lbW9pemVkU3RhdGU9ZSxvZz0hMCk7ZD1kLnF1ZXVlOyRoKGFpLmJpbmQobnVsbCxjLGQsYSksW2FdKTtpZihkLmdldFNuYXBzaG90IT09Ynx8Znx8bnVsbCE9PVMmJlMubWVtb2l6ZWRTdGF0ZS50YWcmMSl7Yy5mbGFnc3w9MjA0ODtiaSg5LGNpLmJpbmQobnVsbCxjLGQsZSxiKSx2b2lkIDAsbnVsbCk7aWYobnVsbD09PUopdGhyb3cgRXJyb3IocCgzNDkpKTswIT09KEhoJjMwKXx8ZGkoYyxiLGUpfXJldHVybiBlfWZ1bmN0aW9uIGRpKGEsYixjKXthLmZsYWdzfD0xNjM4NDthPXtnZXRTbmFwc2hvdDpiLHZhbHVlOmN9O2I9US51cGRhdGVRdWV1ZTtudWxsPT09Yj8oYj17bGFzdEVmZmVjdDpudWxsLHN0b3JlczpudWxsfSxRLnVwZGF0ZVF1ZXVlPWIsYi5zdG9yZXM9W2FdKTooYz1iLnN0b3JlcyxudWxsPT09Yz9iLnN0b3Jlcz1bYV06Yy5wdXNoKGEpKX1cbmZ1bmN0aW9uIGNpKGEsYixjLGQpe2IudmFsdWU9YztiLmdldFNuYXBzaG90PWQ7ZWkoYikmJkVnKGEsMSwtMSl9ZnVuY3Rpb24gYWkoYSxiLGMpe3JldHVybiBjKGZ1bmN0aW9uKCl7ZWkoYikmJkVnKGEsMSwtMSl9KX1mdW5jdGlvbiBlaShhKXt2YXIgYj1hLmdldFNuYXBzaG90O2E9YS52YWx1ZTt0cnl7dmFyIGM9YigpO3JldHVybiFDZShhLGMpfWNhdGNoKGQpe3JldHVybiEwfX1mdW5jdGlvbiBmaShhKXt2YXIgYj1UaCgpO1wiZnVuY3Rpb25cIj09PXR5cGVvZiBhJiYoYT1hKCkpO2IubWVtb2l6ZWRTdGF0ZT1iLmJhc2VTdGF0ZT1hO2E9e3BlbmRpbmc6bnVsbCxpbnRlcmxlYXZlZDpudWxsLGxhbmVzOjAsZGlzcGF0Y2g6bnVsbCxsYXN0UmVuZGVyZWRSZWR1Y2VyOlZoLGxhc3RSZW5kZXJlZFN0YXRlOmF9O2IucXVldWU9YTthPWEuZGlzcGF0Y2g9Z2kuYmluZChudWxsLFEsYSk7cmV0dXJuW2IubWVtb2l6ZWRTdGF0ZSxhXX1cbmZ1bmN0aW9uIGJpKGEsYixjLGQpe2E9e3RhZzphLGNyZWF0ZTpiLGRlc3Ryb3k6YyxkZXBzOmQsbmV4dDpudWxsfTtiPVEudXBkYXRlUXVldWU7bnVsbD09PWI/KGI9e2xhc3RFZmZlY3Q6bnVsbCxzdG9yZXM6bnVsbH0sUS51cGRhdGVRdWV1ZT1iLGIubGFzdEVmZmVjdD1hLm5leHQ9YSk6KGM9Yi5sYXN0RWZmZWN0LG51bGw9PT1jP2IubGFzdEVmZmVjdD1hLm5leHQ9YTooZD1jLm5leHQsYy5uZXh0PWEsYS5uZXh0PWQsYi5sYXN0RWZmZWN0PWEpKTtyZXR1cm4gYX1mdW5jdGlvbiBoaSgpe3JldHVybiBVaCgpLm1lbW9pemVkU3RhdGV9ZnVuY3Rpb24gaWkoYSxiLGMsZCl7dmFyIGU9VGgoKTtRLmZsYWdzfD1hO2UubWVtb2l6ZWRTdGF0ZT1iaSgxfGIsYyx2b2lkIDAsdm9pZCAwPT09ZD9udWxsOmQpfVxuZnVuY3Rpb24gamkoYSxiLGMsZCl7dmFyIGU9VWgoKTtkPXZvaWQgMD09PWQ/bnVsbDpkO3ZhciBmPXZvaWQgMDtpZihudWxsIT09Uil7dmFyIGc9Ui5tZW1vaXplZFN0YXRlO2Y9Zy5kZXN0cm95O2lmKG51bGwhPT1kJiZNaChkLGcuZGVwcykpe2UubWVtb2l6ZWRTdGF0ZT1iaShiLGMsZixkKTtyZXR1cm59fVEuZmxhZ3N8PWE7ZS5tZW1vaXplZFN0YXRlPWJpKDF8YixjLGYsZCl9ZnVuY3Rpb24ga2koYSxiKXtyZXR1cm4gaWkoODM5MDY1Niw4LGEsYil9ZnVuY3Rpb24gJGgoYSxiKXtyZXR1cm4gamkoMjA0OCw4LGEsYil9ZnVuY3Rpb24gbGkoYSxiKXtyZXR1cm4gamkoNCwyLGEsYil9ZnVuY3Rpb24gbWkoYSxiKXtyZXR1cm4gamkoNCw0LGEsYil9XG5mdW5jdGlvbiBuaShhLGIpe2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBiKXJldHVybiBhPWEoKSxiKGEpLGZ1bmN0aW9uKCl7YihudWxsKX07aWYobnVsbCE9PWImJnZvaWQgMCE9PWIpcmV0dXJuIGE9YSgpLGIuY3VycmVudD1hLGZ1bmN0aW9uKCl7Yi5jdXJyZW50PW51bGx9fWZ1bmN0aW9uIG9pKGEsYixjKXtjPW51bGwhPT1jJiZ2b2lkIDAhPT1jP2MuY29uY2F0KFthXSk6bnVsbDtyZXR1cm4gamkoNCw0LG5pLmJpbmQobnVsbCxiLGEpLGMpfWZ1bmN0aW9uIHBpKCl7fWZ1bmN0aW9uIHFpKGEsYil7dmFyIGM9VWgoKTtiPXZvaWQgMD09PWI/bnVsbDpiO3ZhciBkPWMubWVtb2l6ZWRTdGF0ZTtpZihudWxsIT09ZCYmbnVsbCE9PWImJk1oKGIsZFsxXSkpcmV0dXJuIGRbMF07Yy5tZW1vaXplZFN0YXRlPVthLGJdO3JldHVybiBhfVxuZnVuY3Rpb24gcmkoYSxiKXt2YXIgYz1VaCgpO2I9dm9pZCAwPT09Yj9udWxsOmI7dmFyIGQ9Yy5tZW1vaXplZFN0YXRlO2lmKG51bGwhPT1kJiZudWxsIT09YiYmTWgoYixkWzFdKSlyZXR1cm4gZFswXTthPWEoKTtjLm1lbW9pemVkU3RhdGU9W2EsYl07cmV0dXJuIGF9ZnVuY3Rpb24gc2koYSxiKXt2YXIgYz1FO0U9MCE9PWMmJjQ+Yz9jOjQ7YSghMCk7dmFyIGQ9R2gudHJhbnNpdGlvbjtHaC50cmFuc2l0aW9uPXt9O3RyeXthKCExKSxiKCl9ZmluYWxseXtFPWMsR2gudHJhbnNpdGlvbj1kfX1mdW5jdGlvbiB0aSgpe3JldHVybiBVaCgpLm1lbW9pemVkU3RhdGV9ZnVuY3Rpb24gdWkoYSxiLGMpe3ZhciBkPURnKGEpO2M9e2xhbmU6ZCxhY3Rpb246YyxoYXNFYWdlclN0YXRlOiExLGVhZ2VyU3RhdGU6bnVsbCxuZXh0Om51bGx9O3ZpKGEpP3dpKGIsYyk6KHhpKGEsYixjKSxjPU0oKSxhPUVnKGEsZCxjKSxudWxsIT09YSYmeWkoYSxiLGQpKX1cbmZ1bmN0aW9uIGdpKGEsYixjKXt2YXIgZD1EZyhhKSxlPXtsYW5lOmQsYWN0aW9uOmMsaGFzRWFnZXJTdGF0ZTohMSxlYWdlclN0YXRlOm51bGwsbmV4dDpudWxsfTtpZih2aShhKSl3aShiLGUpO2Vsc2V7eGkoYSxiLGUpO3ZhciBmPWEuYWx0ZXJuYXRlO2lmKDA9PT1hLmxhbmVzJiYobnVsbD09PWZ8fDA9PT1mLmxhbmVzKSYmKGY9Yi5sYXN0UmVuZGVyZWRSZWR1Y2VyLG51bGwhPT1mKSl0cnl7dmFyIGc9Yi5sYXN0UmVuZGVyZWRTdGF0ZSxoPWYoZyxjKTtlLmhhc0VhZ2VyU3RhdGU9ITA7ZS5lYWdlclN0YXRlPWg7aWYoQ2UoaCxnKSlyZXR1cm59Y2F0Y2goayl7fWZpbmFsbHl7fWM9TSgpO2E9RWcoYSxkLGMpO251bGwhPT1hJiZ5aShhLGIsZCl9fWZ1bmN0aW9uIHZpKGEpe3ZhciBiPWEuYWx0ZXJuYXRlO3JldHVybiBhPT09UXx8bnVsbCE9PWImJmI9PT1RfVxuZnVuY3Rpb24gd2koYSxiKXtKaD1JaD0hMDt2YXIgYz1hLnBlbmRpbmc7bnVsbD09PWM/Yi5uZXh0PWI6KGIubmV4dD1jLm5leHQsYy5uZXh0PWIpO2EucGVuZGluZz1ifWZ1bmN0aW9uIHhpKGEsYixjKXtudWxsIT09SiYmMCE9PShhLm1vZGUmMSkmJjA9PT0oSyYyKT8oYT1iLmludGVybGVhdmVkLG51bGw9PT1hPyhjLm5leHQ9YyxudWxsPT09cWc/cWc9W2JdOnFnLnB1c2goYikpOihjLm5leHQ9YS5uZXh0LGEubmV4dD1jKSxiLmludGVybGVhdmVkPWMpOihhPWIucGVuZGluZyxudWxsPT09YT9jLm5leHQ9YzooYy5uZXh0PWEubmV4dCxhLm5leHQ9YyksYi5wZW5kaW5nPWMpfWZ1bmN0aW9uIHlpKGEsYixjKXtpZigwIT09KGMmNDE5NDI0MCkpe3ZhciBkPWIubGFuZXM7ZCY9YS5wZW5kaW5nTGFuZXM7Y3w9ZDtiLmxhbmVzPWM7eWMoYSxjKX19XG52YXIgUmg9e3JlYWRDb250ZXh0OnBnLHVzZUNhbGxiYWNrOlUsdXNlQ29udGV4dDpVLHVzZUVmZmVjdDpVLHVzZUltcGVyYXRpdmVIYW5kbGU6VSx1c2VJbnNlcnRpb25FZmZlY3Q6VSx1c2VMYXlvdXRFZmZlY3Q6VSx1c2VNZW1vOlUsdXNlUmVkdWNlcjpVLHVzZVJlZjpVLHVzZVN0YXRlOlUsdXNlRGVidWdWYWx1ZTpVLHVzZURlZmVycmVkVmFsdWU6VSx1c2VUcmFuc2l0aW9uOlUsdXNlTXV0YWJsZVNvdXJjZTpVLHVzZVN5bmNFeHRlcm5hbFN0b3JlOlUsdXNlSWQ6VSx1bnN0YWJsZV9pc05ld1JlY29uY2lsZXI6ITF9LE9oPXtyZWFkQ29udGV4dDpwZyx1c2VDYWxsYmFjazpmdW5jdGlvbihhLGIpe1RoKCkubWVtb2l6ZWRTdGF0ZT1bYSx2b2lkIDA9PT1iP251bGw6Yl07cmV0dXJuIGF9LHVzZUNvbnRleHQ6cGcsdXNlRWZmZWN0OmtpLHVzZUltcGVyYXRpdmVIYW5kbGU6ZnVuY3Rpb24oYSxiLGMpe2M9bnVsbCE9PWMmJnZvaWQgMCE9PWM/Yy5jb25jYXQoW2FdKTpudWxsO3JldHVybiBpaSg0MTk0MzA4LFxuNCxuaS5iaW5kKG51bGwsYixhKSxjKX0sdXNlTGF5b3V0RWZmZWN0OmZ1bmN0aW9uKGEsYil7cmV0dXJuIGlpKDQxOTQzMDgsNCxhLGIpfSx1c2VJbnNlcnRpb25FZmZlY3Q6ZnVuY3Rpb24oYSxiKXtyZXR1cm4gaWkoNCwyLGEsYil9LHVzZU1lbW86ZnVuY3Rpb24oYSxiKXt2YXIgYz1UaCgpO2I9dm9pZCAwPT09Yj9udWxsOmI7YT1hKCk7Yy5tZW1vaXplZFN0YXRlPVthLGJdO3JldHVybiBhfSx1c2VSZWR1Y2VyOmZ1bmN0aW9uKGEsYixjKXt2YXIgZD1UaCgpO2I9dm9pZCAwIT09Yz9jKGIpOmI7ZC5tZW1vaXplZFN0YXRlPWQuYmFzZVN0YXRlPWI7YT17cGVuZGluZzpudWxsLGludGVybGVhdmVkOm51bGwsbGFuZXM6MCxkaXNwYXRjaDpudWxsLGxhc3RSZW5kZXJlZFJlZHVjZXI6YSxsYXN0UmVuZGVyZWRTdGF0ZTpifTtkLnF1ZXVlPWE7YT1hLmRpc3BhdGNoPXVpLmJpbmQobnVsbCxRLGEpO3JldHVybltkLm1lbW9pemVkU3RhdGUsYV19LHVzZVJlZjpmdW5jdGlvbihhKXt2YXIgYj1cblRoKCk7YT17Y3VycmVudDphfTtyZXR1cm4gYi5tZW1vaXplZFN0YXRlPWF9LHVzZVN0YXRlOmZpLHVzZURlYnVnVmFsdWU6cGksdXNlRGVmZXJyZWRWYWx1ZTpmdW5jdGlvbihhKXt2YXIgYj1maShhKSxjPWJbMF0sZD1iWzFdO2tpKGZ1bmN0aW9uKCl7dmFyIGI9R2gudHJhbnNpdGlvbjtHaC50cmFuc2l0aW9uPXt9O3RyeXtkKGEpfWZpbmFsbHl7R2gudHJhbnNpdGlvbj1ifX0sW2FdKTtyZXR1cm4gY30sdXNlVHJhbnNpdGlvbjpmdW5jdGlvbigpe3ZhciBhPWZpKCExKSxiPWFbMF07YT1zaS5iaW5kKG51bGwsYVsxXSk7VGgoKS5tZW1vaXplZFN0YXRlPWE7cmV0dXJuW2IsYV19LHVzZU11dGFibGVTb3VyY2U6ZnVuY3Rpb24oKXt9LHVzZVN5bmNFeHRlcm5hbFN0b3JlOmZ1bmN0aW9uKGEsYixjKXt2YXIgZD1RLGU9VGgoKTtpZihOKXtpZih2b2lkIDA9PT1jKXRocm93IEVycm9yKHAoNDA3KSk7Yz1jKCl9ZWxzZXtjPWIoKTtpZihudWxsPT09Sil0aHJvdyBFcnJvcihwKDM0OSkpO1xuMCE9PShIaCYzMCl8fGRpKGQsYixjKX1lLm1lbW9pemVkU3RhdGU9Yzt2YXIgZj17dmFsdWU6YyxnZXRTbmFwc2hvdDpifTtlLnF1ZXVlPWY7a2koYWkuYmluZChudWxsLGQsZixhKSxbYV0pO2QuZmxhZ3N8PTIwNDg7YmkoOSxjaS5iaW5kKG51bGwsZCxmLGMsYiksdm9pZCAwLG51bGwpO3JldHVybiBjfSx1c2VJZDpmdW5jdGlvbigpe3ZhciBhPVRoKCksYj1KLmlkZW50aWZpZXJQcmVmaXg7aWYoTil7dmFyIGM9U2c7dmFyIGQ9Umc7Yz0oZCZ+KDE8PDMyLWxjKGQpLTEpKS50b1N0cmluZygzMikrYztiPVwiOlwiK2IrXCJSXCIrYztjPUtoKys7MDxjJiYoYis9XCJIXCIrYy50b1N0cmluZygzMikpO2IrPVwiOlwifWVsc2UgYz1MaCsrLGI9XCI6XCIrYitcInJcIitjLnRvU3RyaW5nKDMyKStcIjpcIjtyZXR1cm4gYS5tZW1vaXplZFN0YXRlPWJ9LHVuc3RhYmxlX2lzTmV3UmVjb25jaWxlcjohMX0sUGg9e3JlYWRDb250ZXh0OnBnLHVzZUNhbGxiYWNrOnFpLHVzZUNvbnRleHQ6cGcsdXNlRWZmZWN0OiRoLHVzZUltcGVyYXRpdmVIYW5kbGU6b2ksXG51c2VJbnNlcnRpb25FZmZlY3Q6bGksdXNlTGF5b3V0RWZmZWN0Om1pLHVzZU1lbW86cmksdXNlUmVkdWNlcjpXaCx1c2VSZWY6aGksdXNlU3RhdGU6ZnVuY3Rpb24oKXtyZXR1cm4gV2goVmgpfSx1c2VEZWJ1Z1ZhbHVlOnBpLHVzZURlZmVycmVkVmFsdWU6ZnVuY3Rpb24oYSl7dmFyIGI9V2goVmgpLGM9YlswXSxkPWJbMV07JGgoZnVuY3Rpb24oKXt2YXIgYj1HaC50cmFuc2l0aW9uO0doLnRyYW5zaXRpb249e307dHJ5e2QoYSl9ZmluYWxseXtHaC50cmFuc2l0aW9uPWJ9fSxbYV0pO3JldHVybiBjfSx1c2VUcmFuc2l0aW9uOmZ1bmN0aW9uKCl7dmFyIGE9V2goVmgpWzBdLGI9VWgoKS5tZW1vaXplZFN0YXRlO3JldHVyblthLGJdfSx1c2VNdXRhYmxlU291cmNlOlloLHVzZVN5bmNFeHRlcm5hbFN0b3JlOlpoLHVzZUlkOnRpLHVuc3RhYmxlX2lzTmV3UmVjb25jaWxlcjohMX0sUWg9e3JlYWRDb250ZXh0OnBnLHVzZUNhbGxiYWNrOnFpLHVzZUNvbnRleHQ6cGcsdXNlRWZmZWN0OiRoLFxudXNlSW1wZXJhdGl2ZUhhbmRsZTpvaSx1c2VJbnNlcnRpb25FZmZlY3Q6bGksdXNlTGF5b3V0RWZmZWN0Om1pLHVzZU1lbW86cmksdXNlUmVkdWNlcjpYaCx1c2VSZWY6aGksdXNlU3RhdGU6ZnVuY3Rpb24oKXtyZXR1cm4gWGgoVmgpfSx1c2VEZWJ1Z1ZhbHVlOnBpLHVzZURlZmVycmVkVmFsdWU6ZnVuY3Rpb24oYSl7dmFyIGI9WGgoVmgpLGM9YlswXSxkPWJbMV07JGgoZnVuY3Rpb24oKXt2YXIgYj1HaC50cmFuc2l0aW9uO0doLnRyYW5zaXRpb249e307dHJ5e2QoYSl9ZmluYWxseXtHaC50cmFuc2l0aW9uPWJ9fSxbYV0pO3JldHVybiBjfSx1c2VUcmFuc2l0aW9uOmZ1bmN0aW9uKCl7dmFyIGE9WGgoVmgpWzBdLGI9VWgoKS5tZW1vaXplZFN0YXRlO3JldHVyblthLGJdfSx1c2VNdXRhYmxlU291cmNlOlloLHVzZVN5bmNFeHRlcm5hbFN0b3JlOlpoLHVzZUlkOnRpLHVuc3RhYmxlX2lzTmV3UmVjb25jaWxlcjohMX07XG5mdW5jdGlvbiB6aShhLGIpe3RyeXt2YXIgYz1cIlwiLGQ9YjtkbyBjKz1OYShkKSxkPWQucmV0dXJuO3doaWxlKGQpO3ZhciBlPWN9Y2F0Y2goZil7ZT1cIlxcbkVycm9yIGdlbmVyYXRpbmcgc3RhY2s6IFwiK2YubWVzc2FnZStcIlxcblwiK2Yuc3RhY2t9cmV0dXJue3ZhbHVlOmEsc291cmNlOmIsc3RhY2s6ZX19ZnVuY3Rpb24gQWkoYSxiKXt0cnl7Y29uc29sZS5lcnJvcihiLnZhbHVlKX1jYXRjaChjKXtzZXRUaW1lb3V0KGZ1bmN0aW9uKCl7dGhyb3cgYzt9KX19dmFyIEJpPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBXZWFrTWFwP1dlYWtNYXA6TWFwO2Z1bmN0aW9uIENpKGEsYixjKXtjPXVnKC0xLGMpO2MudGFnPTM7Yy5wYXlsb2FkPXtlbGVtZW50Om51bGx9O3ZhciBkPWIudmFsdWU7Yy5jYWxsYmFjaz1mdW5jdGlvbigpe0RpfHwoRGk9ITAsRWk9ZCk7QWkoYSxiKX07cmV0dXJuIGN9XG5mdW5jdGlvbiBGaShhLGIsYyl7Yz11ZygtMSxjKTtjLnRhZz0zO3ZhciBkPWEudHlwZS5nZXREZXJpdmVkU3RhdGVGcm9tRXJyb3I7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGQpe3ZhciBlPWIudmFsdWU7Yy5wYXlsb2FkPWZ1bmN0aW9uKCl7cmV0dXJuIGQoZSl9O2MuY2FsbGJhY2s9ZnVuY3Rpb24oKXtBaShhLGIpfX12YXIgZj1hLnN0YXRlTm9kZTtudWxsIT09ZiYmXCJmdW5jdGlvblwiPT09dHlwZW9mIGYuY29tcG9uZW50RGlkQ2F0Y2gmJihjLmNhbGxiYWNrPWZ1bmN0aW9uKCl7QWkoYSxiKTtcImZ1bmN0aW9uXCIhPT10eXBlb2YgZCYmKG51bGw9PT1HaT9HaT1uZXcgU2V0KFt0aGlzXSk6R2kuYWRkKHRoaXMpKTt2YXIgYz1iLnN0YWNrO3RoaXMuY29tcG9uZW50RGlkQ2F0Y2goYi52YWx1ZSx7Y29tcG9uZW50U3RhY2s6bnVsbCE9PWM/YzpcIlwifSl9KTtyZXR1cm4gY31cbmZ1bmN0aW9uIEhpKGEsYixjKXt2YXIgZD1hLnBpbmdDYWNoZTtpZihudWxsPT09ZCl7ZD1hLnBpbmdDYWNoZT1uZXcgQmk7dmFyIGU9bmV3IFNldDtkLnNldChiLGUpfWVsc2UgZT1kLmdldChiKSx2b2lkIDA9PT1lJiYoZT1uZXcgU2V0LGQuc2V0KGIsZSkpO2UuaGFzKGMpfHwoZS5hZGQoYyksYT1JaS5iaW5kKG51bGwsYSxiLGMpLGIudGhlbihhLGEpKX1mdW5jdGlvbiBKaShhKXtkb3t2YXIgYjtpZihiPTEzPT09YS50YWcpYj1hLm1lbW9pemVkU3RhdGUsYj1udWxsIT09Yj9udWxsIT09Yi5kZWh5ZHJhdGVkPyEwOiExOiEwO2lmKGIpcmV0dXJuIGE7YT1hLnJldHVybn13aGlsZShudWxsIT09YSk7cmV0dXJuIG51bGx9XG5mdW5jdGlvbiBLaShhLGIsYyxkLGUpe2lmKDA9PT0oYS5tb2RlJjEpKXJldHVybiBhPT09Yj9hLmZsYWdzfD02NTUzNjooYS5mbGFnc3w9MTI4LGMuZmxhZ3N8PTEzMTA3MixjLmZsYWdzJj0tNTI4MDUsMT09PWMudGFnJiYobnVsbD09PWMuYWx0ZXJuYXRlP2MudGFnPTE3OihiPXVnKC0xLDEpLGIudGFnPTIsdmcoYyxiKSkpLGMubGFuZXN8PTEpLGE7YS5mbGFnc3w9NjU1MzY7YS5sYW5lcz1lO3JldHVybiBhfXZhciBMaSxNaSxOaSxPaTtcbkxpPWZ1bmN0aW9uKGEsYil7Zm9yKHZhciBjPWIuY2hpbGQ7bnVsbCE9PWM7KXtpZig1PT09Yy50YWd8fDY9PT1jLnRhZylhLmFwcGVuZENoaWxkKGMuc3RhdGVOb2RlKTtlbHNlIGlmKDQhPT1jLnRhZyYmbnVsbCE9PWMuY2hpbGQpe2MuY2hpbGQucmV0dXJuPWM7Yz1jLmNoaWxkO2NvbnRpbnVlfWlmKGM9PT1iKWJyZWFrO2Zvcig7bnVsbD09PWMuc2libGluZzspe2lmKG51bGw9PT1jLnJldHVybnx8Yy5yZXR1cm49PT1iKXJldHVybjtjPWMucmV0dXJufWMuc2libGluZy5yZXR1cm49Yy5yZXR1cm47Yz1jLnNpYmxpbmd9fTtNaT1mdW5jdGlvbigpe307XG5OaT1mdW5jdGlvbihhLGIsYyxkKXt2YXIgZT1hLm1lbW9pemVkUHJvcHM7aWYoZSE9PWQpe2E9Yi5zdGF0ZU5vZGU7eGgodWguY3VycmVudCk7dmFyIGY9bnVsbDtzd2l0Y2goYyl7Y2FzZSBcImlucHV0XCI6ZT1XYShhLGUpO2Q9V2EoYSxkKTtmPVtdO2JyZWFrO2Nhc2UgXCJzZWxlY3RcIjplPUEoe30sZSx7dmFsdWU6dm9pZCAwfSk7ZD1BKHt9LGQse3ZhbHVlOnZvaWQgMH0pO2Y9W107YnJlYWs7Y2FzZSBcInRleHRhcmVhXCI6ZT1kYihhLGUpO2Q9ZGIoYSxkKTtmPVtdO2JyZWFrO2RlZmF1bHQ6XCJmdW5jdGlvblwiIT09dHlwZW9mIGUub25DbGljayYmXCJmdW5jdGlvblwiPT09dHlwZW9mIGQub25DbGljayYmKGEub25jbGljaz13Zil9cmIoYyxkKTt2YXIgZztjPW51bGw7Zm9yKGwgaW4gZSlpZighZC5oYXNPd25Qcm9wZXJ0eShsKSYmZS5oYXNPd25Qcm9wZXJ0eShsKSYmbnVsbCE9ZVtsXSlpZihcInN0eWxlXCI9PT1sKXt2YXIgaD1lW2xdO2ZvcihnIGluIGgpaC5oYXNPd25Qcm9wZXJ0eShnKSYmXG4oY3x8KGM9e30pLGNbZ109XCJcIil9ZWxzZVwiZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUxcIiE9PWwmJlwiY2hpbGRyZW5cIiE9PWwmJlwic3VwcHJlc3NDb250ZW50RWRpdGFibGVXYXJuaW5nXCIhPT1sJiZcInN1cHByZXNzSHlkcmF0aW9uV2FybmluZ1wiIT09bCYmXCJhdXRvRm9jdXNcIiE9PWwmJihkYS5oYXNPd25Qcm9wZXJ0eShsKT9mfHwoZj1bXSk6KGY9Znx8W10pLnB1c2gobCxudWxsKSk7Zm9yKGwgaW4gZCl7dmFyIGs9ZFtsXTtoPW51bGwhPWU/ZVtsXTp2b2lkIDA7aWYoZC5oYXNPd25Qcm9wZXJ0eShsKSYmayE9PWgmJihudWxsIT1rfHxudWxsIT1oKSlpZihcInN0eWxlXCI9PT1sKWlmKGgpe2ZvcihnIGluIGgpIWguaGFzT3duUHJvcGVydHkoZyl8fGsmJmsuaGFzT3duUHJvcGVydHkoZyl8fChjfHwoYz17fSksY1tnXT1cIlwiKTtmb3IoZyBpbiBrKWsuaGFzT3duUHJvcGVydHkoZykmJmhbZ10hPT1rW2ddJiYoY3x8KGM9e30pLGNbZ109a1tnXSl9ZWxzZSBjfHwoZnx8KGY9W10pLGYucHVzaChsLFxuYykpLGM9aztlbHNlXCJkYW5nZXJvdXNseVNldElubmVySFRNTFwiPT09bD8oaz1rP2suX19odG1sOnZvaWQgMCxoPWg/aC5fX2h0bWw6dm9pZCAwLG51bGwhPWsmJmghPT1rJiYoZj1mfHxbXSkucHVzaChsLGspKTpcImNoaWxkcmVuXCI9PT1sP1wic3RyaW5nXCIhPT10eXBlb2YgayYmXCJudW1iZXJcIiE9PXR5cGVvZiBrfHwoZj1mfHxbXSkucHVzaChsLFwiXCIrayk6XCJzdXBwcmVzc0NvbnRlbnRFZGl0YWJsZVdhcm5pbmdcIiE9PWwmJlwic3VwcHJlc3NIeWRyYXRpb25XYXJuaW5nXCIhPT1sJiYoZGEuaGFzT3duUHJvcGVydHkobCk/KG51bGwhPWsmJlwib25TY3JvbGxcIj09PWwmJkYoXCJzY3JvbGxcIixhKSxmfHxoPT09a3x8KGY9W10pKTooZj1mfHxbXSkucHVzaChsLGspKX1jJiYoZj1mfHxbXSkucHVzaChcInN0eWxlXCIsYyk7dmFyIGw9ZjtpZihiLnVwZGF0ZVF1ZXVlPWwpYi5mbGFnc3w9NH19O09pPWZ1bmN0aW9uKGEsYixjLGQpe2MhPT1kJiYoYi5mbGFnc3w9NCl9O1xuZnVuY3Rpb24gUGkoYSxiKXtpZighTilzd2l0Y2goYS50YWlsTW9kZSl7Y2FzZSBcImhpZGRlblwiOmI9YS50YWlsO2Zvcih2YXIgYz1udWxsO251bGwhPT1iOyludWxsIT09Yi5hbHRlcm5hdGUmJihjPWIpLGI9Yi5zaWJsaW5nO251bGw9PT1jP2EudGFpbD1udWxsOmMuc2libGluZz1udWxsO2JyZWFrO2Nhc2UgXCJjb2xsYXBzZWRcIjpjPWEudGFpbDtmb3IodmFyIGQ9bnVsbDtudWxsIT09YzspbnVsbCE9PWMuYWx0ZXJuYXRlJiYoZD1jKSxjPWMuc2libGluZztudWxsPT09ZD9ifHxudWxsPT09YS50YWlsP2EudGFpbD1udWxsOmEudGFpbC5zaWJsaW5nPW51bGw6ZC5zaWJsaW5nPW51bGx9fVxuZnVuY3Rpb24gVihhKXt2YXIgYj1udWxsIT09YS5hbHRlcm5hdGUmJmEuYWx0ZXJuYXRlLmNoaWxkPT09YS5jaGlsZCxjPTAsZD0wO2lmKGIpZm9yKHZhciBlPWEuY2hpbGQ7bnVsbCE9PWU7KWN8PWUubGFuZXN8ZS5jaGlsZExhbmVzLGR8PWUuc3VidHJlZUZsYWdzJjE0NjgwMDY0LGR8PWUuZmxhZ3MmMTQ2ODAwNjQsZS5yZXR1cm49YSxlPWUuc2libGluZztlbHNlIGZvcihlPWEuY2hpbGQ7bnVsbCE9PWU7KWN8PWUubGFuZXN8ZS5jaGlsZExhbmVzLGR8PWUuc3VidHJlZUZsYWdzLGR8PWUuZmxhZ3MsZS5yZXR1cm49YSxlPWUuc2libGluZzthLnN1YnRyZWVGbGFnc3w9ZDthLmNoaWxkTGFuZXM9YztyZXR1cm4gYn1cbmZ1bmN0aW9uIFFpKGEsYixjKXt2YXIgZD1iLnBlbmRpbmdQcm9wcztXZyhiKTtzd2l0Y2goYi50YWcpe2Nhc2UgMjpjYXNlIDE2OmNhc2UgMTU6Y2FzZSAwOmNhc2UgMTE6Y2FzZSA3OmNhc2UgODpjYXNlIDEyOmNhc2UgOTpjYXNlIDE0OnJldHVybiBWKGIpLG51bGw7Y2FzZSAxOnJldHVybiBUZihiLnR5cGUpJiZVZigpLFYoYiksbnVsbDtjYXNlIDM6ZD1iLnN0YXRlTm9kZTt6aCgpO0coUWYpO0coSSk7RWgoKTtkLnBlbmRpbmdDb250ZXh0JiYoZC5jb250ZXh0PWQucGVuZGluZ0NvbnRleHQsZC5wZW5kaW5nQ29udGV4dD1udWxsKTtpZihudWxsPT09YXx8bnVsbD09PWEuY2hpbGQpZmgoYik/Yi5mbGFnc3w9NDpudWxsPT09YXx8YS5tZW1vaXplZFN0YXRlLmlzRGVoeWRyYXRlZCYmMD09PShiLmZsYWdzJjI1Nil8fChiLmZsYWdzfD0xMDI0LG51bGwhPT1aZyYmKFJpKFpnKSxaZz1udWxsKSk7TWkoYSxiKTtWKGIpO3JldHVybiBudWxsO2Nhc2UgNTpCaChiKTt2YXIgZT14aCh3aC5jdXJyZW50KTtcbmM9Yi50eXBlO2lmKG51bGwhPT1hJiZudWxsIT1iLnN0YXRlTm9kZSlOaShhLGIsYyxkLGUpLGEucmVmIT09Yi5yZWYmJihiLmZsYWdzfD01MTIsYi5mbGFnc3w9MjA5NzE1Mik7ZWxzZXtpZighZCl7aWYobnVsbD09PWIuc3RhdGVOb2RlKXRocm93IEVycm9yKHAoMTY2KSk7VihiKTtyZXR1cm4gbnVsbH1hPXhoKHVoLmN1cnJlbnQpO2lmKGZoKGIpKXtkPWIuc3RhdGVOb2RlO2M9Yi50eXBlO3ZhciBmPWIubWVtb2l6ZWRQcm9wcztkW0lmXT1iO2RbSmZdPWY7YT0wIT09KGIubW9kZSYxKTtzd2l0Y2goYyl7Y2FzZSBcImRpYWxvZ1wiOkYoXCJjYW5jZWxcIixkKTtGKFwiY2xvc2VcIixkKTticmVhaztjYXNlIFwiaWZyYW1lXCI6Y2FzZSBcIm9iamVjdFwiOmNhc2UgXCJlbWJlZFwiOkYoXCJsb2FkXCIsZCk7YnJlYWs7Y2FzZSBcInZpZGVvXCI6Y2FzZSBcImF1ZGlvXCI6Zm9yKGU9MDtlPGZmLmxlbmd0aDtlKyspRihmZltlXSxkKTticmVhaztjYXNlIFwic291cmNlXCI6RihcImVycm9yXCIsZCk7YnJlYWs7Y2FzZSBcImltZ1wiOmNhc2UgXCJpbWFnZVwiOmNhc2UgXCJsaW5rXCI6RihcImVycm9yXCIsXG5kKTtGKFwibG9hZFwiLGQpO2JyZWFrO2Nhc2UgXCJkZXRhaWxzXCI6RihcInRvZ2dsZVwiLGQpO2JyZWFrO2Nhc2UgXCJpbnB1dFwiOlhhKGQsZik7RihcImludmFsaWRcIixkKTticmVhaztjYXNlIFwic2VsZWN0XCI6ZC5fd3JhcHBlclN0YXRlPXt3YXNNdWx0aXBsZTohIWYubXVsdGlwbGV9O0YoXCJpbnZhbGlkXCIsZCk7YnJlYWs7Y2FzZSBcInRleHRhcmVhXCI6ZWIoZCxmKSxGKFwiaW52YWxpZFwiLGQpfXJiKGMsZik7ZT1udWxsO2Zvcih2YXIgZyBpbiBmKWlmKGYuaGFzT3duUHJvcGVydHkoZykpe3ZhciBoPWZbZ107XCJjaGlsZHJlblwiPT09Zz9cInN0cmluZ1wiPT09dHlwZW9mIGg/ZC50ZXh0Q29udGVudCE9PWgmJih2ZihkLnRleHRDb250ZW50LGgsYSksZT1bXCJjaGlsZHJlblwiLGhdKTpcIm51bWJlclwiPT09dHlwZW9mIGgmJmQudGV4dENvbnRlbnQhPT1cIlwiK2gmJih2ZihkLnRleHRDb250ZW50LGgsYSksZT1bXCJjaGlsZHJlblwiLFwiXCIraF0pOmRhLmhhc093blByb3BlcnR5KGcpJiZudWxsIT1oJiZcIm9uU2Nyb2xsXCI9PT1cbmcmJkYoXCJzY3JvbGxcIixkKX1zd2l0Y2goYyl7Y2FzZSBcImlucHV0XCI6VGEoZCk7YWIoZCxmLCEwKTticmVhaztjYXNlIFwidGV4dGFyZWFcIjpUYShkKTtnYihkKTticmVhaztjYXNlIFwic2VsZWN0XCI6Y2FzZSBcIm9wdGlvblwiOmJyZWFrO2RlZmF1bHQ6XCJmdW5jdGlvblwiPT09dHlwZW9mIGYub25DbGljayYmKGQub25jbGljaz13Zil9ZD1lO2IudXBkYXRlUXVldWU9ZDtudWxsIT09ZCYmKGIuZmxhZ3N8PTQpfWVsc2V7Zz05PT09ZS5ub2RlVHlwZT9lOmUub3duZXJEb2N1bWVudDtcImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGh0bWxcIj09PWEmJihhPWhiKGMpKTtcImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGh0bWxcIj09PWE/XCJzY3JpcHRcIj09PWM/KGE9Zy5jcmVhdGVFbGVtZW50KFwiZGl2XCIpLGEuaW5uZXJIVE1MPVwiPHNjcmlwdD5cXHgzYy9zY3JpcHQ+XCIsYT1hLnJlbW92ZUNoaWxkKGEuZmlyc3RDaGlsZCkpOlwic3RyaW5nXCI9PT10eXBlb2YgZC5pcz9hPWcuY3JlYXRlRWxlbWVudChjLHtpczpkLmlzfSk6XG4oYT1nLmNyZWF0ZUVsZW1lbnQoYyksXCJzZWxlY3RcIj09PWMmJihnPWEsZC5tdWx0aXBsZT9nLm11bHRpcGxlPSEwOmQuc2l6ZSYmKGcuc2l6ZT1kLnNpemUpKSk6YT1nLmNyZWF0ZUVsZW1lbnROUyhhLGMpO2FbSWZdPWI7YVtKZl09ZDtMaShhLGIsITEsITEpO2Iuc3RhdGVOb2RlPWE7YTp7Zz1zYihjLGQpO3N3aXRjaChjKXtjYXNlIFwiZGlhbG9nXCI6RihcImNhbmNlbFwiLGEpO0YoXCJjbG9zZVwiLGEpO2U9ZDticmVhaztjYXNlIFwiaWZyYW1lXCI6Y2FzZSBcIm9iamVjdFwiOmNhc2UgXCJlbWJlZFwiOkYoXCJsb2FkXCIsYSk7ZT1kO2JyZWFrO2Nhc2UgXCJ2aWRlb1wiOmNhc2UgXCJhdWRpb1wiOmZvcihlPTA7ZTxmZi5sZW5ndGg7ZSsrKUYoZmZbZV0sYSk7ZT1kO2JyZWFrO2Nhc2UgXCJzb3VyY2VcIjpGKFwiZXJyb3JcIixhKTtlPWQ7YnJlYWs7Y2FzZSBcImltZ1wiOmNhc2UgXCJpbWFnZVwiOmNhc2UgXCJsaW5rXCI6RihcImVycm9yXCIsYSk7RihcImxvYWRcIixhKTtlPWQ7YnJlYWs7Y2FzZSBcImRldGFpbHNcIjpGKFwidG9nZ2xlXCIsXG5hKTtlPWQ7YnJlYWs7Y2FzZSBcImlucHV0XCI6WGEoYSxkKTtlPVdhKGEsZCk7RihcImludmFsaWRcIixhKTticmVhaztjYXNlIFwib3B0aW9uXCI6ZT1kO2JyZWFrO2Nhc2UgXCJzZWxlY3RcIjphLl93cmFwcGVyU3RhdGU9e3dhc011bHRpcGxlOiEhZC5tdWx0aXBsZX07ZT1BKHt9LGQse3ZhbHVlOnZvaWQgMH0pO0YoXCJpbnZhbGlkXCIsYSk7YnJlYWs7Y2FzZSBcInRleHRhcmVhXCI6ZWIoYSxkKTtlPWRiKGEsZCk7RihcImludmFsaWRcIixhKTticmVhaztkZWZhdWx0OmU9ZH1yYihjLGUpO2g9ZTtmb3IoZiBpbiBoKWlmKGguaGFzT3duUHJvcGVydHkoZikpe3ZhciBrPWhbZl07XCJzdHlsZVwiPT09Zj9wYihhLGspOlwiZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUxcIj09PWY/KGs9az9rLl9faHRtbDp2b2lkIDAsbnVsbCE9ayYma2IoYSxrKSk6XCJjaGlsZHJlblwiPT09Zj9cInN0cmluZ1wiPT09dHlwZW9mIGs/KFwidGV4dGFyZWFcIiE9PWN8fFwiXCIhPT1rKSYmbGIoYSxrKTpcIm51bWJlclwiPT09dHlwZW9mIGsmJmxiKGEsXG5cIlwiK2spOlwic3VwcHJlc3NDb250ZW50RWRpdGFibGVXYXJuaW5nXCIhPT1mJiZcInN1cHByZXNzSHlkcmF0aW9uV2FybmluZ1wiIT09ZiYmXCJhdXRvRm9jdXNcIiE9PWYmJihkYS5oYXNPd25Qcm9wZXJ0eShmKT9udWxsIT1rJiZcIm9uU2Nyb2xsXCI9PT1mJiZGKFwic2Nyb2xsXCIsYSk6bnVsbCE9ayYmcmEoYSxmLGssZykpfXN3aXRjaChjKXtjYXNlIFwiaW5wdXRcIjpUYShhKTthYihhLGQsITEpO2JyZWFrO2Nhc2UgXCJ0ZXh0YXJlYVwiOlRhKGEpO2diKGEpO2JyZWFrO2Nhc2UgXCJvcHRpb25cIjpudWxsIT1kLnZhbHVlJiZhLnNldEF0dHJpYnV0ZShcInZhbHVlXCIsXCJcIitRYShkLnZhbHVlKSk7YnJlYWs7Y2FzZSBcInNlbGVjdFwiOmEubXVsdGlwbGU9ISFkLm11bHRpcGxlO2Y9ZC52YWx1ZTtudWxsIT1mP2NiKGEsISFkLm11bHRpcGxlLGYsITEpOm51bGwhPWQuZGVmYXVsdFZhbHVlJiZjYihhLCEhZC5tdWx0aXBsZSxkLmRlZmF1bHRWYWx1ZSwhMCk7YnJlYWs7ZGVmYXVsdDpcImZ1bmN0aW9uXCI9PT10eXBlb2YgZS5vbkNsaWNrJiZcbihhLm9uY2xpY2s9d2YpfXN3aXRjaChjKXtjYXNlIFwiYnV0dG9uXCI6Y2FzZSBcImlucHV0XCI6Y2FzZSBcInNlbGVjdFwiOmNhc2UgXCJ0ZXh0YXJlYVwiOmQ9ISFkLmF1dG9Gb2N1czticmVhayBhO2Nhc2UgXCJpbWdcIjpkPSEwO2JyZWFrIGE7ZGVmYXVsdDpkPSExfX1kJiYoYi5mbGFnc3w9NCl9bnVsbCE9PWIucmVmJiYoYi5mbGFnc3w9NTEyLGIuZmxhZ3N8PTIwOTcxNTIpfVYoYik7cmV0dXJuIG51bGw7Y2FzZSA2OmlmKGEmJm51bGwhPWIuc3RhdGVOb2RlKU9pKGEsYixhLm1lbW9pemVkUHJvcHMsZCk7ZWxzZXtpZihcInN0cmluZ1wiIT09dHlwZW9mIGQmJm51bGw9PT1iLnN0YXRlTm9kZSl0aHJvdyBFcnJvcihwKDE2NikpO2M9eGgod2guY3VycmVudCk7eGgodWguY3VycmVudCk7aWYoZmgoYikpe2Q9Yi5zdGF0ZU5vZGU7Yz1iLm1lbW9pemVkUHJvcHM7ZFtJZl09YjtpZihmPWQubm9kZVZhbHVlIT09YylpZihhPVhnLG51bGwhPT1hKXN3aXRjaChnPTAhPT0oYS5tb2RlJjEpLGEudGFnKXtjYXNlIDM6dmYoZC5ub2RlVmFsdWUsXG5jLGcpO2JyZWFrO2Nhc2UgNTohMCE9PWEubWVtb2l6ZWRQcm9wc1t2b2lkIDBdJiZ2ZihkLm5vZGVWYWx1ZSxjLGcpfWYmJihiLmZsYWdzfD00KX1lbHNlIGQ9KDk9PT1jLm5vZGVUeXBlP2M6Yy5vd25lckRvY3VtZW50KS5jcmVhdGVUZXh0Tm9kZShkKSxkW0lmXT1iLGIuc3RhdGVOb2RlPWR9VihiKTtyZXR1cm4gbnVsbDtjYXNlIDEzOkcoUCk7ZD1iLm1lbW9pemVkU3RhdGU7aWYoTiYmbnVsbCE9PVlnJiYwIT09KGIubW9kZSYxKSYmMD09PShiLmZsYWdzJjEyOCkpe2ZvcihkPVlnO2Q7KWQ9RmYoZC5uZXh0U2libGluZyk7Z2goKTtiLmZsYWdzfD05ODU2MDtyZXR1cm4gYn1pZihudWxsIT09ZCYmbnVsbCE9PWQuZGVoeWRyYXRlZCl7ZD1maChiKTtpZihudWxsPT09YSl7aWYoIWQpdGhyb3cgRXJyb3IocCgzMTgpKTtkPWIubWVtb2l6ZWRTdGF0ZTtkPW51bGwhPT1kP2QuZGVoeWRyYXRlZDpudWxsO2lmKCFkKXRocm93IEVycm9yKHAoMzE3KSk7ZFtJZl09Yn1lbHNlIGdoKCksMD09PVxuKGIuZmxhZ3MmMTI4KSYmKGIubWVtb2l6ZWRTdGF0ZT1udWxsKSxiLmZsYWdzfD00O1YoYik7cmV0dXJuIG51bGx9bnVsbCE9PVpnJiYoUmkoWmcpLFpnPW51bGwpO2lmKDAhPT0oYi5mbGFncyYxMjgpKXJldHVybiBiLmxhbmVzPWMsYjtkPW51bGwhPT1kO2M9ITE7bnVsbD09PWE/ZmgoYik6Yz1udWxsIT09YS5tZW1vaXplZFN0YXRlO2QmJiFjJiYoYi5jaGlsZC5mbGFnc3w9ODE5MiwwIT09KGIubW9kZSYxKSYmKG51bGw9PT1hfHwwIT09KFAuY3VycmVudCYxKT8wPT09VyYmKFc9Myk6U2koKSkpO251bGwhPT1iLnVwZGF0ZVF1ZXVlJiYoYi5mbGFnc3w9NCk7VihiKTtyZXR1cm4gbnVsbDtjYXNlIDQ6cmV0dXJuIHpoKCksTWkoYSxiKSxudWxsPT09YSYmbmYoYi5zdGF0ZU5vZGUuY29udGFpbmVySW5mbyksVihiKSxudWxsO2Nhc2UgMTA6cmV0dXJuIGxnKGIudHlwZS5fY29udGV4dCksVihiKSxudWxsO2Nhc2UgMTc6cmV0dXJuIFRmKGIudHlwZSkmJlVmKCksVihiKSxudWxsO2Nhc2UgMTk6RyhQKTtcbmY9Yi5tZW1vaXplZFN0YXRlO2lmKG51bGw9PT1mKXJldHVybiBWKGIpLG51bGw7ZD0wIT09KGIuZmxhZ3MmMTI4KTtnPWYucmVuZGVyaW5nO2lmKG51bGw9PT1nKWlmKGQpUGkoZiwhMSk7ZWxzZXtpZigwIT09V3x8bnVsbCE9PWEmJjAhPT0oYS5mbGFncyYxMjgpKWZvcihhPWIuY2hpbGQ7bnVsbCE9PWE7KXtnPUNoKGEpO2lmKG51bGwhPT1nKXtiLmZsYWdzfD0xMjg7UGkoZiwhMSk7ZD1nLnVwZGF0ZVF1ZXVlO251bGwhPT1kJiYoYi51cGRhdGVRdWV1ZT1kLGIuZmxhZ3N8PTQpO2Iuc3VidHJlZUZsYWdzPTA7ZD1jO2ZvcihjPWIuY2hpbGQ7bnVsbCE9PWM7KWY9YyxhPWQsZi5mbGFncyY9MTQ2ODAwNjYsZz1mLmFsdGVybmF0ZSxudWxsPT09Zz8oZi5jaGlsZExhbmVzPTAsZi5sYW5lcz1hLGYuY2hpbGQ9bnVsbCxmLnN1YnRyZWVGbGFncz0wLGYubWVtb2l6ZWRQcm9wcz1udWxsLGYubWVtb2l6ZWRTdGF0ZT1udWxsLGYudXBkYXRlUXVldWU9bnVsbCxmLmRlcGVuZGVuY2llcz1udWxsLFxuZi5zdGF0ZU5vZGU9bnVsbCk6KGYuY2hpbGRMYW5lcz1nLmNoaWxkTGFuZXMsZi5sYW5lcz1nLmxhbmVzLGYuY2hpbGQ9Zy5jaGlsZCxmLnN1YnRyZWVGbGFncz0wLGYuZGVsZXRpb25zPW51bGwsZi5tZW1vaXplZFByb3BzPWcubWVtb2l6ZWRQcm9wcyxmLm1lbW9pemVkU3RhdGU9Zy5tZW1vaXplZFN0YXRlLGYudXBkYXRlUXVldWU9Zy51cGRhdGVRdWV1ZSxmLnR5cGU9Zy50eXBlLGE9Zy5kZXBlbmRlbmNpZXMsZi5kZXBlbmRlbmNpZXM9bnVsbD09PWE/bnVsbDp7bGFuZXM6YS5sYW5lcyxmaXJzdENvbnRleHQ6YS5maXJzdENvbnRleHR9KSxjPWMuc2libGluZztIKFAsUC5jdXJyZW50JjF8Mik7cmV0dXJuIGIuY2hpbGR9YT1hLnNpYmxpbmd9bnVsbCE9PWYudGFpbCYmRCgpPlRpJiYoYi5mbGFnc3w9MTI4LGQ9ITAsUGkoZiwhMSksYi5sYW5lcz00MTk0MzA0KX1lbHNle2lmKCFkKWlmKGE9Q2goZyksbnVsbCE9PWEpe2lmKGIuZmxhZ3N8PTEyOCxkPSEwLGM9YS51cGRhdGVRdWV1ZSxcbm51bGwhPT1jJiYoYi51cGRhdGVRdWV1ZT1jLGIuZmxhZ3N8PTQpLFBpKGYsITApLG51bGw9PT1mLnRhaWwmJlwiaGlkZGVuXCI9PT1mLnRhaWxNb2RlJiYhZy5hbHRlcm5hdGUmJiFOKXJldHVybiBWKGIpLG51bGx9ZWxzZSAyKkQoKS1mLnJlbmRlcmluZ1N0YXJ0VGltZT5UaSYmMTA3Mzc0MTgyNCE9PWMmJihiLmZsYWdzfD0xMjgsZD0hMCxQaShmLCExKSxiLmxhbmVzPTQxOTQzMDQpO2YuaXNCYWNrd2FyZHM/KGcuc2libGluZz1iLmNoaWxkLGIuY2hpbGQ9Zyk6KGM9Zi5sYXN0LG51bGwhPT1jP2Muc2libGluZz1nOmIuY2hpbGQ9ZyxmLmxhc3Q9Zyl9aWYobnVsbCE9PWYudGFpbClyZXR1cm4gYj1mLnRhaWwsZi5yZW5kZXJpbmc9YixmLnRhaWw9Yi5zaWJsaW5nLGYucmVuZGVyaW5nU3RhcnRUaW1lPUQoKSxiLnNpYmxpbmc9bnVsbCxjPVAuY3VycmVudCxIKFAsZD9jJjF8MjpjJjEpLGI7VihiKTtyZXR1cm4gbnVsbDtjYXNlIDIyOmNhc2UgMjM6cmV0dXJuIFVpKCksZD1udWxsIT09XG5iLm1lbW9pemVkU3RhdGUsbnVsbCE9PWEmJm51bGwhPT1hLm1lbW9pemVkU3RhdGUhPT1kJiYoYi5mbGFnc3w9ODE5MiksZCYmMCE9PShiLm1vZGUmMSk/MCE9PShWaSYxMDczNzQxODI0KSYmKFYoYiksYi5zdWJ0cmVlRmxhZ3MmNiYmKGIuZmxhZ3N8PTgxOTIpKTpWKGIpLG51bGw7Y2FzZSAyNDpyZXR1cm4gbnVsbDtjYXNlIDI1OnJldHVybiBudWxsfXRocm93IEVycm9yKHAoMTU2LGIudGFnKSk7fXZhciBXaT1zYS5SZWFjdEN1cnJlbnRPd25lcixvZz0hMTtmdW5jdGlvbiBYaShhLGIsYyxkKXtiLmNoaWxkPW51bGw9PT1hP3NoKGIsbnVsbCxjLGQpOnJoKGIsYS5jaGlsZCxjLGQpfVxuZnVuY3Rpb24gWWkoYSxiLGMsZCxlKXtjPWMucmVuZGVyO3ZhciBmPWIucmVmO25nKGIsZSk7ZD1OaChhLGIsYyxkLGYsZSk7Yz1TaCgpO2lmKG51bGwhPT1hJiYhb2cpcmV0dXJuIGIudXBkYXRlUXVldWU9YS51cGRhdGVRdWV1ZSxiLmZsYWdzJj0tMjA1MyxhLmxhbmVzJj1+ZSxaaShhLGIsZSk7TiYmYyYmVmcoYik7Yi5mbGFnc3w9MTtYaShhLGIsZCxlKTtyZXR1cm4gYi5jaGlsZH1cbmZ1bmN0aW9uICRpKGEsYixjLGQsZSl7aWYobnVsbD09PWEpe3ZhciBmPWMudHlwZTtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgZiYmIWFqKGYpJiZ2b2lkIDA9PT1mLmRlZmF1bHRQcm9wcyYmbnVsbD09PWMuY29tcGFyZSYmdm9pZCAwPT09Yy5kZWZhdWx0UHJvcHMpcmV0dXJuIGIudGFnPTE1LGIudHlwZT1mLGJqKGEsYixmLGQsZSk7YT1vaChjLnR5cGUsbnVsbCxkLGIsYi5tb2RlLGUpO2EucmVmPWIucmVmO2EucmV0dXJuPWI7cmV0dXJuIGIuY2hpbGQ9YX1mPWEuY2hpbGQ7aWYoMD09PShhLmxhbmVzJmUpKXt2YXIgZz1mLm1lbW9pemVkUHJvcHM7Yz1jLmNvbXBhcmU7Yz1udWxsIT09Yz9jOkRlO2lmKGMoZyxkKSYmYS5yZWY9PT1iLnJlZilyZXR1cm4gWmkoYSxiLGUpfWIuZmxhZ3N8PTE7YT1taChmLGQpO2EucmVmPWIucmVmO2EucmV0dXJuPWI7cmV0dXJuIGIuY2hpbGQ9YX1cbmZ1bmN0aW9uIGJqKGEsYixjLGQsZSl7aWYobnVsbCE9PWEmJkRlKGEubWVtb2l6ZWRQcm9wcyxkKSYmYS5yZWY9PT1iLnJlZilpZihvZz0hMSwwIT09KGEubGFuZXMmZSkpMCE9PShhLmZsYWdzJjEzMTA3MikmJihvZz0hMCk7ZWxzZSByZXR1cm4gYi5sYW5lcz1hLmxhbmVzLFppKGEsYixlKTtyZXR1cm4gY2ooYSxiLGMsZCxlKX1cbmZ1bmN0aW9uIGRqKGEsYixjKXt2YXIgZD1iLnBlbmRpbmdQcm9wcyxlPWQuY2hpbGRyZW4sZj1udWxsIT09YT9hLm1lbW9pemVkU3RhdGU6bnVsbDtpZihcImhpZGRlblwiPT09ZC5tb2RlKWlmKDA9PT0oYi5tb2RlJjEpKWIubWVtb2l6ZWRTdGF0ZT17YmFzZUxhbmVzOjAsY2FjaGVQb29sOm51bGx9LEgoZWosVmkpLFZpfD1jO2Vsc2UgaWYoMCE9PShjJjEwNzM3NDE4MjQpKWIubWVtb2l6ZWRTdGF0ZT17YmFzZUxhbmVzOjAsY2FjaGVQb29sOm51bGx9LGQ9bnVsbCE9PWY/Zi5iYXNlTGFuZXM6YyxIKGVqLFZpKSxWaXw9ZDtlbHNlIHJldHVybiBhPW51bGwhPT1mP2YuYmFzZUxhbmVzfGM6YyxiLmxhbmVzPWIuY2hpbGRMYW5lcz0xMDczNzQxODI0LGIubWVtb2l6ZWRTdGF0ZT17YmFzZUxhbmVzOmEsY2FjaGVQb29sOm51bGx9LGIudXBkYXRlUXVldWU9bnVsbCxIKGVqLFZpKSxWaXw9YSxudWxsO2Vsc2UgbnVsbCE9PWY/KGQ9Zi5iYXNlTGFuZXN8YyxiLm1lbW9pemVkU3RhdGU9bnVsbCk6XG5kPWMsSChlaixWaSksVml8PWQ7WGkoYSxiLGUsYyk7cmV0dXJuIGIuY2hpbGR9ZnVuY3Rpb24gZmooYSxiKXt2YXIgYz1iLnJlZjtpZihudWxsPT09YSYmbnVsbCE9PWN8fG51bGwhPT1hJiZhLnJlZiE9PWMpYi5mbGFnc3w9NTEyLGIuZmxhZ3N8PTIwOTcxNTJ9ZnVuY3Rpb24gY2ooYSxiLGMsZCxlKXt2YXIgZj1UZihjKT9SZjpJLmN1cnJlbnQ7Zj1TZihiLGYpO25nKGIsZSk7Yz1OaChhLGIsYyxkLGYsZSk7ZD1TaCgpO2lmKG51bGwhPT1hJiYhb2cpcmV0dXJuIGIudXBkYXRlUXVldWU9YS51cGRhdGVRdWV1ZSxiLmZsYWdzJj0tMjA1MyxhLmxhbmVzJj1+ZSxaaShhLGIsZSk7TiYmZCYmVmcoYik7Yi5mbGFnc3w9MTtYaShhLGIsYyxlKTtyZXR1cm4gYi5jaGlsZH1cbmZ1bmN0aW9uIGdqKGEsYixjLGQsZSl7aWYoVGYoYykpe3ZhciBmPSEwO1hmKGIpfWVsc2UgZj0hMTtuZyhiLGUpO2lmKG51bGw9PT1iLnN0YXRlTm9kZSludWxsIT09YSYmKGEuYWx0ZXJuYXRlPW51bGwsYi5hbHRlcm5hdGU9bnVsbCxiLmZsYWdzfD0yKSxIZyhiLGMsZCksSmcoYixjLGQsZSksZD0hMDtlbHNlIGlmKG51bGw9PT1hKXt2YXIgZz1iLnN0YXRlTm9kZSxoPWIubWVtb2l6ZWRQcm9wcztnLnByb3BzPWg7dmFyIGs9Zy5jb250ZXh0LGw9Yy5jb250ZXh0VHlwZTtcIm9iamVjdFwiPT09dHlwZW9mIGwmJm51bGwhPT1sP2w9cGcobCk6KGw9VGYoYyk/UmY6SS5jdXJyZW50LGw9U2YoYixsKSk7dmFyIG09Yy5nZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMsdz1cImZ1bmN0aW9uXCI9PT10eXBlb2YgbXx8XCJmdW5jdGlvblwiPT09dHlwZW9mIGcuZ2V0U25hcHNob3RCZWZvcmVVcGRhdGU7d3x8XCJmdW5jdGlvblwiIT09dHlwZW9mIGcuVU5TQUZFX2NvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMmJlxuXCJmdW5jdGlvblwiIT09dHlwZW9mIGcuY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wc3x8KGghPT1kfHxrIT09bCkmJklnKGIsZyxkLGwpO3JnPSExO3ZhciB1PWIubWVtb2l6ZWRTdGF0ZTtnLnN0YXRlPXU7eWcoYixkLGcsZSk7az1iLm1lbW9pemVkU3RhdGU7aCE9PWR8fHUhPT1rfHxRZi5jdXJyZW50fHxyZz8oXCJmdW5jdGlvblwiPT09dHlwZW9mIG0mJihDZyhiLGMsbSxkKSxrPWIubWVtb2l6ZWRTdGF0ZSksKGg9cmd8fEdnKGIsYyxoLGQsdSxrLGwpKT8od3x8XCJmdW5jdGlvblwiIT09dHlwZW9mIGcuVU5TQUZFX2NvbXBvbmVudFdpbGxNb3VudCYmXCJmdW5jdGlvblwiIT09dHlwZW9mIGcuY29tcG9uZW50V2lsbE1vdW50fHwoXCJmdW5jdGlvblwiPT09dHlwZW9mIGcuY29tcG9uZW50V2lsbE1vdW50JiZnLmNvbXBvbmVudFdpbGxNb3VudCgpLFwiZnVuY3Rpb25cIj09PXR5cGVvZiBnLlVOU0FGRV9jb21wb25lbnRXaWxsTW91bnQmJmcuVU5TQUZFX2NvbXBvbmVudFdpbGxNb3VudCgpKSxcImZ1bmN0aW9uXCI9PT1cbnR5cGVvZiBnLmNvbXBvbmVudERpZE1vdW50JiYoYi5mbGFnc3w9NDE5NDMwOCkpOihcImZ1bmN0aW9uXCI9PT10eXBlb2YgZy5jb21wb25lbnREaWRNb3VudCYmKGIuZmxhZ3N8PTQxOTQzMDgpLGIubWVtb2l6ZWRQcm9wcz1kLGIubWVtb2l6ZWRTdGF0ZT1rKSxnLnByb3BzPWQsZy5zdGF0ZT1rLGcuY29udGV4dD1sLGQ9aCk6KFwiZnVuY3Rpb25cIj09PXR5cGVvZiBnLmNvbXBvbmVudERpZE1vdW50JiYoYi5mbGFnc3w9NDE5NDMwOCksZD0hMSl9ZWxzZXtnPWIuc3RhdGVOb2RlO3RnKGEsYik7aD1iLm1lbW9pemVkUHJvcHM7bD1iLnR5cGU9PT1iLmVsZW1lbnRUeXBlP2g6ZmcoYi50eXBlLGgpO2cucHJvcHM9bDt3PWIucGVuZGluZ1Byb3BzO3U9Zy5jb250ZXh0O2s9Yy5jb250ZXh0VHlwZTtcIm9iamVjdFwiPT09dHlwZW9mIGsmJm51bGwhPT1rP2s9cGcoayk6KGs9VGYoYyk/UmY6SS5jdXJyZW50LGs9U2YoYixrKSk7dmFyIHk9Yy5nZXREZXJpdmVkU3RhdGVGcm9tUHJvcHM7KG09XCJmdW5jdGlvblwiPT09XG50eXBlb2YgeXx8XCJmdW5jdGlvblwiPT09dHlwZW9mIGcuZ2V0U25hcHNob3RCZWZvcmVVcGRhdGUpfHxcImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5VTlNBRkVfY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyYmXCJmdW5jdGlvblwiIT09dHlwZW9mIGcuY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wc3x8KGghPT13fHx1IT09aykmJklnKGIsZyxkLGspO3JnPSExO3U9Yi5tZW1vaXplZFN0YXRlO2cuc3RhdGU9dTt5ZyhiLGQsZyxlKTt2YXIgbj1iLm1lbW9pemVkU3RhdGU7aCE9PXd8fHUhPT1ufHxRZi5jdXJyZW50fHxyZz8oXCJmdW5jdGlvblwiPT09dHlwZW9mIHkmJihDZyhiLGMseSxkKSxuPWIubWVtb2l6ZWRTdGF0ZSksKGw9cmd8fEdnKGIsYyxsLGQsdSxuLGspfHwhMSk/KG18fFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLlVOU0FGRV9jb21wb25lbnRXaWxsVXBkYXRlJiZcImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5jb21wb25lbnRXaWxsVXBkYXRlfHwoXCJmdW5jdGlvblwiPT09dHlwZW9mIGcuY29tcG9uZW50V2lsbFVwZGF0ZSYmXG5nLmNvbXBvbmVudFdpbGxVcGRhdGUoZCxuLGspLFwiZnVuY3Rpb25cIj09PXR5cGVvZiBnLlVOU0FGRV9jb21wb25lbnRXaWxsVXBkYXRlJiZnLlVOU0FGRV9jb21wb25lbnRXaWxsVXBkYXRlKGQsbixrKSksXCJmdW5jdGlvblwiPT09dHlwZW9mIGcuY29tcG9uZW50RGlkVXBkYXRlJiYoYi5mbGFnc3w9NCksXCJmdW5jdGlvblwiPT09dHlwZW9mIGcuZ2V0U25hcHNob3RCZWZvcmVVcGRhdGUmJihiLmZsYWdzfD0xMDI0KSk6KFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLmNvbXBvbmVudERpZFVwZGF0ZXx8aD09PWEubWVtb2l6ZWRQcm9wcyYmdT09PWEubWVtb2l6ZWRTdGF0ZXx8KGIuZmxhZ3N8PTQpLFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLmdldFNuYXBzaG90QmVmb3JlVXBkYXRlfHxoPT09YS5tZW1vaXplZFByb3BzJiZ1PT09YS5tZW1vaXplZFN0YXRlfHwoYi5mbGFnc3w9MTAyNCksYi5tZW1vaXplZFByb3BzPWQsYi5tZW1vaXplZFN0YXRlPW4pLGcucHJvcHM9ZCxnLnN0YXRlPW4sZy5jb250ZXh0PVxuayxkPWwpOihcImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5jb21wb25lbnREaWRVcGRhdGV8fGg9PT1hLm1lbW9pemVkUHJvcHMmJnU9PT1hLm1lbW9pemVkU3RhdGV8fChiLmZsYWdzfD00KSxcImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5nZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZXx8aD09PWEubWVtb2l6ZWRQcm9wcyYmdT09PWEubWVtb2l6ZWRTdGF0ZXx8KGIuZmxhZ3N8PTEwMjQpLGQ9ITEpfXJldHVybiBoaihhLGIsYyxkLGYsZSl9XG5mdW5jdGlvbiBoaihhLGIsYyxkLGUsZil7ZmooYSxiKTt2YXIgZz0wIT09KGIuZmxhZ3MmMTI4KTtpZighZCYmIWcpcmV0dXJuIGUmJllmKGIsYywhMSksWmkoYSxiLGYpO2Q9Yi5zdGF0ZU5vZGU7V2kuY3VycmVudD1iO3ZhciBoPWcmJlwiZnVuY3Rpb25cIiE9PXR5cGVvZiBjLmdldERlcml2ZWRTdGF0ZUZyb21FcnJvcj9udWxsOmQucmVuZGVyKCk7Yi5mbGFnc3w9MTtudWxsIT09YSYmZz8oYi5jaGlsZD1yaChiLGEuY2hpbGQsbnVsbCxmKSxiLmNoaWxkPXJoKGIsbnVsbCxoLGYpKTpYaShhLGIsaCxmKTtiLm1lbW9pemVkU3RhdGU9ZC5zdGF0ZTtlJiZZZihiLGMsITApO3JldHVybiBiLmNoaWxkfWZ1bmN0aW9uIGlqKGEpe3ZhciBiPWEuc3RhdGVOb2RlO2IucGVuZGluZ0NvbnRleHQ/VmYoYSxiLnBlbmRpbmdDb250ZXh0LGIucGVuZGluZ0NvbnRleHQhPT1iLmNvbnRleHQpOmIuY29udGV4dCYmVmYoYSxiLmNvbnRleHQsITEpO3loKGEsYi5jb250YWluZXJJbmZvKX1cbmZ1bmN0aW9uIGpqKGEsYixjLGQsZSl7Z2goKTtoaChlKTtiLmZsYWdzfD0yNTY7WGkoYSxiLGMsZCk7cmV0dXJuIGIuY2hpbGR9dmFyIGtqPXtkZWh5ZHJhdGVkOm51bGwsdHJlZUNvbnRleHQ6bnVsbCxyZXRyeUxhbmU6MH07ZnVuY3Rpb24gbGooYSl7cmV0dXJue2Jhc2VMYW5lczphLGNhY2hlUG9vbDpudWxsfX1cbmZ1bmN0aW9uIG1qKGEsYixjKXt2YXIgZD1iLnBlbmRpbmdQcm9wcyxlPVAuY3VycmVudCxmPSExLGc9MCE9PShiLmZsYWdzJjEyOCksaDsoaD1nKXx8KGg9bnVsbCE9PWEmJm51bGw9PT1hLm1lbW9pemVkU3RhdGU/ITE6MCE9PShlJjIpKTtpZihoKWY9ITAsYi5mbGFncyY9LTEyOTtlbHNlIGlmKG51bGw9PT1hfHxudWxsIT09YS5tZW1vaXplZFN0YXRlKWV8PTE7SChQLGUmMSk7aWYobnVsbD09PWEpe2RoKGIpO2E9Yi5tZW1vaXplZFN0YXRlO2lmKG51bGwhPT1hJiYoYT1hLmRlaHlkcmF0ZWQsbnVsbCE9PWEpKXJldHVybiAwPT09KGIubW9kZSYxKT9iLmxhbmVzPTE6XCIkIVwiPT09YS5kYXRhP2IubGFuZXM9ODpiLmxhbmVzPTEwNzM3NDE4MjQsbnVsbDtlPWQuY2hpbGRyZW47YT1kLmZhbGxiYWNrO3JldHVybiBmPyhkPWIubW9kZSxmPWIuY2hpbGQsZT17bW9kZTpcImhpZGRlblwiLGNoaWxkcmVuOmV9LDA9PT0oZCYxKSYmbnVsbCE9PWY/KGYuY2hpbGRMYW5lcz0wLGYucGVuZGluZ1Byb3BzPVxuZSk6Zj1uaihlLGQsMCxudWxsKSxhPXFoKGEsZCxjLG51bGwpLGYucmV0dXJuPWIsYS5yZXR1cm49YixmLnNpYmxpbmc9YSxiLmNoaWxkPWYsYi5jaGlsZC5tZW1vaXplZFN0YXRlPWxqKGMpLGIubWVtb2l6ZWRTdGF0ZT1raixhKTpvaihiLGUpfWU9YS5tZW1vaXplZFN0YXRlO2lmKG51bGwhPT1lKXtoPWUuZGVoeWRyYXRlZDtpZihudWxsIT09aCl7aWYoZyl7aWYoYi5mbGFncyYyNTYpcmV0dXJuIGIuZmxhZ3MmPS0yNTcscGooYSxiLGMsRXJyb3IocCg0MjIpKSk7aWYobnVsbCE9PWIubWVtb2l6ZWRTdGF0ZSlyZXR1cm4gYi5jaGlsZD1hLmNoaWxkLGIuZmxhZ3N8PTEyOCxudWxsO2Y9ZC5mYWxsYmFjaztlPWIubW9kZTtkPW5qKHttb2RlOlwidmlzaWJsZVwiLGNoaWxkcmVuOmQuY2hpbGRyZW59LGUsMCxudWxsKTtmPXFoKGYsZSxjLG51bGwpO2YuZmxhZ3N8PTI7ZC5yZXR1cm49YjtmLnJldHVybj1iO2Quc2libGluZz1mO2IuY2hpbGQ9ZDswIT09KGIubW9kZSYxKSYmcmgoYixhLmNoaWxkLFxubnVsbCxjKTtiLmNoaWxkLm1lbW9pemVkU3RhdGU9bGooYyk7Yi5tZW1vaXplZFN0YXRlPWtqO3JldHVybiBmfWlmKDA9PT0oYi5tb2RlJjEpKWI9cGooYSxiLGMsbnVsbCk7ZWxzZSBpZihcIiQhXCI9PT1oLmRhdGEpYj1waihhLGIsYyxFcnJvcihwKDQxOSkpKTtlbHNlIGlmKGQ9MCE9PShjJmEuY2hpbGRMYW5lcyksb2d8fGQpe2Q9SjtpZihudWxsIT09ZCl7c3dpdGNoKGMmLWMpe2Nhc2UgNDpmPTI7YnJlYWs7Y2FzZSAxNjpmPTg7YnJlYWs7Y2FzZSA2NDpjYXNlIDEyODpjYXNlIDI1NjpjYXNlIDUxMjpjYXNlIDEwMjQ6Y2FzZSAyMDQ4OmNhc2UgNDA5NjpjYXNlIDgxOTI6Y2FzZSAxNjM4NDpjYXNlIDMyNzY4OmNhc2UgNjU1MzY6Y2FzZSAxMzEwNzI6Y2FzZSAyNjIxNDQ6Y2FzZSA1MjQyODg6Y2FzZSAxMDQ4NTc2OmNhc2UgMjA5NzE1MjpjYXNlIDQxOTQzMDQ6Y2FzZSA4Mzg4NjA4OmNhc2UgMTY3NzcyMTY6Y2FzZSAzMzU1NDQzMjpjYXNlIDY3MTA4ODY0OmY9MzI7YnJlYWs7Y2FzZSA1MzY4NzA5MTI6Zj1cbjI2ODQzNTQ1NjticmVhaztkZWZhdWx0OmY9MH1kPTAhPT0oZiYoZC5zdXNwZW5kZWRMYW5lc3xjKSk/MDpmOzAhPT1kJiZkIT09ZS5yZXRyeUxhbmUmJihlLnJldHJ5TGFuZT1kLEVnKGEsZCwtMSkpfVNpKCk7Yj1waihhLGIsYyxFcnJvcihwKDQyMSkpKX1lbHNlXCIkP1wiPT09aC5kYXRhPyhiLmZsYWdzfD0xMjgsYi5jaGlsZD1hLmNoaWxkLGI9cWouYmluZChudWxsLGEpLGguX3JlYWN0UmV0cnk9YixiPW51bGwpOihjPWUudHJlZUNvbnRleHQsWWc9RmYoaC5uZXh0U2libGluZyksWGc9YixOPSEwLFpnPW51bGwsbnVsbCE9PWMmJihPZ1tQZysrXT1SZyxPZ1tQZysrXT1TZyxPZ1tQZysrXT1RZyxSZz1jLmlkLFNnPWMub3ZlcmZsb3csUWc9YiksYj1vaihiLGIucGVuZGluZ1Byb3BzLmNoaWxkcmVuKSxiLmZsYWdzfD00MDk2KTtyZXR1cm4gYn1pZihmKXJldHVybiBkPXJqKGEsYixkLmNoaWxkcmVuLGQuZmFsbGJhY2ssYyksZj1iLmNoaWxkLGU9YS5jaGlsZC5tZW1vaXplZFN0YXRlLFxuZi5tZW1vaXplZFN0YXRlPW51bGw9PT1lP2xqKGMpOntiYXNlTGFuZXM6ZS5iYXNlTGFuZXN8YyxjYWNoZVBvb2w6bnVsbH0sZi5jaGlsZExhbmVzPWEuY2hpbGRMYW5lcyZ+YyxiLm1lbW9pemVkU3RhdGU9a2osZDtjPXNqKGEsYixkLmNoaWxkcmVuLGMpO2IubWVtb2l6ZWRTdGF0ZT1udWxsO3JldHVybiBjfWlmKGYpcmV0dXJuIGQ9cmooYSxiLGQuY2hpbGRyZW4sZC5mYWxsYmFjayxjKSxmPWIuY2hpbGQsZT1hLmNoaWxkLm1lbW9pemVkU3RhdGUsZi5tZW1vaXplZFN0YXRlPW51bGw9PT1lP2xqKGMpOntiYXNlTGFuZXM6ZS5iYXNlTGFuZXN8YyxjYWNoZVBvb2w6bnVsbH0sZi5jaGlsZExhbmVzPWEuY2hpbGRMYW5lcyZ+YyxiLm1lbW9pemVkU3RhdGU9a2osZDtjPXNqKGEsYixkLmNoaWxkcmVuLGMpO2IubWVtb2l6ZWRTdGF0ZT1udWxsO3JldHVybiBjfVxuZnVuY3Rpb24gb2ooYSxiKXtiPW5qKHttb2RlOlwidmlzaWJsZVwiLGNoaWxkcmVuOmJ9LGEubW9kZSwwLG51bGwpO2IucmV0dXJuPWE7cmV0dXJuIGEuY2hpbGQ9Yn1mdW5jdGlvbiBzaihhLGIsYyxkKXt2YXIgZT1hLmNoaWxkO2E9ZS5zaWJsaW5nO2M9bWgoZSx7bW9kZTpcInZpc2libGVcIixjaGlsZHJlbjpjfSk7MD09PShiLm1vZGUmMSkmJihjLmxhbmVzPWQpO2MucmV0dXJuPWI7Yy5zaWJsaW5nPW51bGw7bnVsbCE9PWEmJihkPWIuZGVsZXRpb25zLG51bGw9PT1kPyhiLmRlbGV0aW9ucz1bYV0sYi5mbGFnc3w9MTYpOmQucHVzaChhKSk7cmV0dXJuIGIuY2hpbGQ9Y31cbmZ1bmN0aW9uIHJqKGEsYixjLGQsZSl7dmFyIGY9Yi5tb2RlO2E9YS5jaGlsZDt2YXIgZz1hLnNpYmxpbmcsaD17bW9kZTpcImhpZGRlblwiLGNoaWxkcmVuOmN9OzA9PT0oZiYxKSYmYi5jaGlsZCE9PWE/KGM9Yi5jaGlsZCxjLmNoaWxkTGFuZXM9MCxjLnBlbmRpbmdQcm9wcz1oLGIuZGVsZXRpb25zPW51bGwpOihjPW1oKGEsaCksYy5zdWJ0cmVlRmxhZ3M9YS5zdWJ0cmVlRmxhZ3MmMTQ2ODAwNjQpO251bGwhPT1nP2Q9bWgoZyxkKTooZD1xaChkLGYsZSxudWxsKSxkLmZsYWdzfD0yKTtkLnJldHVybj1iO2MucmV0dXJuPWI7Yy5zaWJsaW5nPWQ7Yi5jaGlsZD1jO3JldHVybiBkfWZ1bmN0aW9uIHBqKGEsYixjLGQpe251bGwhPT1kJiZoaChkKTtyaChiLGEuY2hpbGQsbnVsbCxjKTthPW9qKGIsYi5wZW5kaW5nUHJvcHMuY2hpbGRyZW4pO2EuZmxhZ3N8PTI7Yi5tZW1vaXplZFN0YXRlPW51bGw7cmV0dXJuIGF9XG5mdW5jdGlvbiB0aihhLGIsYyl7YS5sYW5lc3w9Yjt2YXIgZD1hLmFsdGVybmF0ZTtudWxsIT09ZCYmKGQubGFuZXN8PWIpO21nKGEucmV0dXJuLGIsYyl9ZnVuY3Rpb24gdWooYSxiLGMsZCxlKXt2YXIgZj1hLm1lbW9pemVkU3RhdGU7bnVsbD09PWY/YS5tZW1vaXplZFN0YXRlPXtpc0JhY2t3YXJkczpiLHJlbmRlcmluZzpudWxsLHJlbmRlcmluZ1N0YXJ0VGltZTowLGxhc3Q6ZCx0YWlsOmMsdGFpbE1vZGU6ZX06KGYuaXNCYWNrd2FyZHM9YixmLnJlbmRlcmluZz1udWxsLGYucmVuZGVyaW5nU3RhcnRUaW1lPTAsZi5sYXN0PWQsZi50YWlsPWMsZi50YWlsTW9kZT1lKX1cbmZ1bmN0aW9uIHZqKGEsYixjKXt2YXIgZD1iLnBlbmRpbmdQcm9wcyxlPWQucmV2ZWFsT3JkZXIsZj1kLnRhaWw7WGkoYSxiLGQuY2hpbGRyZW4sYyk7ZD1QLmN1cnJlbnQ7aWYoMCE9PShkJjIpKWQ9ZCYxfDIsYi5mbGFnc3w9MTI4O2Vsc2V7aWYobnVsbCE9PWEmJjAhPT0oYS5mbGFncyYxMjgpKWE6Zm9yKGE9Yi5jaGlsZDtudWxsIT09YTspe2lmKDEzPT09YS50YWcpbnVsbCE9PWEubWVtb2l6ZWRTdGF0ZSYmdGooYSxjLGIpO2Vsc2UgaWYoMTk9PT1hLnRhZyl0aihhLGMsYik7ZWxzZSBpZihudWxsIT09YS5jaGlsZCl7YS5jaGlsZC5yZXR1cm49YTthPWEuY2hpbGQ7Y29udGludWV9aWYoYT09PWIpYnJlYWsgYTtmb3IoO251bGw9PT1hLnNpYmxpbmc7KXtpZihudWxsPT09YS5yZXR1cm58fGEucmV0dXJuPT09YilicmVhayBhO2E9YS5yZXR1cm59YS5zaWJsaW5nLnJldHVybj1hLnJldHVybjthPWEuc2libGluZ31kJj0xfUgoUCxkKTtpZigwPT09KGIubW9kZSYxKSliLm1lbW9pemVkU3RhdGU9XG5udWxsO2Vsc2Ugc3dpdGNoKGUpe2Nhc2UgXCJmb3J3YXJkc1wiOmM9Yi5jaGlsZDtmb3IoZT1udWxsO251bGwhPT1jOylhPWMuYWx0ZXJuYXRlLG51bGwhPT1hJiZudWxsPT09Q2goYSkmJihlPWMpLGM9Yy5zaWJsaW5nO2M9ZTtudWxsPT09Yz8oZT1iLmNoaWxkLGIuY2hpbGQ9bnVsbCk6KGU9Yy5zaWJsaW5nLGMuc2libGluZz1udWxsKTt1aihiLCExLGUsYyxmKTticmVhaztjYXNlIFwiYmFja3dhcmRzXCI6Yz1udWxsO2U9Yi5jaGlsZDtmb3IoYi5jaGlsZD1udWxsO251bGwhPT1lOyl7YT1lLmFsdGVybmF0ZTtpZihudWxsIT09YSYmbnVsbD09PUNoKGEpKXtiLmNoaWxkPWU7YnJlYWt9YT1lLnNpYmxpbmc7ZS5zaWJsaW5nPWM7Yz1lO2U9YX11aihiLCEwLGMsbnVsbCxmKTticmVhaztjYXNlIFwidG9nZXRoZXJcIjp1aihiLCExLG51bGwsbnVsbCx2b2lkIDApO2JyZWFrO2RlZmF1bHQ6Yi5tZW1vaXplZFN0YXRlPW51bGx9cmV0dXJuIGIuY2hpbGR9XG5mdW5jdGlvbiBaaShhLGIsYyl7bnVsbCE9PWEmJihiLmRlcGVuZGVuY2llcz1hLmRlcGVuZGVuY2llcyk7emd8PWIubGFuZXM7aWYoMD09PShjJmIuY2hpbGRMYW5lcykpcmV0dXJuIG51bGw7aWYobnVsbCE9PWEmJmIuY2hpbGQhPT1hLmNoaWxkKXRocm93IEVycm9yKHAoMTUzKSk7aWYobnVsbCE9PWIuY2hpbGQpe2E9Yi5jaGlsZDtjPW1oKGEsYS5wZW5kaW5nUHJvcHMpO2IuY2hpbGQ9Yztmb3IoYy5yZXR1cm49YjtudWxsIT09YS5zaWJsaW5nOylhPWEuc2libGluZyxjPWMuc2libGluZz1taChhLGEucGVuZGluZ1Byb3BzKSxjLnJldHVybj1iO2Muc2libGluZz1udWxsfXJldHVybiBiLmNoaWxkfVxuZnVuY3Rpb24gd2ooYSxiLGMpe3N3aXRjaChiLnRhZyl7Y2FzZSAzOmlqKGIpO2doKCk7YnJlYWs7Y2FzZSA1OkFoKGIpO2JyZWFrO2Nhc2UgMTpUZihiLnR5cGUpJiZYZihiKTticmVhaztjYXNlIDQ6eWgoYixiLnN0YXRlTm9kZS5jb250YWluZXJJbmZvKTticmVhaztjYXNlIDEwOnZhciBkPWIudHlwZS5fY29udGV4dCxlPWIubWVtb2l6ZWRQcm9wcy52YWx1ZTtIKGdnLGQuX2N1cnJlbnRWYWx1ZSk7ZC5fY3VycmVudFZhbHVlPWU7YnJlYWs7Y2FzZSAxMzpkPWIubWVtb2l6ZWRTdGF0ZTtpZihudWxsIT09ZCl7aWYobnVsbCE9PWQuZGVoeWRyYXRlZClyZXR1cm4gSChQLFAuY3VycmVudCYxKSxiLmZsYWdzfD0xMjgsbnVsbDtpZigwIT09KGMmYi5jaGlsZC5jaGlsZExhbmVzKSlyZXR1cm4gbWooYSxiLGMpO0goUCxQLmN1cnJlbnQmMSk7YT1aaShhLGIsYyk7cmV0dXJuIG51bGwhPT1hP2Euc2libGluZzpudWxsfUgoUCxQLmN1cnJlbnQmMSk7YnJlYWs7Y2FzZSAxOTpkPTAhPT0oYyZcbmIuY2hpbGRMYW5lcyk7aWYoMCE9PShhLmZsYWdzJjEyOCkpe2lmKGQpcmV0dXJuIHZqKGEsYixjKTtiLmZsYWdzfD0xMjh9ZT1iLm1lbW9pemVkU3RhdGU7bnVsbCE9PWUmJihlLnJlbmRlcmluZz1udWxsLGUudGFpbD1udWxsLGUubGFzdEVmZmVjdD1udWxsKTtIKFAsUC5jdXJyZW50KTtpZihkKWJyZWFrO2Vsc2UgcmV0dXJuIG51bGw7Y2FzZSAyMjpjYXNlIDIzOnJldHVybiBiLmxhbmVzPTAsZGooYSxiLGMpfXJldHVybiBaaShhLGIsYyl9XG5mdW5jdGlvbiB4aihhLGIpe1dnKGIpO3N3aXRjaChiLnRhZyl7Y2FzZSAxOnJldHVybiBUZihiLnR5cGUpJiZVZigpLGE9Yi5mbGFncyxhJjY1NTM2PyhiLmZsYWdzPWEmLTY1NTM3fDEyOCxiKTpudWxsO2Nhc2UgMzpyZXR1cm4gemgoKSxHKFFmKSxHKEkpLEVoKCksYT1iLmZsYWdzLDAhPT0oYSY2NTUzNikmJjA9PT0oYSYxMjgpPyhiLmZsYWdzPWEmLTY1NTM3fDEyOCxiKTpudWxsO2Nhc2UgNTpyZXR1cm4gQmgoYiksbnVsbDtjYXNlIDEzOkcoUCk7YT1iLm1lbW9pemVkU3RhdGU7aWYobnVsbCE9PWEmJm51bGwhPT1hLmRlaHlkcmF0ZWQpe2lmKG51bGw9PT1iLmFsdGVybmF0ZSl0aHJvdyBFcnJvcihwKDM0MCkpO2doKCl9YT1iLmZsYWdzO3JldHVybiBhJjY1NTM2PyhiLmZsYWdzPWEmLTY1NTM3fDEyOCxiKTpudWxsO2Nhc2UgMTk6cmV0dXJuIEcoUCksbnVsbDtjYXNlIDQ6cmV0dXJuIHpoKCksbnVsbDtjYXNlIDEwOnJldHVybiBsZyhiLnR5cGUuX2NvbnRleHQpLG51bGw7Y2FzZSAyMjpjYXNlIDIzOnJldHVybiBVaSgpLFxubnVsbDtjYXNlIDI0OnJldHVybiBudWxsO2RlZmF1bHQ6cmV0dXJuIG51bGx9fXZhciB5aj0hMSx6aj0hMSxBaj1cImZ1bmN0aW9uXCI9PT10eXBlb2YgV2Vha1NldD9XZWFrU2V0OlNldCxYPW51bGw7ZnVuY3Rpb24gQmooYSxiKXt2YXIgYz1hLnJlZjtpZihudWxsIT09YylpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgYyl0cnl7YyhudWxsKX1jYXRjaChkKXtDaihhLGIsZCl9ZWxzZSBjLmN1cnJlbnQ9bnVsbH1mdW5jdGlvbiBEaihhLGIsYyl7dHJ5e2MoKX1jYXRjaChkKXtDaihhLGIsZCl9fXZhciBFaj0hMTtcbmZ1bmN0aW9uIEZqKGEsYil7YT1IZSgpO2lmKEllKGEpKXtpZihcInNlbGVjdGlvblN0YXJ0XCJpbiBhKXZhciBjPXtzdGFydDphLnNlbGVjdGlvblN0YXJ0LGVuZDphLnNlbGVjdGlvbkVuZH07ZWxzZSBhOntjPShjPWEub3duZXJEb2N1bWVudCkmJmMuZGVmYXVsdFZpZXd8fHdpbmRvdzt2YXIgZD1jLmdldFNlbGVjdGlvbiYmYy5nZXRTZWxlY3Rpb24oKTtpZihkJiYwIT09ZC5yYW5nZUNvdW50KXtjPWQuYW5jaG9yTm9kZTt2YXIgZT1kLmFuY2hvck9mZnNldCxmPWQuZm9jdXNOb2RlO2Q9ZC5mb2N1c09mZnNldDt0cnl7Yy5ub2RlVHlwZSxmLm5vZGVUeXBlfWNhdGNoKE8pe2M9bnVsbDticmVhayBhfXZhciBnPTAsaD0tMSxrPS0xLGw9MCxtPTAsdz1hLHU9bnVsbDtiOmZvcig7Oyl7Zm9yKHZhciB5Ozspe3chPT1jfHwwIT09ZSYmMyE9PXcubm9kZVR5cGV8fChoPWcrZSk7dyE9PWZ8fDAhPT1kJiYzIT09dy5ub2RlVHlwZXx8KGs9ZytkKTszPT09dy5ub2RlVHlwZSYmKGcrPXcubm9kZVZhbHVlLmxlbmd0aCk7XG5pZihudWxsPT09KHk9dy5maXJzdENoaWxkKSlicmVhazt1PXc7dz15fWZvcig7Oyl7aWYodz09PWEpYnJlYWsgYjt1PT09YyYmKytsPT09ZSYmKGg9Zyk7dT09PWYmJisrbT09PWQmJihrPWcpO2lmKG51bGwhPT0oeT13Lm5leHRTaWJsaW5nKSlicmVhazt3PXU7dT13LnBhcmVudE5vZGV9dz15fWM9LTE9PT1ofHwtMT09PWs/bnVsbDp7c3RhcnQ6aCxlbmQ6a319ZWxzZSBjPW51bGx9Yz1jfHx7c3RhcnQ6MCxlbmQ6MH19ZWxzZSBjPW51bGw7eGY9e2ZvY3VzZWRFbGVtOmEsc2VsZWN0aW9uUmFuZ2U6Y307Zm9yKFg9YjtudWxsIT09WDspaWYoYj1YLGE9Yi5jaGlsZCwwIT09KGIuc3VidHJlZUZsYWdzJjEwMjgpJiZudWxsIT09YSlhLnJldHVybj1iLFg9YTtlbHNlIGZvcig7bnVsbCE9PVg7KXtiPVg7dHJ5e3ZhciBuPWIuYWx0ZXJuYXRlO2lmKDAhPT0oYi5mbGFncyYxMDI0KSlzd2l0Y2goYi50YWcpe2Nhc2UgMDpjYXNlIDExOmNhc2UgMTU6YnJlYWs7Y2FzZSAxOmlmKG51bGwhPT1cbm4pe3ZhciB2PW4ubWVtb2l6ZWRQcm9wcyxDPW4ubWVtb2l6ZWRTdGF0ZSx0PWIuc3RhdGVOb2RlLHI9dC5nZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZShiLmVsZW1lbnRUeXBlPT09Yi50eXBlP3Y6ZmcoYi50eXBlLHYpLEMpO3QuX19yZWFjdEludGVybmFsU25hcHNob3RCZWZvcmVVcGRhdGU9cn1icmVhaztjYXNlIDM6dmFyIHg9Yi5zdGF0ZU5vZGUuY29udGFpbmVySW5mbztpZigxPT09eC5ub2RlVHlwZSl4LnRleHRDb250ZW50PVwiXCI7ZWxzZSBpZig5PT09eC5ub2RlVHlwZSl7dmFyIEI9eC5ib2R5O251bGwhPUImJihCLnRleHRDb250ZW50PVwiXCIpfWJyZWFrO2Nhc2UgNTpjYXNlIDY6Y2FzZSA0OmNhc2UgMTc6YnJlYWs7ZGVmYXVsdDp0aHJvdyBFcnJvcihwKDE2MykpO319Y2F0Y2goTyl7Q2ooYixiLnJldHVybixPKX1hPWIuc2libGluZztpZihudWxsIT09YSl7YS5yZXR1cm49Yi5yZXR1cm47WD1hO2JyZWFrfVg9Yi5yZXR1cm59bj1FajtFaj0hMTtyZXR1cm4gbn1cbmZ1bmN0aW9uIEdqKGEsYixjKXt2YXIgZD1iLnVwZGF0ZVF1ZXVlO2Q9bnVsbCE9PWQ/ZC5sYXN0RWZmZWN0Om51bGw7aWYobnVsbCE9PWQpe3ZhciBlPWQ9ZC5uZXh0O2Rve2lmKChlLnRhZyZhKT09PWEpe3ZhciBmPWUuZGVzdHJveTtlLmRlc3Ryb3k9dm9pZCAwO3ZvaWQgMCE9PWYmJkRqKGIsYyxmKX1lPWUubmV4dH13aGlsZShlIT09ZCl9fWZ1bmN0aW9uIEhqKGEsYil7Yj1iLnVwZGF0ZVF1ZXVlO2I9bnVsbCE9PWI/Yi5sYXN0RWZmZWN0Om51bGw7aWYobnVsbCE9PWIpe3ZhciBjPWI9Yi5uZXh0O2Rve2lmKChjLnRhZyZhKT09PWEpe3ZhciBkPWMuY3JlYXRlO2MuZGVzdHJveT1kKCl9Yz1jLm5leHR9d2hpbGUoYyE9PWIpfX1mdW5jdGlvbiBJaihhKXt2YXIgYj1hLnJlZjtpZihudWxsIT09Yil7dmFyIGM9YS5zdGF0ZU5vZGU7c3dpdGNoKGEudGFnKXtjYXNlIDU6YT1jO2JyZWFrO2RlZmF1bHQ6YT1jfVwiZnVuY3Rpb25cIj09PXR5cGVvZiBiP2IoYSk6Yi5jdXJyZW50PWF9fVxuZnVuY3Rpb24gSmooYSxiLGMpe2lmKGljJiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgaWMub25Db21taXRGaWJlclVubW91bnQpdHJ5e2ljLm9uQ29tbWl0RmliZXJVbm1vdW50KGhjLGIpfWNhdGNoKGcpe31zd2l0Y2goYi50YWcpe2Nhc2UgMDpjYXNlIDExOmNhc2UgMTQ6Y2FzZSAxNTphPWIudXBkYXRlUXVldWU7aWYobnVsbCE9PWEmJihhPWEubGFzdEVmZmVjdCxudWxsIT09YSkpe3ZhciBkPWE9YS5uZXh0O2Rve3ZhciBlPWQsZj1lLmRlc3Ryb3k7ZT1lLnRhZzt2b2lkIDAhPT1mJiYoMCE9PShlJjIpP0RqKGIsYyxmKTowIT09KGUmNCkmJkRqKGIsYyxmKSk7ZD1kLm5leHR9d2hpbGUoZCE9PWEpfWJyZWFrO2Nhc2UgMTpCaihiLGMpO2E9Yi5zdGF0ZU5vZGU7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGEuY29tcG9uZW50V2lsbFVubW91bnQpdHJ5e2EucHJvcHM9Yi5tZW1vaXplZFByb3BzLGEuc3RhdGU9Yi5tZW1vaXplZFN0YXRlLGEuY29tcG9uZW50V2lsbFVubW91bnQoKX1jYXRjaChnKXtDaihiLFxuYyxnKX1icmVhaztjYXNlIDU6QmooYixjKTticmVhaztjYXNlIDQ6S2ooYSxiLGMpfX1mdW5jdGlvbiBMaihhKXt2YXIgYj1hLmFsdGVybmF0ZTtudWxsIT09YiYmKGEuYWx0ZXJuYXRlPW51bGwsTGooYikpO2EuY2hpbGQ9bnVsbDthLmRlbGV0aW9ucz1udWxsO2Euc2libGluZz1udWxsOzU9PT1hLnRhZyYmKGI9YS5zdGF0ZU5vZGUsbnVsbCE9PWImJihkZWxldGUgYltJZl0sZGVsZXRlIGJbSmZdLGRlbGV0ZSBiW2pmXSxkZWxldGUgYltLZl0sZGVsZXRlIGJbTGZdKSk7YS5zdGF0ZU5vZGU9bnVsbDthLnJldHVybj1udWxsO2EuZGVwZW5kZW5jaWVzPW51bGw7YS5tZW1vaXplZFByb3BzPW51bGw7YS5tZW1vaXplZFN0YXRlPW51bGw7YS5wZW5kaW5nUHJvcHM9bnVsbDthLnN0YXRlTm9kZT1udWxsO2EudXBkYXRlUXVldWU9bnVsbH1mdW5jdGlvbiBNaihhKXtyZXR1cm4gNT09PWEudGFnfHwzPT09YS50YWd8fDQ9PT1hLnRhZ31cbmZ1bmN0aW9uIE5qKGEpe2E6Zm9yKDs7KXtmb3IoO251bGw9PT1hLnNpYmxpbmc7KXtpZihudWxsPT09YS5yZXR1cm58fE1qKGEucmV0dXJuKSlyZXR1cm4gbnVsbDthPWEucmV0dXJufWEuc2libGluZy5yZXR1cm49YS5yZXR1cm47Zm9yKGE9YS5zaWJsaW5nOzUhPT1hLnRhZyYmNiE9PWEudGFnJiYxOCE9PWEudGFnOyl7aWYoYS5mbGFncyYyKWNvbnRpbnVlIGE7aWYobnVsbD09PWEuY2hpbGR8fDQ9PT1hLnRhZyljb250aW51ZSBhO2Vsc2UgYS5jaGlsZC5yZXR1cm49YSxhPWEuY2hpbGR9aWYoIShhLmZsYWdzJjIpKXJldHVybiBhLnN0YXRlTm9kZX19XG5mdW5jdGlvbiBPaihhKXthOntmb3IodmFyIGI9YS5yZXR1cm47bnVsbCE9PWI7KXtpZihNaihiKSlicmVhayBhO2I9Yi5yZXR1cm59dGhyb3cgRXJyb3IocCgxNjApKTt9dmFyIGM9Yjtzd2l0Y2goYy50YWcpe2Nhc2UgNTpiPWMuc3RhdGVOb2RlO2MuZmxhZ3MmMzImJihsYihiLFwiXCIpLGMuZmxhZ3MmPS0zMyk7Yz1OaihhKTtQaihhLGMsYik7YnJlYWs7Y2FzZSAzOmNhc2UgNDpiPWMuc3RhdGVOb2RlLmNvbnRhaW5lckluZm87Yz1OaihhKTtRaihhLGMsYik7YnJlYWs7ZGVmYXVsdDp0aHJvdyBFcnJvcihwKDE2MSkpO319XG5mdW5jdGlvbiBRaihhLGIsYyl7dmFyIGQ9YS50YWc7aWYoNT09PWR8fDY9PT1kKWE9YS5zdGF0ZU5vZGUsYj84PT09Yy5ub2RlVHlwZT9jLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKGEsYik6Yy5pbnNlcnRCZWZvcmUoYSxiKTooOD09PWMubm9kZVR5cGU/KGI9Yy5wYXJlbnROb2RlLGIuaW5zZXJ0QmVmb3JlKGEsYykpOihiPWMsYi5hcHBlbmRDaGlsZChhKSksYz1jLl9yZWFjdFJvb3RDb250YWluZXIsbnVsbCE9PWMmJnZvaWQgMCE9PWN8fG51bGwhPT1iLm9uY2xpY2t8fChiLm9uY2xpY2s9d2YpKTtlbHNlIGlmKDQhPT1kJiYoYT1hLmNoaWxkLG51bGwhPT1hKSlmb3IoUWooYSxiLGMpLGE9YS5zaWJsaW5nO251bGwhPT1hOylRaihhLGIsYyksYT1hLnNpYmxpbmd9XG5mdW5jdGlvbiBQaihhLGIsYyl7dmFyIGQ9YS50YWc7aWYoNT09PWR8fDY9PT1kKWE9YS5zdGF0ZU5vZGUsYj9jLmluc2VydEJlZm9yZShhLGIpOmMuYXBwZW5kQ2hpbGQoYSk7ZWxzZSBpZig0IT09ZCYmKGE9YS5jaGlsZCxudWxsIT09YSkpZm9yKFBqKGEsYixjKSxhPWEuc2libGluZztudWxsIT09YTspUGooYSxiLGMpLGE9YS5zaWJsaW5nfVxuZnVuY3Rpb24gS2ooYSxiLGMpe2Zvcih2YXIgZD1iLGU9ITEsZixnOzspe2lmKCFlKXtlPWQucmV0dXJuO2E6Zm9yKDs7KXtpZihudWxsPT09ZSl0aHJvdyBFcnJvcihwKDE2MCkpO2Y9ZS5zdGF0ZU5vZGU7c3dpdGNoKGUudGFnKXtjYXNlIDU6Zz0hMTticmVhayBhO2Nhc2UgMzpmPWYuY29udGFpbmVySW5mbztnPSEwO2JyZWFrIGE7Y2FzZSA0OmY9Zi5jb250YWluZXJJbmZvO2c9ITA7YnJlYWsgYX1lPWUucmV0dXJufWU9ITB9aWYoNT09PWQudGFnfHw2PT09ZC50YWcpe2E6Zm9yKHZhciBoPWEsaz1kLGw9YyxtPWs7OylpZihKaihoLG0sbCksbnVsbCE9PW0uY2hpbGQmJjQhPT1tLnRhZyltLmNoaWxkLnJldHVybj1tLG09bS5jaGlsZDtlbHNle2lmKG09PT1rKWJyZWFrIGE7Zm9yKDtudWxsPT09bS5zaWJsaW5nOyl7aWYobnVsbD09PW0ucmV0dXJufHxtLnJldHVybj09PWspYnJlYWsgYTttPW0ucmV0dXJufW0uc2libGluZy5yZXR1cm49bS5yZXR1cm47bT1tLnNpYmxpbmd9Zz8oaD1cbmYsaz1kLnN0YXRlTm9kZSw4PT09aC5ub2RlVHlwZT9oLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoayk6aC5yZW1vdmVDaGlsZChrKSk6Zi5yZW1vdmVDaGlsZChkLnN0YXRlTm9kZSl9ZWxzZSBpZigxOD09PWQudGFnKWc/KGg9ZixrPWQuc3RhdGVOb2RlLDg9PT1oLm5vZGVUeXBlP0VmKGgucGFyZW50Tm9kZSxrKToxPT09aC5ub2RlVHlwZSYmRWYoaCxrKSxZYyhoKSk6RWYoZixkLnN0YXRlTm9kZSk7ZWxzZSBpZig0PT09ZC50YWcpe2lmKG51bGwhPT1kLmNoaWxkKXtmPWQuc3RhdGVOb2RlLmNvbnRhaW5lckluZm87Zz0hMDtkLmNoaWxkLnJldHVybj1kO2Q9ZC5jaGlsZDtjb250aW51ZX19ZWxzZSBpZihKaihhLGQsYyksbnVsbCE9PWQuY2hpbGQpe2QuY2hpbGQucmV0dXJuPWQ7ZD1kLmNoaWxkO2NvbnRpbnVlfWlmKGQ9PT1iKWJyZWFrO2Zvcig7bnVsbD09PWQuc2libGluZzspe2lmKG51bGw9PT1kLnJldHVybnx8ZC5yZXR1cm49PT1iKXJldHVybjtkPWQucmV0dXJuOzQ9PT1kLnRhZyYmXG4oZT0hMSl9ZC5zaWJsaW5nLnJldHVybj1kLnJldHVybjtkPWQuc2libGluZ319XG5mdW5jdGlvbiBSaihhLGIpe3N3aXRjaChiLnRhZyl7Y2FzZSAwOmNhc2UgMTE6Y2FzZSAxNDpjYXNlIDE1OkdqKDMsYixiLnJldHVybik7SGooMyxiKTtHaig1LGIsYi5yZXR1cm4pO3JldHVybjtjYXNlIDE6cmV0dXJuO2Nhc2UgNTp2YXIgYz1iLnN0YXRlTm9kZTtpZihudWxsIT1jKXt2YXIgZD1iLm1lbW9pemVkUHJvcHMsZT1udWxsIT09YT9hLm1lbW9pemVkUHJvcHM6ZDthPWIudHlwZTt2YXIgZj1iLnVwZGF0ZVF1ZXVlO2IudXBkYXRlUXVldWU9bnVsbDtpZihudWxsIT09Zil7XCJpbnB1dFwiPT09YSYmXCJyYWRpb1wiPT09ZC50eXBlJiZudWxsIT1kLm5hbWUmJllhKGMsZCk7c2IoYSxlKTtiPXNiKGEsZCk7Zm9yKGU9MDtlPGYubGVuZ3RoO2UrPTIpe3ZhciBnPWZbZV0saD1mW2UrMV07XCJzdHlsZVwiPT09Zz9wYihjLGgpOlwiZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUxcIj09PWc/a2IoYyxoKTpcImNoaWxkcmVuXCI9PT1nP2xiKGMsaCk6cmEoYyxnLGgsYil9c3dpdGNoKGEpe2Nhc2UgXCJpbnB1dFwiOlphKGMsXG5kKTticmVhaztjYXNlIFwidGV4dGFyZWFcIjpmYihjLGQpO2JyZWFrO2Nhc2UgXCJzZWxlY3RcIjphPWMuX3dyYXBwZXJTdGF0ZS53YXNNdWx0aXBsZSxjLl93cmFwcGVyU3RhdGUud2FzTXVsdGlwbGU9ISFkLm11bHRpcGxlLGY9ZC52YWx1ZSxudWxsIT1mP2NiKGMsISFkLm11bHRpcGxlLGYsITEpOmEhPT0hIWQubXVsdGlwbGUmJihudWxsIT1kLmRlZmF1bHRWYWx1ZT9jYihjLCEhZC5tdWx0aXBsZSxkLmRlZmF1bHRWYWx1ZSwhMCk6Y2IoYywhIWQubXVsdGlwbGUsZC5tdWx0aXBsZT9bXTpcIlwiLCExKSl9Y1tKZl09ZH19cmV0dXJuO2Nhc2UgNjppZihudWxsPT09Yi5zdGF0ZU5vZGUpdGhyb3cgRXJyb3IocCgxNjIpKTtiLnN0YXRlTm9kZS5ub2RlVmFsdWU9Yi5tZW1vaXplZFByb3BzO3JldHVybjtjYXNlIDM6bnVsbCE9PWEmJmEubWVtb2l6ZWRTdGF0ZS5pc0RlaHlkcmF0ZWQmJlljKGIuc3RhdGVOb2RlLmNvbnRhaW5lckluZm8pO3JldHVybjtjYXNlIDEyOnJldHVybjtjYXNlIDEzOlNqKGIpO1xucmV0dXJuO2Nhc2UgMTk6U2ooYik7cmV0dXJuO2Nhc2UgMTc6cmV0dXJufXRocm93IEVycm9yKHAoMTYzKSk7fWZ1bmN0aW9uIFNqKGEpe3ZhciBiPWEudXBkYXRlUXVldWU7aWYobnVsbCE9PWIpe2EudXBkYXRlUXVldWU9bnVsbDt2YXIgYz1hLnN0YXRlTm9kZTtudWxsPT09YyYmKGM9YS5zdGF0ZU5vZGU9bmV3IEFqKTtiLmZvckVhY2goZnVuY3Rpb24oYil7dmFyIGQ9VGouYmluZChudWxsLGEsYik7Yy5oYXMoYil8fChjLmFkZChiKSxiLnRoZW4oZCxkKSl9KX19XG5mdW5jdGlvbiBVaihhLGIpe2ZvcihYPWI7bnVsbCE9PVg7KXtiPVg7dmFyIGM9Yi5kZWxldGlvbnM7aWYobnVsbCE9PWMpZm9yKHZhciBkPTA7ZDxjLmxlbmd0aDtkKyspe3ZhciBlPWNbZF07dHJ5e0tqKGEsZSxiKTt2YXIgZj1lLmFsdGVybmF0ZTtudWxsIT09ZiYmKGYucmV0dXJuPW51bGwpO2UucmV0dXJuPW51bGx9Y2F0Y2goTCl7Q2ooZSxiLEwpfX1jPWIuY2hpbGQ7aWYoMCE9PShiLnN1YnRyZWVGbGFncyYxMjg1NCkmJm51bGwhPT1jKWMucmV0dXJuPWIsWD1jO2Vsc2UgZm9yKDtudWxsIT09WDspe2I9WDt0cnl7dmFyIGc9Yi5mbGFncztnJjMyJiZsYihiLnN0YXRlTm9kZSxcIlwiKTtpZihnJjUxMil7dmFyIGg9Yi5hbHRlcm5hdGU7aWYobnVsbCE9PWgpe3ZhciBrPWgucmVmO251bGwhPT1rJiYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGs/ayhudWxsKTprLmN1cnJlbnQ9bnVsbCl9fWlmKGcmODE5Milzd2l0Y2goYi50YWcpe2Nhc2UgMTM6aWYobnVsbCE9PWIubWVtb2l6ZWRTdGF0ZSl7dmFyIGw9XG5iLmFsdGVybmF0ZTtpZihudWxsPT09bHx8bnVsbD09PWwubWVtb2l6ZWRTdGF0ZSlWaj1EKCl9YnJlYWs7Y2FzZSAyMjp2YXIgbT1udWxsIT09Yi5tZW1vaXplZFN0YXRlLHc9Yi5hbHRlcm5hdGUsdT1udWxsIT09dyYmbnVsbCE9PXcubWVtb2l6ZWRTdGF0ZTtjPWI7YTp7ZD1jO2U9bTtmb3IodmFyIHk9bnVsbCxuPWQ7Oyl7aWYoNT09PW4udGFnKXtpZihudWxsPT09eSl7eT1uO3ZhciB2PW4uc3RhdGVOb2RlO2lmKGUpe3ZhciBDPXYuc3R5bGU7XCJmdW5jdGlvblwiPT09dHlwZW9mIEMuc2V0UHJvcGVydHk/Qy5zZXRQcm9wZXJ0eShcImRpc3BsYXlcIixcIm5vbmVcIixcImltcG9ydGFudFwiKTpDLmRpc3BsYXk9XCJub25lXCJ9ZWxzZXt2YXIgdD1uLnN0YXRlTm9kZSxyPW4ubWVtb2l6ZWRQcm9wcy5zdHlsZSx4PXZvaWQgMCE9PXImJm51bGwhPT1yJiZyLmhhc093blByb3BlcnR5KFwiZGlzcGxheVwiKT9yLmRpc3BsYXk6bnVsbDt0LnN0eWxlLmRpc3BsYXk9b2IoXCJkaXNwbGF5XCIseCl9fX1lbHNlIGlmKDY9PT1cbm4udGFnKW51bGw9PT15JiYobi5zdGF0ZU5vZGUubm9kZVZhbHVlPWU/XCJcIjpuLm1lbW9pemVkUHJvcHMpO2Vsc2UgaWYoKDIyIT09bi50YWcmJjIzIT09bi50YWd8fG51bGw9PT1uLm1lbW9pemVkU3RhdGV8fG49PT1kKSYmbnVsbCE9PW4uY2hpbGQpe24uY2hpbGQucmV0dXJuPW47bj1uLmNoaWxkO2NvbnRpbnVlfWlmKG49PT1kKWJyZWFrO2Zvcig7bnVsbD09PW4uc2libGluZzspe2lmKG51bGw9PT1uLnJldHVybnx8bi5yZXR1cm49PT1kKWJyZWFrIGE7eT09PW4mJih5PW51bGwpO249bi5yZXR1cm59eT09PW4mJih5PW51bGwpO24uc2libGluZy5yZXR1cm49bi5yZXR1cm47bj1uLnNpYmxpbmd9fWlmKG0mJiF1JiYwIT09KGMubW9kZSYxKSl7WD1jO2Zvcih2YXIgQj1jLmNoaWxkO251bGwhPT1COyl7Zm9yKGM9WD1CO251bGwhPT1YOyl7ZD1YO3ZhciBPPWQuY2hpbGQ7c3dpdGNoKGQudGFnKXtjYXNlIDA6Y2FzZSAxMTpjYXNlIDE0OmNhc2UgMTU6R2ooNCxkLGQucmV0dXJuKTticmVhaztcbmNhc2UgMTpCaihkLGQucmV0dXJuKTt2YXIgVD1kLnN0YXRlTm9kZTtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgVC5jb21wb25lbnRXaWxsVW5tb3VudCl7dmFyIHphPWQucmV0dXJuO3RyeXtULnByb3BzPWQubWVtb2l6ZWRQcm9wcyxULnN0YXRlPWQubWVtb2l6ZWRTdGF0ZSxULmNvbXBvbmVudFdpbGxVbm1vdW50KCl9Y2F0Y2goTCl7Q2ooZCx6YSxMKX19YnJlYWs7Y2FzZSA1OkJqKGQsZC5yZXR1cm4pO2JyZWFrO2Nhc2UgMjI6aWYobnVsbCE9PWQubWVtb2l6ZWRTdGF0ZSl7V2ooYyk7Y29udGludWV9fW51bGwhPT1PPyhPLnJldHVybj1kLFg9Tyk6V2ooYyl9Qj1CLnNpYmxpbmd9fX1zd2l0Y2goZyY0MTAyKXtjYXNlIDI6T2ooYik7Yi5mbGFncyY9LTM7YnJlYWs7Y2FzZSA2Ok9qKGIpO2IuZmxhZ3MmPS0zO1JqKGIuYWx0ZXJuYXRlLGIpO2JyZWFrO2Nhc2UgNDA5NjpiLmZsYWdzJj0tNDA5NzticmVhaztjYXNlIDQxMDA6Yi5mbGFncyY9LTQwOTc7UmooYi5hbHRlcm5hdGUsYik7XG5icmVhaztjYXNlIDQ6UmooYi5hbHRlcm5hdGUsYil9fWNhdGNoKEwpe0NqKGIsYi5yZXR1cm4sTCl9Yz1iLnNpYmxpbmc7aWYobnVsbCE9PWMpe2MucmV0dXJuPWIucmV0dXJuO1g9YzticmVha31YPWIucmV0dXJufX19ZnVuY3Rpb24gWGooYSxiLGMpe1g9YTtZaihhLGIsYyl9XG5mdW5jdGlvbiBZaihhLGIsYyl7Zm9yKHZhciBkPTAhPT0oYS5tb2RlJjEpO251bGwhPT1YOyl7dmFyIGU9WCxmPWUuY2hpbGQ7aWYoMjI9PT1lLnRhZyYmZCl7dmFyIGc9bnVsbCE9PWUubWVtb2l6ZWRTdGF0ZXx8eWo7aWYoIWcpe3ZhciBoPWUuYWx0ZXJuYXRlLGs9bnVsbCE9PWgmJm51bGwhPT1oLm1lbW9pemVkU3RhdGV8fHpqO2g9eWo7dmFyIGw9emo7eWo9ZztpZigoemo9aykmJiFsKWZvcihYPWU7bnVsbCE9PVg7KWc9WCxrPWcuY2hpbGQsMjI9PT1nLnRhZyYmbnVsbCE9PWcubWVtb2l6ZWRTdGF0ZT9aaihlKTpudWxsIT09az8oay5yZXR1cm49ZyxYPWspOlpqKGUpO2Zvcig7bnVsbCE9PWY7KVg9ZixZaihmLGIsYyksZj1mLnNpYmxpbmc7WD1lO3lqPWg7emo9bH1hayhhLGIsYyl9ZWxzZSAwIT09KGUuc3VidHJlZUZsYWdzJjg3NzIpJiZudWxsIT09Zj8oZi5yZXR1cm49ZSxYPWYpOmFrKGEsYixjKX19XG5mdW5jdGlvbiBhayhhKXtmb3IoO251bGwhPT1YOyl7dmFyIGI9WDtpZigwIT09KGIuZmxhZ3MmODc3Mikpe3ZhciBjPWIuYWx0ZXJuYXRlO3RyeXtpZigwIT09KGIuZmxhZ3MmODc3Mikpc3dpdGNoKGIudGFnKXtjYXNlIDA6Y2FzZSAxMTpjYXNlIDE1OnpqfHxIaig1LGIpO2JyZWFrO2Nhc2UgMTp2YXIgZD1iLnN0YXRlTm9kZTtpZihiLmZsYWdzJjQmJiF6ailpZihudWxsPT09YylkLmNvbXBvbmVudERpZE1vdW50KCk7ZWxzZXt2YXIgZT1iLmVsZW1lbnRUeXBlPT09Yi50eXBlP2MubWVtb2l6ZWRQcm9wczpmZyhiLnR5cGUsYy5tZW1vaXplZFByb3BzKTtkLmNvbXBvbmVudERpZFVwZGF0ZShlLGMubWVtb2l6ZWRTdGF0ZSxkLl9fcmVhY3RJbnRlcm5hbFNuYXBzaG90QmVmb3JlVXBkYXRlKX12YXIgZj1iLnVwZGF0ZVF1ZXVlO251bGwhPT1mJiZBZyhiLGYsZCk7YnJlYWs7Y2FzZSAzOnZhciBnPWIudXBkYXRlUXVldWU7aWYobnVsbCE9PWcpe2M9bnVsbDtpZihudWxsIT09Yi5jaGlsZClzd2l0Y2goYi5jaGlsZC50YWcpe2Nhc2UgNTpjPVxuYi5jaGlsZC5zdGF0ZU5vZGU7YnJlYWs7Y2FzZSAxOmM9Yi5jaGlsZC5zdGF0ZU5vZGV9QWcoYixnLGMpfWJyZWFrO2Nhc2UgNTp2YXIgaD1iLnN0YXRlTm9kZTtpZihudWxsPT09YyYmYi5mbGFncyY0KXtjPWg7dmFyIGs9Yi5tZW1vaXplZFByb3BzO3N3aXRjaChiLnR5cGUpe2Nhc2UgXCJidXR0b25cIjpjYXNlIFwiaW5wdXRcIjpjYXNlIFwic2VsZWN0XCI6Y2FzZSBcInRleHRhcmVhXCI6ay5hdXRvRm9jdXMmJmMuZm9jdXMoKTticmVhaztjYXNlIFwiaW1nXCI6ay5zcmMmJihjLnNyYz1rLnNyYyl9fWJyZWFrO2Nhc2UgNjpicmVhaztjYXNlIDQ6YnJlYWs7Y2FzZSAxMjpicmVhaztjYXNlIDEzOmlmKG51bGw9PT1iLm1lbW9pemVkU3RhdGUpe3ZhciBsPWIuYWx0ZXJuYXRlO2lmKG51bGwhPT1sKXt2YXIgbT1sLm1lbW9pemVkU3RhdGU7aWYobnVsbCE9PW0pe3ZhciB3PW0uZGVoeWRyYXRlZDtudWxsIT09dyYmWWModyl9fX1icmVhaztjYXNlIDE5OmNhc2UgMTc6Y2FzZSAyMTpjYXNlIDIyOmNhc2UgMjM6YnJlYWs7XG5kZWZhdWx0OnRocm93IEVycm9yKHAoMTYzKSk7fXpqfHxiLmZsYWdzJjUxMiYmSWooYil9Y2F0Y2godSl7Q2ooYixiLnJldHVybix1KX19aWYoYj09PWEpe1g9bnVsbDticmVha31jPWIuc2libGluZztpZihudWxsIT09Yyl7Yy5yZXR1cm49Yi5yZXR1cm47WD1jO2JyZWFrfVg9Yi5yZXR1cm59fWZ1bmN0aW9uIFdqKGEpe2Zvcig7bnVsbCE9PVg7KXt2YXIgYj1YO2lmKGI9PT1hKXtYPW51bGw7YnJlYWt9dmFyIGM9Yi5zaWJsaW5nO2lmKG51bGwhPT1jKXtjLnJldHVybj1iLnJldHVybjtYPWM7YnJlYWt9WD1iLnJldHVybn19XG5mdW5jdGlvbiBaaihhKXtmb3IoO251bGwhPT1YOyl7dmFyIGI9WDt0cnl7c3dpdGNoKGIudGFnKXtjYXNlIDA6Y2FzZSAxMTpjYXNlIDE1OnZhciBjPWIucmV0dXJuO3RyeXtIaig0LGIpfWNhdGNoKGspe0NqKGIsYyxrKX1icmVhaztjYXNlIDE6dmFyIGQ9Yi5zdGF0ZU5vZGU7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGQuY29tcG9uZW50RGlkTW91bnQpe3ZhciBlPWIucmV0dXJuO3RyeXtkLmNvbXBvbmVudERpZE1vdW50KCl9Y2F0Y2goayl7Q2ooYixlLGspfX12YXIgZj1iLnJldHVybjt0cnl7SWooYil9Y2F0Y2goayl7Q2ooYixmLGspfWJyZWFrO2Nhc2UgNTp2YXIgZz1iLnJldHVybjt0cnl7SWooYil9Y2F0Y2goayl7Q2ooYixnLGspfX19Y2F0Y2goayl7Q2ooYixiLnJldHVybixrKX1pZihiPT09YSl7WD1udWxsO2JyZWFrfXZhciBoPWIuc2libGluZztpZihudWxsIT09aCl7aC5yZXR1cm49Yi5yZXR1cm47WD1oO2JyZWFrfVg9Yi5yZXR1cm59fVxudmFyIGJrPU1hdGguY2VpbCxjaz1zYS5SZWFjdEN1cnJlbnREaXNwYXRjaGVyLGRrPXNhLlJlYWN0Q3VycmVudE93bmVyLGVrPXNhLlJlYWN0Q3VycmVudEJhdGNoQ29uZmlnLEs9MCxKPW51bGwsWT1udWxsLFo9MCxWaT0wLGVqPU9mKDApLFc9MCxmaz1udWxsLHpnPTAsZ2s9MCxoaz0wLGlrPW51bGwsams9bnVsbCxWaj0wLFRpPUluZmluaXR5LERpPSExLEVpPW51bGwsR2k9bnVsbCxraz0hMSxsaz1udWxsLG1rPTAsbms9MCxvaz1udWxsLHBrPS0xLHFrPTA7ZnVuY3Rpb24gTSgpe3JldHVybiAwIT09KEsmNik/RCgpOi0xIT09cGs/cGs6cGs9RCgpfVxuZnVuY3Rpb24gRGcoYSl7aWYoMD09PShhLm1vZGUmMSkpcmV0dXJuIDE7aWYoMCE9PShLJjIpJiYwIT09WilyZXR1cm4gWiYtWjtpZihudWxsIT09ZWcudHJhbnNpdGlvbilyZXR1cm4gMD09PXFrJiYoYT1vYyxvYzw8PTEsMD09PShvYyY0MTk0MjQwKSYmKG9jPTY0KSxxaz1hKSxxazthPUU7aWYoMCE9PWEpcmV0dXJuIGE7YT13aW5kb3cuZXZlbnQ7YT12b2lkIDA9PT1hPzE2OmVkKGEudHlwZSk7cmV0dXJuIGF9ZnVuY3Rpb24gRWcoYSxiLGMpe2lmKDUwPG5rKXRocm93IG5rPTAsb2s9bnVsbCxFcnJvcihwKDE4NSkpO3ZhciBkPXJrKGEsYik7aWYobnVsbD09PWQpcmV0dXJuIG51bGw7d2MoZCxiLGMpO2lmKDA9PT0oSyYyKXx8ZCE9PUopZD09PUomJigwPT09KEsmMikmJihna3w9YiksND09PVcmJnNrKGQsWikpLHRrKGQsYyksMT09PWImJjA9PT1LJiYwPT09KGEubW9kZSYxKSYmKFRpPUQoKSs1MDAsJGYmJmRnKCkpO3JldHVybiBkfVxuZnVuY3Rpb24gcmsoYSxiKXthLmxhbmVzfD1iO3ZhciBjPWEuYWx0ZXJuYXRlO251bGwhPT1jJiYoYy5sYW5lc3w9Yik7Yz1hO2ZvcihhPWEucmV0dXJuO251bGwhPT1hOylhLmNoaWxkTGFuZXN8PWIsYz1hLmFsdGVybmF0ZSxudWxsIT09YyYmKGMuY2hpbGRMYW5lc3w9YiksYz1hLGE9YS5yZXR1cm47cmV0dXJuIDM9PT1jLnRhZz9jLnN0YXRlTm9kZTpudWxsfVxuZnVuY3Rpb24gdGsoYSxiKXt2YXIgYz1hLmNhbGxiYWNrTm9kZTt0YyhhLGIpO3ZhciBkPXJjKGEsYT09PUo/WjowKTtpZigwPT09ZCludWxsIT09YyYmWmIoYyksYS5jYWxsYmFja05vZGU9bnVsbCxhLmNhbGxiYWNrUHJpb3JpdHk9MDtlbHNlIGlmKGI9ZCYtZCxhLmNhbGxiYWNrUHJpb3JpdHkhPT1iKXtudWxsIT1jJiZaYihjKTtpZigxPT09YikwPT09YS50YWc/Y2codWsuYmluZChudWxsLGEpKTpiZyh1ay5iaW5kKG51bGwsYSkpLERmKGZ1bmN0aW9uKCl7MD09PUsmJmRnKCl9KSxjPW51bGw7ZWxzZXtzd2l0Y2goemMoZCkpe2Nhc2UgMTpjPWNjO2JyZWFrO2Nhc2UgNDpjPWRjO2JyZWFrO2Nhc2UgMTY6Yz1lYzticmVhaztjYXNlIDUzNjg3MDkxMjpjPWdjO2JyZWFrO2RlZmF1bHQ6Yz1lY31jPXZrKGMsd2suYmluZChudWxsLGEpKX1hLmNhbGxiYWNrUHJpb3JpdHk9YjthLmNhbGxiYWNrTm9kZT1jfX1cbmZ1bmN0aW9uIHdrKGEsYil7cGs9LTE7cWs9MDtpZigwIT09KEsmNikpdGhyb3cgRXJyb3IocCgzMjcpKTt2YXIgYz1hLmNhbGxiYWNrTm9kZTtpZih4aygpJiZhLmNhbGxiYWNrTm9kZSE9PWMpcmV0dXJuIG51bGw7dmFyIGQ9cmMoYSxhPT09Sj9aOjApO2lmKDA9PT1kKXJldHVybiBudWxsO2lmKDAhPT0oZCYzMCl8fDAhPT0oZCZhLmV4cGlyZWRMYW5lcyl8fGIpYj15ayhhLGQpO2Vsc2V7Yj1kO3ZhciBlPUs7S3w9Mjt2YXIgZj16aygpO2lmKEohPT1hfHxaIT09YilUaT1EKCkrNTAwLEFrKGEsYik7ZG8gdHJ5e0JrKCk7YnJlYWt9Y2F0Y2goaCl7Q2soYSxoKX13aGlsZSgxKTtrZygpO2NrLmN1cnJlbnQ9ZjtLPWU7bnVsbCE9PVk/Yj0wOihKPW51bGwsWj0wLGI9Vyl9aWYoMCE9PWIpezI9PT1iJiYoZT11YyhhKSwwIT09ZSYmKGQ9ZSxiPURrKGEsZSkpKTtpZigxPT09Yil0aHJvdyBjPWZrLEFrKGEsMCksc2soYSxkKSx0ayhhLEQoKSksYztpZig2PT09YilzayhhLGQpO2Vsc2V7ZT1cbmEuY3VycmVudC5hbHRlcm5hdGU7aWYoMD09PShkJjMwKSYmIUVrKGUpJiYoYj15ayhhLGQpLDI9PT1iJiYoZj11YyhhKSwwIT09ZiYmKGQ9ZixiPURrKGEsZikpKSwxPT09YikpdGhyb3cgYz1mayxBayhhLDApLHNrKGEsZCksdGsoYSxEKCkpLGM7YS5maW5pc2hlZFdvcms9ZTthLmZpbmlzaGVkTGFuZXM9ZDtzd2l0Y2goYil7Y2FzZSAwOmNhc2UgMTp0aHJvdyBFcnJvcihwKDM0NSkpO2Nhc2UgMjpGayhhLGprKTticmVhaztjYXNlIDM6c2soYSxkKTtpZigoZCYxMzAwMjM0MjQpPT09ZCYmKGI9VmorNTAwLUQoKSwxMDxiKSl7aWYoMCE9PXJjKGEsMCkpYnJlYWs7ZT1hLnN1c3BlbmRlZExhbmVzO2lmKChlJmQpIT09ZCl7TSgpO2EucGluZ2VkTGFuZXN8PWEuc3VzcGVuZGVkTGFuZXMmZTticmVha31hLnRpbWVvdXRIYW5kbGU9emYoRmsuYmluZChudWxsLGEsamspLGIpO2JyZWFrfUZrKGEsamspO2JyZWFrO2Nhc2UgNDpzayhhLGQpO2lmKChkJjQxOTQyNDApPT09ZClicmVhaztiPVxuYS5ldmVudFRpbWVzO2ZvcihlPS0xOzA8ZDspe3ZhciBnPTMxLWxjKGQpO2Y9MTw8ZztnPWJbZ107Zz5lJiYoZT1nKTtkJj1+Zn1kPWU7ZD1EKCktZDtkPSgxMjA+ZD8xMjA6NDgwPmQ/NDgwOjEwODA+ZD8xMDgwOjE5MjA+ZD8xOTIwOjNFMz5kPzNFMzo0MzIwPmQ/NDMyMDoxOTYwKmJrKGQvMTk2MCkpLWQ7aWYoMTA8ZCl7YS50aW1lb3V0SGFuZGxlPXpmKEZrLmJpbmQobnVsbCxhLGprKSxkKTticmVha31GayhhLGprKTticmVhaztjYXNlIDU6RmsoYSxqayk7YnJlYWs7ZGVmYXVsdDp0aHJvdyBFcnJvcihwKDMyOSkpO319fXRrKGEsRCgpKTtyZXR1cm4gYS5jYWxsYmFja05vZGU9PT1jP3drLmJpbmQobnVsbCxhKTpudWxsfWZ1bmN0aW9uIERrKGEsYil7dmFyIGM9aWs7YS5jdXJyZW50Lm1lbW9pemVkU3RhdGUuaXNEZWh5ZHJhdGVkJiYoQWsoYSxiKS5mbGFnc3w9MjU2KTthPXlrKGEsYik7MiE9PWEmJihiPWprLGprPWMsbnVsbCE9PWImJlJpKGIpKTtyZXR1cm4gYX1cbmZ1bmN0aW9uIFJpKGEpe251bGw9PT1qaz9qaz1hOmprLnB1c2guYXBwbHkoamssYSl9ZnVuY3Rpb24gRWsoYSl7Zm9yKHZhciBiPWE7Oyl7aWYoYi5mbGFncyYxNjM4NCl7dmFyIGM9Yi51cGRhdGVRdWV1ZTtpZihudWxsIT09YyYmKGM9Yy5zdG9yZXMsbnVsbCE9PWMpKWZvcih2YXIgZD0wO2Q8Yy5sZW5ndGg7ZCsrKXt2YXIgZT1jW2RdLGY9ZS5nZXRTbmFwc2hvdDtlPWUudmFsdWU7dHJ5e2lmKCFDZShmKCksZSkpcmV0dXJuITF9Y2F0Y2goZyl7cmV0dXJuITF9fX1jPWIuY2hpbGQ7aWYoYi5zdWJ0cmVlRmxhZ3MmMTYzODQmJm51bGwhPT1jKWMucmV0dXJuPWIsYj1jO2Vsc2V7aWYoYj09PWEpYnJlYWs7Zm9yKDtudWxsPT09Yi5zaWJsaW5nOyl7aWYobnVsbD09PWIucmV0dXJufHxiLnJldHVybj09PWEpcmV0dXJuITA7Yj1iLnJldHVybn1iLnNpYmxpbmcucmV0dXJuPWIucmV0dXJuO2I9Yi5zaWJsaW5nfX1yZXR1cm4hMH1cbmZ1bmN0aW9uIHNrKGEsYil7YiY9fmhrO2ImPX5nazthLnN1c3BlbmRlZExhbmVzfD1iO2EucGluZ2VkTGFuZXMmPX5iO2ZvcihhPWEuZXhwaXJhdGlvblRpbWVzOzA8Yjspe3ZhciBjPTMxLWxjKGIpLGQ9MTw8YzthW2NdPS0xO2ImPX5kfX1mdW5jdGlvbiB1ayhhKXtpZigwIT09KEsmNikpdGhyb3cgRXJyb3IocCgzMjcpKTt4aygpO3ZhciBiPXJjKGEsMCk7aWYoMD09PShiJjEpKXJldHVybiB0ayhhLEQoKSksbnVsbDt2YXIgYz15ayhhLGIpO2lmKDAhPT1hLnRhZyYmMj09PWMpe3ZhciBkPXVjKGEpOzAhPT1kJiYoYj1kLGM9RGsoYSxkKSl9aWYoMT09PWMpdGhyb3cgYz1mayxBayhhLDApLHNrKGEsYiksdGsoYSxEKCkpLGM7aWYoNj09PWMpdGhyb3cgRXJyb3IocCgzNDUpKTthLmZpbmlzaGVkV29yaz1hLmN1cnJlbnQuYWx0ZXJuYXRlO2EuZmluaXNoZWRMYW5lcz1iO0ZrKGEsamspO3RrKGEsRCgpKTtyZXR1cm4gbnVsbH1cbmZ1bmN0aW9uIEdrKGEsYil7dmFyIGM9SztLfD0xO3RyeXtyZXR1cm4gYShiKX1maW5hbGx5e0s9YywwPT09SyYmKFRpPUQoKSs1MDAsJGYmJmRnKCkpfX1mdW5jdGlvbiBIayhhKXtudWxsIT09bGsmJjA9PT1say50YWcmJjA9PT0oSyY2KSYmeGsoKTt2YXIgYj1LO0t8PTE7dmFyIGM9ZWsudHJhbnNpdGlvbixkPUU7dHJ5e2lmKGVrLnRyYW5zaXRpb249bnVsbCxFPTEsYSlyZXR1cm4gYSgpfWZpbmFsbHl7RT1kLGVrLnRyYW5zaXRpb249YyxLPWIsMD09PShLJjYpJiZkZygpfX1mdW5jdGlvbiBVaSgpe1ZpPWVqLmN1cnJlbnQ7Ryhlail9XG5mdW5jdGlvbiBBayhhLGIpe2EuZmluaXNoZWRXb3JrPW51bGw7YS5maW5pc2hlZExhbmVzPTA7dmFyIGM9YS50aW1lb3V0SGFuZGxlOy0xIT09YyYmKGEudGltZW91dEhhbmRsZT0tMSxBZihjKSk7aWYobnVsbCE9PVkpZm9yKGM9WS5yZXR1cm47bnVsbCE9PWM7KXt2YXIgZD1jO1dnKGQpO3N3aXRjaChkLnRhZyl7Y2FzZSAxOmQ9ZC50eXBlLmNoaWxkQ29udGV4dFR5cGVzO251bGwhPT1kJiZ2b2lkIDAhPT1kJiZVZigpO2JyZWFrO2Nhc2UgMzp6aCgpO0coUWYpO0coSSk7RWgoKTticmVhaztjYXNlIDU6QmgoZCk7YnJlYWs7Y2FzZSA0OnpoKCk7YnJlYWs7Y2FzZSAxMzpHKFApO2JyZWFrO2Nhc2UgMTk6RyhQKTticmVhaztjYXNlIDEwOmxnKGQudHlwZS5fY29udGV4dCk7YnJlYWs7Y2FzZSAyMjpjYXNlIDIzOlVpKCl9Yz1jLnJldHVybn1KPWE7WT1hPW1oKGEuY3VycmVudCxudWxsKTtaPVZpPWI7Vz0wO2ZrPW51bGw7aGs9Z2s9emc9MDtqaz1paz1udWxsO2lmKG51bGwhPT1xZyl7Zm9yKGI9XG4wO2I8cWcubGVuZ3RoO2IrKylpZihjPXFnW2JdLGQ9Yy5pbnRlcmxlYXZlZCxudWxsIT09ZCl7Yy5pbnRlcmxlYXZlZD1udWxsO3ZhciBlPWQubmV4dCxmPWMucGVuZGluZztpZihudWxsIT09Zil7dmFyIGc9Zi5uZXh0O2YubmV4dD1lO2QubmV4dD1nfWMucGVuZGluZz1kfXFnPW51bGx9cmV0dXJuIGF9XG5mdW5jdGlvbiBDayhhLGIpe2Rve3ZhciBjPVk7dHJ5e2tnKCk7RmguY3VycmVudD1SaDtpZihJaCl7Zm9yKHZhciBkPVEubWVtb2l6ZWRTdGF0ZTtudWxsIT09ZDspe3ZhciBlPWQucXVldWU7bnVsbCE9PWUmJihlLnBlbmRpbmc9bnVsbCk7ZD1kLm5leHR9SWg9ITF9SGg9MDtTPVI9UT1udWxsO0poPSExO0toPTA7ZGsuY3VycmVudD1udWxsO2lmKG51bGw9PT1jfHxudWxsPT09Yy5yZXR1cm4pe1c9MTtmaz1iO1k9bnVsbDticmVha31hOnt2YXIgZj1hLGc9Yy5yZXR1cm4saD1jLGs9YjtiPVo7aC5mbGFnc3w9MzI3Njg7aWYobnVsbCE9PWsmJlwib2JqZWN0XCI9PT10eXBlb2YgayYmXCJmdW5jdGlvblwiPT09dHlwZW9mIGsudGhlbil7dmFyIGw9ayxtPWgsdz1tLnRhZztpZigwPT09KG0ubW9kZSYxKSYmKDA9PT13fHwxMT09PXd8fDE1PT09dykpe3ZhciB1PW0uYWx0ZXJuYXRlO3U/KG0udXBkYXRlUXVldWU9dS51cGRhdGVRdWV1ZSxtLm1lbW9pemVkU3RhdGU9dS5tZW1vaXplZFN0YXRlLFxubS5sYW5lcz11LmxhbmVzKToobS51cGRhdGVRdWV1ZT1udWxsLG0ubWVtb2l6ZWRTdGF0ZT1udWxsKX12YXIgeT1KaShnKTtpZihudWxsIT09eSl7eS5mbGFncyY9LTI1NztLaSh5LGcsaCxmLGIpO3kubW9kZSYxJiZIaShmLGwsYik7Yj15O2s9bDt2YXIgbj1iLnVwZGF0ZVF1ZXVlO2lmKG51bGw9PT1uKXt2YXIgdj1uZXcgU2V0O3YuYWRkKGspO2IudXBkYXRlUXVldWU9dn1lbHNlIG4uYWRkKGspO2JyZWFrIGF9ZWxzZXtpZigwPT09KGImMSkpe0hpKGYsbCxiKTtTaSgpO2JyZWFrIGF9az1FcnJvcihwKDQyNikpfX1lbHNlIGlmKE4mJmgubW9kZSYxKXt2YXIgQz1KaShnKTtpZihudWxsIT09Qyl7MD09PShDLmZsYWdzJjY1NTM2KSYmKEMuZmxhZ3N8PTI1Nik7S2koQyxnLGgsZixiKTtoaChrKTticmVhayBhfX1mPWs7NCE9PVcmJihXPTIpO251bGw9PT1paz9paz1bZl06aWsucHVzaChmKTtrPXppKGssaCk7aD1nO2Rve3N3aXRjaChoLnRhZyl7Y2FzZSAzOmguZmxhZ3N8PTY1NTM2O1xuYiY9LWI7aC5sYW5lc3w9Yjt2YXIgdD1DaShoLGssYik7eGcoaCx0KTticmVhayBhO2Nhc2UgMTpmPWs7dmFyIHI9aC50eXBlLHg9aC5zdGF0ZU5vZGU7aWYoMD09PShoLmZsYWdzJjEyOCkmJihcImZ1bmN0aW9uXCI9PT10eXBlb2Ygci5nZXREZXJpdmVkU3RhdGVGcm9tRXJyb3J8fG51bGwhPT14JiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgeC5jb21wb25lbnREaWRDYXRjaCYmKG51bGw9PT1HaXx8IUdpLmhhcyh4KSkpKXtoLmZsYWdzfD02NTUzNjtiJj0tYjtoLmxhbmVzfD1iO3ZhciBCPUZpKGgsZixiKTt4ZyhoLEIpO2JyZWFrIGF9fWg9aC5yZXR1cm59d2hpbGUobnVsbCE9PWgpfUlrKGMpfWNhdGNoKE8pe2I9TztZPT09YyYmbnVsbCE9PWMmJihZPWM9Yy5yZXR1cm4pO2NvbnRpbnVlfWJyZWFrfXdoaWxlKDEpfWZ1bmN0aW9uIHprKCl7dmFyIGE9Y2suY3VycmVudDtjay5jdXJyZW50PVJoO3JldHVybiBudWxsPT09YT9SaDphfVxuZnVuY3Rpb24gU2koKXtpZigwPT09V3x8Mz09PVd8fDI9PT1XKVc9NDtudWxsPT09Snx8MD09PSh6ZyYyNjg0MzU0NTUpJiYwPT09KGdrJjI2ODQzNTQ1NSl8fHNrKEosWil9ZnVuY3Rpb24geWsoYSxiKXt2YXIgYz1LO0t8PTI7dmFyIGQ9emsoKTtKPT09YSYmWj09PWJ8fEFrKGEsYik7ZG8gdHJ5e0prKCk7YnJlYWt9Y2F0Y2goZSl7Q2soYSxlKX13aGlsZSgxKTtrZygpO0s9Yztjay5jdXJyZW50PWQ7aWYobnVsbCE9PVkpdGhyb3cgRXJyb3IocCgyNjEpKTtKPW51bGw7Wj0wO3JldHVybiBXfWZ1bmN0aW9uIEprKCl7Zm9yKDtudWxsIT09WTspS2soWSl9ZnVuY3Rpb24gQmsoKXtmb3IoO251bGwhPT1ZJiYhJGIoKTspS2soWSl9ZnVuY3Rpb24gS2soYSl7dmFyIGI9TGsoYS5hbHRlcm5hdGUsYSxWaSk7YS5tZW1vaXplZFByb3BzPWEucGVuZGluZ1Byb3BzO251bGw9PT1iP0lrKGEpOlk9Yjtkay5jdXJyZW50PW51bGx9XG5mdW5jdGlvbiBJayhhKXt2YXIgYj1hO2Rve3ZhciBjPWIuYWx0ZXJuYXRlO2E9Yi5yZXR1cm47aWYoMD09PShiLmZsYWdzJjMyNzY4KSl7aWYoYz1RaShjLGIsVmkpLG51bGwhPT1jKXtZPWM7cmV0dXJufX1lbHNle2M9eGooYyxiKTtpZihudWxsIT09Yyl7Yy5mbGFncyY9MzI3Njc7WT1jO3JldHVybn1pZihudWxsIT09YSlhLmZsYWdzfD0zMjc2OCxhLnN1YnRyZWVGbGFncz0wLGEuZGVsZXRpb25zPW51bGw7ZWxzZXtXPTY7WT1udWxsO3JldHVybn19Yj1iLnNpYmxpbmc7aWYobnVsbCE9PWIpe1k9YjtyZXR1cm59WT1iPWF9d2hpbGUobnVsbCE9PWIpOzA9PT1XJiYoVz01KX1mdW5jdGlvbiBGayhhLGIpe3ZhciBjPUUsZD1lay50cmFuc2l0aW9uO3RyeXtlay50cmFuc2l0aW9uPW51bGwsRT0xLE1rKGEsYixjKX1maW5hbGx5e2VrLnRyYW5zaXRpb249ZCxFPWN9cmV0dXJuIG51bGx9XG5mdW5jdGlvbiBNayhhLGIsYyl7ZG8geGsoKTt3aGlsZShudWxsIT09bGspO2lmKDAhPT0oSyY2KSl0aHJvdyBFcnJvcihwKDMyNykpO3ZhciBkPWEuZmluaXNoZWRXb3JrLGU9YS5maW5pc2hlZExhbmVzO2lmKG51bGw9PT1kKXJldHVybiBudWxsO2EuZmluaXNoZWRXb3JrPW51bGw7YS5maW5pc2hlZExhbmVzPTA7aWYoZD09PWEuY3VycmVudCl0aHJvdyBFcnJvcihwKDE3NykpO2EuY2FsbGJhY2tOb2RlPW51bGw7YS5jYWxsYmFja1ByaW9yaXR5PTA7dmFyIGY9ZC5sYW5lc3xkLmNoaWxkTGFuZXM7eGMoYSxmKTthPT09SiYmKFk9Sj1udWxsLFo9MCk7MD09PShkLnN1YnRyZWVGbGFncyYyMDY0KSYmMD09PShkLmZsYWdzJjIwNjQpfHxra3x8KGtrPSEwLHZrKGVjLGZ1bmN0aW9uKCl7eGsoKTtyZXR1cm4gbnVsbH0pKTtmPTAhPT0oZC5mbGFncyYxNTk5MCk7aWYoMCE9PShkLnN1YnRyZWVGbGFncyYxNTk5MCl8fGYpe2Y9ZWsudHJhbnNpdGlvbjtlay50cmFuc2l0aW9uPW51bGw7dmFyIGc9XG5FO0U9MTt2YXIgaD1LO0t8PTQ7ZGsuY3VycmVudD1udWxsO0ZqKGEsZCk7VWooYSxkLGUpO0plKHhmKTt4Zj1udWxsO2EuY3VycmVudD1kO1hqKGQsYSxlKTthYygpO0s9aDtFPWc7ZWsudHJhbnNpdGlvbj1mfWVsc2UgYS5jdXJyZW50PWQ7a2smJihraz0hMSxsaz1hLG1rPWUpO2Y9YS5wZW5kaW5nTGFuZXM7MD09PWYmJihHaT1udWxsKTtqYyhkLnN0YXRlTm9kZSxjKTt0ayhhLEQoKSk7aWYobnVsbCE9PWIpZm9yKGM9YS5vblJlY292ZXJhYmxlRXJyb3IsZD0wO2Q8Yi5sZW5ndGg7ZCsrKWMoYltkXSk7aWYoRGkpdGhyb3cgRGk9ITEsYT1FaSxFaT1udWxsLGE7MCE9PShtayYxKSYmMCE9PWEudGFnJiZ4aygpO2Y9YS5wZW5kaW5nTGFuZXM7MCE9PShmJjEpP2E9PT1vaz9uaysrOihuaz0wLG9rPWEpOm5rPTA7ZGcoKTtyZXR1cm4gbnVsbH1cbmZ1bmN0aW9uIHhrKCl7aWYobnVsbCE9PWxrKXt2YXIgYT16YyhtayksYj1lay50cmFuc2l0aW9uLGM9RTt0cnl7ZWsudHJhbnNpdGlvbj1udWxsO0U9MTY+YT8xNjphO2lmKG51bGw9PT1sayl2YXIgZD0hMTtlbHNle2E9bGs7bGs9bnVsbDttaz0wO2lmKDAhPT0oSyY2KSl0aHJvdyBFcnJvcihwKDMzMSkpO3ZhciBlPUs7S3w9NDtmb3IoWD1hLmN1cnJlbnQ7bnVsbCE9PVg7KXt2YXIgZj1YLGc9Zi5jaGlsZDtpZigwIT09KFguZmxhZ3MmMTYpKXt2YXIgaD1mLmRlbGV0aW9ucztpZihudWxsIT09aCl7Zm9yKHZhciBrPTA7azxoLmxlbmd0aDtrKyspe3ZhciBsPWhba107Zm9yKFg9bDtudWxsIT09WDspe3ZhciBtPVg7c3dpdGNoKG0udGFnKXtjYXNlIDA6Y2FzZSAxMTpjYXNlIDE1OkdqKDgsbSxmKX12YXIgdz1tLmNoaWxkO2lmKG51bGwhPT13KXcucmV0dXJuPW0sWD13O2Vsc2UgZm9yKDtudWxsIT09WDspe209WDt2YXIgdT1tLnNpYmxpbmcseT1tLnJldHVybjtMaihtKTtpZihtPT09XG5sKXtYPW51bGw7YnJlYWt9aWYobnVsbCE9PXUpe3UucmV0dXJuPXk7WD11O2JyZWFrfVg9eX19fXZhciBuPWYuYWx0ZXJuYXRlO2lmKG51bGwhPT1uKXt2YXIgdj1uLmNoaWxkO2lmKG51bGwhPT12KXtuLmNoaWxkPW51bGw7ZG97dmFyIEM9di5zaWJsaW5nO3Yuc2libGluZz1udWxsO3Y9Q313aGlsZShudWxsIT09dil9fVg9Zn19aWYoMCE9PShmLnN1YnRyZWVGbGFncyYyMDY0KSYmbnVsbCE9PWcpZy5yZXR1cm49ZixYPWc7ZWxzZSBiOmZvcig7bnVsbCE9PVg7KXtmPVg7aWYoMCE9PShmLmZsYWdzJjIwNDgpKXN3aXRjaChmLnRhZyl7Y2FzZSAwOmNhc2UgMTE6Y2FzZSAxNTpHaig5LGYsZi5yZXR1cm4pfXZhciB0PWYuc2libGluZztpZihudWxsIT09dCl7dC5yZXR1cm49Zi5yZXR1cm47WD10O2JyZWFrIGJ9WD1mLnJldHVybn19dmFyIHI9YS5jdXJyZW50O2ZvcihYPXI7bnVsbCE9PVg7KXtnPVg7dmFyIHg9Zy5jaGlsZDtpZigwIT09KGcuc3VidHJlZUZsYWdzJjIwNjQpJiZudWxsIT09XG54KXgucmV0dXJuPWcsWD14O2Vsc2UgYjpmb3IoZz1yO251bGwhPT1YOyl7aD1YO2lmKDAhPT0oaC5mbGFncyYyMDQ4KSl0cnl7c3dpdGNoKGgudGFnKXtjYXNlIDA6Y2FzZSAxMTpjYXNlIDE1OkhqKDksaCl9fWNhdGNoKE8pe0NqKGgsaC5yZXR1cm4sTyl9aWYoaD09PWcpe1g9bnVsbDticmVhayBifXZhciBCPWguc2libGluZztpZihudWxsIT09Qil7Qi5yZXR1cm49aC5yZXR1cm47WD1CO2JyZWFrIGJ9WD1oLnJldHVybn19Sz1lO2RnKCk7aWYoaWMmJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBpYy5vblBvc3RDb21taXRGaWJlclJvb3QpdHJ5e2ljLm9uUG9zdENvbW1pdEZpYmVyUm9vdChoYyxhKX1jYXRjaChPKXt9ZD0hMH1yZXR1cm4gZH1maW5hbGx5e0U9Yyxlay50cmFuc2l0aW9uPWJ9fXJldHVybiExfWZ1bmN0aW9uIE5rKGEsYixjKXtiPXppKGMsYik7Yj1DaShhLGIsMSk7dmcoYSxiKTtiPU0oKTthPXJrKGEsMSk7bnVsbCE9PWEmJih3YyhhLDEsYiksdGsoYSxiKSl9XG5mdW5jdGlvbiBDaihhLGIsYyl7aWYoMz09PWEudGFnKU5rKGEsYSxjKTtlbHNlIGZvcig7bnVsbCE9PWI7KXtpZigzPT09Yi50YWcpe05rKGIsYSxjKTticmVha31lbHNlIGlmKDE9PT1iLnRhZyl7dmFyIGQ9Yi5zdGF0ZU5vZGU7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGIudHlwZS5nZXREZXJpdmVkU3RhdGVGcm9tRXJyb3J8fFwiZnVuY3Rpb25cIj09PXR5cGVvZiBkLmNvbXBvbmVudERpZENhdGNoJiYobnVsbD09PUdpfHwhR2kuaGFzKGQpKSl7YT16aShjLGEpO2E9RmkoYixhLDEpO3ZnKGIsYSk7YT1NKCk7Yj1yayhiLDEpO251bGwhPT1iJiYod2MoYiwxLGEpLHRrKGIsYSkpO2JyZWFrfX1iPWIucmV0dXJufX1cbmZ1bmN0aW9uIElpKGEsYixjKXt2YXIgZD1hLnBpbmdDYWNoZTtudWxsIT09ZCYmZC5kZWxldGUoYik7Yj1NKCk7YS5waW5nZWRMYW5lc3w9YS5zdXNwZW5kZWRMYW5lcyZjO0o9PT1hJiYoWiZjKT09PWMmJig0PT09V3x8Mz09PVcmJihaJjEzMDAyMzQyNCk9PT1aJiY1MDA+RCgpLVZqP0FrKGEsMCk6aGt8PWMpO3RrKGEsYil9ZnVuY3Rpb24gT2soYSxiKXswPT09YiYmKDA9PT0oYS5tb2RlJjEpP2I9MTooYj1wYyxwYzw8PTEsMD09PShwYyYxMzAwMjM0MjQpJiYocGM9NDE5NDMwNCkpKTt2YXIgYz1NKCk7YT1yayhhLGIpO251bGwhPT1hJiYod2MoYSxiLGMpLHRrKGEsYykpfWZ1bmN0aW9uIHFqKGEpe3ZhciBiPWEubWVtb2l6ZWRTdGF0ZSxjPTA7bnVsbCE9PWImJihjPWIucmV0cnlMYW5lKTtPayhhLGMpfVxuZnVuY3Rpb24gVGooYSxiKXt2YXIgYz0wO3N3aXRjaChhLnRhZyl7Y2FzZSAxMzp2YXIgZD1hLnN0YXRlTm9kZTt2YXIgZT1hLm1lbW9pemVkU3RhdGU7bnVsbCE9PWUmJihjPWUucmV0cnlMYW5lKTticmVhaztjYXNlIDE5OmQ9YS5zdGF0ZU5vZGU7YnJlYWs7ZGVmYXVsdDp0aHJvdyBFcnJvcihwKDMxNCkpO31udWxsIT09ZCYmZC5kZWxldGUoYik7T2soYSxjKX12YXIgTGs7XG5Maz1mdW5jdGlvbihhLGIsYyl7aWYobnVsbCE9PWEpaWYoYS5tZW1vaXplZFByb3BzIT09Yi5wZW5kaW5nUHJvcHN8fFFmLmN1cnJlbnQpb2c9ITA7ZWxzZXtpZigwPT09KGEubGFuZXMmYykmJjA9PT0oYi5mbGFncyYxMjgpKXJldHVybiBvZz0hMSx3aihhLGIsYyk7b2c9MCE9PShhLmZsYWdzJjEzMTA3Mik/ITA6ITF9ZWxzZSBvZz0hMSxOJiYwIT09KGIuZmxhZ3MmMTA0ODU3NikmJlVnKGIsTmcsYi5pbmRleCk7Yi5sYW5lcz0wO3N3aXRjaChiLnRhZyl7Y2FzZSAyOnZhciBkPWIudHlwZTtudWxsIT09YSYmKGEuYWx0ZXJuYXRlPW51bGwsYi5hbHRlcm5hdGU9bnVsbCxiLmZsYWdzfD0yKTthPWIucGVuZGluZ1Byb3BzO3ZhciBlPVNmKGIsSS5jdXJyZW50KTtuZyhiLGMpO2U9TmgobnVsbCxiLGQsYSxlLGMpO3ZhciBmPVNoKCk7Yi5mbGFnc3w9MTtcIm9iamVjdFwiPT09dHlwZW9mIGUmJm51bGwhPT1lJiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgZS5yZW5kZXImJnZvaWQgMD09PWUuJCR0eXBlb2Y/XG4oYi50YWc9MSxiLm1lbW9pemVkU3RhdGU9bnVsbCxiLnVwZGF0ZVF1ZXVlPW51bGwsVGYoZCk/KGY9ITAsWGYoYikpOmY9ITEsYi5tZW1vaXplZFN0YXRlPW51bGwhPT1lLnN0YXRlJiZ2b2lkIDAhPT1lLnN0YXRlP2Uuc3RhdGU6bnVsbCxzZyhiKSxlLnVwZGF0ZXI9RmcsYi5zdGF0ZU5vZGU9ZSxlLl9yZWFjdEludGVybmFscz1iLEpnKGIsZCxhLGMpLGI9aGoobnVsbCxiLGQsITAsZixjKSk6KGIudGFnPTAsTiYmZiYmVmcoYiksWGkobnVsbCxiLGUsYyksYj1iLmNoaWxkKTtyZXR1cm4gYjtjYXNlIDE2OmQ9Yi5lbGVtZW50VHlwZTthOntudWxsIT09YSYmKGEuYWx0ZXJuYXRlPW51bGwsYi5hbHRlcm5hdGU9bnVsbCxiLmZsYWdzfD0yKTthPWIucGVuZGluZ1Byb3BzO2U9ZC5faW5pdDtkPWUoZC5fcGF5bG9hZCk7Yi50eXBlPWQ7ZT1iLnRhZz1QayhkKTthPWZnKGQsYSk7c3dpdGNoKGUpe2Nhc2UgMDpiPWNqKG51bGwsYixkLGEsYyk7YnJlYWsgYTtjYXNlIDE6Yj1naihudWxsLGIsXG5kLGEsYyk7YnJlYWsgYTtjYXNlIDExOmI9WWkobnVsbCxiLGQsYSxjKTticmVhayBhO2Nhc2UgMTQ6Yj0kaShudWxsLGIsZCxmZyhkLnR5cGUsYSksYyk7YnJlYWsgYX10aHJvdyBFcnJvcihwKDMwNixkLFwiXCIpKTt9cmV0dXJuIGI7Y2FzZSAwOnJldHVybiBkPWIudHlwZSxlPWIucGVuZGluZ1Byb3BzLGU9Yi5lbGVtZW50VHlwZT09PWQ/ZTpmZyhkLGUpLGNqKGEsYixkLGUsYyk7Y2FzZSAxOnJldHVybiBkPWIudHlwZSxlPWIucGVuZGluZ1Byb3BzLGU9Yi5lbGVtZW50VHlwZT09PWQ/ZTpmZyhkLGUpLGdqKGEsYixkLGUsYyk7Y2FzZSAzOmE6e2lqKGIpO2lmKG51bGw9PT1hKXRocm93IEVycm9yKHAoMzg3KSk7ZD1iLnBlbmRpbmdQcm9wcztmPWIubWVtb2l6ZWRTdGF0ZTtlPWYuZWxlbWVudDt0ZyhhLGIpO3lnKGIsZCxudWxsLGMpO3ZhciBnPWIubWVtb2l6ZWRTdGF0ZTtkPWcuZWxlbWVudDtpZihmLmlzRGVoeWRyYXRlZClpZihmPXtlbGVtZW50OmQsaXNEZWh5ZHJhdGVkOiExLFxuY2FjaGU6Zy5jYWNoZSx0cmFuc2l0aW9uczpnLnRyYW5zaXRpb25zfSxiLnVwZGF0ZVF1ZXVlLmJhc2VTdGF0ZT1mLGIubWVtb2l6ZWRTdGF0ZT1mLGIuZmxhZ3MmMjU2KXtlPUVycm9yKHAoNDIzKSk7Yj1qaihhLGIsZCxjLGUpO2JyZWFrIGF9ZWxzZSBpZihkIT09ZSl7ZT1FcnJvcihwKDQyNCkpO2I9amooYSxiLGQsYyxlKTticmVhayBhfWVsc2UgZm9yKFlnPUZmKGIuc3RhdGVOb2RlLmNvbnRhaW5lckluZm8uZmlyc3RDaGlsZCksWGc9YixOPSEwLFpnPW51bGwsYz1zaChiLG51bGwsZCxjKSxiLmNoaWxkPWM7YzspYy5mbGFncz1jLmZsYWdzJi0zfDQwOTYsYz1jLnNpYmxpbmc7ZWxzZXtnaCgpO2lmKGQ9PT1lKXtiPVppKGEsYixjKTticmVhayBhfVhpKGEsYixkLGMpfWI9Yi5jaGlsZH1yZXR1cm4gYjtjYXNlIDU6cmV0dXJuIEFoKGIpLG51bGw9PT1hJiZkaChiKSxkPWIudHlwZSxlPWIucGVuZGluZ1Byb3BzLGY9bnVsbCE9PWE/YS5tZW1vaXplZFByb3BzOm51bGwsZz1lLmNoaWxkcmVuLFxueWYoZCxlKT9nPW51bGw6bnVsbCE9PWYmJnlmKGQsZikmJihiLmZsYWdzfD0zMiksZmooYSxiKSxYaShhLGIsZyxjKSxiLmNoaWxkO2Nhc2UgNjpyZXR1cm4gbnVsbD09PWEmJmRoKGIpLG51bGw7Y2FzZSAxMzpyZXR1cm4gbWooYSxiLGMpO2Nhc2UgNDpyZXR1cm4geWgoYixiLnN0YXRlTm9kZS5jb250YWluZXJJbmZvKSxkPWIucGVuZGluZ1Byb3BzLG51bGw9PT1hP2IuY2hpbGQ9cmgoYixudWxsLGQsYyk6WGkoYSxiLGQsYyksYi5jaGlsZDtjYXNlIDExOnJldHVybiBkPWIudHlwZSxlPWIucGVuZGluZ1Byb3BzLGU9Yi5lbGVtZW50VHlwZT09PWQ/ZTpmZyhkLGUpLFlpKGEsYixkLGUsYyk7Y2FzZSA3OnJldHVybiBYaShhLGIsYi5wZW5kaW5nUHJvcHMsYyksYi5jaGlsZDtjYXNlIDg6cmV0dXJuIFhpKGEsYixiLnBlbmRpbmdQcm9wcy5jaGlsZHJlbixjKSxiLmNoaWxkO2Nhc2UgMTI6cmV0dXJuIFhpKGEsYixiLnBlbmRpbmdQcm9wcy5jaGlsZHJlbixjKSxiLmNoaWxkO2Nhc2UgMTA6YTp7ZD1cbmIudHlwZS5fY29udGV4dDtlPWIucGVuZGluZ1Byb3BzO2Y9Yi5tZW1vaXplZFByb3BzO2c9ZS52YWx1ZTtIKGdnLGQuX2N1cnJlbnRWYWx1ZSk7ZC5fY3VycmVudFZhbHVlPWc7aWYobnVsbCE9PWYpaWYoQ2UoZi52YWx1ZSxnKSl7aWYoZi5jaGlsZHJlbj09PWUuY2hpbGRyZW4mJiFRZi5jdXJyZW50KXtiPVppKGEsYixjKTticmVhayBhfX1lbHNlIGZvcihmPWIuY2hpbGQsbnVsbCE9PWYmJihmLnJldHVybj1iKTtudWxsIT09Zjspe3ZhciBoPWYuZGVwZW5kZW5jaWVzO2lmKG51bGwhPT1oKXtnPWYuY2hpbGQ7Zm9yKHZhciBrPWguZmlyc3RDb250ZXh0O251bGwhPT1rOyl7aWYoay5jb250ZXh0PT09ZCl7aWYoMT09PWYudGFnKXtrPXVnKC0xLGMmLWMpO2sudGFnPTI7dmFyIGw9Zi51cGRhdGVRdWV1ZTtpZihudWxsIT09bCl7bD1sLnNoYXJlZDt2YXIgbT1sLnBlbmRpbmc7bnVsbD09PW0/ay5uZXh0PWs6KGsubmV4dD1tLm5leHQsbS5uZXh0PWspO2wucGVuZGluZz1rfX1mLmxhbmVzfD1cbmM7az1mLmFsdGVybmF0ZTtudWxsIT09ayYmKGsubGFuZXN8PWMpO21nKGYucmV0dXJuLGMsYik7aC5sYW5lc3w9YzticmVha31rPWsubmV4dH19ZWxzZSBpZigxMD09PWYudGFnKWc9Zi50eXBlPT09Yi50eXBlP251bGw6Zi5jaGlsZDtlbHNlIGlmKDE4PT09Zi50YWcpe2c9Zi5yZXR1cm47aWYobnVsbD09PWcpdGhyb3cgRXJyb3IocCgzNDEpKTtnLmxhbmVzfD1jO2g9Zy5hbHRlcm5hdGU7bnVsbCE9PWgmJihoLmxhbmVzfD1jKTttZyhnLGMsYik7Zz1mLnNpYmxpbmd9ZWxzZSBnPWYuY2hpbGQ7aWYobnVsbCE9PWcpZy5yZXR1cm49ZjtlbHNlIGZvcihnPWY7bnVsbCE9PWc7KXtpZihnPT09Yil7Zz1udWxsO2JyZWFrfWY9Zy5zaWJsaW5nO2lmKG51bGwhPT1mKXtmLnJldHVybj1nLnJldHVybjtnPWY7YnJlYWt9Zz1nLnJldHVybn1mPWd9WGkoYSxiLGUuY2hpbGRyZW4sYyk7Yj1iLmNoaWxkfXJldHVybiBiO2Nhc2UgOTpyZXR1cm4gZT1iLnR5cGUsZD1iLnBlbmRpbmdQcm9wcy5jaGlsZHJlbixcbm5nKGIsYyksZT1wZyhlKSxkPWQoZSksYi5mbGFnc3w9MSxYaShhLGIsZCxjKSxiLmNoaWxkO2Nhc2UgMTQ6cmV0dXJuIGQ9Yi50eXBlLGU9ZmcoZCxiLnBlbmRpbmdQcm9wcyksZT1mZyhkLnR5cGUsZSksJGkoYSxiLGQsZSxjKTtjYXNlIDE1OnJldHVybiBiaihhLGIsYi50eXBlLGIucGVuZGluZ1Byb3BzLGMpO2Nhc2UgMTc6cmV0dXJuIGQ9Yi50eXBlLGU9Yi5wZW5kaW5nUHJvcHMsZT1iLmVsZW1lbnRUeXBlPT09ZD9lOmZnKGQsZSksbnVsbCE9PWEmJihhLmFsdGVybmF0ZT1udWxsLGIuYWx0ZXJuYXRlPW51bGwsYi5mbGFnc3w9MiksYi50YWc9MSxUZihkKT8oYT0hMCxYZihiKSk6YT0hMSxuZyhiLGMpLEhnKGIsZCxlKSxKZyhiLGQsZSxjKSxoaihudWxsLGIsZCwhMCxhLGMpO2Nhc2UgMTk6cmV0dXJuIHZqKGEsYixjKTtjYXNlIDIyOnJldHVybiBkaihhLGIsYyl9dGhyb3cgRXJyb3IocCgxNTYsYi50YWcpKTt9O2Z1bmN0aW9uIHZrKGEsYil7cmV0dXJuIFliKGEsYil9XG5mdW5jdGlvbiBRayhhLGIsYyxkKXt0aGlzLnRhZz1hO3RoaXMua2V5PWM7dGhpcy5zaWJsaW5nPXRoaXMuY2hpbGQ9dGhpcy5yZXR1cm49dGhpcy5zdGF0ZU5vZGU9dGhpcy50eXBlPXRoaXMuZWxlbWVudFR5cGU9bnVsbDt0aGlzLmluZGV4PTA7dGhpcy5yZWY9bnVsbDt0aGlzLnBlbmRpbmdQcm9wcz1iO3RoaXMuZGVwZW5kZW5jaWVzPXRoaXMubWVtb2l6ZWRTdGF0ZT10aGlzLnVwZGF0ZVF1ZXVlPXRoaXMubWVtb2l6ZWRQcm9wcz1udWxsO3RoaXMubW9kZT1kO3RoaXMuc3VidHJlZUZsYWdzPXRoaXMuZmxhZ3M9MDt0aGlzLmRlbGV0aW9ucz1udWxsO3RoaXMuY2hpbGRMYW5lcz10aGlzLmxhbmVzPTA7dGhpcy5hbHRlcm5hdGU9bnVsbH1mdW5jdGlvbiBhaChhLGIsYyxkKXtyZXR1cm4gbmV3IFFrKGEsYixjLGQpfWZ1bmN0aW9uIGFqKGEpe2E9YS5wcm90b3R5cGU7cmV0dXJuISghYXx8IWEuaXNSZWFjdENvbXBvbmVudCl9XG5mdW5jdGlvbiBQayhhKXtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgYSlyZXR1cm4gYWooYSk/MTowO2lmKHZvaWQgMCE9PWEmJm51bGwhPT1hKXthPWEuJCR0eXBlb2Y7aWYoYT09PUJhKXJldHVybiAxMTtpZihhPT09RWEpcmV0dXJuIDE0fXJldHVybiAyfVxuZnVuY3Rpb24gbWgoYSxiKXt2YXIgYz1hLmFsdGVybmF0ZTtudWxsPT09Yz8oYz1haChhLnRhZyxiLGEua2V5LGEubW9kZSksYy5lbGVtZW50VHlwZT1hLmVsZW1lbnRUeXBlLGMudHlwZT1hLnR5cGUsYy5zdGF0ZU5vZGU9YS5zdGF0ZU5vZGUsYy5hbHRlcm5hdGU9YSxhLmFsdGVybmF0ZT1jKTooYy5wZW5kaW5nUHJvcHM9YixjLnR5cGU9YS50eXBlLGMuZmxhZ3M9MCxjLnN1YnRyZWVGbGFncz0wLGMuZGVsZXRpb25zPW51bGwpO2MuZmxhZ3M9YS5mbGFncyYxNDY4MDA2NDtjLmNoaWxkTGFuZXM9YS5jaGlsZExhbmVzO2MubGFuZXM9YS5sYW5lcztjLmNoaWxkPWEuY2hpbGQ7Yy5tZW1vaXplZFByb3BzPWEubWVtb2l6ZWRQcm9wcztjLm1lbW9pemVkU3RhdGU9YS5tZW1vaXplZFN0YXRlO2MudXBkYXRlUXVldWU9YS51cGRhdGVRdWV1ZTtiPWEuZGVwZW5kZW5jaWVzO2MuZGVwZW5kZW5jaWVzPW51bGw9PT1iP251bGw6e2xhbmVzOmIubGFuZXMsZmlyc3RDb250ZXh0OmIuZmlyc3RDb250ZXh0fTtcbmMuc2libGluZz1hLnNpYmxpbmc7Yy5pbmRleD1hLmluZGV4O2MucmVmPWEucmVmO3JldHVybiBjfVxuZnVuY3Rpb24gb2goYSxiLGMsZCxlLGYpe3ZhciBnPTI7ZD1hO2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBhKWFqKGEpJiYoZz0xKTtlbHNlIGlmKFwic3RyaW5nXCI9PT10eXBlb2YgYSlnPTU7ZWxzZSBhOnN3aXRjaChhKXtjYXNlIHZhOnJldHVybiBxaChjLmNoaWxkcmVuLGUsZixiKTtjYXNlIHdhOmc9ODtlfD04O2JyZWFrO2Nhc2UgeGE6cmV0dXJuIGE9YWgoMTIsYyxiLGV8MiksYS5lbGVtZW50VHlwZT14YSxhLmxhbmVzPWYsYTtjYXNlIENhOnJldHVybiBhPWFoKDEzLGMsYixlKSxhLmVsZW1lbnRUeXBlPUNhLGEubGFuZXM9ZixhO2Nhc2UgRGE6cmV0dXJuIGE9YWgoMTksYyxiLGUpLGEuZWxlbWVudFR5cGU9RGEsYS5sYW5lcz1mLGE7Y2FzZSBHYTpyZXR1cm4gbmooYyxlLGYsYik7ZGVmYXVsdDppZihcIm9iamVjdFwiPT09dHlwZW9mIGEmJm51bGwhPT1hKXN3aXRjaChhLiQkdHlwZW9mKXtjYXNlIHlhOmc9MTA7YnJlYWsgYTtjYXNlIEFhOmc9OTticmVhayBhO2Nhc2UgQmE6Zz0xMTtcbmJyZWFrIGE7Y2FzZSBFYTpnPTE0O2JyZWFrIGE7Y2FzZSBGYTpnPTE2O2Q9bnVsbDticmVhayBhfXRocm93IEVycm9yKHAoMTMwLG51bGw9PWE/YTp0eXBlb2YgYSxcIlwiKSk7fWI9YWgoZyxjLGIsZSk7Yi5lbGVtZW50VHlwZT1hO2IudHlwZT1kO2IubGFuZXM9ZjtyZXR1cm4gYn1mdW5jdGlvbiBxaChhLGIsYyxkKXthPWFoKDcsYSxkLGIpO2EubGFuZXM9YztyZXR1cm4gYX1mdW5jdGlvbiBuaihhLGIsYyxkKXthPWFoKDIyLGEsZCxiKTthLmVsZW1lbnRUeXBlPUdhO2EubGFuZXM9YzthLnN0YXRlTm9kZT17fTtyZXR1cm4gYX1mdW5jdGlvbiBuaChhLGIsYyl7YT1haCg2LGEsbnVsbCxiKTthLmxhbmVzPWM7cmV0dXJuIGF9XG5mdW5jdGlvbiBwaChhLGIsYyl7Yj1haCg0LG51bGwhPT1hLmNoaWxkcmVuP2EuY2hpbGRyZW46W10sYS5rZXksYik7Yi5sYW5lcz1jO2Iuc3RhdGVOb2RlPXtjb250YWluZXJJbmZvOmEuY29udGFpbmVySW5mbyxwZW5kaW5nQ2hpbGRyZW46bnVsbCxpbXBsZW1lbnRhdGlvbjphLmltcGxlbWVudGF0aW9ufTtyZXR1cm4gYn1cbmZ1bmN0aW9uIFJrKGEsYixjLGQsZSl7dGhpcy50YWc9Yjt0aGlzLmNvbnRhaW5lckluZm89YTt0aGlzLmZpbmlzaGVkV29yaz10aGlzLnBpbmdDYWNoZT10aGlzLmN1cnJlbnQ9dGhpcy5wZW5kaW5nQ2hpbGRyZW49bnVsbDt0aGlzLnRpbWVvdXRIYW5kbGU9LTE7dGhpcy5jYWxsYmFja05vZGU9dGhpcy5wZW5kaW5nQ29udGV4dD10aGlzLmNvbnRleHQ9bnVsbDt0aGlzLmNhbGxiYWNrUHJpb3JpdHk9MDt0aGlzLmV2ZW50VGltZXM9dmMoMCk7dGhpcy5leHBpcmF0aW9uVGltZXM9dmMoLTEpO3RoaXMuZW50YW5nbGVkTGFuZXM9dGhpcy5maW5pc2hlZExhbmVzPXRoaXMubXV0YWJsZVJlYWRMYW5lcz10aGlzLmV4cGlyZWRMYW5lcz10aGlzLnBpbmdlZExhbmVzPXRoaXMuc3VzcGVuZGVkTGFuZXM9dGhpcy5wZW5kaW5nTGFuZXM9MDt0aGlzLmVudGFuZ2xlbWVudHM9dmMoMCk7dGhpcy5pZGVudGlmaWVyUHJlZml4PWQ7dGhpcy5vblJlY292ZXJhYmxlRXJyb3I9ZTt0aGlzLm11dGFibGVTb3VyY2VFYWdlckh5ZHJhdGlvbkRhdGE9XG5udWxsfWZ1bmN0aW9uIFNrKGEsYixjLGQsZSxmLGcsaCxrKXthPW5ldyBSayhhLGIsYyxoLGspOzE9PT1iPyhiPTEsITA9PT1mJiYoYnw9OCkpOmI9MDtmPWFoKDMsbnVsbCxudWxsLGIpO2EuY3VycmVudD1mO2Yuc3RhdGVOb2RlPWE7Zi5tZW1vaXplZFN0YXRlPXtlbGVtZW50OmQsaXNEZWh5ZHJhdGVkOmMsY2FjaGU6bnVsbCx0cmFuc2l0aW9uczpudWxsfTtzZyhmKTtyZXR1cm4gYX1mdW5jdGlvbiBUayhhLGIsYyl7dmFyIGQ9Mzxhcmd1bWVudHMubGVuZ3RoJiZ2b2lkIDAhPT1hcmd1bWVudHNbM10/YXJndW1lbnRzWzNdOm51bGw7cmV0dXJueyQkdHlwZW9mOnVhLGtleTpudWxsPT1kP251bGw6XCJcIitkLGNoaWxkcmVuOmEsY29udGFpbmVySW5mbzpiLGltcGxlbWVudGF0aW9uOmN9fVxuZnVuY3Rpb24gVWsoYSl7aWYoIWEpcmV0dXJuIFBmO2E9YS5fcmVhY3RJbnRlcm5hbHM7YTp7aWYoU2IoYSkhPT1hfHwxIT09YS50YWcpdGhyb3cgRXJyb3IocCgxNzApKTt2YXIgYj1hO2Rve3N3aXRjaChiLnRhZyl7Y2FzZSAzOmI9Yi5zdGF0ZU5vZGUuY29udGV4dDticmVhayBhO2Nhc2UgMTppZihUZihiLnR5cGUpKXtiPWIuc3RhdGVOb2RlLl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkTWVyZ2VkQ2hpbGRDb250ZXh0O2JyZWFrIGF9fWI9Yi5yZXR1cm59d2hpbGUobnVsbCE9PWIpO3Rocm93IEVycm9yKHAoMTcxKSk7fWlmKDE9PT1hLnRhZyl7dmFyIGM9YS50eXBlO2lmKFRmKGMpKXJldHVybiBXZihhLGMsYil9cmV0dXJuIGJ9XG5mdW5jdGlvbiBWayhhLGIsYyxkLGUsZixnLGgsayl7YT1TayhjLGQsITAsYSxlLGYsZyxoLGspO2EuY29udGV4dD1VayhudWxsKTtjPWEuY3VycmVudDtkPU0oKTtlPURnKGMpO2Y9dWcoZCxlKTtmLmNhbGxiYWNrPXZvaWQgMCE9PWImJm51bGwhPT1iP2I6bnVsbDt2ZyhjLGYpO2EuY3VycmVudC5sYW5lcz1lO3djKGEsZSxkKTt0ayhhLGQpO3JldHVybiBhfWZ1bmN0aW9uIFdrKGEsYixjLGQpe3ZhciBlPWIuY3VycmVudCxmPU0oKSxnPURnKGUpO2M9VWsoYyk7bnVsbD09PWIuY29udGV4dD9iLmNvbnRleHQ9YzpiLnBlbmRpbmdDb250ZXh0PWM7Yj11ZyhmLGcpO2IucGF5bG9hZD17ZWxlbWVudDphfTtkPXZvaWQgMD09PWQ/bnVsbDpkO251bGwhPT1kJiYoYi5jYWxsYmFjaz1kKTt2ZyhlLGIpO2E9RWcoZSxnLGYpO251bGwhPT1hJiZ3ZyhhLGUsZyk7cmV0dXJuIGd9XG5mdW5jdGlvbiBYayhhKXthPWEuY3VycmVudDtpZighYS5jaGlsZClyZXR1cm4gbnVsbDtzd2l0Y2goYS5jaGlsZC50YWcpe2Nhc2UgNTpyZXR1cm4gYS5jaGlsZC5zdGF0ZU5vZGU7ZGVmYXVsdDpyZXR1cm4gYS5jaGlsZC5zdGF0ZU5vZGV9fWZ1bmN0aW9uIFlrKGEsYil7YT1hLm1lbW9pemVkU3RhdGU7aWYobnVsbCE9PWEmJm51bGwhPT1hLmRlaHlkcmF0ZWQpe3ZhciBjPWEucmV0cnlMYW5lO2EucmV0cnlMYW5lPTAhPT1jJiZjPGI/YzpifX1mdW5jdGlvbiBaayhhLGIpe1lrKGEsYik7KGE9YS5hbHRlcm5hdGUpJiZZayhhLGIpfWZ1bmN0aW9uICRrKCl7cmV0dXJuIG51bGx9dmFyIGFsPVwiZnVuY3Rpb25cIj09PXR5cGVvZiByZXBvcnRFcnJvcj9yZXBvcnRFcnJvcjpmdW5jdGlvbihhKXtjb25zb2xlLmVycm9yKGEpfTtmdW5jdGlvbiBibChhKXt0aGlzLl9pbnRlcm5hbFJvb3Q9YX1cbmNsLnByb3RvdHlwZS5yZW5kZXI9YmwucHJvdG90eXBlLnJlbmRlcj1mdW5jdGlvbihhKXt2YXIgYj10aGlzLl9pbnRlcm5hbFJvb3Q7aWYobnVsbD09PWIpdGhyb3cgRXJyb3IocCg0MDkpKTtXayhhLGIsbnVsbCxudWxsKX07Y2wucHJvdG90eXBlLnVubW91bnQ9YmwucHJvdG90eXBlLnVubW91bnQ9ZnVuY3Rpb24oKXt2YXIgYT10aGlzLl9pbnRlcm5hbFJvb3Q7aWYobnVsbCE9PWEpe3RoaXMuX2ludGVybmFsUm9vdD1udWxsO3ZhciBiPWEuY29udGFpbmVySW5mbztIayhmdW5jdGlvbigpe1drKG51bGwsYSxudWxsLG51bGwpfSk7YltwZl09bnVsbH19O2Z1bmN0aW9uIGNsKGEpe3RoaXMuX2ludGVybmFsUm9vdD1hfVxuY2wucHJvdG90eXBlLnVuc3RhYmxlX3NjaGVkdWxlSHlkcmF0aW9uPWZ1bmN0aW9uKGEpe2lmKGEpe3ZhciBiPURjKCk7YT17YmxvY2tlZE9uOm51bGwsdGFyZ2V0OmEscHJpb3JpdHk6Yn07Zm9yKHZhciBjPTA7YzxNYy5sZW5ndGgmJjAhPT1iJiZiPE1jW2NdLnByaW9yaXR5O2MrKyk7TWMuc3BsaWNlKGMsMCxhKTswPT09YyYmUmMoYSl9fTtmdW5jdGlvbiBkbChhKXtyZXR1cm4hKCFhfHwxIT09YS5ub2RlVHlwZSYmOSE9PWEubm9kZVR5cGUmJjExIT09YS5ub2RlVHlwZSl9ZnVuY3Rpb24gZWwoYSl7cmV0dXJuISghYXx8MSE9PWEubm9kZVR5cGUmJjkhPT1hLm5vZGVUeXBlJiYxMSE9PWEubm9kZVR5cGUmJig4IT09YS5ub2RlVHlwZXx8XCIgcmVhY3QtbW91bnQtcG9pbnQtdW5zdGFibGUgXCIhPT1hLm5vZGVWYWx1ZSkpfWZ1bmN0aW9uIGZsKCl7fVxuZnVuY3Rpb24gZ2woYSxiLGMsZCxlKXtpZihlKXtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgZCl7dmFyIGY9ZDtkPWZ1bmN0aW9uKCl7dmFyIGE9WGsoZyk7Zi5jYWxsKGEpfX12YXIgZz1WayhiLGQsYSwwLG51bGwsITEsITEsXCJcIixmbCk7YS5fcmVhY3RSb290Q29udGFpbmVyPWc7YVtwZl09Zy5jdXJyZW50O25mKDg9PT1hLm5vZGVUeXBlP2EucGFyZW50Tm9kZTphKTtIaygpO3JldHVybiBnfWZvcig7ZT1hLmxhc3RDaGlsZDspYS5yZW1vdmVDaGlsZChlKTtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgZCl7dmFyIGg9ZDtkPWZ1bmN0aW9uKCl7dmFyIGE9WGsoayk7aC5jYWxsKGEpfX12YXIgaz1TayhhLDAsITEsbnVsbCxudWxsLCExLCExLFwiXCIsZmwpO2EuX3JlYWN0Um9vdENvbnRhaW5lcj1rO2FbcGZdPWsuY3VycmVudDtuZig4PT09YS5ub2RlVHlwZT9hLnBhcmVudE5vZGU6YSk7SGsoZnVuY3Rpb24oKXtXayhiLGssYyxkKX0pO3JldHVybiBrfVxuZnVuY3Rpb24gaGwoYSxiLGMsZCxlKXt2YXIgZj1jLl9yZWFjdFJvb3RDb250YWluZXI7aWYoZil7dmFyIGc9ZjtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgZSl7dmFyIGg9ZTtlPWZ1bmN0aW9uKCl7dmFyIGE9WGsoZyk7aC5jYWxsKGEpfX1XayhiLGcsYSxlKX1lbHNlIGc9Z2woYyxiLGEsZSxkKTtyZXR1cm4gWGsoZyl9QWM9ZnVuY3Rpb24oYSl7c3dpdGNoKGEudGFnKXtjYXNlIDM6dmFyIGI9YS5zdGF0ZU5vZGU7aWYoYi5jdXJyZW50Lm1lbW9pemVkU3RhdGUuaXNEZWh5ZHJhdGVkKXt2YXIgYz1xYyhiLnBlbmRpbmdMYW5lcyk7MCE9PWMmJih5YyhiLGN8MSksdGsoYixEKCkpLDA9PT0oSyY2KSYmKFRpPUQoKSs1MDAsZGcoKSkpfWJyZWFrO2Nhc2UgMTM6dmFyIGQ9TSgpO0hrKGZ1bmN0aW9uKCl7cmV0dXJuIEVnKGEsMSxkKX0pO1prKGEsMSl9fTtCYz1mdW5jdGlvbihhKXtpZigxMz09PWEudGFnKXt2YXIgYj1NKCk7RWcoYSwxMzQyMTc3MjgsYik7WmsoYSwxMzQyMTc3MjgpfX07XG5DYz1mdW5jdGlvbihhKXtpZigxMz09PWEudGFnKXt2YXIgYj1NKCksYz1EZyhhKTtFZyhhLGMsYik7WmsoYSxjKX19O0RjPWZ1bmN0aW9uKCl7cmV0dXJuIEV9O0VjPWZ1bmN0aW9uKGEsYil7dmFyIGM9RTt0cnl7cmV0dXJuIEU9YSxiKCl9ZmluYWxseXtFPWN9fTtcbnZiPWZ1bmN0aW9uKGEsYixjKXtzd2l0Y2goYil7Y2FzZSBcImlucHV0XCI6WmEoYSxjKTtiPWMubmFtZTtpZihcInJhZGlvXCI9PT1jLnR5cGUmJm51bGwhPWIpe2ZvcihjPWE7Yy5wYXJlbnROb2RlOyljPWMucGFyZW50Tm9kZTtjPWMucXVlcnlTZWxlY3RvckFsbChcImlucHV0W25hbWU9XCIrSlNPTi5zdHJpbmdpZnkoXCJcIitiKSsnXVt0eXBlPVwicmFkaW9cIl0nKTtmb3IoYj0wO2I8Yy5sZW5ndGg7YisrKXt2YXIgZD1jW2JdO2lmKGQhPT1hJiZkLmZvcm09PT1hLmZvcm0pe3ZhciBlPUFiKGQpO2lmKCFlKXRocm93IEVycm9yKHAoOTApKTtVYShkKTtaYShkLGUpfX19YnJlYWs7Y2FzZSBcInRleHRhcmVhXCI6ZmIoYSxjKTticmVhaztjYXNlIFwic2VsZWN0XCI6Yj1jLnZhbHVlLG51bGwhPWImJmNiKGEsISFjLm11bHRpcGxlLGIsITEpfX07RGI9R2s7RWI9SGs7XG52YXIgaWw9e3VzaW5nQ2xpZW50RW50cnlQb2ludDohMSxFdmVudHM6W3piLHBlLEFiLEJiLENiLEdrXX0samw9e2ZpbmRGaWJlckJ5SG9zdEluc3RhbmNlOlNjLGJ1bmRsZVR5cGU6MCx2ZXJzaW9uOlwiMTguMC4wLWZjNDZkYmE2Ny0yMDIyMDMyOVwiLHJlbmRlcmVyUGFja2FnZU5hbWU6XCJyZWFjdC1kb21cIn07XG52YXIga2w9e2J1bmRsZVR5cGU6amwuYnVuZGxlVHlwZSx2ZXJzaW9uOmpsLnZlcnNpb24scmVuZGVyZXJQYWNrYWdlTmFtZTpqbC5yZW5kZXJlclBhY2thZ2VOYW1lLHJlbmRlcmVyQ29uZmlnOmpsLnJlbmRlcmVyQ29uZmlnLG92ZXJyaWRlSG9va1N0YXRlOm51bGwsb3ZlcnJpZGVIb29rU3RhdGVEZWxldGVQYXRoOm51bGwsb3ZlcnJpZGVIb29rU3RhdGVSZW5hbWVQYXRoOm51bGwsb3ZlcnJpZGVQcm9wczpudWxsLG92ZXJyaWRlUHJvcHNEZWxldGVQYXRoOm51bGwsb3ZlcnJpZGVQcm9wc1JlbmFtZVBhdGg6bnVsbCxzZXRFcnJvckhhbmRsZXI6bnVsbCxzZXRTdXNwZW5zZUhhbmRsZXI6bnVsbCxzY2hlZHVsZVVwZGF0ZTpudWxsLGN1cnJlbnREaXNwYXRjaGVyUmVmOnNhLlJlYWN0Q3VycmVudERpc3BhdGNoZXIsZmluZEhvc3RJbnN0YW5jZUJ5RmliZXI6ZnVuY3Rpb24oYSl7YT1XYihhKTtyZXR1cm4gbnVsbD09PWE/bnVsbDphLnN0YXRlTm9kZX0sZmluZEZpYmVyQnlIb3N0SW5zdGFuY2U6amwuZmluZEZpYmVyQnlIb3N0SW5zdGFuY2V8fFxuJGssZmluZEhvc3RJbnN0YW5jZXNGb3JSZWZyZXNoOm51bGwsc2NoZWR1bGVSZWZyZXNoOm51bGwsc2NoZWR1bGVSb290Om51bGwsc2V0UmVmcmVzaEhhbmRsZXI6bnVsbCxnZXRDdXJyZW50RmliZXI6bnVsbCxyZWNvbmNpbGVyVmVyc2lvbjpcIjE4LjAuMC1mYzQ2ZGJhNjctMjAyMjAzMjlcIn07aWYoXCJ1bmRlZmluZWRcIiE9PXR5cGVvZiBfX1JFQUNUX0RFVlRPT0xTX0dMT0JBTF9IT09LX18pe3ZhciBsbD1fX1JFQUNUX0RFVlRPT0xTX0dMT0JBTF9IT09LX187aWYoIWxsLmlzRGlzYWJsZWQmJmxsLnN1cHBvcnRzRmliZXIpdHJ5e2hjPWxsLmluamVjdChrbCksaWM9bGx9Y2F0Y2goYSl7fX1leHBvcnRzLl9fU0VDUkVUX0lOVEVSTkFMU19ET19OT1RfVVNFX09SX1lPVV9XSUxMX0JFX0ZJUkVEPWlsO1xuZXhwb3J0cy5jcmVhdGVQb3J0YWw9ZnVuY3Rpb24oYSxiKXt2YXIgYz0yPGFyZ3VtZW50cy5sZW5ndGgmJnZvaWQgMCE9PWFyZ3VtZW50c1syXT9hcmd1bWVudHNbMl06bnVsbDtpZighZGwoYikpdGhyb3cgRXJyb3IocCgyMDApKTtyZXR1cm4gVGsoYSxiLG51bGwsYyl9O2V4cG9ydHMuY3JlYXRlUm9vdD1mdW5jdGlvbihhLGIpe2lmKCFkbChhKSl0aHJvdyBFcnJvcihwKDI5OSkpO3ZhciBjPSExLGQ9XCJcIixlPWFsO251bGwhPT1iJiZ2b2lkIDAhPT1iJiYoITA9PT1iLnVuc3RhYmxlX3N0cmljdE1vZGUmJihjPSEwKSx2b2lkIDAhPT1iLmlkZW50aWZpZXJQcmVmaXgmJihkPWIuaWRlbnRpZmllclByZWZpeCksdm9pZCAwIT09Yi5vblJlY292ZXJhYmxlRXJyb3ImJihlPWIub25SZWNvdmVyYWJsZUVycm9yKSk7Yj1TayhhLDEsITEsbnVsbCxudWxsLGMsITEsZCxlKTthW3BmXT1iLmN1cnJlbnQ7bmYoOD09PWEubm9kZVR5cGU/YS5wYXJlbnROb2RlOmEpO3JldHVybiBuZXcgYmwoYil9O1xuZXhwb3J0cy5maW5kRE9NTm9kZT1mdW5jdGlvbihhKXtpZihudWxsPT1hKXJldHVybiBudWxsO2lmKDE9PT1hLm5vZGVUeXBlKXJldHVybiBhO3ZhciBiPWEuX3JlYWN0SW50ZXJuYWxzO2lmKHZvaWQgMD09PWIpe2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBhLnJlbmRlcil0aHJvdyBFcnJvcihwKDE4OCkpO2E9T2JqZWN0LmtleXMoYSkuam9pbihcIixcIik7dGhyb3cgRXJyb3IocCgyNjgsYSkpO31hPVdiKGIpO2E9bnVsbD09PWE/bnVsbDphLnN0YXRlTm9kZTtyZXR1cm4gYX07ZXhwb3J0cy5mbHVzaFN5bmM9ZnVuY3Rpb24oYSl7cmV0dXJuIEhrKGEpfTtleHBvcnRzLmh5ZHJhdGU9ZnVuY3Rpb24oYSxiLGMpe2lmKCFlbChiKSl0aHJvdyBFcnJvcihwKDIwMCkpO3JldHVybiBobChudWxsLGEsYiwhMCxjKX07XG5leHBvcnRzLmh5ZHJhdGVSb290PWZ1bmN0aW9uKGEsYixjKXtpZighZGwoYSkpdGhyb3cgRXJyb3IocCg0MDUpKTt2YXIgZD1udWxsIT1jJiZjLmh5ZHJhdGVkU291cmNlc3x8bnVsbCxlPSExLGY9XCJcIixnPWFsO251bGwhPT1jJiZ2b2lkIDAhPT1jJiYoITA9PT1jLnVuc3RhYmxlX3N0cmljdE1vZGUmJihlPSEwKSx2b2lkIDAhPT1jLmlkZW50aWZpZXJQcmVmaXgmJihmPWMuaWRlbnRpZmllclByZWZpeCksdm9pZCAwIT09Yy5vblJlY292ZXJhYmxlRXJyb3ImJihnPWMub25SZWNvdmVyYWJsZUVycm9yKSk7Yj1WayhiLG51bGwsYSwxLG51bGwhPWM/YzpudWxsLGUsITEsZixnKTthW3BmXT1iLmN1cnJlbnQ7bmYoYSk7aWYoZClmb3IoYT0wO2E8ZC5sZW5ndGg7YSsrKWM9ZFthXSxlPWMuX2dldFZlcnNpb24sZT1lKGMuX3NvdXJjZSksbnVsbD09Yi5tdXRhYmxlU291cmNlRWFnZXJIeWRyYXRpb25EYXRhP2IubXV0YWJsZVNvdXJjZUVhZ2VySHlkcmF0aW9uRGF0YT1bYyxlXTpiLm11dGFibGVTb3VyY2VFYWdlckh5ZHJhdGlvbkRhdGEucHVzaChjLFxuZSk7cmV0dXJuIG5ldyBjbChiKX07ZXhwb3J0cy5yZW5kZXI9ZnVuY3Rpb24oYSxiLGMpe2lmKCFlbChiKSl0aHJvdyBFcnJvcihwKDIwMCkpO3JldHVybiBobChudWxsLGEsYiwhMSxjKX07ZXhwb3J0cy51bm1vdW50Q29tcG9uZW50QXROb2RlPWZ1bmN0aW9uKGEpe2lmKCFlbChhKSl0aHJvdyBFcnJvcihwKDQwKSk7cmV0dXJuIGEuX3JlYWN0Um9vdENvbnRhaW5lcj8oSGsoZnVuY3Rpb24oKXtobChudWxsLG51bGwsYSwhMSxmdW5jdGlvbigpe2EuX3JlYWN0Um9vdENvbnRhaW5lcj1udWxsO2FbcGZdPW51bGx9KX0pLCEwKTohMX07ZXhwb3J0cy51bnN0YWJsZV9iYXRjaGVkVXBkYXRlcz1HaztcbmV4cG9ydHMudW5zdGFibGVfcmVuZGVyU3VidHJlZUludG9Db250YWluZXI9ZnVuY3Rpb24oYSxiLGMsZCl7aWYoIWVsKGMpKXRocm93IEVycm9yKHAoMjAwKSk7aWYobnVsbD09YXx8dm9pZCAwPT09YS5fcmVhY3RJbnRlcm5hbHMpdGhyb3cgRXJyb3IocCgzOCkpO3JldHVybiBobChhLGIsYywhMSxkKX07ZXhwb3J0cy52ZXJzaW9uPVwiMTguMC4wLWZjNDZkYmE2Ny0yMDIyMDMyOVwiO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgbSA9IHJlcXVpcmUoJ3JlYWN0LWRvbScpO1xuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAncHJvZHVjdGlvbicpIHtcbiAgZXhwb3J0cy5jcmVhdGVSb290ID0gbS5jcmVhdGVSb290O1xuICBleHBvcnRzLmh5ZHJhdGVSb290ID0gbS5oeWRyYXRlUm9vdDtcbn0gZWxzZSB7XG4gIHZhciBpID0gbS5fX1NFQ1JFVF9JTlRFUk5BTFNfRE9fTk9UX1VTRV9PUl9ZT1VfV0lMTF9CRV9GSVJFRDtcbiAgZXhwb3J0cy5jcmVhdGVSb290ID0gZnVuY3Rpb24oYywgbykge1xuICAgIGkudXNpbmdDbGllbnRFbnRyeVBvaW50ID0gdHJ1ZTtcbiAgICB0cnkge1xuICAgICAgcmV0dXJuIG0uY3JlYXRlUm9vdChjLCBvKTtcbiAgICB9IGZpbmFsbHkge1xuICAgICAgaS51c2luZ0NsaWVudEVudHJ5UG9pbnQgPSBmYWxzZTtcbiAgICB9XG4gIH07XG4gIGV4cG9ydHMuaHlkcmF0ZVJvb3QgPSBmdW5jdGlvbihjLCBoLCBvKSB7XG4gICAgaS51c2luZ0NsaWVudEVudHJ5UG9pbnQgPSB0cnVlO1xuICAgIHRyeSB7XG4gICAgICByZXR1cm4gbS5oeWRyYXRlUm9vdChjLCBoLCBvKTtcbiAgICB9IGZpbmFsbHkge1xuICAgICAgaS51c2luZ0NsaWVudEVudHJ5UG9pbnQgPSBmYWxzZTtcbiAgICB9XG4gIH07XG59XG4iLCIndXNlIHN0cmljdCc7XG5cbmZ1bmN0aW9uIGNoZWNrRENFKCkge1xuICAvKiBnbG9iYWwgX19SRUFDVF9ERVZUT09MU19HTE9CQUxfSE9PS19fICovXG4gIGlmIChcbiAgICB0eXBlb2YgX19SRUFDVF9ERVZUT09MU19HTE9CQUxfSE9PS19fID09PSAndW5kZWZpbmVkJyB8fFxuICAgIHR5cGVvZiBfX1JFQUNUX0RFVlRPT0xTX0dMT0JBTF9IT09LX18uY2hlY2tEQ0UgIT09ICdmdW5jdGlvbidcbiAgKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgLy8gVGhpcyBicmFuY2ggaXMgdW5yZWFjaGFibGUgYmVjYXVzZSB0aGlzIGZ1bmN0aW9uIGlzIG9ubHkgY2FsbGVkXG4gICAgLy8gaW4gcHJvZHVjdGlvbiwgYnV0IHRoZSBjb25kaXRpb24gaXMgdHJ1ZSBvbmx5IGluIGRldmVsb3BtZW50LlxuICAgIC8vIFRoZXJlZm9yZSBpZiB0aGUgYnJhbmNoIGlzIHN0aWxsIGhlcmUsIGRlYWQgY29kZSBlbGltaW5hdGlvbiB3YXNuJ3RcbiAgICAvLyBwcm9wZXJseSBhcHBsaWVkLlxuICAgIC8vIERvbid0IGNoYW5nZSB0aGUgbWVzc2FnZS4gUmVhY3QgRGV2VG9vbHMgcmVsaWVzIG9uIGl0LiBBbHNvIG1ha2Ugc3VyZVxuICAgIC8vIHRoaXMgbWVzc2FnZSBkb2Vzbid0IG9jY3VyIGVsc2V3aGVyZSBpbiB0aGlzIGZ1bmN0aW9uLCBvciBpdCB3aWxsIGNhdXNlXG4gICAgLy8gYSBmYWxzZSBwb3NpdGl2ZS5cbiAgICB0aHJvdyBuZXcgRXJyb3IoJ15fXicpO1xuICB9XG4gIHRyeSB7XG4gICAgLy8gVmVyaWZ5IHRoYXQgdGhlIGNvZGUgYWJvdmUgaGFzIGJlZW4gZGVhZCBjb2RlIGVsaW1pbmF0ZWQgKERDRSdkKS5cbiAgICBfX1JFQUNUX0RFVlRPT0xTX0dMT0JBTF9IT09LX18uY2hlY2tEQ0UoY2hlY2tEQ0UpO1xuICB9IGNhdGNoIChlcnIpIHtcbiAgICAvLyBEZXZUb29scyBzaG91bGRuJ3QgY3Jhc2ggUmVhY3QsIG5vIG1hdHRlciB3aGF0LlxuICAgIC8vIFdlIHNob3VsZCBzdGlsbCByZXBvcnQgaW4gY2FzZSB3ZSBicmVhayB0aGlzIGNvZGUuXG4gICAgY29uc29sZS5lcnJvcihlcnIpO1xuICB9XG59XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIC8vIERDRSBjaGVjayBzaG91bGQgaGFwcGVuIGJlZm9yZSBSZWFjdERPTSBidW5kbGUgZXhlY3V0ZXMgc28gdGhhdFxuICAvLyBEZXZUb29scyBjYW4gcmVwb3J0IGJhZCBtaW5pZmljYXRpb24gZHVyaW5nIGluamVjdGlvbi5cbiAgY2hlY2tEQ0UoKTtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9yZWFjdC1kb20ucHJvZHVjdGlvbi5taW4uanMnKTtcbn0gZWxzZSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QtZG9tLmRldmVsb3BtZW50LmpzJyk7XG59XG4iLCIvKipcbiAqIEBsaWNlbnNlIFJlYWN0XG4gKiByZWFjdC5wcm9kdWN0aW9uLm1pbi5qc1xuICpcbiAqIENvcHlyaWdodCAoYykgRmFjZWJvb2ssIEluYy4gYW5kIGl0cyBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG4ndXNlIHN0cmljdCc7dmFyIGw9U3ltYm9sLmZvcihcInJlYWN0LmVsZW1lbnRcIiksbj1TeW1ib2wuZm9yKFwicmVhY3QucG9ydGFsXCIpLHA9U3ltYm9sLmZvcihcInJlYWN0LmZyYWdtZW50XCIpLHE9U3ltYm9sLmZvcihcInJlYWN0LnN0cmljdF9tb2RlXCIpLHI9U3ltYm9sLmZvcihcInJlYWN0LnByb2ZpbGVyXCIpLHQ9U3ltYm9sLmZvcihcInJlYWN0LnByb3ZpZGVyXCIpLHU9U3ltYm9sLmZvcihcInJlYWN0LmNvbnRleHRcIiksdj1TeW1ib2wuZm9yKFwicmVhY3QuZm9yd2FyZF9yZWZcIiksdz1TeW1ib2wuZm9yKFwicmVhY3Quc3VzcGVuc2VcIikseD1TeW1ib2wuZm9yKFwicmVhY3QubWVtb1wiKSx5PVN5bWJvbC5mb3IoXCJyZWFjdC5sYXp5XCIpLHo9U3ltYm9sLml0ZXJhdG9yO2Z1bmN0aW9uIEEoYSl7aWYobnVsbD09PWF8fFwib2JqZWN0XCIhPT10eXBlb2YgYSlyZXR1cm4gbnVsbDthPXomJmFbel18fGFbXCJAQGl0ZXJhdG9yXCJdO3JldHVyblwiZnVuY3Rpb25cIj09PXR5cGVvZiBhP2E6bnVsbH1cbnZhciBCPXtpc01vdW50ZWQ6ZnVuY3Rpb24oKXtyZXR1cm4hMX0sZW5xdWV1ZUZvcmNlVXBkYXRlOmZ1bmN0aW9uKCl7fSxlbnF1ZXVlUmVwbGFjZVN0YXRlOmZ1bmN0aW9uKCl7fSxlbnF1ZXVlU2V0U3RhdGU6ZnVuY3Rpb24oKXt9fSxDPU9iamVjdC5hc3NpZ24sRD17fTtmdW5jdGlvbiBFKGEsYixlKXt0aGlzLnByb3BzPWE7dGhpcy5jb250ZXh0PWI7dGhpcy5yZWZzPUQ7dGhpcy51cGRhdGVyPWV8fEJ9RS5wcm90b3R5cGUuaXNSZWFjdENvbXBvbmVudD17fTtcbkUucHJvdG90eXBlLnNldFN0YXRlPWZ1bmN0aW9uKGEsYil7aWYoXCJvYmplY3RcIiE9PXR5cGVvZiBhJiZcImZ1bmN0aW9uXCIhPT10eXBlb2YgYSYmbnVsbCE9YSl0aHJvdyBFcnJvcihcInNldFN0YXRlKC4uLik6IHRha2VzIGFuIG9iamVjdCBvZiBzdGF0ZSB2YXJpYWJsZXMgdG8gdXBkYXRlIG9yIGEgZnVuY3Rpb24gd2hpY2ggcmV0dXJucyBhbiBvYmplY3Qgb2Ygc3RhdGUgdmFyaWFibGVzLlwiKTt0aGlzLnVwZGF0ZXIuZW5xdWV1ZVNldFN0YXRlKHRoaXMsYSxiLFwic2V0U3RhdGVcIil9O0UucHJvdG90eXBlLmZvcmNlVXBkYXRlPWZ1bmN0aW9uKGEpe3RoaXMudXBkYXRlci5lbnF1ZXVlRm9yY2VVcGRhdGUodGhpcyxhLFwiZm9yY2VVcGRhdGVcIil9O2Z1bmN0aW9uIEYoKXt9Ri5wcm90b3R5cGU9RS5wcm90b3R5cGU7ZnVuY3Rpb24gRyhhLGIsZSl7dGhpcy5wcm9wcz1hO3RoaXMuY29udGV4dD1iO3RoaXMucmVmcz1EO3RoaXMudXBkYXRlcj1lfHxCfXZhciBIPUcucHJvdG90eXBlPW5ldyBGO1xuSC5jb25zdHJ1Y3Rvcj1HO0MoSCxFLnByb3RvdHlwZSk7SC5pc1B1cmVSZWFjdENvbXBvbmVudD0hMDt2YXIgST1BcnJheS5pc0FycmF5LEo9T2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eSxLPXtjdXJyZW50Om51bGx9LEw9e2tleTohMCxyZWY6ITAsX19zZWxmOiEwLF9fc291cmNlOiEwfTtcbmZ1bmN0aW9uIE0oYSxiLGUpe3ZhciBkLGM9e30saz1udWxsLGg9bnVsbDtpZihudWxsIT1iKWZvcihkIGluIHZvaWQgMCE9PWIucmVmJiYoaD1iLnJlZiksdm9pZCAwIT09Yi5rZXkmJihrPVwiXCIrYi5rZXkpLGIpSi5jYWxsKGIsZCkmJiFMLmhhc093blByb3BlcnR5KGQpJiYoY1tkXT1iW2RdKTt2YXIgZz1hcmd1bWVudHMubGVuZ3RoLTI7aWYoMT09PWcpYy5jaGlsZHJlbj1lO2Vsc2UgaWYoMTxnKXtmb3IodmFyIGY9QXJyYXkoZyksbT0wO208ZzttKyspZlttXT1hcmd1bWVudHNbbSsyXTtjLmNoaWxkcmVuPWZ9aWYoYSYmYS5kZWZhdWx0UHJvcHMpZm9yKGQgaW4gZz1hLmRlZmF1bHRQcm9wcyxnKXZvaWQgMD09PWNbZF0mJihjW2RdPWdbZF0pO3JldHVybnskJHR5cGVvZjpsLHR5cGU6YSxrZXk6ayxyZWY6aCxwcm9wczpjLF9vd25lcjpLLmN1cnJlbnR9fVxuZnVuY3Rpb24gTihhLGIpe3JldHVybnskJHR5cGVvZjpsLHR5cGU6YS50eXBlLGtleTpiLHJlZjphLnJlZixwcm9wczphLnByb3BzLF9vd25lcjphLl9vd25lcn19ZnVuY3Rpb24gTyhhKXtyZXR1cm5cIm9iamVjdFwiPT09dHlwZW9mIGEmJm51bGwhPT1hJiZhLiQkdHlwZW9mPT09bH1mdW5jdGlvbiBlc2NhcGUoYSl7dmFyIGI9e1wiPVwiOlwiPTBcIixcIjpcIjpcIj0yXCJ9O3JldHVyblwiJFwiK2EucmVwbGFjZSgvWz06XS9nLGZ1bmN0aW9uKGEpe3JldHVybiBiW2FdfSl9dmFyIFA9L1xcLysvZztmdW5jdGlvbiBRKGEsYil7cmV0dXJuXCJvYmplY3RcIj09PXR5cGVvZiBhJiZudWxsIT09YSYmbnVsbCE9YS5rZXk/ZXNjYXBlKFwiXCIrYS5rZXkpOmIudG9TdHJpbmcoMzYpfVxuZnVuY3Rpb24gUihhLGIsZSxkLGMpe3ZhciBrPXR5cGVvZiBhO2lmKFwidW5kZWZpbmVkXCI9PT1rfHxcImJvb2xlYW5cIj09PWspYT1udWxsO3ZhciBoPSExO2lmKG51bGw9PT1hKWg9ITA7ZWxzZSBzd2l0Y2goayl7Y2FzZSBcInN0cmluZ1wiOmNhc2UgXCJudW1iZXJcIjpoPSEwO2JyZWFrO2Nhc2UgXCJvYmplY3RcIjpzd2l0Y2goYS4kJHR5cGVvZil7Y2FzZSBsOmNhc2UgbjpoPSEwfX1pZihoKXJldHVybiBoPWEsYz1jKGgpLGE9XCJcIj09PWQ/XCIuXCIrUShoLDApOmQsSShjKT8oZT1cIlwiLG51bGwhPWEmJihlPWEucmVwbGFjZShQLFwiJCYvXCIpK1wiL1wiKSxSKGMsYixlLFwiXCIsZnVuY3Rpb24oYSl7cmV0dXJuIGF9KSk6bnVsbCE9YyYmKE8oYykmJihjPU4oYyxlKyghYy5rZXl8fGgmJmgua2V5PT09Yy5rZXk/XCJcIjooXCJcIitjLmtleSkucmVwbGFjZShQLFwiJCYvXCIpK1wiL1wiKSthKSksYi5wdXNoKGMpKSwxO2g9MDtkPVwiXCI9PT1kP1wiLlwiOmQrXCI6XCI7aWYoSShhKSlmb3IodmFyIGc9MDtnPGEubGVuZ3RoO2crKyl7az1cbmFbZ107dmFyIGY9ZCtRKGssZyk7aCs9UihrLGIsZSxmLGMpfWVsc2UgaWYoZj1BKGEpLFwiZnVuY3Rpb25cIj09PXR5cGVvZiBmKWZvcihhPWYuY2FsbChhKSxnPTA7IShrPWEubmV4dCgpKS5kb25lOylrPWsudmFsdWUsZj1kK1EoayxnKyspLGgrPVIoayxiLGUsZixjKTtlbHNlIGlmKFwib2JqZWN0XCI9PT1rKXRocm93IGI9U3RyaW5nKGEpLEVycm9yKFwiT2JqZWN0cyBhcmUgbm90IHZhbGlkIGFzIGEgUmVhY3QgY2hpbGQgKGZvdW5kOiBcIisoXCJbb2JqZWN0IE9iamVjdF1cIj09PWI/XCJvYmplY3Qgd2l0aCBrZXlzIHtcIitPYmplY3Qua2V5cyhhKS5qb2luKFwiLCBcIikrXCJ9XCI6YikrXCIpLiBJZiB5b3UgbWVhbnQgdG8gcmVuZGVyIGEgY29sbGVjdGlvbiBvZiBjaGlsZHJlbiwgdXNlIGFuIGFycmF5IGluc3RlYWQuXCIpO3JldHVybiBofVxuZnVuY3Rpb24gUyhhLGIsZSl7aWYobnVsbD09YSlyZXR1cm4gYTt2YXIgZD1bXSxjPTA7UihhLGQsXCJcIixcIlwiLGZ1bmN0aW9uKGEpe3JldHVybiBiLmNhbGwoZSxhLGMrKyl9KTtyZXR1cm4gZH1mdW5jdGlvbiBUKGEpe2lmKC0xPT09YS5fc3RhdHVzKXt2YXIgYj1hLl9yZXN1bHQ7Yj1iKCk7Yi50aGVuKGZ1bmN0aW9uKGIpe2lmKDA9PT1hLl9zdGF0dXN8fC0xPT09YS5fc3RhdHVzKWEuX3N0YXR1cz0xLGEuX3Jlc3VsdD1ifSxmdW5jdGlvbihiKXtpZigwPT09YS5fc3RhdHVzfHwtMT09PWEuX3N0YXR1cylhLl9zdGF0dXM9MixhLl9yZXN1bHQ9Yn0pOy0xPT09YS5fc3RhdHVzJiYoYS5fc3RhdHVzPTAsYS5fcmVzdWx0PWIpfWlmKDE9PT1hLl9zdGF0dXMpcmV0dXJuIGEuX3Jlc3VsdC5kZWZhdWx0O3Rocm93IGEuX3Jlc3VsdDt9XG52YXIgVT17Y3VycmVudDpudWxsfSxWPXt0cmFuc2l0aW9uOm51bGx9LFc9e1JlYWN0Q3VycmVudERpc3BhdGNoZXI6VSxSZWFjdEN1cnJlbnRCYXRjaENvbmZpZzpWLFJlYWN0Q3VycmVudE93bmVyOkt9O2V4cG9ydHMuQ2hpbGRyZW49e21hcDpTLGZvckVhY2g6ZnVuY3Rpb24oYSxiLGUpe1MoYSxmdW5jdGlvbigpe2IuYXBwbHkodGhpcyxhcmd1bWVudHMpfSxlKX0sY291bnQ6ZnVuY3Rpb24oYSl7dmFyIGI9MDtTKGEsZnVuY3Rpb24oKXtiKyt9KTtyZXR1cm4gYn0sdG9BcnJheTpmdW5jdGlvbihhKXtyZXR1cm4gUyhhLGZ1bmN0aW9uKGEpe3JldHVybiBhfSl8fFtdfSxvbmx5OmZ1bmN0aW9uKGEpe2lmKCFPKGEpKXRocm93IEVycm9yKFwiUmVhY3QuQ2hpbGRyZW4ub25seSBleHBlY3RlZCB0byByZWNlaXZlIGEgc2luZ2xlIFJlYWN0IGVsZW1lbnQgY2hpbGQuXCIpO3JldHVybiBhfX07ZXhwb3J0cy5Db21wb25lbnQ9RTtleHBvcnRzLkZyYWdtZW50PXA7XG5leHBvcnRzLlByb2ZpbGVyPXI7ZXhwb3J0cy5QdXJlQ29tcG9uZW50PUc7ZXhwb3J0cy5TdHJpY3RNb2RlPXE7ZXhwb3J0cy5TdXNwZW5zZT13O2V4cG9ydHMuX19TRUNSRVRfSU5URVJOQUxTX0RPX05PVF9VU0VfT1JfWU9VX1dJTExfQkVfRklSRUQ9VztcbmV4cG9ydHMuY2xvbmVFbGVtZW50PWZ1bmN0aW9uKGEsYixlKXtpZihudWxsPT09YXx8dm9pZCAwPT09YSl0aHJvdyBFcnJvcihcIlJlYWN0LmNsb25lRWxlbWVudCguLi4pOiBUaGUgYXJndW1lbnQgbXVzdCBiZSBhIFJlYWN0IGVsZW1lbnQsIGJ1dCB5b3UgcGFzc2VkIFwiK2ErXCIuXCIpO3ZhciBkPUMoe30sYS5wcm9wcyksYz1hLmtleSxrPWEucmVmLGg9YS5fb3duZXI7aWYobnVsbCE9Yil7dm9pZCAwIT09Yi5yZWYmJihrPWIucmVmLGg9Sy5jdXJyZW50KTt2b2lkIDAhPT1iLmtleSYmKGM9XCJcIitiLmtleSk7aWYoYS50eXBlJiZhLnR5cGUuZGVmYXVsdFByb3BzKXZhciBnPWEudHlwZS5kZWZhdWx0UHJvcHM7Zm9yKGYgaW4gYilKLmNhbGwoYixmKSYmIUwuaGFzT3duUHJvcGVydHkoZikmJihkW2ZdPXZvaWQgMD09PWJbZl0mJnZvaWQgMCE9PWc/Z1tmXTpiW2ZdKX12YXIgZj1hcmd1bWVudHMubGVuZ3RoLTI7aWYoMT09PWYpZC5jaGlsZHJlbj1lO2Vsc2UgaWYoMTxmKXtnPUFycmF5KGYpO1xuZm9yKHZhciBtPTA7bTxmO20rKylnW21dPWFyZ3VtZW50c1ttKzJdO2QuY2hpbGRyZW49Z31yZXR1cm57JCR0eXBlb2Y6bCx0eXBlOmEudHlwZSxrZXk6YyxyZWY6ayxwcm9wczpkLF9vd25lcjpofX07ZXhwb3J0cy5jcmVhdGVDb250ZXh0PWZ1bmN0aW9uKGEpe2E9eyQkdHlwZW9mOnUsX2N1cnJlbnRWYWx1ZTphLF9jdXJyZW50VmFsdWUyOmEsX3RocmVhZENvdW50OjAsUHJvdmlkZXI6bnVsbCxDb25zdW1lcjpudWxsLF9kZWZhdWx0VmFsdWU6bnVsbCxfZ2xvYmFsTmFtZTpudWxsfTthLlByb3ZpZGVyPXskJHR5cGVvZjp0LF9jb250ZXh0OmF9O3JldHVybiBhLkNvbnN1bWVyPWF9O2V4cG9ydHMuY3JlYXRlRWxlbWVudD1NO2V4cG9ydHMuY3JlYXRlRmFjdG9yeT1mdW5jdGlvbihhKXt2YXIgYj1NLmJpbmQobnVsbCxhKTtiLnR5cGU9YTtyZXR1cm4gYn07ZXhwb3J0cy5jcmVhdGVSZWY9ZnVuY3Rpb24oKXtyZXR1cm57Y3VycmVudDpudWxsfX07XG5leHBvcnRzLmZvcndhcmRSZWY9ZnVuY3Rpb24oYSl7cmV0dXJueyQkdHlwZW9mOnYscmVuZGVyOmF9fTtleHBvcnRzLmlzVmFsaWRFbGVtZW50PU87ZXhwb3J0cy5sYXp5PWZ1bmN0aW9uKGEpe3JldHVybnskJHR5cGVvZjp5LF9wYXlsb2FkOntfc3RhdHVzOi0xLF9yZXN1bHQ6YX0sX2luaXQ6VH19O2V4cG9ydHMubWVtbz1mdW5jdGlvbihhLGIpe3JldHVybnskJHR5cGVvZjp4LHR5cGU6YSxjb21wYXJlOnZvaWQgMD09PWI/bnVsbDpifX07ZXhwb3J0cy5zdGFydFRyYW5zaXRpb249ZnVuY3Rpb24oYSl7dmFyIGI9Vi50cmFuc2l0aW9uO1YudHJhbnNpdGlvbj17fTt0cnl7YSgpfWZpbmFsbHl7Vi50cmFuc2l0aW9uPWJ9fTtleHBvcnRzLnVuc3RhYmxlX2FjdD1mdW5jdGlvbigpe3Rocm93IEVycm9yKFwiYWN0KC4uLikgaXMgbm90IHN1cHBvcnRlZCBpbiBwcm9kdWN0aW9uIGJ1aWxkcyBvZiBSZWFjdC5cIik7fTtcbmV4cG9ydHMudXNlQ2FsbGJhY2s9ZnVuY3Rpb24oYSxiKXtyZXR1cm4gVS5jdXJyZW50LnVzZUNhbGxiYWNrKGEsYil9O2V4cG9ydHMudXNlQ29udGV4dD1mdW5jdGlvbihhKXtyZXR1cm4gVS5jdXJyZW50LnVzZUNvbnRleHQoYSl9O2V4cG9ydHMudXNlRGVidWdWYWx1ZT1mdW5jdGlvbigpe307ZXhwb3J0cy51c2VEZWZlcnJlZFZhbHVlPWZ1bmN0aW9uKGEpe3JldHVybiBVLmN1cnJlbnQudXNlRGVmZXJyZWRWYWx1ZShhKX07ZXhwb3J0cy51c2VFZmZlY3Q9ZnVuY3Rpb24oYSxiKXtyZXR1cm4gVS5jdXJyZW50LnVzZUVmZmVjdChhLGIpfTtleHBvcnRzLnVzZUlkPWZ1bmN0aW9uKCl7cmV0dXJuIFUuY3VycmVudC51c2VJZCgpfTtleHBvcnRzLnVzZUltcGVyYXRpdmVIYW5kbGU9ZnVuY3Rpb24oYSxiLGUpe3JldHVybiBVLmN1cnJlbnQudXNlSW1wZXJhdGl2ZUhhbmRsZShhLGIsZSl9O1xuZXhwb3J0cy51c2VJbnNlcnRpb25FZmZlY3Q9ZnVuY3Rpb24oYSxiKXtyZXR1cm4gVS5jdXJyZW50LnVzZUluc2VydGlvbkVmZmVjdChhLGIpfTtleHBvcnRzLnVzZUxheW91dEVmZmVjdD1mdW5jdGlvbihhLGIpe3JldHVybiBVLmN1cnJlbnQudXNlTGF5b3V0RWZmZWN0KGEsYil9O2V4cG9ydHMudXNlTWVtbz1mdW5jdGlvbihhLGIpe3JldHVybiBVLmN1cnJlbnQudXNlTWVtbyhhLGIpfTtleHBvcnRzLnVzZVJlZHVjZXI9ZnVuY3Rpb24oYSxiLGUpe3JldHVybiBVLmN1cnJlbnQudXNlUmVkdWNlcihhLGIsZSl9O2V4cG9ydHMudXNlUmVmPWZ1bmN0aW9uKGEpe3JldHVybiBVLmN1cnJlbnQudXNlUmVmKGEpfTtleHBvcnRzLnVzZVN0YXRlPWZ1bmN0aW9uKGEpe3JldHVybiBVLmN1cnJlbnQudXNlU3RhdGUoYSl9O2V4cG9ydHMudXNlU3luY0V4dGVybmFsU3RvcmU9ZnVuY3Rpb24oYSxiLGUpe3JldHVybiBVLmN1cnJlbnQudXNlU3luY0V4dGVybmFsU3RvcmUoYSxiLGUpfTtcbmV4cG9ydHMudXNlVHJhbnNpdGlvbj1mdW5jdGlvbigpe3JldHVybiBVLmN1cnJlbnQudXNlVHJhbnNpdGlvbigpfTtleHBvcnRzLnZlcnNpb249XCIxOC4wLjAtZmM0NmRiYTY3LTIwMjIwMzI5XCI7XG4iLCIndXNlIHN0cmljdCc7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QucHJvZHVjdGlvbi5taW4uanMnKTtcbn0gZWxzZSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QuZGV2ZWxvcG1lbnQuanMnKTtcbn1cbiIsIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDE0LXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cblxudmFyIHJ1bnRpbWUgPSAoZnVuY3Rpb24gKGV4cG9ydHMpIHtcbiAgXCJ1c2Ugc3RyaWN0XCI7XG5cbiAgdmFyIE9wID0gT2JqZWN0LnByb3RvdHlwZTtcbiAgdmFyIGhhc093biA9IE9wLmhhc093blByb3BlcnR5O1xuICB2YXIgdW5kZWZpbmVkOyAvLyBNb3JlIGNvbXByZXNzaWJsZSB0aGFuIHZvaWQgMC5cbiAgdmFyICRTeW1ib2wgPSB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgPyBTeW1ib2wgOiB7fTtcbiAgdmFyIGl0ZXJhdG9yU3ltYm9sID0gJFN5bWJvbC5pdGVyYXRvciB8fCBcIkBAaXRlcmF0b3JcIjtcbiAgdmFyIGFzeW5jSXRlcmF0b3JTeW1ib2wgPSAkU3ltYm9sLmFzeW5jSXRlcmF0b3IgfHwgXCJAQGFzeW5jSXRlcmF0b3JcIjtcbiAgdmFyIHRvU3RyaW5nVGFnU3ltYm9sID0gJFN5bWJvbC50b1N0cmluZ1RhZyB8fCBcIkBAdG9TdHJpbmdUYWdcIjtcblxuICBmdW5jdGlvbiBkZWZpbmUob2JqLCBrZXksIHZhbHVlKSB7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwga2V5LCB7XG4gICAgICB2YWx1ZTogdmFsdWUsXG4gICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgd3JpdGFibGU6IHRydWVcbiAgICB9KTtcbiAgICByZXR1cm4gb2JqW2tleV07XG4gIH1cbiAgdHJ5IHtcbiAgICAvLyBJRSA4IGhhcyBhIGJyb2tlbiBPYmplY3QuZGVmaW5lUHJvcGVydHkgdGhhdCBvbmx5IHdvcmtzIG9uIERPTSBvYmplY3RzLlxuICAgIGRlZmluZSh7fSwgXCJcIik7XG4gIH0gY2F0Y2ggKGVycikge1xuICAgIGRlZmluZSA9IGZ1bmN0aW9uKG9iaiwga2V5LCB2YWx1ZSkge1xuICAgICAgcmV0dXJuIG9ialtrZXldID0gdmFsdWU7XG4gICAgfTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHdyYXAoaW5uZXJGbiwgb3V0ZXJGbiwgc2VsZiwgdHJ5TG9jc0xpc3QpIHtcbiAgICAvLyBJZiBvdXRlckZuIHByb3ZpZGVkIGFuZCBvdXRlckZuLnByb3RvdHlwZSBpcyBhIEdlbmVyYXRvciwgdGhlbiBvdXRlckZuLnByb3RvdHlwZSBpbnN0YW5jZW9mIEdlbmVyYXRvci5cbiAgICB2YXIgcHJvdG9HZW5lcmF0b3IgPSBvdXRlckZuICYmIG91dGVyRm4ucHJvdG90eXBlIGluc3RhbmNlb2YgR2VuZXJhdG9yID8gb3V0ZXJGbiA6IEdlbmVyYXRvcjtcbiAgICB2YXIgZ2VuZXJhdG9yID0gT2JqZWN0LmNyZWF0ZShwcm90b0dlbmVyYXRvci5wcm90b3R5cGUpO1xuICAgIHZhciBjb250ZXh0ID0gbmV3IENvbnRleHQodHJ5TG9jc0xpc3QgfHwgW10pO1xuXG4gICAgLy8gVGhlIC5faW52b2tlIG1ldGhvZCB1bmlmaWVzIHRoZSBpbXBsZW1lbnRhdGlvbnMgb2YgdGhlIC5uZXh0LFxuICAgIC8vIC50aHJvdywgYW5kIC5yZXR1cm4gbWV0aG9kcy5cbiAgICBnZW5lcmF0b3IuX2ludm9rZSA9IG1ha2VJbnZva2VNZXRob2QoaW5uZXJGbiwgc2VsZiwgY29udGV4dCk7XG5cbiAgICByZXR1cm4gZ2VuZXJhdG9yO1xuICB9XG4gIGV4cG9ydHMud3JhcCA9IHdyYXA7XG5cbiAgLy8gVHJ5L2NhdGNoIGhlbHBlciB0byBtaW5pbWl6ZSBkZW9wdGltaXphdGlvbnMuIFJldHVybnMgYSBjb21wbGV0aW9uXG4gIC8vIHJlY29yZCBsaWtlIGNvbnRleHQudHJ5RW50cmllc1tpXS5jb21wbGV0aW9uLiBUaGlzIGludGVyZmFjZSBjb3VsZFxuICAvLyBoYXZlIGJlZW4gKGFuZCB3YXMgcHJldmlvdXNseSkgZGVzaWduZWQgdG8gdGFrZSBhIGNsb3N1cmUgdG8gYmVcbiAgLy8gaW52b2tlZCB3aXRob3V0IGFyZ3VtZW50cywgYnV0IGluIGFsbCB0aGUgY2FzZXMgd2UgY2FyZSBhYm91dCB3ZVxuICAvLyBhbHJlYWR5IGhhdmUgYW4gZXhpc3RpbmcgbWV0aG9kIHdlIHdhbnQgdG8gY2FsbCwgc28gdGhlcmUncyBubyBuZWVkXG4gIC8vIHRvIGNyZWF0ZSBhIG5ldyBmdW5jdGlvbiBvYmplY3QuIFdlIGNhbiBldmVuIGdldCBhd2F5IHdpdGggYXNzdW1pbmdcbiAgLy8gdGhlIG1ldGhvZCB0YWtlcyBleGFjdGx5IG9uZSBhcmd1bWVudCwgc2luY2UgdGhhdCBoYXBwZW5zIHRvIGJlIHRydWVcbiAgLy8gaW4gZXZlcnkgY2FzZSwgc28gd2UgZG9uJ3QgaGF2ZSB0byB0b3VjaCB0aGUgYXJndW1lbnRzIG9iamVjdC4gVGhlXG4gIC8vIG9ubHkgYWRkaXRpb25hbCBhbGxvY2F0aW9uIHJlcXVpcmVkIGlzIHRoZSBjb21wbGV0aW9uIHJlY29yZCwgd2hpY2hcbiAgLy8gaGFzIGEgc3RhYmxlIHNoYXBlIGFuZCBzbyBob3BlZnVsbHkgc2hvdWxkIGJlIGNoZWFwIHRvIGFsbG9jYXRlLlxuICBmdW5jdGlvbiB0cnlDYXRjaChmbiwgb2JqLCBhcmcpIHtcbiAgICB0cnkge1xuICAgICAgcmV0dXJuIHsgdHlwZTogXCJub3JtYWxcIiwgYXJnOiBmbi5jYWxsKG9iaiwgYXJnKSB9O1xuICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgcmV0dXJuIHsgdHlwZTogXCJ0aHJvd1wiLCBhcmc6IGVyciB9O1xuICAgIH1cbiAgfVxuXG4gIHZhciBHZW5TdGF0ZVN1c3BlbmRlZFN0YXJ0ID0gXCJzdXNwZW5kZWRTdGFydFwiO1xuICB2YXIgR2VuU3RhdGVTdXNwZW5kZWRZaWVsZCA9IFwic3VzcGVuZGVkWWllbGRcIjtcbiAgdmFyIEdlblN0YXRlRXhlY3V0aW5nID0gXCJleGVjdXRpbmdcIjtcbiAgdmFyIEdlblN0YXRlQ29tcGxldGVkID0gXCJjb21wbGV0ZWRcIjtcblxuICAvLyBSZXR1cm5pbmcgdGhpcyBvYmplY3QgZnJvbSB0aGUgaW5uZXJGbiBoYXMgdGhlIHNhbWUgZWZmZWN0IGFzXG4gIC8vIGJyZWFraW5nIG91dCBvZiB0aGUgZGlzcGF0Y2ggc3dpdGNoIHN0YXRlbWVudC5cbiAgdmFyIENvbnRpbnVlU2VudGluZWwgPSB7fTtcblxuICAvLyBEdW1teSBjb25zdHJ1Y3RvciBmdW5jdGlvbnMgdGhhdCB3ZSB1c2UgYXMgdGhlIC5jb25zdHJ1Y3RvciBhbmRcbiAgLy8gLmNvbnN0cnVjdG9yLnByb3RvdHlwZSBwcm9wZXJ0aWVzIGZvciBmdW5jdGlvbnMgdGhhdCByZXR1cm4gR2VuZXJhdG9yXG4gIC8vIG9iamVjdHMuIEZvciBmdWxsIHNwZWMgY29tcGxpYW5jZSwgeW91IG1heSB3aXNoIHRvIGNvbmZpZ3VyZSB5b3VyXG4gIC8vIG1pbmlmaWVyIG5vdCB0byBtYW5nbGUgdGhlIG5hbWVzIG9mIHRoZXNlIHR3byBmdW5jdGlvbnMuXG4gIGZ1bmN0aW9uIEdlbmVyYXRvcigpIHt9XG4gIGZ1bmN0aW9uIEdlbmVyYXRvckZ1bmN0aW9uKCkge31cbiAgZnVuY3Rpb24gR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGUoKSB7fVxuXG4gIC8vIFRoaXMgaXMgYSBwb2x5ZmlsbCBmb3IgJUl0ZXJhdG9yUHJvdG90eXBlJSBmb3IgZW52aXJvbm1lbnRzIHRoYXRcbiAgLy8gZG9uJ3QgbmF0aXZlbHkgc3VwcG9ydCBpdC5cbiAgdmFyIEl0ZXJhdG9yUHJvdG90eXBlID0ge307XG4gIGRlZmluZShJdGVyYXRvclByb3RvdHlwZSwgaXRlcmF0b3JTeW1ib2wsIGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gdGhpcztcbiAgfSk7XG5cbiAgdmFyIGdldFByb3RvID0gT2JqZWN0LmdldFByb3RvdHlwZU9mO1xuICB2YXIgTmF0aXZlSXRlcmF0b3JQcm90b3R5cGUgPSBnZXRQcm90byAmJiBnZXRQcm90byhnZXRQcm90byh2YWx1ZXMoW10pKSk7XG4gIGlmIChOYXRpdmVJdGVyYXRvclByb3RvdHlwZSAmJlxuICAgICAgTmF0aXZlSXRlcmF0b3JQcm90b3R5cGUgIT09IE9wICYmXG4gICAgICBoYXNPd24uY2FsbChOYXRpdmVJdGVyYXRvclByb3RvdHlwZSwgaXRlcmF0b3JTeW1ib2wpKSB7XG4gICAgLy8gVGhpcyBlbnZpcm9ubWVudCBoYXMgYSBuYXRpdmUgJUl0ZXJhdG9yUHJvdG90eXBlJTsgdXNlIGl0IGluc3RlYWRcbiAgICAvLyBvZiB0aGUgcG9seWZpbGwuXG4gICAgSXRlcmF0b3JQcm90b3R5cGUgPSBOYXRpdmVJdGVyYXRvclByb3RvdHlwZTtcbiAgfVxuXG4gIHZhciBHcCA9IEdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlLnByb3RvdHlwZSA9XG4gICAgR2VuZXJhdG9yLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoSXRlcmF0b3JQcm90b3R5cGUpO1xuICBHZW5lcmF0b3JGdW5jdGlvbi5wcm90b3R5cGUgPSBHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZTtcbiAgZGVmaW5lKEdwLCBcImNvbnN0cnVjdG9yXCIsIEdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlKTtcbiAgZGVmaW5lKEdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlLCBcImNvbnN0cnVjdG9yXCIsIEdlbmVyYXRvckZ1bmN0aW9uKTtcbiAgR2VuZXJhdG9yRnVuY3Rpb24uZGlzcGxheU5hbWUgPSBkZWZpbmUoXG4gICAgR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGUsXG4gICAgdG9TdHJpbmdUYWdTeW1ib2wsXG4gICAgXCJHZW5lcmF0b3JGdW5jdGlvblwiXG4gICk7XG5cbiAgLy8gSGVscGVyIGZvciBkZWZpbmluZyB0aGUgLm5leHQsIC50aHJvdywgYW5kIC5yZXR1cm4gbWV0aG9kcyBvZiB0aGVcbiAgLy8gSXRlcmF0b3IgaW50ZXJmYWNlIGluIHRlcm1zIG9mIGEgc2luZ2xlIC5faW52b2tlIG1ldGhvZC5cbiAgZnVuY3Rpb24gZGVmaW5lSXRlcmF0b3JNZXRob2RzKHByb3RvdHlwZSkge1xuICAgIFtcIm5leHRcIiwgXCJ0aHJvd1wiLCBcInJldHVyblwiXS5mb3JFYWNoKGZ1bmN0aW9uKG1ldGhvZCkge1xuICAgICAgZGVmaW5lKHByb3RvdHlwZSwgbWV0aG9kLCBmdW5jdGlvbihhcmcpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2ludm9rZShtZXRob2QsIGFyZyk7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgfVxuXG4gIGV4cG9ydHMuaXNHZW5lcmF0b3JGdW5jdGlvbiA9IGZ1bmN0aW9uKGdlbkZ1bikge1xuICAgIHZhciBjdG9yID0gdHlwZW9mIGdlbkZ1biA9PT0gXCJmdW5jdGlvblwiICYmIGdlbkZ1bi5jb25zdHJ1Y3RvcjtcbiAgICByZXR1cm4gY3RvclxuICAgICAgPyBjdG9yID09PSBHZW5lcmF0b3JGdW5jdGlvbiB8fFxuICAgICAgICAvLyBGb3IgdGhlIG5hdGl2ZSBHZW5lcmF0b3JGdW5jdGlvbiBjb25zdHJ1Y3RvciwgdGhlIGJlc3Qgd2UgY2FuXG4gICAgICAgIC8vIGRvIGlzIHRvIGNoZWNrIGl0cyAubmFtZSBwcm9wZXJ0eS5cbiAgICAgICAgKGN0b3IuZGlzcGxheU5hbWUgfHwgY3Rvci5uYW1lKSA9PT0gXCJHZW5lcmF0b3JGdW5jdGlvblwiXG4gICAgICA6IGZhbHNlO1xuICB9O1xuXG4gIGV4cG9ydHMubWFyayA9IGZ1bmN0aW9uKGdlbkZ1bikge1xuICAgIGlmIChPYmplY3Quc2V0UHJvdG90eXBlT2YpIHtcbiAgICAgIE9iamVjdC5zZXRQcm90b3R5cGVPZihnZW5GdW4sIEdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgZ2VuRnVuLl9fcHJvdG9fXyA9IEdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlO1xuICAgICAgZGVmaW5lKGdlbkZ1biwgdG9TdHJpbmdUYWdTeW1ib2wsIFwiR2VuZXJhdG9yRnVuY3Rpb25cIik7XG4gICAgfVxuICAgIGdlbkZ1bi5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKEdwKTtcbiAgICByZXR1cm4gZ2VuRnVuO1xuICB9O1xuXG4gIC8vIFdpdGhpbiB0aGUgYm9keSBvZiBhbnkgYXN5bmMgZnVuY3Rpb24sIGBhd2FpdCB4YCBpcyB0cmFuc2Zvcm1lZCB0b1xuICAvLyBgeWllbGQgcmVnZW5lcmF0b3JSdW50aW1lLmF3cmFwKHgpYCwgc28gdGhhdCB0aGUgcnVudGltZSBjYW4gdGVzdFxuICAvLyBgaGFzT3duLmNhbGwodmFsdWUsIFwiX19hd2FpdFwiKWAgdG8gZGV0ZXJtaW5lIGlmIHRoZSB5aWVsZGVkIHZhbHVlIGlzXG4gIC8vIG1lYW50IHRvIGJlIGF3YWl0ZWQuXG4gIGV4cG9ydHMuYXdyYXAgPSBmdW5jdGlvbihhcmcpIHtcbiAgICByZXR1cm4geyBfX2F3YWl0OiBhcmcgfTtcbiAgfTtcblxuICBmdW5jdGlvbiBBc3luY0l0ZXJhdG9yKGdlbmVyYXRvciwgUHJvbWlzZUltcGwpIHtcbiAgICBmdW5jdGlvbiBpbnZva2UobWV0aG9kLCBhcmcsIHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgdmFyIHJlY29yZCA9IHRyeUNhdGNoKGdlbmVyYXRvclttZXRob2RdLCBnZW5lcmF0b3IsIGFyZyk7XG4gICAgICBpZiAocmVjb3JkLnR5cGUgPT09IFwidGhyb3dcIikge1xuICAgICAgICByZWplY3QocmVjb3JkLmFyZyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2YXIgcmVzdWx0ID0gcmVjb3JkLmFyZztcbiAgICAgICAgdmFyIHZhbHVlID0gcmVzdWx0LnZhbHVlO1xuICAgICAgICBpZiAodmFsdWUgJiZcbiAgICAgICAgICAgIHR5cGVvZiB2YWx1ZSA9PT0gXCJvYmplY3RcIiAmJlxuICAgICAgICAgICAgaGFzT3duLmNhbGwodmFsdWUsIFwiX19hd2FpdFwiKSkge1xuICAgICAgICAgIHJldHVybiBQcm9taXNlSW1wbC5yZXNvbHZlKHZhbHVlLl9fYXdhaXQpLnRoZW4oZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgICAgICAgIGludm9rZShcIm5leHRcIiwgdmFsdWUsIHJlc29sdmUsIHJlamVjdCk7XG4gICAgICAgICAgfSwgZnVuY3Rpb24oZXJyKSB7XG4gICAgICAgICAgICBpbnZva2UoXCJ0aHJvd1wiLCBlcnIsIHJlc29sdmUsIHJlamVjdCk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gUHJvbWlzZUltcGwucmVzb2x2ZSh2YWx1ZSkudGhlbihmdW5jdGlvbih1bndyYXBwZWQpIHtcbiAgICAgICAgICAvLyBXaGVuIGEgeWllbGRlZCBQcm9taXNlIGlzIHJlc29sdmVkLCBpdHMgZmluYWwgdmFsdWUgYmVjb21lc1xuICAgICAgICAgIC8vIHRoZSAudmFsdWUgb2YgdGhlIFByb21pc2U8e3ZhbHVlLGRvbmV9PiByZXN1bHQgZm9yIHRoZVxuICAgICAgICAgIC8vIGN1cnJlbnQgaXRlcmF0aW9uLlxuICAgICAgICAgIHJlc3VsdC52YWx1ZSA9IHVud3JhcHBlZDtcbiAgICAgICAgICByZXNvbHZlKHJlc3VsdCk7XG4gICAgICAgIH0sIGZ1bmN0aW9uKGVycm9yKSB7XG4gICAgICAgICAgLy8gSWYgYSByZWplY3RlZCBQcm9taXNlIHdhcyB5aWVsZGVkLCB0aHJvdyB0aGUgcmVqZWN0aW9uIGJhY2tcbiAgICAgICAgICAvLyBpbnRvIHRoZSBhc3luYyBnZW5lcmF0b3IgZnVuY3Rpb24gc28gaXQgY2FuIGJlIGhhbmRsZWQgdGhlcmUuXG4gICAgICAgICAgcmV0dXJuIGludm9rZShcInRocm93XCIsIGVycm9yLCByZXNvbHZlLCByZWplY3QpO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB2YXIgcHJldmlvdXNQcm9taXNlO1xuXG4gICAgZnVuY3Rpb24gZW5xdWV1ZShtZXRob2QsIGFyZykge1xuICAgICAgZnVuY3Rpb24gY2FsbEludm9rZVdpdGhNZXRob2RBbmRBcmcoKSB7XG4gICAgICAgIHJldHVybiBuZXcgUHJvbWlzZUltcGwoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICAgICAgaW52b2tlKG1ldGhvZCwgYXJnLCByZXNvbHZlLCByZWplY3QpO1xuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHByZXZpb3VzUHJvbWlzZSA9XG4gICAgICAgIC8vIElmIGVucXVldWUgaGFzIGJlZW4gY2FsbGVkIGJlZm9yZSwgdGhlbiB3ZSB3YW50IHRvIHdhaXQgdW50aWxcbiAgICAgICAgLy8gYWxsIHByZXZpb3VzIFByb21pc2VzIGhhdmUgYmVlbiByZXNvbHZlZCBiZWZvcmUgY2FsbGluZyBpbnZva2UsXG4gICAgICAgIC8vIHNvIHRoYXQgcmVzdWx0cyBhcmUgYWx3YXlzIGRlbGl2ZXJlZCBpbiB0aGUgY29ycmVjdCBvcmRlci4gSWZcbiAgICAgICAgLy8gZW5xdWV1ZSBoYXMgbm90IGJlZW4gY2FsbGVkIGJlZm9yZSwgdGhlbiBpdCBpcyBpbXBvcnRhbnQgdG9cbiAgICAgICAgLy8gY2FsbCBpbnZva2UgaW1tZWRpYXRlbHksIHdpdGhvdXQgd2FpdGluZyBvbiBhIGNhbGxiYWNrIHRvIGZpcmUsXG4gICAgICAgIC8vIHNvIHRoYXQgdGhlIGFzeW5jIGdlbmVyYXRvciBmdW5jdGlvbiBoYXMgdGhlIG9wcG9ydHVuaXR5IHRvIGRvXG4gICAgICAgIC8vIGFueSBuZWNlc3Nhcnkgc2V0dXAgaW4gYSBwcmVkaWN0YWJsZSB3YXkuIFRoaXMgcHJlZGljdGFiaWxpdHlcbiAgICAgICAgLy8gaXMgd2h5IHRoZSBQcm9taXNlIGNvbnN0cnVjdG9yIHN5bmNocm9ub3VzbHkgaW52b2tlcyBpdHNcbiAgICAgICAgLy8gZXhlY3V0b3IgY2FsbGJhY2ssIGFuZCB3aHkgYXN5bmMgZnVuY3Rpb25zIHN5bmNocm9ub3VzbHlcbiAgICAgICAgLy8gZXhlY3V0ZSBjb2RlIGJlZm9yZSB0aGUgZmlyc3QgYXdhaXQuIFNpbmNlIHdlIGltcGxlbWVudCBzaW1wbGVcbiAgICAgICAgLy8gYXN5bmMgZnVuY3Rpb25zIGluIHRlcm1zIG9mIGFzeW5jIGdlbmVyYXRvcnMsIGl0IGlzIGVzcGVjaWFsbHlcbiAgICAgICAgLy8gaW1wb3J0YW50IHRvIGdldCB0aGlzIHJpZ2h0LCBldmVuIHRob3VnaCBpdCByZXF1aXJlcyBjYXJlLlxuICAgICAgICBwcmV2aW91c1Byb21pc2UgPyBwcmV2aW91c1Byb21pc2UudGhlbihcbiAgICAgICAgICBjYWxsSW52b2tlV2l0aE1ldGhvZEFuZEFyZyxcbiAgICAgICAgICAvLyBBdm9pZCBwcm9wYWdhdGluZyBmYWlsdXJlcyB0byBQcm9taXNlcyByZXR1cm5lZCBieSBsYXRlclxuICAgICAgICAgIC8vIGludm9jYXRpb25zIG9mIHRoZSBpdGVyYXRvci5cbiAgICAgICAgICBjYWxsSW52b2tlV2l0aE1ldGhvZEFuZEFyZ1xuICAgICAgICApIDogY2FsbEludm9rZVdpdGhNZXRob2RBbmRBcmcoKTtcbiAgICB9XG5cbiAgICAvLyBEZWZpbmUgdGhlIHVuaWZpZWQgaGVscGVyIG1ldGhvZCB0aGF0IGlzIHVzZWQgdG8gaW1wbGVtZW50IC5uZXh0LFxuICAgIC8vIC50aHJvdywgYW5kIC5yZXR1cm4gKHNlZSBkZWZpbmVJdGVyYXRvck1ldGhvZHMpLlxuICAgIHRoaXMuX2ludm9rZSA9IGVucXVldWU7XG4gIH1cblxuICBkZWZpbmVJdGVyYXRvck1ldGhvZHMoQXN5bmNJdGVyYXRvci5wcm90b3R5cGUpO1xuICBkZWZpbmUoQXN5bmNJdGVyYXRvci5wcm90b3R5cGUsIGFzeW5jSXRlcmF0b3JTeW1ib2wsIGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gdGhpcztcbiAgfSk7XG4gIGV4cG9ydHMuQXN5bmNJdGVyYXRvciA9IEFzeW5jSXRlcmF0b3I7XG5cbiAgLy8gTm90ZSB0aGF0IHNpbXBsZSBhc3luYyBmdW5jdGlvbnMgYXJlIGltcGxlbWVudGVkIG9uIHRvcCBvZlxuICAvLyBBc3luY0l0ZXJhdG9yIG9iamVjdHM7IHRoZXkganVzdCByZXR1cm4gYSBQcm9taXNlIGZvciB0aGUgdmFsdWUgb2ZcbiAgLy8gdGhlIGZpbmFsIHJlc3VsdCBwcm9kdWNlZCBieSB0aGUgaXRlcmF0b3IuXG4gIGV4cG9ydHMuYXN5bmMgPSBmdW5jdGlvbihpbm5lckZuLCBvdXRlckZuLCBzZWxmLCB0cnlMb2NzTGlzdCwgUHJvbWlzZUltcGwpIHtcbiAgICBpZiAoUHJvbWlzZUltcGwgPT09IHZvaWQgMCkgUHJvbWlzZUltcGwgPSBQcm9taXNlO1xuXG4gICAgdmFyIGl0ZXIgPSBuZXcgQXN5bmNJdGVyYXRvcihcbiAgICAgIHdyYXAoaW5uZXJGbiwgb3V0ZXJGbiwgc2VsZiwgdHJ5TG9jc0xpc3QpLFxuICAgICAgUHJvbWlzZUltcGxcbiAgICApO1xuXG4gICAgcmV0dXJuIGV4cG9ydHMuaXNHZW5lcmF0b3JGdW5jdGlvbihvdXRlckZuKVxuICAgICAgPyBpdGVyIC8vIElmIG91dGVyRm4gaXMgYSBnZW5lcmF0b3IsIHJldHVybiB0aGUgZnVsbCBpdGVyYXRvci5cbiAgICAgIDogaXRlci5uZXh0KCkudGhlbihmdW5jdGlvbihyZXN1bHQpIHtcbiAgICAgICAgICByZXR1cm4gcmVzdWx0LmRvbmUgPyByZXN1bHQudmFsdWUgOiBpdGVyLm5leHQoKTtcbiAgICAgICAgfSk7XG4gIH07XG5cbiAgZnVuY3Rpb24gbWFrZUludm9rZU1ldGhvZChpbm5lckZuLCBzZWxmLCBjb250ZXh0KSB7XG4gICAgdmFyIHN0YXRlID0gR2VuU3RhdGVTdXNwZW5kZWRTdGFydDtcblxuICAgIHJldHVybiBmdW5jdGlvbiBpbnZva2UobWV0aG9kLCBhcmcpIHtcbiAgICAgIGlmIChzdGF0ZSA9PT0gR2VuU3RhdGVFeGVjdXRpbmcpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiR2VuZXJhdG9yIGlzIGFscmVhZHkgcnVubmluZ1wiKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHN0YXRlID09PSBHZW5TdGF0ZUNvbXBsZXRlZCkge1xuICAgICAgICBpZiAobWV0aG9kID09PSBcInRocm93XCIpIHtcbiAgICAgICAgICB0aHJvdyBhcmc7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBCZSBmb3JnaXZpbmcsIHBlciAyNS4zLjMuMy4zIG9mIHRoZSBzcGVjOlxuICAgICAgICAvLyBodHRwczovL3Blb3BsZS5tb3ppbGxhLm9yZy9+am9yZW5kb3JmZi9lczYtZHJhZnQuaHRtbCNzZWMtZ2VuZXJhdG9ycmVzdW1lXG4gICAgICAgIHJldHVybiBkb25lUmVzdWx0KCk7XG4gICAgICB9XG5cbiAgICAgIGNvbnRleHQubWV0aG9kID0gbWV0aG9kO1xuICAgICAgY29udGV4dC5hcmcgPSBhcmc7XG5cbiAgICAgIHdoaWxlICh0cnVlKSB7XG4gICAgICAgIHZhciBkZWxlZ2F0ZSA9IGNvbnRleHQuZGVsZWdhdGU7XG4gICAgICAgIGlmIChkZWxlZ2F0ZSkge1xuICAgICAgICAgIHZhciBkZWxlZ2F0ZVJlc3VsdCA9IG1heWJlSW52b2tlRGVsZWdhdGUoZGVsZWdhdGUsIGNvbnRleHQpO1xuICAgICAgICAgIGlmIChkZWxlZ2F0ZVJlc3VsdCkge1xuICAgICAgICAgICAgaWYgKGRlbGVnYXRlUmVzdWx0ID09PSBDb250aW51ZVNlbnRpbmVsKSBjb250aW51ZTtcbiAgICAgICAgICAgIHJldHVybiBkZWxlZ2F0ZVJlc3VsdDtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoY29udGV4dC5tZXRob2QgPT09IFwibmV4dFwiKSB7XG4gICAgICAgICAgLy8gU2V0dGluZyBjb250ZXh0Ll9zZW50IGZvciBsZWdhY3kgc3VwcG9ydCBvZiBCYWJlbCdzXG4gICAgICAgICAgLy8gZnVuY3Rpb24uc2VudCBpbXBsZW1lbnRhdGlvbi5cbiAgICAgICAgICBjb250ZXh0LnNlbnQgPSBjb250ZXh0Ll9zZW50ID0gY29udGV4dC5hcmc7XG5cbiAgICAgICAgfSBlbHNlIGlmIChjb250ZXh0Lm1ldGhvZCA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICAgICAgaWYgKHN0YXRlID09PSBHZW5TdGF0ZVN1c3BlbmRlZFN0YXJ0KSB7XG4gICAgICAgICAgICBzdGF0ZSA9IEdlblN0YXRlQ29tcGxldGVkO1xuICAgICAgICAgICAgdGhyb3cgY29udGV4dC5hcmc7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgY29udGV4dC5kaXNwYXRjaEV4Y2VwdGlvbihjb250ZXh0LmFyZyk7XG5cbiAgICAgICAgfSBlbHNlIGlmIChjb250ZXh0Lm1ldGhvZCA9PT0gXCJyZXR1cm5cIikge1xuICAgICAgICAgIGNvbnRleHQuYWJydXB0KFwicmV0dXJuXCIsIGNvbnRleHQuYXJnKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHN0YXRlID0gR2VuU3RhdGVFeGVjdXRpbmc7XG5cbiAgICAgICAgdmFyIHJlY29yZCA9IHRyeUNhdGNoKGlubmVyRm4sIHNlbGYsIGNvbnRleHQpO1xuICAgICAgICBpZiAocmVjb3JkLnR5cGUgPT09IFwibm9ybWFsXCIpIHtcbiAgICAgICAgICAvLyBJZiBhbiBleGNlcHRpb24gaXMgdGhyb3duIGZyb20gaW5uZXJGbiwgd2UgbGVhdmUgc3RhdGUgPT09XG4gICAgICAgICAgLy8gR2VuU3RhdGVFeGVjdXRpbmcgYW5kIGxvb3AgYmFjayBmb3IgYW5vdGhlciBpbnZvY2F0aW9uLlxuICAgICAgICAgIHN0YXRlID0gY29udGV4dC5kb25lXG4gICAgICAgICAgICA/IEdlblN0YXRlQ29tcGxldGVkXG4gICAgICAgICAgICA6IEdlblN0YXRlU3VzcGVuZGVkWWllbGQ7XG5cbiAgICAgICAgICBpZiAocmVjb3JkLmFyZyA9PT0gQ29udGludWVTZW50aW5lbCkge1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHZhbHVlOiByZWNvcmQuYXJnLFxuICAgICAgICAgICAgZG9uZTogY29udGV4dC5kb25lXG4gICAgICAgICAgfTtcblxuICAgICAgICB9IGVsc2UgaWYgKHJlY29yZC50eXBlID09PSBcInRocm93XCIpIHtcbiAgICAgICAgICBzdGF0ZSA9IEdlblN0YXRlQ29tcGxldGVkO1xuICAgICAgICAgIC8vIERpc3BhdGNoIHRoZSBleGNlcHRpb24gYnkgbG9vcGluZyBiYWNrIGFyb3VuZCB0byB0aGVcbiAgICAgICAgICAvLyBjb250ZXh0LmRpc3BhdGNoRXhjZXB0aW9uKGNvbnRleHQuYXJnKSBjYWxsIGFib3ZlLlxuICAgICAgICAgIGNvbnRleHQubWV0aG9kID0gXCJ0aHJvd1wiO1xuICAgICAgICAgIGNvbnRleHQuYXJnID0gcmVjb3JkLmFyZztcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH07XG4gIH1cblxuICAvLyBDYWxsIGRlbGVnYXRlLml0ZXJhdG9yW2NvbnRleHQubWV0aG9kXShjb250ZXh0LmFyZykgYW5kIGhhbmRsZSB0aGVcbiAgLy8gcmVzdWx0LCBlaXRoZXIgYnkgcmV0dXJuaW5nIGEgeyB2YWx1ZSwgZG9uZSB9IHJlc3VsdCBmcm9tIHRoZVxuICAvLyBkZWxlZ2F0ZSBpdGVyYXRvciwgb3IgYnkgbW9kaWZ5aW5nIGNvbnRleHQubWV0aG9kIGFuZCBjb250ZXh0LmFyZyxcbiAgLy8gc2V0dGluZyBjb250ZXh0LmRlbGVnYXRlIHRvIG51bGwsIGFuZCByZXR1cm5pbmcgdGhlIENvbnRpbnVlU2VudGluZWwuXG4gIGZ1bmN0aW9uIG1heWJlSW52b2tlRGVsZWdhdGUoZGVsZWdhdGUsIGNvbnRleHQpIHtcbiAgICB2YXIgbWV0aG9kID0gZGVsZWdhdGUuaXRlcmF0b3JbY29udGV4dC5tZXRob2RdO1xuICAgIGlmIChtZXRob2QgPT09IHVuZGVmaW5lZCkge1xuICAgICAgLy8gQSAudGhyb3cgb3IgLnJldHVybiB3aGVuIHRoZSBkZWxlZ2F0ZSBpdGVyYXRvciBoYXMgbm8gLnRocm93XG4gICAgICAvLyBtZXRob2QgYWx3YXlzIHRlcm1pbmF0ZXMgdGhlIHlpZWxkKiBsb29wLlxuICAgICAgY29udGV4dC5kZWxlZ2F0ZSA9IG51bGw7XG5cbiAgICAgIGlmIChjb250ZXh0Lm1ldGhvZCA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICAgIC8vIE5vdGU6IFtcInJldHVyblwiXSBtdXN0IGJlIHVzZWQgZm9yIEVTMyBwYXJzaW5nIGNvbXBhdGliaWxpdHkuXG4gICAgICAgIGlmIChkZWxlZ2F0ZS5pdGVyYXRvcltcInJldHVyblwiXSkge1xuICAgICAgICAgIC8vIElmIHRoZSBkZWxlZ2F0ZSBpdGVyYXRvciBoYXMgYSByZXR1cm4gbWV0aG9kLCBnaXZlIGl0IGFcbiAgICAgICAgICAvLyBjaGFuY2UgdG8gY2xlYW4gdXAuXG4gICAgICAgICAgY29udGV4dC5tZXRob2QgPSBcInJldHVyblwiO1xuICAgICAgICAgIGNvbnRleHQuYXJnID0gdW5kZWZpbmVkO1xuICAgICAgICAgIG1heWJlSW52b2tlRGVsZWdhdGUoZGVsZWdhdGUsIGNvbnRleHQpO1xuXG4gICAgICAgICAgaWYgKGNvbnRleHQubWV0aG9kID09PSBcInRocm93XCIpIHtcbiAgICAgICAgICAgIC8vIElmIG1heWJlSW52b2tlRGVsZWdhdGUoY29udGV4dCkgY2hhbmdlZCBjb250ZXh0Lm1ldGhvZCBmcm9tXG4gICAgICAgICAgICAvLyBcInJldHVyblwiIHRvIFwidGhyb3dcIiwgbGV0IHRoYXQgb3ZlcnJpZGUgdGhlIFR5cGVFcnJvciBiZWxvdy5cbiAgICAgICAgICAgIHJldHVybiBDb250aW51ZVNlbnRpbmVsO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnRleHQubWV0aG9kID0gXCJ0aHJvd1wiO1xuICAgICAgICBjb250ZXh0LmFyZyA9IG5ldyBUeXBlRXJyb3IoXG4gICAgICAgICAgXCJUaGUgaXRlcmF0b3IgZG9lcyBub3QgcHJvdmlkZSBhICd0aHJvdycgbWV0aG9kXCIpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gQ29udGludWVTZW50aW5lbDtcbiAgICB9XG5cbiAgICB2YXIgcmVjb3JkID0gdHJ5Q2F0Y2gobWV0aG9kLCBkZWxlZ2F0ZS5pdGVyYXRvciwgY29udGV4dC5hcmcpO1xuXG4gICAgaWYgKHJlY29yZC50eXBlID09PSBcInRocm93XCIpIHtcbiAgICAgIGNvbnRleHQubWV0aG9kID0gXCJ0aHJvd1wiO1xuICAgICAgY29udGV4dC5hcmcgPSByZWNvcmQuYXJnO1xuICAgICAgY29udGV4dC5kZWxlZ2F0ZSA9IG51bGw7XG4gICAgICByZXR1cm4gQ29udGludWVTZW50aW5lbDtcbiAgICB9XG5cbiAgICB2YXIgaW5mbyA9IHJlY29yZC5hcmc7XG5cbiAgICBpZiAoISBpbmZvKSB7XG4gICAgICBjb250ZXh0Lm1ldGhvZCA9IFwidGhyb3dcIjtcbiAgICAgIGNvbnRleHQuYXJnID0gbmV3IFR5cGVFcnJvcihcIml0ZXJhdG9yIHJlc3VsdCBpcyBub3QgYW4gb2JqZWN0XCIpO1xuICAgICAgY29udGV4dC5kZWxlZ2F0ZSA9IG51bGw7XG4gICAgICByZXR1cm4gQ29udGludWVTZW50aW5lbDtcbiAgICB9XG5cbiAgICBpZiAoaW5mby5kb25lKSB7XG4gICAgICAvLyBBc3NpZ24gdGhlIHJlc3VsdCBvZiB0aGUgZmluaXNoZWQgZGVsZWdhdGUgdG8gdGhlIHRlbXBvcmFyeVxuICAgICAgLy8gdmFyaWFibGUgc3BlY2lmaWVkIGJ5IGRlbGVnYXRlLnJlc3VsdE5hbWUgKHNlZSBkZWxlZ2F0ZVlpZWxkKS5cbiAgICAgIGNvbnRleHRbZGVsZWdhdGUucmVzdWx0TmFtZV0gPSBpbmZvLnZhbHVlO1xuXG4gICAgICAvLyBSZXN1bWUgZXhlY3V0aW9uIGF0IHRoZSBkZXNpcmVkIGxvY2F0aW9uIChzZWUgZGVsZWdhdGVZaWVsZCkuXG4gICAgICBjb250ZXh0Lm5leHQgPSBkZWxlZ2F0ZS5uZXh0TG9jO1xuXG4gICAgICAvLyBJZiBjb250ZXh0Lm1ldGhvZCB3YXMgXCJ0aHJvd1wiIGJ1dCB0aGUgZGVsZWdhdGUgaGFuZGxlZCB0aGVcbiAgICAgIC8vIGV4Y2VwdGlvbiwgbGV0IHRoZSBvdXRlciBnZW5lcmF0b3IgcHJvY2VlZCBub3JtYWxseS4gSWZcbiAgICAgIC8vIGNvbnRleHQubWV0aG9kIHdhcyBcIm5leHRcIiwgZm9yZ2V0IGNvbnRleHQuYXJnIHNpbmNlIGl0IGhhcyBiZWVuXG4gICAgICAvLyBcImNvbnN1bWVkXCIgYnkgdGhlIGRlbGVnYXRlIGl0ZXJhdG9yLiBJZiBjb250ZXh0Lm1ldGhvZCB3YXNcbiAgICAgIC8vIFwicmV0dXJuXCIsIGFsbG93IHRoZSBvcmlnaW5hbCAucmV0dXJuIGNhbGwgdG8gY29udGludWUgaW4gdGhlXG4gICAgICAvLyBvdXRlciBnZW5lcmF0b3IuXG4gICAgICBpZiAoY29udGV4dC5tZXRob2QgIT09IFwicmV0dXJuXCIpIHtcbiAgICAgICAgY29udGV4dC5tZXRob2QgPSBcIm5leHRcIjtcbiAgICAgICAgY29udGV4dC5hcmcgPSB1bmRlZmluZWQ7XG4gICAgICB9XG5cbiAgICB9IGVsc2Uge1xuICAgICAgLy8gUmUteWllbGQgdGhlIHJlc3VsdCByZXR1cm5lZCBieSB0aGUgZGVsZWdhdGUgbWV0aG9kLlxuICAgICAgcmV0dXJuIGluZm87XG4gICAgfVxuXG4gICAgLy8gVGhlIGRlbGVnYXRlIGl0ZXJhdG9yIGlzIGZpbmlzaGVkLCBzbyBmb3JnZXQgaXQgYW5kIGNvbnRpbnVlIHdpdGhcbiAgICAvLyB0aGUgb3V0ZXIgZ2VuZXJhdG9yLlxuICAgIGNvbnRleHQuZGVsZWdhdGUgPSBudWxsO1xuICAgIHJldHVybiBDb250aW51ZVNlbnRpbmVsO1xuICB9XG5cbiAgLy8gRGVmaW5lIEdlbmVyYXRvci5wcm90b3R5cGUue25leHQsdGhyb3cscmV0dXJufSBpbiB0ZXJtcyBvZiB0aGVcbiAgLy8gdW5pZmllZCAuX2ludm9rZSBoZWxwZXIgbWV0aG9kLlxuICBkZWZpbmVJdGVyYXRvck1ldGhvZHMoR3ApO1xuXG4gIGRlZmluZShHcCwgdG9TdHJpbmdUYWdTeW1ib2wsIFwiR2VuZXJhdG9yXCIpO1xuXG4gIC8vIEEgR2VuZXJhdG9yIHNob3VsZCBhbHdheXMgcmV0dXJuIGl0c2VsZiBhcyB0aGUgaXRlcmF0b3Igb2JqZWN0IHdoZW4gdGhlXG4gIC8vIEBAaXRlcmF0b3IgZnVuY3Rpb24gaXMgY2FsbGVkIG9uIGl0LiBTb21lIGJyb3dzZXJzJyBpbXBsZW1lbnRhdGlvbnMgb2YgdGhlXG4gIC8vIGl0ZXJhdG9yIHByb3RvdHlwZSBjaGFpbiBpbmNvcnJlY3RseSBpbXBsZW1lbnQgdGhpcywgY2F1c2luZyB0aGUgR2VuZXJhdG9yXG4gIC8vIG9iamVjdCB0byBub3QgYmUgcmV0dXJuZWQgZnJvbSB0aGlzIGNhbGwuIFRoaXMgZW5zdXJlcyB0aGF0IGRvZXNuJ3QgaGFwcGVuLlxuICAvLyBTZWUgaHR0cHM6Ly9naXRodWIuY29tL2ZhY2Vib29rL3JlZ2VuZXJhdG9yL2lzc3Vlcy8yNzQgZm9yIG1vcmUgZGV0YWlscy5cbiAgZGVmaW5lKEdwLCBpdGVyYXRvclN5bWJvbCwgZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH0pO1xuXG4gIGRlZmluZShHcCwgXCJ0b1N0cmluZ1wiLCBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gXCJbb2JqZWN0IEdlbmVyYXRvcl1cIjtcbiAgfSk7XG5cbiAgZnVuY3Rpb24gcHVzaFRyeUVudHJ5KGxvY3MpIHtcbiAgICB2YXIgZW50cnkgPSB7IHRyeUxvYzogbG9jc1swXSB9O1xuXG4gICAgaWYgKDEgaW4gbG9jcykge1xuICAgICAgZW50cnkuY2F0Y2hMb2MgPSBsb2NzWzFdO1xuICAgIH1cblxuICAgIGlmICgyIGluIGxvY3MpIHtcbiAgICAgIGVudHJ5LmZpbmFsbHlMb2MgPSBsb2NzWzJdO1xuICAgICAgZW50cnkuYWZ0ZXJMb2MgPSBsb2NzWzNdO1xuICAgIH1cblxuICAgIHRoaXMudHJ5RW50cmllcy5wdXNoKGVudHJ5KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHJlc2V0VHJ5RW50cnkoZW50cnkpIHtcbiAgICB2YXIgcmVjb3JkID0gZW50cnkuY29tcGxldGlvbiB8fCB7fTtcbiAgICByZWNvcmQudHlwZSA9IFwibm9ybWFsXCI7XG4gICAgZGVsZXRlIHJlY29yZC5hcmc7XG4gICAgZW50cnkuY29tcGxldGlvbiA9IHJlY29yZDtcbiAgfVxuXG4gIGZ1bmN0aW9uIENvbnRleHQodHJ5TG9jc0xpc3QpIHtcbiAgICAvLyBUaGUgcm9vdCBlbnRyeSBvYmplY3QgKGVmZmVjdGl2ZWx5IGEgdHJ5IHN0YXRlbWVudCB3aXRob3V0IGEgY2F0Y2hcbiAgICAvLyBvciBhIGZpbmFsbHkgYmxvY2spIGdpdmVzIHVzIGEgcGxhY2UgdG8gc3RvcmUgdmFsdWVzIHRocm93biBmcm9tXG4gICAgLy8gbG9jYXRpb25zIHdoZXJlIHRoZXJlIGlzIG5vIGVuY2xvc2luZyB0cnkgc3RhdGVtZW50LlxuICAgIHRoaXMudHJ5RW50cmllcyA9IFt7IHRyeUxvYzogXCJyb290XCIgfV07XG4gICAgdHJ5TG9jc0xpc3QuZm9yRWFjaChwdXNoVHJ5RW50cnksIHRoaXMpO1xuICAgIHRoaXMucmVzZXQodHJ1ZSk7XG4gIH1cblxuICBleHBvcnRzLmtleXMgPSBmdW5jdGlvbihvYmplY3QpIHtcbiAgICB2YXIga2V5cyA9IFtdO1xuICAgIGZvciAodmFyIGtleSBpbiBvYmplY3QpIHtcbiAgICAgIGtleXMucHVzaChrZXkpO1xuICAgIH1cbiAgICBrZXlzLnJldmVyc2UoKTtcblxuICAgIC8vIFJhdGhlciB0aGFuIHJldHVybmluZyBhbiBvYmplY3Qgd2l0aCBhIG5leHQgbWV0aG9kLCB3ZSBrZWVwXG4gICAgLy8gdGhpbmdzIHNpbXBsZSBhbmQgcmV0dXJuIHRoZSBuZXh0IGZ1bmN0aW9uIGl0c2VsZi5cbiAgICByZXR1cm4gZnVuY3Rpb24gbmV4dCgpIHtcbiAgICAgIHdoaWxlIChrZXlzLmxlbmd0aCkge1xuICAgICAgICB2YXIga2V5ID0ga2V5cy5wb3AoKTtcbiAgICAgICAgaWYgKGtleSBpbiBvYmplY3QpIHtcbiAgICAgICAgICBuZXh0LnZhbHVlID0ga2V5O1xuICAgICAgICAgIG5leHQuZG9uZSA9IGZhbHNlO1xuICAgICAgICAgIHJldHVybiBuZXh0O1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIC8vIFRvIGF2b2lkIGNyZWF0aW5nIGFuIGFkZGl0aW9uYWwgb2JqZWN0LCB3ZSBqdXN0IGhhbmcgdGhlIC52YWx1ZVxuICAgICAgLy8gYW5kIC5kb25lIHByb3BlcnRpZXMgb2ZmIHRoZSBuZXh0IGZ1bmN0aW9uIG9iamVjdCBpdHNlbGYuIFRoaXNcbiAgICAgIC8vIGFsc28gZW5zdXJlcyB0aGF0IHRoZSBtaW5pZmllciB3aWxsIG5vdCBhbm9ueW1pemUgdGhlIGZ1bmN0aW9uLlxuICAgICAgbmV4dC5kb25lID0gdHJ1ZTtcbiAgICAgIHJldHVybiBuZXh0O1xuICAgIH07XG4gIH07XG5cbiAgZnVuY3Rpb24gdmFsdWVzKGl0ZXJhYmxlKSB7XG4gICAgaWYgKGl0ZXJhYmxlKSB7XG4gICAgICB2YXIgaXRlcmF0b3JNZXRob2QgPSBpdGVyYWJsZVtpdGVyYXRvclN5bWJvbF07XG4gICAgICBpZiAoaXRlcmF0b3JNZXRob2QpIHtcbiAgICAgICAgcmV0dXJuIGl0ZXJhdG9yTWV0aG9kLmNhbGwoaXRlcmFibGUpO1xuICAgICAgfVxuXG4gICAgICBpZiAodHlwZW9mIGl0ZXJhYmxlLm5leHQgPT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICByZXR1cm4gaXRlcmFibGU7XG4gICAgICB9XG5cbiAgICAgIGlmICghaXNOYU4oaXRlcmFibGUubGVuZ3RoKSkge1xuICAgICAgICB2YXIgaSA9IC0xLCBuZXh0ID0gZnVuY3Rpb24gbmV4dCgpIHtcbiAgICAgICAgICB3aGlsZSAoKytpIDwgaXRlcmFibGUubGVuZ3RoKSB7XG4gICAgICAgICAgICBpZiAoaGFzT3duLmNhbGwoaXRlcmFibGUsIGkpKSB7XG4gICAgICAgICAgICAgIG5leHQudmFsdWUgPSBpdGVyYWJsZVtpXTtcbiAgICAgICAgICAgICAgbmV4dC5kb25lID0gZmFsc2U7XG4gICAgICAgICAgICAgIHJldHVybiBuZXh0O1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cblxuICAgICAgICAgIG5leHQudmFsdWUgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgbmV4dC5kb25lID0gdHJ1ZTtcblxuICAgICAgICAgIHJldHVybiBuZXh0O1xuICAgICAgICB9O1xuXG4gICAgICAgIHJldHVybiBuZXh0Lm5leHQgPSBuZXh0O1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIFJldHVybiBhbiBpdGVyYXRvciB3aXRoIG5vIHZhbHVlcy5cbiAgICByZXR1cm4geyBuZXh0OiBkb25lUmVzdWx0IH07XG4gIH1cbiAgZXhwb3J0cy52YWx1ZXMgPSB2YWx1ZXM7XG5cbiAgZnVuY3Rpb24gZG9uZVJlc3VsdCgpIHtcbiAgICByZXR1cm4geyB2YWx1ZTogdW5kZWZpbmVkLCBkb25lOiB0cnVlIH07XG4gIH1cblxuICBDb250ZXh0LnByb3RvdHlwZSA9IHtcbiAgICBjb25zdHJ1Y3RvcjogQ29udGV4dCxcblxuICAgIHJlc2V0OiBmdW5jdGlvbihza2lwVGVtcFJlc2V0KSB7XG4gICAgICB0aGlzLnByZXYgPSAwO1xuICAgICAgdGhpcy5uZXh0ID0gMDtcbiAgICAgIC8vIFJlc2V0dGluZyBjb250ZXh0Ll9zZW50IGZvciBsZWdhY3kgc3VwcG9ydCBvZiBCYWJlbCdzXG4gICAgICAvLyBmdW5jdGlvbi5zZW50IGltcGxlbWVudGF0aW9uLlxuICAgICAgdGhpcy5zZW50ID0gdGhpcy5fc2VudCA9IHVuZGVmaW5lZDtcbiAgICAgIHRoaXMuZG9uZSA9IGZhbHNlO1xuICAgICAgdGhpcy5kZWxlZ2F0ZSA9IG51bGw7XG5cbiAgICAgIHRoaXMubWV0aG9kID0gXCJuZXh0XCI7XG4gICAgICB0aGlzLmFyZyA9IHVuZGVmaW5lZDtcblxuICAgICAgdGhpcy50cnlFbnRyaWVzLmZvckVhY2gocmVzZXRUcnlFbnRyeSk7XG5cbiAgICAgIGlmICghc2tpcFRlbXBSZXNldCkge1xuICAgICAgICBmb3IgKHZhciBuYW1lIGluIHRoaXMpIHtcbiAgICAgICAgICAvLyBOb3Qgc3VyZSBhYm91dCB0aGUgb3B0aW1hbCBvcmRlciBvZiB0aGVzZSBjb25kaXRpb25zOlxuICAgICAgICAgIGlmIChuYW1lLmNoYXJBdCgwKSA9PT0gXCJ0XCIgJiZcbiAgICAgICAgICAgICAgaGFzT3duLmNhbGwodGhpcywgbmFtZSkgJiZcbiAgICAgICAgICAgICAgIWlzTmFOKCtuYW1lLnNsaWNlKDEpKSkge1xuICAgICAgICAgICAgdGhpc1tuYW1lXSA9IHVuZGVmaW5lZDtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuXG4gICAgc3RvcDogZnVuY3Rpb24oKSB7XG4gICAgICB0aGlzLmRvbmUgPSB0cnVlO1xuXG4gICAgICB2YXIgcm9vdEVudHJ5ID0gdGhpcy50cnlFbnRyaWVzWzBdO1xuICAgICAgdmFyIHJvb3RSZWNvcmQgPSByb290RW50cnkuY29tcGxldGlvbjtcbiAgICAgIGlmIChyb290UmVjb3JkLnR5cGUgPT09IFwidGhyb3dcIikge1xuICAgICAgICB0aHJvdyByb290UmVjb3JkLmFyZztcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHRoaXMucnZhbDtcbiAgICB9LFxuXG4gICAgZGlzcGF0Y2hFeGNlcHRpb246IGZ1bmN0aW9uKGV4Y2VwdGlvbikge1xuICAgICAgaWYgKHRoaXMuZG9uZSkge1xuICAgICAgICB0aHJvdyBleGNlcHRpb247XG4gICAgICB9XG5cbiAgICAgIHZhciBjb250ZXh0ID0gdGhpcztcbiAgICAgIGZ1bmN0aW9uIGhhbmRsZShsb2MsIGNhdWdodCkge1xuICAgICAgICByZWNvcmQudHlwZSA9IFwidGhyb3dcIjtcbiAgICAgICAgcmVjb3JkLmFyZyA9IGV4Y2VwdGlvbjtcbiAgICAgICAgY29udGV4dC5uZXh0ID0gbG9jO1xuXG4gICAgICAgIGlmIChjYXVnaHQpIHtcbiAgICAgICAgICAvLyBJZiB0aGUgZGlzcGF0Y2hlZCBleGNlcHRpb24gd2FzIGNhdWdodCBieSBhIGNhdGNoIGJsb2NrLFxuICAgICAgICAgIC8vIHRoZW4gbGV0IHRoYXQgY2F0Y2ggYmxvY2sgaGFuZGxlIHRoZSBleGNlcHRpb24gbm9ybWFsbHkuXG4gICAgICAgICAgY29udGV4dC5tZXRob2QgPSBcIm5leHRcIjtcbiAgICAgICAgICBjb250ZXh0LmFyZyA9IHVuZGVmaW5lZDtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiAhISBjYXVnaHQ7XG4gICAgICB9XG5cbiAgICAgIGZvciAodmFyIGkgPSB0aGlzLnRyeUVudHJpZXMubGVuZ3RoIC0gMTsgaSA+PSAwOyAtLWkpIHtcbiAgICAgICAgdmFyIGVudHJ5ID0gdGhpcy50cnlFbnRyaWVzW2ldO1xuICAgICAgICB2YXIgcmVjb3JkID0gZW50cnkuY29tcGxldGlvbjtcblxuICAgICAgICBpZiAoZW50cnkudHJ5TG9jID09PSBcInJvb3RcIikge1xuICAgICAgICAgIC8vIEV4Y2VwdGlvbiB0aHJvd24gb3V0c2lkZSBvZiBhbnkgdHJ5IGJsb2NrIHRoYXQgY291bGQgaGFuZGxlXG4gICAgICAgICAgLy8gaXQsIHNvIHNldCB0aGUgY29tcGxldGlvbiB2YWx1ZSBvZiB0aGUgZW50aXJlIGZ1bmN0aW9uIHRvXG4gICAgICAgICAgLy8gdGhyb3cgdGhlIGV4Y2VwdGlvbi5cbiAgICAgICAgICByZXR1cm4gaGFuZGxlKFwiZW5kXCIpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGVudHJ5LnRyeUxvYyA8PSB0aGlzLnByZXYpIHtcbiAgICAgICAgICB2YXIgaGFzQ2F0Y2ggPSBoYXNPd24uY2FsbChlbnRyeSwgXCJjYXRjaExvY1wiKTtcbiAgICAgICAgICB2YXIgaGFzRmluYWxseSA9IGhhc093bi5jYWxsKGVudHJ5LCBcImZpbmFsbHlMb2NcIik7XG5cbiAgICAgICAgICBpZiAoaGFzQ2F0Y2ggJiYgaGFzRmluYWxseSkge1xuICAgICAgICAgICAgaWYgKHRoaXMucHJldiA8IGVudHJ5LmNhdGNoTG9jKSB7XG4gICAgICAgICAgICAgIHJldHVybiBoYW5kbGUoZW50cnkuY2F0Y2hMb2MsIHRydWUpO1xuICAgICAgICAgICAgfSBlbHNlIGlmICh0aGlzLnByZXYgPCBlbnRyeS5maW5hbGx5TG9jKSB7XG4gICAgICAgICAgICAgIHJldHVybiBoYW5kbGUoZW50cnkuZmluYWxseUxvYyk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICB9IGVsc2UgaWYgKGhhc0NhdGNoKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5wcmV2IDwgZW50cnkuY2F0Y2hMb2MpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIGhhbmRsZShlbnRyeS5jYXRjaExvYywgdHJ1ZSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICB9IGVsc2UgaWYgKGhhc0ZpbmFsbHkpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLnByZXYgPCBlbnRyeS5maW5hbGx5TG9jKSB7XG4gICAgICAgICAgICAgIHJldHVybiBoYW5kbGUoZW50cnkuZmluYWxseUxvYyk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwidHJ5IHN0YXRlbWVudCB3aXRob3V0IGNhdGNoIG9yIGZpbmFsbHlcIik7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcblxuICAgIGFicnVwdDogZnVuY3Rpb24odHlwZSwgYXJnKSB7XG4gICAgICBmb3IgKHZhciBpID0gdGhpcy50cnlFbnRyaWVzLmxlbmd0aCAtIDE7IGkgPj0gMDsgLS1pKSB7XG4gICAgICAgIHZhciBlbnRyeSA9IHRoaXMudHJ5RW50cmllc1tpXTtcbiAgICAgICAgaWYgKGVudHJ5LnRyeUxvYyA8PSB0aGlzLnByZXYgJiZcbiAgICAgICAgICAgIGhhc093bi5jYWxsKGVudHJ5LCBcImZpbmFsbHlMb2NcIikgJiZcbiAgICAgICAgICAgIHRoaXMucHJldiA8IGVudHJ5LmZpbmFsbHlMb2MpIHtcbiAgICAgICAgICB2YXIgZmluYWxseUVudHJ5ID0gZW50cnk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKGZpbmFsbHlFbnRyeSAmJlxuICAgICAgICAgICh0eXBlID09PSBcImJyZWFrXCIgfHxcbiAgICAgICAgICAgdHlwZSA9PT0gXCJjb250aW51ZVwiKSAmJlxuICAgICAgICAgIGZpbmFsbHlFbnRyeS50cnlMb2MgPD0gYXJnICYmXG4gICAgICAgICAgYXJnIDw9IGZpbmFsbHlFbnRyeS5maW5hbGx5TG9jKSB7XG4gICAgICAgIC8vIElnbm9yZSB0aGUgZmluYWxseSBlbnRyeSBpZiBjb250cm9sIGlzIG5vdCBqdW1waW5nIHRvIGFcbiAgICAgICAgLy8gbG9jYXRpb24gb3V0c2lkZSB0aGUgdHJ5L2NhdGNoIGJsb2NrLlxuICAgICAgICBmaW5hbGx5RW50cnkgPSBudWxsO1xuICAgICAgfVxuXG4gICAgICB2YXIgcmVjb3JkID0gZmluYWxseUVudHJ5ID8gZmluYWxseUVudHJ5LmNvbXBsZXRpb24gOiB7fTtcbiAgICAgIHJlY29yZC50eXBlID0gdHlwZTtcbiAgICAgIHJlY29yZC5hcmcgPSBhcmc7XG5cbiAgICAgIGlmIChmaW5hbGx5RW50cnkpIHtcbiAgICAgICAgdGhpcy5tZXRob2QgPSBcIm5leHRcIjtcbiAgICAgICAgdGhpcy5uZXh0ID0gZmluYWxseUVudHJ5LmZpbmFsbHlMb2M7XG4gICAgICAgIHJldHVybiBDb250aW51ZVNlbnRpbmVsO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gdGhpcy5jb21wbGV0ZShyZWNvcmQpO1xuICAgIH0sXG5cbiAgICBjb21wbGV0ZTogZnVuY3Rpb24ocmVjb3JkLCBhZnRlckxvYykge1xuICAgICAgaWYgKHJlY29yZC50eXBlID09PSBcInRocm93XCIpIHtcbiAgICAgICAgdGhyb3cgcmVjb3JkLmFyZztcbiAgICAgIH1cblxuICAgICAgaWYgKHJlY29yZC50eXBlID09PSBcImJyZWFrXCIgfHxcbiAgICAgICAgICByZWNvcmQudHlwZSA9PT0gXCJjb250aW51ZVwiKSB7XG4gICAgICAgIHRoaXMubmV4dCA9IHJlY29yZC5hcmc7XG4gICAgICB9IGVsc2UgaWYgKHJlY29yZC50eXBlID09PSBcInJldHVyblwiKSB7XG4gICAgICAgIHRoaXMucnZhbCA9IHRoaXMuYXJnID0gcmVjb3JkLmFyZztcbiAgICAgICAgdGhpcy5tZXRob2QgPSBcInJldHVyblwiO1xuICAgICAgICB0aGlzLm5leHQgPSBcImVuZFwiO1xuICAgICAgfSBlbHNlIGlmIChyZWNvcmQudHlwZSA9PT0gXCJub3JtYWxcIiAmJiBhZnRlckxvYykge1xuICAgICAgICB0aGlzLm5leHQgPSBhZnRlckxvYztcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIENvbnRpbnVlU2VudGluZWw7XG4gICAgfSxcblxuICAgIGZpbmlzaDogZnVuY3Rpb24oZmluYWxseUxvYykge1xuICAgICAgZm9yICh2YXIgaSA9IHRoaXMudHJ5RW50cmllcy5sZW5ndGggLSAxOyBpID49IDA7IC0taSkge1xuICAgICAgICB2YXIgZW50cnkgPSB0aGlzLnRyeUVudHJpZXNbaV07XG4gICAgICAgIGlmIChlbnRyeS5maW5hbGx5TG9jID09PSBmaW5hbGx5TG9jKSB7XG4gICAgICAgICAgdGhpcy5jb21wbGV0ZShlbnRyeS5jb21wbGV0aW9uLCBlbnRyeS5hZnRlckxvYyk7XG4gICAgICAgICAgcmVzZXRUcnlFbnRyeShlbnRyeSk7XG4gICAgICAgICAgcmV0dXJuIENvbnRpbnVlU2VudGluZWw7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuXG4gICAgXCJjYXRjaFwiOiBmdW5jdGlvbih0cnlMb2MpIHtcbiAgICAgIGZvciAodmFyIGkgPSB0aGlzLnRyeUVudHJpZXMubGVuZ3RoIC0gMTsgaSA+PSAwOyAtLWkpIHtcbiAgICAgICAgdmFyIGVudHJ5ID0gdGhpcy50cnlFbnRyaWVzW2ldO1xuICAgICAgICBpZiAoZW50cnkudHJ5TG9jID09PSB0cnlMb2MpIHtcbiAgICAgICAgICB2YXIgcmVjb3JkID0gZW50cnkuY29tcGxldGlvbjtcbiAgICAgICAgICBpZiAocmVjb3JkLnR5cGUgPT09IFwidGhyb3dcIikge1xuICAgICAgICAgICAgdmFyIHRocm93biA9IHJlY29yZC5hcmc7XG4gICAgICAgICAgICByZXNldFRyeUVudHJ5KGVudHJ5KTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIHRocm93bjtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAvLyBUaGUgY29udGV4dC5jYXRjaCBtZXRob2QgbXVzdCBvbmx5IGJlIGNhbGxlZCB3aXRoIGEgbG9jYXRpb25cbiAgICAgIC8vIGFyZ3VtZW50IHRoYXQgY29ycmVzcG9uZHMgdG8gYSBrbm93biBjYXRjaCBibG9jay5cbiAgICAgIHRocm93IG5ldyBFcnJvcihcImlsbGVnYWwgY2F0Y2ggYXR0ZW1wdFwiKTtcbiAgICB9LFxuXG4gICAgZGVsZWdhdGVZaWVsZDogZnVuY3Rpb24oaXRlcmFibGUsIHJlc3VsdE5hbWUsIG5leHRMb2MpIHtcbiAgICAgIHRoaXMuZGVsZWdhdGUgPSB7XG4gICAgICAgIGl0ZXJhdG9yOiB2YWx1ZXMoaXRlcmFibGUpLFxuICAgICAgICByZXN1bHROYW1lOiByZXN1bHROYW1lLFxuICAgICAgICBuZXh0TG9jOiBuZXh0TG9jXG4gICAgICB9O1xuXG4gICAgICBpZiAodGhpcy5tZXRob2QgPT09IFwibmV4dFwiKSB7XG4gICAgICAgIC8vIERlbGliZXJhdGVseSBmb3JnZXQgdGhlIGxhc3Qgc2VudCB2YWx1ZSBzbyB0aGF0IHdlIGRvbid0XG4gICAgICAgIC8vIGFjY2lkZW50YWxseSBwYXNzIGl0IG9uIHRvIHRoZSBkZWxlZ2F0ZS5cbiAgICAgICAgdGhpcy5hcmcgPSB1bmRlZmluZWQ7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBDb250aW51ZVNlbnRpbmVsO1xuICAgIH1cbiAgfTtcblxuICAvLyBSZWdhcmRsZXNzIG9mIHdoZXRoZXIgdGhpcyBzY3JpcHQgaXMgZXhlY3V0aW5nIGFzIGEgQ29tbW9uSlMgbW9kdWxlXG4gIC8vIG9yIG5vdCwgcmV0dXJuIHRoZSBydW50aW1lIG9iamVjdCBzbyB0aGF0IHdlIGNhbiBkZWNsYXJlIHRoZSB2YXJpYWJsZVxuICAvLyByZWdlbmVyYXRvclJ1bnRpbWUgaW4gdGhlIG91dGVyIHNjb3BlLCB3aGljaCBhbGxvd3MgdGhpcyBtb2R1bGUgdG8gYmVcbiAgLy8gaW5qZWN0ZWQgZWFzaWx5IGJ5IGBiaW4vcmVnZW5lcmF0b3IgLS1pbmNsdWRlLXJ1bnRpbWUgc2NyaXB0LmpzYC5cbiAgcmV0dXJuIGV4cG9ydHM7XG5cbn0oXG4gIC8vIElmIHRoaXMgc2NyaXB0IGlzIGV4ZWN1dGluZyBhcyBhIENvbW1vbkpTIG1vZHVsZSwgdXNlIG1vZHVsZS5leHBvcnRzXG4gIC8vIGFzIHRoZSByZWdlbmVyYXRvclJ1bnRpbWUgbmFtZXNwYWNlLiBPdGhlcndpc2UgY3JlYXRlIGEgbmV3IGVtcHR5XG4gIC8vIG9iamVjdC4gRWl0aGVyIHdheSwgdGhlIHJlc3VsdGluZyBvYmplY3Qgd2lsbCBiZSB1c2VkIHRvIGluaXRpYWxpemVcbiAgLy8gdGhlIHJlZ2VuZXJhdG9yUnVudGltZSB2YXJpYWJsZSBhdCB0aGUgdG9wIG9mIHRoaXMgZmlsZS5cbiAgdHlwZW9mIG1vZHVsZSA9PT0gXCJvYmplY3RcIiA/IG1vZHVsZS5leHBvcnRzIDoge31cbikpO1xuXG50cnkge1xuICByZWdlbmVyYXRvclJ1bnRpbWUgPSBydW50aW1lO1xufSBjYXRjaCAoYWNjaWRlbnRhbFN0cmljdE1vZGUpIHtcbiAgLy8gVGhpcyBtb2R1bGUgc2hvdWxkIG5vdCBiZSBydW5uaW5nIGluIHN0cmljdCBtb2RlLCBzbyB0aGUgYWJvdmVcbiAgLy8gYXNzaWdubWVudCBzaG91bGQgYWx3YXlzIHdvcmsgdW5sZXNzIHNvbWV0aGluZyBpcyBtaXNjb25maWd1cmVkLiBKdXN0XG4gIC8vIGluIGNhc2UgcnVudGltZS5qcyBhY2NpZGVudGFsbHkgcnVucyBpbiBzdHJpY3QgbW9kZSwgaW4gbW9kZXJuIGVuZ2luZXNcbiAgLy8gd2UgY2FuIGV4cGxpY2l0bHkgYWNjZXNzIGdsb2JhbFRoaXMuIEluIG9sZGVyIGVuZ2luZXMgd2UgY2FuIGVzY2FwZVxuICAvLyBzdHJpY3QgbW9kZSB1c2luZyBhIGdsb2JhbCBGdW5jdGlvbiBjYWxsLiBUaGlzIGNvdWxkIGNvbmNlaXZhYmx5IGZhaWxcbiAgLy8gaWYgYSBDb250ZW50IFNlY3VyaXR5IFBvbGljeSBmb3JiaWRzIHVzaW5nIEZ1bmN0aW9uLCBidXQgaW4gdGhhdCBjYXNlXG4gIC8vIHRoZSBwcm9wZXIgc29sdXRpb24gaXMgdG8gZml4IHRoZSBhY2NpZGVudGFsIHN0cmljdCBtb2RlIHByb2JsZW0uIElmXG4gIC8vIHlvdSd2ZSBtaXNjb25maWd1cmVkIHlvdXIgYnVuZGxlciB0byBmb3JjZSBzdHJpY3QgbW9kZSBhbmQgYXBwbGllZCBhXG4gIC8vIENTUCB0byBmb3JiaWQgRnVuY3Rpb24sIGFuZCB5b3UncmUgbm90IHdpbGxpbmcgdG8gZml4IGVpdGhlciBvZiB0aG9zZVxuICAvLyBwcm9ibGVtcywgcGxlYXNlIGRldGFpbCB5b3VyIHVuaXF1ZSBwcmVkaWNhbWVudCBpbiBhIEdpdEh1YiBpc3N1ZS5cbiAgaWYgKHR5cGVvZiBnbG9iYWxUaGlzID09PSBcIm9iamVjdFwiKSB7XG4gICAgZ2xvYmFsVGhpcy5yZWdlbmVyYXRvclJ1bnRpbWUgPSBydW50aW1lO1xuICB9IGVsc2Uge1xuICAgIEZ1bmN0aW9uKFwiclwiLCBcInJlZ2VuZXJhdG9yUnVudGltZSA9IHJcIikocnVudGltZSk7XG4gIH1cbn1cbiIsIi8qKlxuICogQGxpY2Vuc2UgUmVhY3RcbiAqIHNjaGVkdWxlci5wcm9kdWN0aW9uLm1pbi5qc1xuICpcbiAqIENvcHlyaWdodCAoYykgRmFjZWJvb2ssIEluYy4gYW5kIGl0cyBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG4ndXNlIHN0cmljdCc7ZnVuY3Rpb24gZihhLGIpe3ZhciBjPWEubGVuZ3RoO2EucHVzaChiKTthOmZvcig7MDxjOyl7dmFyIGQ9Yy0xPj4+MSxlPWFbZF07aWYoMDxnKGUsYikpYVtkXT1iLGFbY109ZSxjPWQ7ZWxzZSBicmVhayBhfX1mdW5jdGlvbiBoKGEpe3JldHVybiAwPT09YS5sZW5ndGg/bnVsbDphWzBdfWZ1bmN0aW9uIGsoYSl7aWYoMD09PWEubGVuZ3RoKXJldHVybiBudWxsO3ZhciBiPWFbMF0sYz1hLnBvcCgpO2lmKGMhPT1iKXthWzBdPWM7YTpmb3IodmFyIGQ9MCxlPWEubGVuZ3RoLHc9ZT4+PjE7ZDx3Oyl7dmFyIG09MiooZCsxKS0xLEM9YVttXSxuPW0rMSx4PWFbbl07aWYoMD5nKEMsYykpbjxlJiYwPmcoeCxDKT8oYVtkXT14LGFbbl09YyxkPW4pOihhW2RdPUMsYVttXT1jLGQ9bSk7ZWxzZSBpZihuPGUmJjA+Zyh4LGMpKWFbZF09eCxhW25dPWMsZD1uO2Vsc2UgYnJlYWsgYX19cmV0dXJuIGJ9XG5mdW5jdGlvbiBnKGEsYil7dmFyIGM9YS5zb3J0SW5kZXgtYi5zb3J0SW5kZXg7cmV0dXJuIDAhPT1jP2M6YS5pZC1iLmlkfWlmKFwib2JqZWN0XCI9PT10eXBlb2YgcGVyZm9ybWFuY2UmJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBwZXJmb3JtYW5jZS5ub3cpe3ZhciBsPXBlcmZvcm1hbmNlO2V4cG9ydHMudW5zdGFibGVfbm93PWZ1bmN0aW9uKCl7cmV0dXJuIGwubm93KCl9fWVsc2V7dmFyIHA9RGF0ZSxxPXAubm93KCk7ZXhwb3J0cy51bnN0YWJsZV9ub3c9ZnVuY3Rpb24oKXtyZXR1cm4gcC5ub3coKS1xfX12YXIgcj1bXSx0PVtdLHU9MSx2PW51bGwseT0zLHo9ITEsQT0hMSxCPSExLEQ9XCJmdW5jdGlvblwiPT09dHlwZW9mIHNldFRpbWVvdXQ/c2V0VGltZW91dDpudWxsLEU9XCJmdW5jdGlvblwiPT09dHlwZW9mIGNsZWFyVGltZW91dD9jbGVhclRpbWVvdXQ6bnVsbCxGPVwidW5kZWZpbmVkXCIhPT10eXBlb2Ygc2V0SW1tZWRpYXRlP3NldEltbWVkaWF0ZTpudWxsO1xuXCJ1bmRlZmluZWRcIiE9PXR5cGVvZiBuYXZpZ2F0b3ImJnZvaWQgMCE9PW5hdmlnYXRvci5zY2hlZHVsaW5nJiZ2b2lkIDAhPT1uYXZpZ2F0b3Iuc2NoZWR1bGluZy5pc0lucHV0UGVuZGluZyYmbmF2aWdhdG9yLnNjaGVkdWxpbmcuaXNJbnB1dFBlbmRpbmcuYmluZChuYXZpZ2F0b3Iuc2NoZWR1bGluZyk7ZnVuY3Rpb24gRyhhKXtmb3IodmFyIGI9aCh0KTtudWxsIT09Yjspe2lmKG51bGw9PT1iLmNhbGxiYWNrKWsodCk7ZWxzZSBpZihiLnN0YXJ0VGltZTw9YSlrKHQpLGIuc29ydEluZGV4PWIuZXhwaXJhdGlvblRpbWUsZihyLGIpO2Vsc2UgYnJlYWs7Yj1oKHQpfX1mdW5jdGlvbiBIKGEpe0I9ITE7RyhhKTtpZighQSlpZihudWxsIT09aChyKSlBPSEwLEkoSik7ZWxzZXt2YXIgYj1oKHQpO251bGwhPT1iJiZLKEgsYi5zdGFydFRpbWUtYSl9fVxuZnVuY3Rpb24gSihhLGIpe0E9ITE7QiYmKEI9ITEsRShMKSxMPS0xKTt6PSEwO3ZhciBjPXk7dHJ5e0coYik7Zm9yKHY9aChyKTtudWxsIT09diYmKCEodi5leHBpcmF0aW9uVGltZT5iKXx8YSYmIU0oKSk7KXt2YXIgZD12LmNhbGxiYWNrO2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBkKXt2LmNhbGxiYWNrPW51bGw7eT12LnByaW9yaXR5TGV2ZWw7dmFyIGU9ZCh2LmV4cGlyYXRpb25UaW1lPD1iKTtiPWV4cG9ydHMudW5zdGFibGVfbm93KCk7XCJmdW5jdGlvblwiPT09dHlwZW9mIGU/di5jYWxsYmFjaz1lOnY9PT1oKHIpJiZrKHIpO0coYil9ZWxzZSBrKHIpO3Y9aChyKX1pZihudWxsIT09dil2YXIgdz0hMDtlbHNle3ZhciBtPWgodCk7bnVsbCE9PW0mJksoSCxtLnN0YXJ0VGltZS1iKTt3PSExfXJldHVybiB3fWZpbmFsbHl7dj1udWxsLHk9Yyx6PSExfX12YXIgTj0hMSxPPW51bGwsTD0tMSxQPTUsUT0tMTtcbmZ1bmN0aW9uIE0oKXtyZXR1cm4gZXhwb3J0cy51bnN0YWJsZV9ub3coKS1RPFA/ITE6ITB9ZnVuY3Rpb24gUigpe2lmKG51bGwhPT1PKXt2YXIgYT1leHBvcnRzLnVuc3RhYmxlX25vdygpO1E9YTt2YXIgYj0hMDt0cnl7Yj1PKCEwLGEpfWZpbmFsbHl7Yj9TKCk6KE49ITEsTz1udWxsKX19ZWxzZSBOPSExfXZhciBTO2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBGKVM9ZnVuY3Rpb24oKXtGKFIpfTtlbHNlIGlmKFwidW5kZWZpbmVkXCIhPT10eXBlb2YgTWVzc2FnZUNoYW5uZWwpe3ZhciBUPW5ldyBNZXNzYWdlQ2hhbm5lbCxVPVQucG9ydDI7VC5wb3J0MS5vbm1lc3NhZ2U9UjtTPWZ1bmN0aW9uKCl7VS5wb3N0TWVzc2FnZShudWxsKX19ZWxzZSBTPWZ1bmN0aW9uKCl7RChSLDApfTtmdW5jdGlvbiBJKGEpe089YTtOfHwoTj0hMCxTKCkpfWZ1bmN0aW9uIEsoYSxiKXtMPUQoZnVuY3Rpb24oKXthKGV4cG9ydHMudW5zdGFibGVfbm93KCkpfSxiKX1cbmV4cG9ydHMudW5zdGFibGVfSWRsZVByaW9yaXR5PTU7ZXhwb3J0cy51bnN0YWJsZV9JbW1lZGlhdGVQcmlvcml0eT0xO2V4cG9ydHMudW5zdGFibGVfTG93UHJpb3JpdHk9NDtleHBvcnRzLnVuc3RhYmxlX05vcm1hbFByaW9yaXR5PTM7ZXhwb3J0cy51bnN0YWJsZV9Qcm9maWxpbmc9bnVsbDtleHBvcnRzLnVuc3RhYmxlX1VzZXJCbG9ja2luZ1ByaW9yaXR5PTI7ZXhwb3J0cy51bnN0YWJsZV9jYW5jZWxDYWxsYmFjaz1mdW5jdGlvbihhKXthLmNhbGxiYWNrPW51bGx9O2V4cG9ydHMudW5zdGFibGVfY29udGludWVFeGVjdXRpb249ZnVuY3Rpb24oKXtBfHx6fHwoQT0hMCxJKEopKX07XG5leHBvcnRzLnVuc3RhYmxlX2ZvcmNlRnJhbWVSYXRlPWZ1bmN0aW9uKGEpezA+YXx8MTI1PGE/Y29uc29sZS5lcnJvcihcImZvcmNlRnJhbWVSYXRlIHRha2VzIGEgcG9zaXRpdmUgaW50IGJldHdlZW4gMCBhbmQgMTI1LCBmb3JjaW5nIGZyYW1lIHJhdGVzIGhpZ2hlciB0aGFuIDEyNSBmcHMgaXMgbm90IHN1cHBvcnRlZFwiKTpQPTA8YT9NYXRoLmZsb29yKDFFMy9hKTo1fTtleHBvcnRzLnVuc3RhYmxlX2dldEN1cnJlbnRQcmlvcml0eUxldmVsPWZ1bmN0aW9uKCl7cmV0dXJuIHl9O2V4cG9ydHMudW5zdGFibGVfZ2V0Rmlyc3RDYWxsYmFja05vZGU9ZnVuY3Rpb24oKXtyZXR1cm4gaChyKX07ZXhwb3J0cy51bnN0YWJsZV9uZXh0PWZ1bmN0aW9uKGEpe3N3aXRjaCh5KXtjYXNlIDE6Y2FzZSAyOmNhc2UgMzp2YXIgYj0zO2JyZWFrO2RlZmF1bHQ6Yj15fXZhciBjPXk7eT1iO3RyeXtyZXR1cm4gYSgpfWZpbmFsbHl7eT1jfX07ZXhwb3J0cy51bnN0YWJsZV9wYXVzZUV4ZWN1dGlvbj1mdW5jdGlvbigpe307XG5leHBvcnRzLnVuc3RhYmxlX3JlcXVlc3RQYWludD1mdW5jdGlvbigpe307ZXhwb3J0cy51bnN0YWJsZV9ydW5XaXRoUHJpb3JpdHk9ZnVuY3Rpb24oYSxiKXtzd2l0Y2goYSl7Y2FzZSAxOmNhc2UgMjpjYXNlIDM6Y2FzZSA0OmNhc2UgNTpicmVhaztkZWZhdWx0OmE9M312YXIgYz15O3k9YTt0cnl7cmV0dXJuIGIoKX1maW5hbGx5e3k9Y319O1xuZXhwb3J0cy51bnN0YWJsZV9zY2hlZHVsZUNhbGxiYWNrPWZ1bmN0aW9uKGEsYixjKXt2YXIgZD1leHBvcnRzLnVuc3RhYmxlX25vdygpO1wib2JqZWN0XCI9PT10eXBlb2YgYyYmbnVsbCE9PWM/KGM9Yy5kZWxheSxjPVwibnVtYmVyXCI9PT10eXBlb2YgYyYmMDxjP2QrYzpkKTpjPWQ7c3dpdGNoKGEpe2Nhc2UgMTp2YXIgZT0tMTticmVhaztjYXNlIDI6ZT0yNTA7YnJlYWs7Y2FzZSA1OmU9MTA3Mzc0MTgyMzticmVhaztjYXNlIDQ6ZT0xRTQ7YnJlYWs7ZGVmYXVsdDplPTVFM31lPWMrZTthPXtpZDp1KyssY2FsbGJhY2s6Yixwcmlvcml0eUxldmVsOmEsc3RhcnRUaW1lOmMsZXhwaXJhdGlvblRpbWU6ZSxzb3J0SW5kZXg6LTF9O2M+ZD8oYS5zb3J0SW5kZXg9YyxmKHQsYSksbnVsbD09PWgocikmJmE9PT1oKHQpJiYoQj8oRShMKSxMPS0xKTpCPSEwLEsoSCxjLWQpKSk6KGEuc29ydEluZGV4PWUsZihyLGEpLEF8fHp8fChBPSEwLEkoSikpKTtyZXR1cm4gYX07XG5leHBvcnRzLnVuc3RhYmxlX3Nob3VsZFlpZWxkPU07ZXhwb3J0cy51bnN0YWJsZV93cmFwQ2FsbGJhY2s9ZnVuY3Rpb24oYSl7dmFyIGI9eTtyZXR1cm4gZnVuY3Rpb24oKXt2YXIgYz15O3k9Yjt0cnl7cmV0dXJuIGEuYXBwbHkodGhpcyxhcmd1bWVudHMpfWZpbmFsbHl7eT1jfX19O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdwcm9kdWN0aW9uJykge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3NjaGVkdWxlci5wcm9kdWN0aW9uLm1pbi5qcycpO1xufSBlbHNlIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9zY2hlZHVsZXIuZGV2ZWxvcG1lbnQuanMnKTtcbn1cbiIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgc3R5bGVzSW5ET00gPSBbXTtcblxuZnVuY3Rpb24gZ2V0SW5kZXhCeUlkZW50aWZpZXIoaWRlbnRpZmllcikge1xuICB2YXIgcmVzdWx0ID0gLTE7XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBzdHlsZXNJbkRPTS5sZW5ndGg7IGkrKykge1xuICAgIGlmIChzdHlsZXNJbkRPTVtpXS5pZGVudGlmaWVyID09PSBpZGVudGlmaWVyKSB7XG4gICAgICByZXN1bHQgPSBpO1xuICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuZnVuY3Rpb24gbW9kdWxlc1RvRG9tKGxpc3QsIG9wdGlvbnMpIHtcbiAgdmFyIGlkQ291bnRNYXAgPSB7fTtcbiAgdmFyIGlkZW50aWZpZXJzID0gW107XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsaXN0Lmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIGl0ZW0gPSBsaXN0W2ldO1xuICAgIHZhciBpZCA9IG9wdGlvbnMuYmFzZSA/IGl0ZW1bMF0gKyBvcHRpb25zLmJhc2UgOiBpdGVtWzBdO1xuICAgIHZhciBjb3VudCA9IGlkQ291bnRNYXBbaWRdIHx8IDA7XG4gICAgdmFyIGlkZW50aWZpZXIgPSBcIlwiLmNvbmNhdChpZCwgXCIgXCIpLmNvbmNhdChjb3VudCk7XG4gICAgaWRDb3VudE1hcFtpZF0gPSBjb3VudCArIDE7XG4gICAgdmFyIGluZGV4QnlJZGVudGlmaWVyID0gZ2V0SW5kZXhCeUlkZW50aWZpZXIoaWRlbnRpZmllcik7XG4gICAgdmFyIG9iaiA9IHtcbiAgICAgIGNzczogaXRlbVsxXSxcbiAgICAgIG1lZGlhOiBpdGVtWzJdLFxuICAgICAgc291cmNlTWFwOiBpdGVtWzNdLFxuICAgICAgc3VwcG9ydHM6IGl0ZW1bNF0sXG4gICAgICBsYXllcjogaXRlbVs1XVxuICAgIH07XG5cbiAgICBpZiAoaW5kZXhCeUlkZW50aWZpZXIgIT09IC0xKSB7XG4gICAgICBzdHlsZXNJbkRPTVtpbmRleEJ5SWRlbnRpZmllcl0ucmVmZXJlbmNlcysrO1xuICAgICAgc3R5bGVzSW5ET01baW5kZXhCeUlkZW50aWZpZXJdLnVwZGF0ZXIob2JqKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIHVwZGF0ZXIgPSBhZGRFbGVtZW50U3R5bGUob2JqLCBvcHRpb25zKTtcbiAgICAgIG9wdGlvbnMuYnlJbmRleCA9IGk7XG4gICAgICBzdHlsZXNJbkRPTS5zcGxpY2UoaSwgMCwge1xuICAgICAgICBpZGVudGlmaWVyOiBpZGVudGlmaWVyLFxuICAgICAgICB1cGRhdGVyOiB1cGRhdGVyLFxuICAgICAgICByZWZlcmVuY2VzOiAxXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBpZGVudGlmaWVycy5wdXNoKGlkZW50aWZpZXIpO1xuICB9XG5cbiAgcmV0dXJuIGlkZW50aWZpZXJzO1xufVxuXG5mdW5jdGlvbiBhZGRFbGVtZW50U3R5bGUob2JqLCBvcHRpb25zKSB7XG4gIHZhciBhcGkgPSBvcHRpb25zLmRvbUFQSShvcHRpb25zKTtcbiAgYXBpLnVwZGF0ZShvYmopO1xuXG4gIHZhciB1cGRhdGVyID0gZnVuY3Rpb24gdXBkYXRlcihuZXdPYmopIHtcbiAgICBpZiAobmV3T2JqKSB7XG4gICAgICBpZiAobmV3T2JqLmNzcyA9PT0gb2JqLmNzcyAmJiBuZXdPYmoubWVkaWEgPT09IG9iai5tZWRpYSAmJiBuZXdPYmouc291cmNlTWFwID09PSBvYmouc291cmNlTWFwICYmIG5ld09iai5zdXBwb3J0cyA9PT0gb2JqLnN1cHBvcnRzICYmIG5ld09iai5sYXllciA9PT0gb2JqLmxheWVyKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgYXBpLnVwZGF0ZShvYmogPSBuZXdPYmopO1xuICAgIH0gZWxzZSB7XG4gICAgICBhcGkucmVtb3ZlKCk7XG4gICAgfVxuICB9O1xuXG4gIHJldHVybiB1cGRhdGVyO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChsaXN0LCBvcHRpb25zKSB7XG4gIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuICBsaXN0ID0gbGlzdCB8fCBbXTtcbiAgdmFyIGxhc3RJZGVudGlmaWVycyA9IG1vZHVsZXNUb0RvbShsaXN0LCBvcHRpb25zKTtcbiAgcmV0dXJuIGZ1bmN0aW9uIHVwZGF0ZShuZXdMaXN0KSB7XG4gICAgbmV3TGlzdCA9IG5ld0xpc3QgfHwgW107XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxhc3RJZGVudGlmaWVycy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIGlkZW50aWZpZXIgPSBsYXN0SWRlbnRpZmllcnNbaV07XG4gICAgICB2YXIgaW5kZXggPSBnZXRJbmRleEJ5SWRlbnRpZmllcihpZGVudGlmaWVyKTtcbiAgICAgIHN0eWxlc0luRE9NW2luZGV4XS5yZWZlcmVuY2VzLS07XG4gICAgfVxuXG4gICAgdmFyIG5ld0xhc3RJZGVudGlmaWVycyA9IG1vZHVsZXNUb0RvbShuZXdMaXN0LCBvcHRpb25zKTtcblxuICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBsYXN0SWRlbnRpZmllcnMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICB2YXIgX2lkZW50aWZpZXIgPSBsYXN0SWRlbnRpZmllcnNbX2ldO1xuXG4gICAgICB2YXIgX2luZGV4ID0gZ2V0SW5kZXhCeUlkZW50aWZpZXIoX2lkZW50aWZpZXIpO1xuXG4gICAgICBpZiAoc3R5bGVzSW5ET01bX2luZGV4XS5yZWZlcmVuY2VzID09PSAwKSB7XG4gICAgICAgIHN0eWxlc0luRE9NW19pbmRleF0udXBkYXRlcigpO1xuXG4gICAgICAgIHN0eWxlc0luRE9NLnNwbGljZShfaW5kZXgsIDEpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGxhc3RJZGVudGlmaWVycyA9IG5ld0xhc3RJZGVudGlmaWVycztcbiAgfTtcbn07IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBtZW1vID0ge307XG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cblxuZnVuY3Rpb24gZ2V0VGFyZ2V0KHRhcmdldCkge1xuICBpZiAodHlwZW9mIG1lbW9bdGFyZ2V0XSA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgIHZhciBzdHlsZVRhcmdldCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IodGFyZ2V0KTsgLy8gU3BlY2lhbCBjYXNlIHRvIHJldHVybiBoZWFkIG9mIGlmcmFtZSBpbnN0ZWFkIG9mIGlmcmFtZSBpdHNlbGZcblxuICAgIGlmICh3aW5kb3cuSFRNTElGcmFtZUVsZW1lbnQgJiYgc3R5bGVUYXJnZXQgaW5zdGFuY2VvZiB3aW5kb3cuSFRNTElGcmFtZUVsZW1lbnQpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIC8vIFRoaXMgd2lsbCB0aHJvdyBhbiBleGNlcHRpb24gaWYgYWNjZXNzIHRvIGlmcmFtZSBpcyBibG9ja2VkXG4gICAgICAgIC8vIGR1ZSB0byBjcm9zcy1vcmlnaW4gcmVzdHJpY3Rpb25zXG4gICAgICAgIHN0eWxlVGFyZ2V0ID0gc3R5bGVUYXJnZXQuY29udGVudERvY3VtZW50LmhlYWQ7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIC8vIGlzdGFuYnVsIGlnbm9yZSBuZXh0XG4gICAgICAgIHN0eWxlVGFyZ2V0ID0gbnVsbDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBtZW1vW3RhcmdldF0gPSBzdHlsZVRhcmdldDtcbiAgfVxuXG4gIHJldHVybiBtZW1vW3RhcmdldF07XG59XG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cblxuXG5mdW5jdGlvbiBpbnNlcnRCeVNlbGVjdG9yKGluc2VydCwgc3R5bGUpIHtcbiAgdmFyIHRhcmdldCA9IGdldFRhcmdldChpbnNlcnQpO1xuXG4gIGlmICghdGFyZ2V0KSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiQ291bGRuJ3QgZmluZCBhIHN0eWxlIHRhcmdldC4gVGhpcyBwcm9iYWJseSBtZWFucyB0aGF0IHRoZSB2YWx1ZSBmb3IgdGhlICdpbnNlcnQnIHBhcmFtZXRlciBpcyBpbnZhbGlkLlwiKTtcbiAgfVxuXG4gIHRhcmdldC5hcHBlbmRDaGlsZChzdHlsZSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaW5zZXJ0QnlTZWxlY3RvcjsiLCJcInVzZSBzdHJpY3RcIjtcblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5mdW5jdGlvbiBpbnNlcnRTdHlsZUVsZW1lbnQob3B0aW9ucykge1xuICB2YXIgZWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJzdHlsZVwiKTtcbiAgb3B0aW9ucy5zZXRBdHRyaWJ1dGVzKGVsZW1lbnQsIG9wdGlvbnMuYXR0cmlidXRlcyk7XG4gIG9wdGlvbnMuaW5zZXJ0KGVsZW1lbnQsIG9wdGlvbnMub3B0aW9ucyk7XG4gIHJldHVybiBlbGVtZW50O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGluc2VydFN0eWxlRWxlbWVudDsiLCJcInVzZSBzdHJpY3RcIjtcblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5mdW5jdGlvbiBzZXRBdHRyaWJ1dGVzV2l0aG91dEF0dHJpYnV0ZXMoc3R5bGVFbGVtZW50KSB7XG4gIHZhciBub25jZSA9IHR5cGVvZiBfX3dlYnBhY2tfbm9uY2VfXyAhPT0gXCJ1bmRlZmluZWRcIiA/IF9fd2VicGFja19ub25jZV9fIDogbnVsbDtcblxuICBpZiAobm9uY2UpIHtcbiAgICBzdHlsZUVsZW1lbnQuc2V0QXR0cmlidXRlKFwibm9uY2VcIiwgbm9uY2UpO1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gc2V0QXR0cmlidXRlc1dpdGhvdXRBdHRyaWJ1dGVzOyIsIlwidXNlIHN0cmljdFwiO1xuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cbmZ1bmN0aW9uIGFwcGx5KHN0eWxlRWxlbWVudCwgb3B0aW9ucywgb2JqKSB7XG4gIHZhciBjc3MgPSBcIlwiO1xuXG4gIGlmIChvYmouc3VwcG9ydHMpIHtcbiAgICBjc3MgKz0gXCJAc3VwcG9ydHMgKFwiLmNvbmNhdChvYmouc3VwcG9ydHMsIFwiKSB7XCIpO1xuICB9XG5cbiAgaWYgKG9iai5tZWRpYSkge1xuICAgIGNzcyArPSBcIkBtZWRpYSBcIi5jb25jYXQob2JqLm1lZGlhLCBcIiB7XCIpO1xuICB9XG5cbiAgdmFyIG5lZWRMYXllciA9IHR5cGVvZiBvYmoubGF5ZXIgIT09IFwidW5kZWZpbmVkXCI7XG5cbiAgaWYgKG5lZWRMYXllcikge1xuICAgIGNzcyArPSBcIkBsYXllclwiLmNvbmNhdChvYmoubGF5ZXIubGVuZ3RoID4gMCA/IFwiIFwiLmNvbmNhdChvYmoubGF5ZXIpIDogXCJcIiwgXCIge1wiKTtcbiAgfVxuXG4gIGNzcyArPSBvYmouY3NzO1xuXG4gIGlmIChuZWVkTGF5ZXIpIHtcbiAgICBjc3MgKz0gXCJ9XCI7XG4gIH1cblxuICBpZiAob2JqLm1lZGlhKSB7XG4gICAgY3NzICs9IFwifVwiO1xuICB9XG5cbiAgaWYgKG9iai5zdXBwb3J0cykge1xuICAgIGNzcyArPSBcIn1cIjtcbiAgfVxuXG4gIHZhciBzb3VyY2VNYXAgPSBvYmouc291cmNlTWFwO1xuXG4gIGlmIChzb3VyY2VNYXAgJiYgdHlwZW9mIGJ0b2EgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICBjc3MgKz0gXCJcXG4vKiMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LFwiLmNvbmNhdChidG9hKHVuZXNjYXBlKGVuY29kZVVSSUNvbXBvbmVudChKU09OLnN0cmluZ2lmeShzb3VyY2VNYXApKSkpLCBcIiAqL1wiKTtcbiAgfSAvLyBGb3Igb2xkIElFXG5cbiAgLyogaXN0YW5idWwgaWdub3JlIGlmICAqL1xuXG5cbiAgb3B0aW9ucy5zdHlsZVRhZ1RyYW5zZm9ybShjc3MsIHN0eWxlRWxlbWVudCwgb3B0aW9ucy5vcHRpb25zKTtcbn1cblxuZnVuY3Rpb24gcmVtb3ZlU3R5bGVFbGVtZW50KHN0eWxlRWxlbWVudCkge1xuICAvLyBpc3RhbmJ1bCBpZ25vcmUgaWZcbiAgaWYgKHN0eWxlRWxlbWVudC5wYXJlbnROb2RlID09PSBudWxsKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgc3R5bGVFbGVtZW50LnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoc3R5bGVFbGVtZW50KTtcbn1cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuXG5cbmZ1bmN0aW9uIGRvbUFQSShvcHRpb25zKSB7XG4gIHZhciBzdHlsZUVsZW1lbnQgPSBvcHRpb25zLmluc2VydFN0eWxlRWxlbWVudChvcHRpb25zKTtcbiAgcmV0dXJuIHtcbiAgICB1cGRhdGU6IGZ1bmN0aW9uIHVwZGF0ZShvYmopIHtcbiAgICAgIGFwcGx5KHN0eWxlRWxlbWVudCwgb3B0aW9ucywgb2JqKTtcbiAgICB9LFxuICAgIHJlbW92ZTogZnVuY3Rpb24gcmVtb3ZlKCkge1xuICAgICAgcmVtb3ZlU3R5bGVFbGVtZW50KHN0eWxlRWxlbWVudCk7XG4gICAgfVxuICB9O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGRvbUFQSTsiLCJcInVzZSBzdHJpY3RcIjtcblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5mdW5jdGlvbiBzdHlsZVRhZ1RyYW5zZm9ybShjc3MsIHN0eWxlRWxlbWVudCkge1xuICBpZiAoc3R5bGVFbGVtZW50LnN0eWxlU2hlZXQpIHtcbiAgICBzdHlsZUVsZW1lbnQuc3R5bGVTaGVldC5jc3NUZXh0ID0gY3NzO1xuICB9IGVsc2Uge1xuICAgIHdoaWxlIChzdHlsZUVsZW1lbnQuZmlyc3RDaGlsZCkge1xuICAgICAgc3R5bGVFbGVtZW50LnJlbW92ZUNoaWxkKHN0eWxlRWxlbWVudC5maXJzdENoaWxkKTtcbiAgICB9XG5cbiAgICBzdHlsZUVsZW1lbnQuYXBwZW5kQ2hpbGQoZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoY3NzKSk7XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBzdHlsZVRhZ1RyYW5zZm9ybTsiLCIvLyBUaGUgbW9kdWxlIGNhY2hlXG52YXIgX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fID0ge307XG5cbi8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG5mdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuXHR2YXIgY2FjaGVkTW9kdWxlID0gX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXTtcblx0aWYgKGNhY2hlZE1vZHVsZSAhPT0gdW5kZWZpbmVkKSB7XG5cdFx0cmV0dXJuIGNhY2hlZE1vZHVsZS5leHBvcnRzO1xuXHR9XG5cdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG5cdHZhciBtb2R1bGUgPSBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdID0ge1xuXHRcdGlkOiBtb2R1bGVJZCxcblx0XHRsb2FkZWQ6IGZhbHNlLFxuXHRcdGV4cG9ydHM6IHt9XG5cdH07XG5cblx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG5cdF9fd2VicGFja19tb2R1bGVzX19bbW9kdWxlSWRdLmNhbGwobW9kdWxlLmV4cG9ydHMsIG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG5cdC8vIEZsYWcgdGhlIG1vZHVsZSBhcyBsb2FkZWRcblx0bW9kdWxlLmxvYWRlZCA9IHRydWU7XG5cblx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcblx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xufVxuXG4iLCIvLyBnZXREZWZhdWx0RXhwb3J0IGZ1bmN0aW9uIGZvciBjb21wYXRpYmlsaXR5IHdpdGggbm9uLWhhcm1vbnkgbW9kdWxlc1xuX193ZWJwYWNrX3JlcXVpcmVfXy5uID0gKG1vZHVsZSkgPT4ge1xuXHR2YXIgZ2V0dGVyID0gbW9kdWxlICYmIG1vZHVsZS5fX2VzTW9kdWxlID9cblx0XHQoKSA9PiAobW9kdWxlWydkZWZhdWx0J10pIDpcblx0XHQoKSA9PiAobW9kdWxlKTtcblx0X193ZWJwYWNrX3JlcXVpcmVfXy5kKGdldHRlciwgeyBhOiBnZXR0ZXIgfSk7XG5cdHJldHVybiBnZXR0ZXI7XG59OyIsIi8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb25zIGZvciBoYXJtb255IGV4cG9ydHNcbl9fd2VicGFja19yZXF1aXJlX18uZCA9IChleHBvcnRzLCBkZWZpbml0aW9uKSA9PiB7XG5cdGZvcih2YXIga2V5IGluIGRlZmluaXRpb24pIHtcblx0XHRpZihfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZGVmaW5pdGlvbiwga2V5KSAmJiAhX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIGtleSkpIHtcblx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBrZXksIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBkZWZpbml0aW9uW2tleV0gfSk7XG5cdFx0fVxuXHR9XG59OyIsIl9fd2VicGFja19yZXF1aXJlX18ubyA9IChvYmosIHByb3ApID0+IChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBwcm9wKSkiLCJfX3dlYnBhY2tfcmVxdWlyZV9fLm5tZCA9IChtb2R1bGUpID0+IHtcblx0bW9kdWxlLnBhdGhzID0gW107XG5cdGlmICghbW9kdWxlLmNoaWxkcmVuKSBtb2R1bGUuY2hpbGRyZW4gPSBbXTtcblx0cmV0dXJuIG1vZHVsZTtcbn07IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gJ0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHMnO1xuXG4vKipcclxuICogQWN0aW9ucyByZXByZXNlbnQgdGhlIHR5cGUgb2YgY2hhbmdlIHRvIGEgbG9jYXRpb24gdmFsdWUuXHJcbiAqXHJcbiAqIEBzZWUgaHR0cHM6Ly9naXRodWIuY29tL3JlbWl4LXJ1bi9oaXN0b3J5L3RyZWUvbWFpbi9kb2NzL2FwaS1yZWZlcmVuY2UubWQjYWN0aW9uXHJcbiAqL1xudmFyIEFjdGlvbjtcblxuKGZ1bmN0aW9uIChBY3Rpb24pIHtcbiAgLyoqXHJcbiAgICogQSBQT1AgaW5kaWNhdGVzIGEgY2hhbmdlIHRvIGFuIGFyYml0cmFyeSBpbmRleCBpbiB0aGUgaGlzdG9yeSBzdGFjaywgc3VjaFxyXG4gICAqIGFzIGEgYmFjayBvciBmb3J3YXJkIG5hdmlnYXRpb24uIEl0IGRvZXMgbm90IGRlc2NyaWJlIHRoZSBkaXJlY3Rpb24gb2YgdGhlXHJcbiAgICogbmF2aWdhdGlvbiwgb25seSB0aGF0IHRoZSBjdXJyZW50IGluZGV4IGNoYW5nZWQuXHJcbiAgICpcclxuICAgKiBOb3RlOiBUaGlzIGlzIHRoZSBkZWZhdWx0IGFjdGlvbiBmb3IgbmV3bHkgY3JlYXRlZCBoaXN0b3J5IG9iamVjdHMuXHJcbiAgICovXG4gIEFjdGlvbltcIlBvcFwiXSA9IFwiUE9QXCI7XG4gIC8qKlxyXG4gICAqIEEgUFVTSCBpbmRpY2F0ZXMgYSBuZXcgZW50cnkgYmVpbmcgYWRkZWQgdG8gdGhlIGhpc3Rvcnkgc3RhY2ssIHN1Y2ggYXMgd2hlblxyXG4gICAqIGEgbGluayBpcyBjbGlja2VkIGFuZCBhIG5ldyBwYWdlIGxvYWRzLiBXaGVuIHRoaXMgaGFwcGVucywgYWxsIHN1YnNlcXVlbnRcclxuICAgKiBlbnRyaWVzIGluIHRoZSBzdGFjayBhcmUgbG9zdC5cclxuICAgKi9cblxuICBBY3Rpb25bXCJQdXNoXCJdID0gXCJQVVNIXCI7XG4gIC8qKlxyXG4gICAqIEEgUkVQTEFDRSBpbmRpY2F0ZXMgdGhlIGVudHJ5IGF0IHRoZSBjdXJyZW50IGluZGV4IGluIHRoZSBoaXN0b3J5IHN0YWNrXHJcbiAgICogYmVpbmcgcmVwbGFjZWQgYnkgYSBuZXcgb25lLlxyXG4gICAqL1xuXG4gIEFjdGlvbltcIlJlcGxhY2VcIl0gPSBcIlJFUExBQ0VcIjtcbn0pKEFjdGlvbiB8fCAoQWN0aW9uID0ge30pKTtcblxudmFyIHJlYWRPbmx5ID0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gZnVuY3Rpb24gKG9iaikge1xuICByZXR1cm4gT2JqZWN0LmZyZWV6ZShvYmopO1xufSA6IGZ1bmN0aW9uIChvYmopIHtcbiAgcmV0dXJuIG9iajtcbn07XG5cbmZ1bmN0aW9uIHdhcm5pbmcoY29uZCwgbWVzc2FnZSkge1xuICBpZiAoIWNvbmQpIHtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tY29uc29sZVxuICAgIGlmICh0eXBlb2YgY29uc29sZSAhPT0gJ3VuZGVmaW5lZCcpIGNvbnNvbGUud2FybihtZXNzYWdlKTtcblxuICAgIHRyeSB7XG4gICAgICAvLyBXZWxjb21lIHRvIGRlYnVnZ2luZyBoaXN0b3J5IVxuICAgICAgLy9cbiAgICAgIC8vIFRoaXMgZXJyb3IgaXMgdGhyb3duIGFzIGEgY29udmVuaWVuY2Ugc28geW91IGNhbiBtb3JlIGVhc2lseVxuICAgICAgLy8gZmluZCB0aGUgc291cmNlIGZvciBhIHdhcm5pbmcgdGhhdCBhcHBlYXJzIGluIHRoZSBjb25zb2xlIGJ5XG4gICAgICAvLyBlbmFibGluZyBcInBhdXNlIG9uIGV4Y2VwdGlvbnNcIiBpbiB5b3VyIEphdmFTY3JpcHQgZGVidWdnZXIuXG4gICAgICB0aHJvdyBuZXcgRXJyb3IobWVzc2FnZSk7IC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1lbXB0eVxuICAgIH0gY2F0Y2ggKGUpIHt9XG4gIH1cbn1cblxudmFyIEJlZm9yZVVubG9hZEV2ZW50VHlwZSA9ICdiZWZvcmV1bmxvYWQnO1xudmFyIEhhc2hDaGFuZ2VFdmVudFR5cGUgPSAnaGFzaGNoYW5nZSc7XG52YXIgUG9wU3RhdGVFdmVudFR5cGUgPSAncG9wc3RhdGUnO1xuLyoqXHJcbiAqIEJyb3dzZXIgaGlzdG9yeSBzdG9yZXMgdGhlIGxvY2F0aW9uIGluIHJlZ3VsYXIgVVJMcy4gVGhpcyBpcyB0aGUgc3RhbmRhcmQgZm9yXHJcbiAqIG1vc3Qgd2ViIGFwcHMsIGJ1dCBpdCByZXF1aXJlcyBzb21lIGNvbmZpZ3VyYXRpb24gb24gdGhlIHNlcnZlciB0byBlbnN1cmUgeW91XHJcbiAqIHNlcnZlIHRoZSBzYW1lIGFwcCBhdCBtdWx0aXBsZSBVUkxzLlxyXG4gKlxyXG4gKiBAc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9yZW1peC1ydW4vaGlzdG9yeS90cmVlL21haW4vZG9jcy9hcGktcmVmZXJlbmNlLm1kI2NyZWF0ZWJyb3dzZXJoaXN0b3J5XHJcbiAqL1xuXG5mdW5jdGlvbiBjcmVhdGVCcm93c2VySGlzdG9yeShvcHRpb25zKSB7XG4gIGlmIChvcHRpb25zID09PSB2b2lkIDApIHtcbiAgICBvcHRpb25zID0ge307XG4gIH1cblxuICB2YXIgX29wdGlvbnMgPSBvcHRpb25zLFxuICAgICAgX29wdGlvbnMkd2luZG93ID0gX29wdGlvbnMud2luZG93LFxuICAgICAgd2luZG93ID0gX29wdGlvbnMkd2luZG93ID09PSB2b2lkIDAgPyBkb2N1bWVudC5kZWZhdWx0VmlldyA6IF9vcHRpb25zJHdpbmRvdztcbiAgdmFyIGdsb2JhbEhpc3RvcnkgPSB3aW5kb3cuaGlzdG9yeTtcblxuICBmdW5jdGlvbiBnZXRJbmRleEFuZExvY2F0aW9uKCkge1xuICAgIHZhciBfd2luZG93JGxvY2F0aW9uID0gd2luZG93LmxvY2F0aW9uLFxuICAgICAgICBwYXRobmFtZSA9IF93aW5kb3ckbG9jYXRpb24ucGF0aG5hbWUsXG4gICAgICAgIHNlYXJjaCA9IF93aW5kb3ckbG9jYXRpb24uc2VhcmNoLFxuICAgICAgICBoYXNoID0gX3dpbmRvdyRsb2NhdGlvbi5oYXNoO1xuICAgIHZhciBzdGF0ZSA9IGdsb2JhbEhpc3Rvcnkuc3RhdGUgfHwge307XG4gICAgcmV0dXJuIFtzdGF0ZS5pZHgsIHJlYWRPbmx5KHtcbiAgICAgIHBhdGhuYW1lOiBwYXRobmFtZSxcbiAgICAgIHNlYXJjaDogc2VhcmNoLFxuICAgICAgaGFzaDogaGFzaCxcbiAgICAgIHN0YXRlOiBzdGF0ZS51c3IgfHwgbnVsbCxcbiAgICAgIGtleTogc3RhdGUua2V5IHx8ICdkZWZhdWx0J1xuICAgIH0pXTtcbiAgfVxuXG4gIHZhciBibG9ja2VkUG9wVHggPSBudWxsO1xuXG4gIGZ1bmN0aW9uIGhhbmRsZVBvcCgpIHtcbiAgICBpZiAoYmxvY2tlZFBvcFR4KSB7XG4gICAgICBibG9ja2Vycy5jYWxsKGJsb2NrZWRQb3BUeCk7XG4gICAgICBibG9ja2VkUG9wVHggPSBudWxsO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgbmV4dEFjdGlvbiA9IEFjdGlvbi5Qb3A7XG5cbiAgICAgIHZhciBfZ2V0SW5kZXhBbmRMb2NhdGlvbiA9IGdldEluZGV4QW5kTG9jYXRpb24oKSxcbiAgICAgICAgICBuZXh0SW5kZXggPSBfZ2V0SW5kZXhBbmRMb2NhdGlvblswXSxcbiAgICAgICAgICBuZXh0TG9jYXRpb24gPSBfZ2V0SW5kZXhBbmRMb2NhdGlvblsxXTtcblxuICAgICAgaWYgKGJsb2NrZXJzLmxlbmd0aCkge1xuICAgICAgICBpZiAobmV4dEluZGV4ICE9IG51bGwpIHtcbiAgICAgICAgICB2YXIgZGVsdGEgPSBpbmRleCAtIG5leHRJbmRleDtcblxuICAgICAgICAgIGlmIChkZWx0YSkge1xuICAgICAgICAgICAgLy8gUmV2ZXJ0IHRoZSBQT1BcbiAgICAgICAgICAgIGJsb2NrZWRQb3BUeCA9IHtcbiAgICAgICAgICAgICAgYWN0aW9uOiBuZXh0QWN0aW9uLFxuICAgICAgICAgICAgICBsb2NhdGlvbjogbmV4dExvY2F0aW9uLFxuICAgICAgICAgICAgICByZXRyeTogZnVuY3Rpb24gcmV0cnkoKSB7XG4gICAgICAgICAgICAgICAgZ28oZGVsdGEgKiAtMSk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBnbyhkZWx0YSk7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIC8vIFRyeWluZyB0byBQT1AgdG8gYSBsb2NhdGlvbiB3aXRoIG5vIGluZGV4LiBXZSBkaWQgbm90IGNyZWF0ZVxuICAgICAgICAgIC8vIHRoaXMgbG9jYXRpb24sIHNvIHdlIGNhbid0IGVmZmVjdGl2ZWx5IGJsb2NrIHRoZSBuYXZpZ2F0aW9uLlxuICAgICAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoZmFsc2UsIC8vIFRPRE86IFdyaXRlIHVwIGEgZG9jIHRoYXQgZXhwbGFpbnMgb3VyIGJsb2NraW5nIHN0cmF0ZWd5IGluXG4gICAgICAgICAgLy8gZGV0YWlsIGFuZCBsaW5rIHRvIGl0IGhlcmUgc28gcGVvcGxlIGNhbiB1bmRlcnN0YW5kIGJldHRlciB3aGF0XG4gICAgICAgICAgLy8gaXMgZ29pbmcgb24gYW5kIGhvdyB0byBhdm9pZCBpdC5cbiAgICAgICAgICBcIllvdSBhcmUgdHJ5aW5nIHRvIGJsb2NrIGEgUE9QIG5hdmlnYXRpb24gdG8gYSBsb2NhdGlvbiB0aGF0IHdhcyBub3QgXCIgKyBcImNyZWF0ZWQgYnkgdGhlIGhpc3RvcnkgbGlicmFyeS4gVGhlIGJsb2NrIHdpbGwgZmFpbCBzaWxlbnRseSBpbiBcIiArIFwicHJvZHVjdGlvbiwgYnV0IGluIGdlbmVyYWwgeW91IHNob3VsZCBkbyBhbGwgbmF2aWdhdGlvbiB3aXRoIHRoZSBcIiArIFwiaGlzdG9yeSBsaWJyYXJ5IChpbnN0ZWFkIG9mIHVzaW5nIHdpbmRvdy5oaXN0b3J5LnB1c2hTdGF0ZSBkaXJlY3RseSkgXCIgKyBcInRvIGF2b2lkIHRoaXMgc2l0dWF0aW9uLlwiKSA6IHZvaWQgMDtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgYXBwbHlUeChuZXh0QWN0aW9uKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihQb3BTdGF0ZUV2ZW50VHlwZSwgaGFuZGxlUG9wKTtcbiAgdmFyIGFjdGlvbiA9IEFjdGlvbi5Qb3A7XG5cbiAgdmFyIF9nZXRJbmRleEFuZExvY2F0aW9uMiA9IGdldEluZGV4QW5kTG9jYXRpb24oKSxcbiAgICAgIGluZGV4ID0gX2dldEluZGV4QW5kTG9jYXRpb24yWzBdLFxuICAgICAgbG9jYXRpb24gPSBfZ2V0SW5kZXhBbmRMb2NhdGlvbjJbMV07XG5cbiAgdmFyIGxpc3RlbmVycyA9IGNyZWF0ZUV2ZW50cygpO1xuICB2YXIgYmxvY2tlcnMgPSBjcmVhdGVFdmVudHMoKTtcblxuICBpZiAoaW5kZXggPT0gbnVsbCkge1xuICAgIGluZGV4ID0gMDtcbiAgICBnbG9iYWxIaXN0b3J5LnJlcGxhY2VTdGF0ZShfZXh0ZW5kcyh7fSwgZ2xvYmFsSGlzdG9yeS5zdGF0ZSwge1xuICAgICAgaWR4OiBpbmRleFxuICAgIH0pLCAnJyk7XG4gIH1cblxuICBmdW5jdGlvbiBjcmVhdGVIcmVmKHRvKSB7XG4gICAgcmV0dXJuIHR5cGVvZiB0byA9PT0gJ3N0cmluZycgPyB0byA6IGNyZWF0ZVBhdGgodG8pO1xuICB9IC8vIHN0YXRlIGRlZmF1bHRzIHRvIGBudWxsYCBiZWNhdXNlIGB3aW5kb3cuaGlzdG9yeS5zdGF0ZWAgZG9lc1xuXG5cbiAgZnVuY3Rpb24gZ2V0TmV4dExvY2F0aW9uKHRvLCBzdGF0ZSkge1xuICAgIGlmIChzdGF0ZSA9PT0gdm9pZCAwKSB7XG4gICAgICBzdGF0ZSA9IG51bGw7XG4gICAgfVxuXG4gICAgcmV0dXJuIHJlYWRPbmx5KF9leHRlbmRzKHtcbiAgICAgIHBhdGhuYW1lOiBsb2NhdGlvbi5wYXRobmFtZSxcbiAgICAgIGhhc2g6ICcnLFxuICAgICAgc2VhcmNoOiAnJ1xuICAgIH0sIHR5cGVvZiB0byA9PT0gJ3N0cmluZycgPyBwYXJzZVBhdGgodG8pIDogdG8sIHtcbiAgICAgIHN0YXRlOiBzdGF0ZSxcbiAgICAgIGtleTogY3JlYXRlS2V5KClcbiAgICB9KSk7XG4gIH1cblxuICBmdW5jdGlvbiBnZXRIaXN0b3J5U3RhdGVBbmRVcmwobmV4dExvY2F0aW9uLCBpbmRleCkge1xuICAgIHJldHVybiBbe1xuICAgICAgdXNyOiBuZXh0TG9jYXRpb24uc3RhdGUsXG4gICAgICBrZXk6IG5leHRMb2NhdGlvbi5rZXksXG4gICAgICBpZHg6IGluZGV4XG4gICAgfSwgY3JlYXRlSHJlZihuZXh0TG9jYXRpb24pXTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGFsbG93VHgoYWN0aW9uLCBsb2NhdGlvbiwgcmV0cnkpIHtcbiAgICByZXR1cm4gIWJsb2NrZXJzLmxlbmd0aCB8fCAoYmxvY2tlcnMuY2FsbCh7XG4gICAgICBhY3Rpb246IGFjdGlvbixcbiAgICAgIGxvY2F0aW9uOiBsb2NhdGlvbixcbiAgICAgIHJldHJ5OiByZXRyeVxuICAgIH0pLCBmYWxzZSk7XG4gIH1cblxuICBmdW5jdGlvbiBhcHBseVR4KG5leHRBY3Rpb24pIHtcbiAgICBhY3Rpb24gPSBuZXh0QWN0aW9uO1xuXG4gICAgdmFyIF9nZXRJbmRleEFuZExvY2F0aW9uMyA9IGdldEluZGV4QW5kTG9jYXRpb24oKTtcblxuICAgIGluZGV4ID0gX2dldEluZGV4QW5kTG9jYXRpb24zWzBdO1xuICAgIGxvY2F0aW9uID0gX2dldEluZGV4QW5kTG9jYXRpb24zWzFdO1xuICAgIGxpc3RlbmVycy5jYWxsKHtcbiAgICAgIGFjdGlvbjogYWN0aW9uLFxuICAgICAgbG9jYXRpb246IGxvY2F0aW9uXG4gICAgfSk7XG4gIH1cblxuICBmdW5jdGlvbiBwdXNoKHRvLCBzdGF0ZSkge1xuICAgIHZhciBuZXh0QWN0aW9uID0gQWN0aW9uLlB1c2g7XG4gICAgdmFyIG5leHRMb2NhdGlvbiA9IGdldE5leHRMb2NhdGlvbih0bywgc3RhdGUpO1xuXG4gICAgZnVuY3Rpb24gcmV0cnkoKSB7XG4gICAgICBwdXNoKHRvLCBzdGF0ZSk7XG4gICAgfVxuXG4gICAgaWYgKGFsbG93VHgobmV4dEFjdGlvbiwgbmV4dExvY2F0aW9uLCByZXRyeSkpIHtcbiAgICAgIHZhciBfZ2V0SGlzdG9yeVN0YXRlQW5kVXIgPSBnZXRIaXN0b3J5U3RhdGVBbmRVcmwobmV4dExvY2F0aW9uLCBpbmRleCArIDEpLFxuICAgICAgICAgIGhpc3RvcnlTdGF0ZSA9IF9nZXRIaXN0b3J5U3RhdGVBbmRVclswXSxcbiAgICAgICAgICB1cmwgPSBfZ2V0SGlzdG9yeVN0YXRlQW5kVXJbMV07IC8vIFRPRE86IFN1cHBvcnQgZm9yY2VkIHJlbG9hZGluZ1xuICAgICAgLy8gdHJ5Li4uY2F0Y2ggYmVjYXVzZSBpT1MgbGltaXRzIHVzIHRvIDEwMCBwdXNoU3RhdGUgY2FsbHMgOi9cblxuXG4gICAgICB0cnkge1xuICAgICAgICBnbG9iYWxIaXN0b3J5LnB1c2hTdGF0ZShoaXN0b3J5U3RhdGUsICcnLCB1cmwpO1xuICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgLy8gVGhleSBhcmUgZ29pbmcgdG8gbG9zZSBzdGF0ZSBoZXJlLCBidXQgdGhlcmUgaXMgbm8gcmVhbFxuICAgICAgICAvLyB3YXkgdG8gd2FybiB0aGVtIGFib3V0IGl0IHNpbmNlIHRoZSBwYWdlIHdpbGwgcmVmcmVzaC4uLlxuICAgICAgICB3aW5kb3cubG9jYXRpb24uYXNzaWduKHVybCk7XG4gICAgICB9XG5cbiAgICAgIGFwcGx5VHgobmV4dEFjdGlvbik7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gcmVwbGFjZSh0bywgc3RhdGUpIHtcbiAgICB2YXIgbmV4dEFjdGlvbiA9IEFjdGlvbi5SZXBsYWNlO1xuICAgIHZhciBuZXh0TG9jYXRpb24gPSBnZXROZXh0TG9jYXRpb24odG8sIHN0YXRlKTtcblxuICAgIGZ1bmN0aW9uIHJldHJ5KCkge1xuICAgICAgcmVwbGFjZSh0bywgc3RhdGUpO1xuICAgIH1cblxuICAgIGlmIChhbGxvd1R4KG5leHRBY3Rpb24sIG5leHRMb2NhdGlvbiwgcmV0cnkpKSB7XG4gICAgICB2YXIgX2dldEhpc3RvcnlTdGF0ZUFuZFVyMiA9IGdldEhpc3RvcnlTdGF0ZUFuZFVybChuZXh0TG9jYXRpb24sIGluZGV4KSxcbiAgICAgICAgICBoaXN0b3J5U3RhdGUgPSBfZ2V0SGlzdG9yeVN0YXRlQW5kVXIyWzBdLFxuICAgICAgICAgIHVybCA9IF9nZXRIaXN0b3J5U3RhdGVBbmRVcjJbMV07IC8vIFRPRE86IFN1cHBvcnQgZm9yY2VkIHJlbG9hZGluZ1xuXG5cbiAgICAgIGdsb2JhbEhpc3RvcnkucmVwbGFjZVN0YXRlKGhpc3RvcnlTdGF0ZSwgJycsIHVybCk7XG4gICAgICBhcHBseVR4KG5leHRBY3Rpb24pO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGdvKGRlbHRhKSB7XG4gICAgZ2xvYmFsSGlzdG9yeS5nbyhkZWx0YSk7XG4gIH1cblxuICB2YXIgaGlzdG9yeSA9IHtcbiAgICBnZXQgYWN0aW9uKCkge1xuICAgICAgcmV0dXJuIGFjdGlvbjtcbiAgICB9LFxuXG4gICAgZ2V0IGxvY2F0aW9uKCkge1xuICAgICAgcmV0dXJuIGxvY2F0aW9uO1xuICAgIH0sXG5cbiAgICBjcmVhdGVIcmVmOiBjcmVhdGVIcmVmLFxuICAgIHB1c2g6IHB1c2gsXG4gICAgcmVwbGFjZTogcmVwbGFjZSxcbiAgICBnbzogZ28sXG4gICAgYmFjazogZnVuY3Rpb24gYmFjaygpIHtcbiAgICAgIGdvKC0xKTtcbiAgICB9LFxuICAgIGZvcndhcmQ6IGZ1bmN0aW9uIGZvcndhcmQoKSB7XG4gICAgICBnbygxKTtcbiAgICB9LFxuICAgIGxpc3RlbjogZnVuY3Rpb24gbGlzdGVuKGxpc3RlbmVyKSB7XG4gICAgICByZXR1cm4gbGlzdGVuZXJzLnB1c2gobGlzdGVuZXIpO1xuICAgIH0sXG4gICAgYmxvY2s6IGZ1bmN0aW9uIGJsb2NrKGJsb2NrZXIpIHtcbiAgICAgIHZhciB1bmJsb2NrID0gYmxvY2tlcnMucHVzaChibG9ja2VyKTtcblxuICAgICAgaWYgKGJsb2NrZXJzLmxlbmd0aCA9PT0gMSkge1xuICAgICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihCZWZvcmVVbmxvYWRFdmVudFR5cGUsIHByb21wdEJlZm9yZVVubG9hZCk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHVuYmxvY2soKTsgLy8gUmVtb3ZlIHRoZSBiZWZvcmV1bmxvYWQgbGlzdGVuZXIgc28gdGhlIGRvY3VtZW50IG1heVxuICAgICAgICAvLyBzdGlsbCBiZSBzYWx2YWdlYWJsZSBpbiB0aGUgcGFnZWhpZGUgZXZlbnQuXG4gICAgICAgIC8vIFNlZSBodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnLyN1bmxvYWRpbmctZG9jdW1lbnRzXG5cbiAgICAgICAgaWYgKCFibG9ja2Vycy5sZW5ndGgpIHtcbiAgICAgICAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcihCZWZvcmVVbmxvYWRFdmVudFR5cGUsIHByb21wdEJlZm9yZVVubG9hZCk7XG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgfVxuICB9O1xuICByZXR1cm4gaGlzdG9yeTtcbn1cbi8qKlxyXG4gKiBIYXNoIGhpc3Rvcnkgc3RvcmVzIHRoZSBsb2NhdGlvbiBpbiB3aW5kb3cubG9jYXRpb24uaGFzaC4gVGhpcyBtYWtlcyBpdCBpZGVhbFxyXG4gKiBmb3Igc2l0dWF0aW9ucyB3aGVyZSB5b3UgZG9uJ3Qgd2FudCB0byBzZW5kIHRoZSBsb2NhdGlvbiB0byB0aGUgc2VydmVyIGZvclxyXG4gKiBzb21lIHJlYXNvbiwgZWl0aGVyIGJlY2F1c2UgeW91IGRvIGNhbm5vdCBjb25maWd1cmUgaXQgb3IgdGhlIFVSTCBzcGFjZSBpc1xyXG4gKiByZXNlcnZlZCBmb3Igc29tZXRoaW5nIGVsc2UuXHJcbiAqXHJcbiAqIEBzZWUgaHR0cHM6Ly9naXRodWIuY29tL3JlbWl4LXJ1bi9oaXN0b3J5L3RyZWUvbWFpbi9kb2NzL2FwaS1yZWZlcmVuY2UubWQjY3JlYXRlaGFzaGhpc3RvcnlcclxuICovXG5cbmZ1bmN0aW9uIGNyZWF0ZUhhc2hIaXN0b3J5KG9wdGlvbnMpIHtcbiAgaWYgKG9wdGlvbnMgPT09IHZvaWQgMCkge1xuICAgIG9wdGlvbnMgPSB7fTtcbiAgfVxuXG4gIHZhciBfb3B0aW9uczIgPSBvcHRpb25zLFxuICAgICAgX29wdGlvbnMyJHdpbmRvdyA9IF9vcHRpb25zMi53aW5kb3csXG4gICAgICB3aW5kb3cgPSBfb3B0aW9uczIkd2luZG93ID09PSB2b2lkIDAgPyBkb2N1bWVudC5kZWZhdWx0VmlldyA6IF9vcHRpb25zMiR3aW5kb3c7XG4gIHZhciBnbG9iYWxIaXN0b3J5ID0gd2luZG93Lmhpc3Rvcnk7XG5cbiAgZnVuY3Rpb24gZ2V0SW5kZXhBbmRMb2NhdGlvbigpIHtcbiAgICB2YXIgX3BhcnNlUGF0aCA9IHBhcnNlUGF0aCh3aW5kb3cubG9jYXRpb24uaGFzaC5zdWJzdHIoMSkpLFxuICAgICAgICBfcGFyc2VQYXRoJHBhdGhuYW1lID0gX3BhcnNlUGF0aC5wYXRobmFtZSxcbiAgICAgICAgcGF0aG5hbWUgPSBfcGFyc2VQYXRoJHBhdGhuYW1lID09PSB2b2lkIDAgPyAnLycgOiBfcGFyc2VQYXRoJHBhdGhuYW1lLFxuICAgICAgICBfcGFyc2VQYXRoJHNlYXJjaCA9IF9wYXJzZVBhdGguc2VhcmNoLFxuICAgICAgICBzZWFyY2ggPSBfcGFyc2VQYXRoJHNlYXJjaCA9PT0gdm9pZCAwID8gJycgOiBfcGFyc2VQYXRoJHNlYXJjaCxcbiAgICAgICAgX3BhcnNlUGF0aCRoYXNoID0gX3BhcnNlUGF0aC5oYXNoLFxuICAgICAgICBoYXNoID0gX3BhcnNlUGF0aCRoYXNoID09PSB2b2lkIDAgPyAnJyA6IF9wYXJzZVBhdGgkaGFzaDtcblxuICAgIHZhciBzdGF0ZSA9IGdsb2JhbEhpc3Rvcnkuc3RhdGUgfHwge307XG4gICAgcmV0dXJuIFtzdGF0ZS5pZHgsIHJlYWRPbmx5KHtcbiAgICAgIHBhdGhuYW1lOiBwYXRobmFtZSxcbiAgICAgIHNlYXJjaDogc2VhcmNoLFxuICAgICAgaGFzaDogaGFzaCxcbiAgICAgIHN0YXRlOiBzdGF0ZS51c3IgfHwgbnVsbCxcbiAgICAgIGtleTogc3RhdGUua2V5IHx8ICdkZWZhdWx0J1xuICAgIH0pXTtcbiAgfVxuXG4gIHZhciBibG9ja2VkUG9wVHggPSBudWxsO1xuXG4gIGZ1bmN0aW9uIGhhbmRsZVBvcCgpIHtcbiAgICBpZiAoYmxvY2tlZFBvcFR4KSB7XG4gICAgICBibG9ja2Vycy5jYWxsKGJsb2NrZWRQb3BUeCk7XG4gICAgICBibG9ja2VkUG9wVHggPSBudWxsO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgbmV4dEFjdGlvbiA9IEFjdGlvbi5Qb3A7XG5cbiAgICAgIHZhciBfZ2V0SW5kZXhBbmRMb2NhdGlvbjQgPSBnZXRJbmRleEFuZExvY2F0aW9uKCksXG4gICAgICAgICAgbmV4dEluZGV4ID0gX2dldEluZGV4QW5kTG9jYXRpb240WzBdLFxuICAgICAgICAgIG5leHRMb2NhdGlvbiA9IF9nZXRJbmRleEFuZExvY2F0aW9uNFsxXTtcblxuICAgICAgaWYgKGJsb2NrZXJzLmxlbmd0aCkge1xuICAgICAgICBpZiAobmV4dEluZGV4ICE9IG51bGwpIHtcbiAgICAgICAgICB2YXIgZGVsdGEgPSBpbmRleCAtIG5leHRJbmRleDtcblxuICAgICAgICAgIGlmIChkZWx0YSkge1xuICAgICAgICAgICAgLy8gUmV2ZXJ0IHRoZSBQT1BcbiAgICAgICAgICAgIGJsb2NrZWRQb3BUeCA9IHtcbiAgICAgICAgICAgICAgYWN0aW9uOiBuZXh0QWN0aW9uLFxuICAgICAgICAgICAgICBsb2NhdGlvbjogbmV4dExvY2F0aW9uLFxuICAgICAgICAgICAgICByZXRyeTogZnVuY3Rpb24gcmV0cnkoKSB7XG4gICAgICAgICAgICAgICAgZ28oZGVsdGEgKiAtMSk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBnbyhkZWx0YSk7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIC8vIFRyeWluZyB0byBQT1AgdG8gYSBsb2NhdGlvbiB3aXRoIG5vIGluZGV4LiBXZSBkaWQgbm90IGNyZWF0ZVxuICAgICAgICAgIC8vIHRoaXMgbG9jYXRpb24sIHNvIHdlIGNhbid0IGVmZmVjdGl2ZWx5IGJsb2NrIHRoZSBuYXZpZ2F0aW9uLlxuICAgICAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoZmFsc2UsIC8vIFRPRE86IFdyaXRlIHVwIGEgZG9jIHRoYXQgZXhwbGFpbnMgb3VyIGJsb2NraW5nIHN0cmF0ZWd5IGluXG4gICAgICAgICAgLy8gZGV0YWlsIGFuZCBsaW5rIHRvIGl0IGhlcmUgc28gcGVvcGxlIGNhbiB1bmRlcnN0YW5kIGJldHRlclxuICAgICAgICAgIC8vIHdoYXQgaXMgZ29pbmcgb24gYW5kIGhvdyB0byBhdm9pZCBpdC5cbiAgICAgICAgICBcIllvdSBhcmUgdHJ5aW5nIHRvIGJsb2NrIGEgUE9QIG5hdmlnYXRpb24gdG8gYSBsb2NhdGlvbiB0aGF0IHdhcyBub3QgXCIgKyBcImNyZWF0ZWQgYnkgdGhlIGhpc3RvcnkgbGlicmFyeS4gVGhlIGJsb2NrIHdpbGwgZmFpbCBzaWxlbnRseSBpbiBcIiArIFwicHJvZHVjdGlvbiwgYnV0IGluIGdlbmVyYWwgeW91IHNob3VsZCBkbyBhbGwgbmF2aWdhdGlvbiB3aXRoIHRoZSBcIiArIFwiaGlzdG9yeSBsaWJyYXJ5IChpbnN0ZWFkIG9mIHVzaW5nIHdpbmRvdy5oaXN0b3J5LnB1c2hTdGF0ZSBkaXJlY3RseSkgXCIgKyBcInRvIGF2b2lkIHRoaXMgc2l0dWF0aW9uLlwiKSA6IHZvaWQgMDtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgYXBwbHlUeChuZXh0QWN0aW9uKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihQb3BTdGF0ZUV2ZW50VHlwZSwgaGFuZGxlUG9wKTsgLy8gcG9wc3RhdGUgZG9lcyBub3QgZmlyZSBvbiBoYXNoY2hhbmdlIGluIElFIDExIGFuZCBvbGQgKHRyaWRlbnQpIEVkZ2VcbiAgLy8gaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZGUvZG9jcy9XZWIvQVBJL1dpbmRvdy9wb3BzdGF0ZV9ldmVudFxuXG4gIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKEhhc2hDaGFuZ2VFdmVudFR5cGUsIGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgX2dldEluZGV4QW5kTG9jYXRpb241ID0gZ2V0SW5kZXhBbmRMb2NhdGlvbigpLFxuICAgICAgICBuZXh0TG9jYXRpb24gPSBfZ2V0SW5kZXhBbmRMb2NhdGlvbjVbMV07IC8vIElnbm9yZSBleHRyYW5lb3VzIGhhc2hjaGFuZ2UgZXZlbnRzLlxuXG5cbiAgICBpZiAoY3JlYXRlUGF0aChuZXh0TG9jYXRpb24pICE9PSBjcmVhdGVQYXRoKGxvY2F0aW9uKSkge1xuICAgICAgaGFuZGxlUG9wKCk7XG4gICAgfVxuICB9KTtcbiAgdmFyIGFjdGlvbiA9IEFjdGlvbi5Qb3A7XG5cbiAgdmFyIF9nZXRJbmRleEFuZExvY2F0aW9uNiA9IGdldEluZGV4QW5kTG9jYXRpb24oKSxcbiAgICAgIGluZGV4ID0gX2dldEluZGV4QW5kTG9jYXRpb242WzBdLFxuICAgICAgbG9jYXRpb24gPSBfZ2V0SW5kZXhBbmRMb2NhdGlvbjZbMV07XG5cbiAgdmFyIGxpc3RlbmVycyA9IGNyZWF0ZUV2ZW50cygpO1xuICB2YXIgYmxvY2tlcnMgPSBjcmVhdGVFdmVudHMoKTtcblxuICBpZiAoaW5kZXggPT0gbnVsbCkge1xuICAgIGluZGV4ID0gMDtcbiAgICBnbG9iYWxIaXN0b3J5LnJlcGxhY2VTdGF0ZShfZXh0ZW5kcyh7fSwgZ2xvYmFsSGlzdG9yeS5zdGF0ZSwge1xuICAgICAgaWR4OiBpbmRleFxuICAgIH0pLCAnJyk7XG4gIH1cblxuICBmdW5jdGlvbiBnZXRCYXNlSHJlZigpIHtcbiAgICB2YXIgYmFzZSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJ2Jhc2UnKTtcbiAgICB2YXIgaHJlZiA9ICcnO1xuXG4gICAgaWYgKGJhc2UgJiYgYmFzZS5nZXRBdHRyaWJ1dGUoJ2hyZWYnKSkge1xuICAgICAgdmFyIHVybCA9IHdpbmRvdy5sb2NhdGlvbi5ocmVmO1xuICAgICAgdmFyIGhhc2hJbmRleCA9IHVybC5pbmRleE9mKCcjJyk7XG4gICAgICBocmVmID0gaGFzaEluZGV4ID09PSAtMSA/IHVybCA6IHVybC5zbGljZSgwLCBoYXNoSW5kZXgpO1xuICAgIH1cblxuICAgIHJldHVybiBocmVmO1xuICB9XG5cbiAgZnVuY3Rpb24gY3JlYXRlSHJlZih0bykge1xuICAgIHJldHVybiBnZXRCYXNlSHJlZigpICsgJyMnICsgKHR5cGVvZiB0byA9PT0gJ3N0cmluZycgPyB0byA6IGNyZWF0ZVBhdGgodG8pKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGdldE5leHRMb2NhdGlvbih0bywgc3RhdGUpIHtcbiAgICBpZiAoc3RhdGUgPT09IHZvaWQgMCkge1xuICAgICAgc3RhdGUgPSBudWxsO1xuICAgIH1cblxuICAgIHJldHVybiByZWFkT25seShfZXh0ZW5kcyh7XG4gICAgICBwYXRobmFtZTogbG9jYXRpb24ucGF0aG5hbWUsXG4gICAgICBoYXNoOiAnJyxcbiAgICAgIHNlYXJjaDogJydcbiAgICB9LCB0eXBlb2YgdG8gPT09ICdzdHJpbmcnID8gcGFyc2VQYXRoKHRvKSA6IHRvLCB7XG4gICAgICBzdGF0ZTogc3RhdGUsXG4gICAgICBrZXk6IGNyZWF0ZUtleSgpXG4gICAgfSkpO1xuICB9XG5cbiAgZnVuY3Rpb24gZ2V0SGlzdG9yeVN0YXRlQW5kVXJsKG5leHRMb2NhdGlvbiwgaW5kZXgpIHtcbiAgICByZXR1cm4gW3tcbiAgICAgIHVzcjogbmV4dExvY2F0aW9uLnN0YXRlLFxuICAgICAga2V5OiBuZXh0TG9jYXRpb24ua2V5LFxuICAgICAgaWR4OiBpbmRleFxuICAgIH0sIGNyZWF0ZUhyZWYobmV4dExvY2F0aW9uKV07XG4gIH1cblxuICBmdW5jdGlvbiBhbGxvd1R4KGFjdGlvbiwgbG9jYXRpb24sIHJldHJ5KSB7XG4gICAgcmV0dXJuICFibG9ja2Vycy5sZW5ndGggfHwgKGJsb2NrZXJzLmNhbGwoe1xuICAgICAgYWN0aW9uOiBhY3Rpb24sXG4gICAgICBsb2NhdGlvbjogbG9jYXRpb24sXG4gICAgICByZXRyeTogcmV0cnlcbiAgICB9KSwgZmFsc2UpO1xuICB9XG5cbiAgZnVuY3Rpb24gYXBwbHlUeChuZXh0QWN0aW9uKSB7XG4gICAgYWN0aW9uID0gbmV4dEFjdGlvbjtcblxuICAgIHZhciBfZ2V0SW5kZXhBbmRMb2NhdGlvbjcgPSBnZXRJbmRleEFuZExvY2F0aW9uKCk7XG5cbiAgICBpbmRleCA9IF9nZXRJbmRleEFuZExvY2F0aW9uN1swXTtcbiAgICBsb2NhdGlvbiA9IF9nZXRJbmRleEFuZExvY2F0aW9uN1sxXTtcbiAgICBsaXN0ZW5lcnMuY2FsbCh7XG4gICAgICBhY3Rpb246IGFjdGlvbixcbiAgICAgIGxvY2F0aW9uOiBsb2NhdGlvblxuICAgIH0pO1xuICB9XG5cbiAgZnVuY3Rpb24gcHVzaCh0bywgc3RhdGUpIHtcbiAgICB2YXIgbmV4dEFjdGlvbiA9IEFjdGlvbi5QdXNoO1xuICAgIHZhciBuZXh0TG9jYXRpb24gPSBnZXROZXh0TG9jYXRpb24odG8sIHN0YXRlKTtcblxuICAgIGZ1bmN0aW9uIHJldHJ5KCkge1xuICAgICAgcHVzaCh0bywgc3RhdGUpO1xuICAgIH1cblxuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcobmV4dExvY2F0aW9uLnBhdGhuYW1lLmNoYXJBdCgwKSA9PT0gJy8nLCBcIlJlbGF0aXZlIHBhdGhuYW1lcyBhcmUgbm90IHN1cHBvcnRlZCBpbiBoYXNoIGhpc3RvcnkucHVzaChcIiArIEpTT04uc3RyaW5naWZ5KHRvKSArIFwiKVwiKSA6IHZvaWQgMDtcblxuICAgIGlmIChhbGxvd1R4KG5leHRBY3Rpb24sIG5leHRMb2NhdGlvbiwgcmV0cnkpKSB7XG4gICAgICB2YXIgX2dldEhpc3RvcnlTdGF0ZUFuZFVyMyA9IGdldEhpc3RvcnlTdGF0ZUFuZFVybChuZXh0TG9jYXRpb24sIGluZGV4ICsgMSksXG4gICAgICAgICAgaGlzdG9yeVN0YXRlID0gX2dldEhpc3RvcnlTdGF0ZUFuZFVyM1swXSxcbiAgICAgICAgICB1cmwgPSBfZ2V0SGlzdG9yeVN0YXRlQW5kVXIzWzFdOyAvLyBUT0RPOiBTdXBwb3J0IGZvcmNlZCByZWxvYWRpbmdcbiAgICAgIC8vIHRyeS4uLmNhdGNoIGJlY2F1c2UgaU9TIGxpbWl0cyB1cyB0byAxMDAgcHVzaFN0YXRlIGNhbGxzIDovXG5cblxuICAgICAgdHJ5IHtcbiAgICAgICAgZ2xvYmFsSGlzdG9yeS5wdXNoU3RhdGUoaGlzdG9yeVN0YXRlLCAnJywgdXJsKTtcbiAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIC8vIFRoZXkgYXJlIGdvaW5nIHRvIGxvc2Ugc3RhdGUgaGVyZSwgYnV0IHRoZXJlIGlzIG5vIHJlYWxcbiAgICAgICAgLy8gd2F5IHRvIHdhcm4gdGhlbSBhYm91dCBpdCBzaW5jZSB0aGUgcGFnZSB3aWxsIHJlZnJlc2guLi5cbiAgICAgICAgd2luZG93LmxvY2F0aW9uLmFzc2lnbih1cmwpO1xuICAgICAgfVxuXG4gICAgICBhcHBseVR4KG5leHRBY3Rpb24pO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHJlcGxhY2UodG8sIHN0YXRlKSB7XG4gICAgdmFyIG5leHRBY3Rpb24gPSBBY3Rpb24uUmVwbGFjZTtcbiAgICB2YXIgbmV4dExvY2F0aW9uID0gZ2V0TmV4dExvY2F0aW9uKHRvLCBzdGF0ZSk7XG5cbiAgICBmdW5jdGlvbiByZXRyeSgpIHtcbiAgICAgIHJlcGxhY2UodG8sIHN0YXRlKTtcbiAgICB9XG5cbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKG5leHRMb2NhdGlvbi5wYXRobmFtZS5jaGFyQXQoMCkgPT09ICcvJywgXCJSZWxhdGl2ZSBwYXRobmFtZXMgYXJlIG5vdCBzdXBwb3J0ZWQgaW4gaGFzaCBoaXN0b3J5LnJlcGxhY2UoXCIgKyBKU09OLnN0cmluZ2lmeSh0bykgKyBcIilcIikgOiB2b2lkIDA7XG5cbiAgICBpZiAoYWxsb3dUeChuZXh0QWN0aW9uLCBuZXh0TG9jYXRpb24sIHJldHJ5KSkge1xuICAgICAgdmFyIF9nZXRIaXN0b3J5U3RhdGVBbmRVcjQgPSBnZXRIaXN0b3J5U3RhdGVBbmRVcmwobmV4dExvY2F0aW9uLCBpbmRleCksXG4gICAgICAgICAgaGlzdG9yeVN0YXRlID0gX2dldEhpc3RvcnlTdGF0ZUFuZFVyNFswXSxcbiAgICAgICAgICB1cmwgPSBfZ2V0SGlzdG9yeVN0YXRlQW5kVXI0WzFdOyAvLyBUT0RPOiBTdXBwb3J0IGZvcmNlZCByZWxvYWRpbmdcblxuXG4gICAgICBnbG9iYWxIaXN0b3J5LnJlcGxhY2VTdGF0ZShoaXN0b3J5U3RhdGUsICcnLCB1cmwpO1xuICAgICAgYXBwbHlUeChuZXh0QWN0aW9uKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBnbyhkZWx0YSkge1xuICAgIGdsb2JhbEhpc3RvcnkuZ28oZGVsdGEpO1xuICB9XG5cbiAgdmFyIGhpc3RvcnkgPSB7XG4gICAgZ2V0IGFjdGlvbigpIHtcbiAgICAgIHJldHVybiBhY3Rpb247XG4gICAgfSxcblxuICAgIGdldCBsb2NhdGlvbigpIHtcbiAgICAgIHJldHVybiBsb2NhdGlvbjtcbiAgICB9LFxuXG4gICAgY3JlYXRlSHJlZjogY3JlYXRlSHJlZixcbiAgICBwdXNoOiBwdXNoLFxuICAgIHJlcGxhY2U6IHJlcGxhY2UsXG4gICAgZ286IGdvLFxuICAgIGJhY2s6IGZ1bmN0aW9uIGJhY2soKSB7XG4gICAgICBnbygtMSk7XG4gICAgfSxcbiAgICBmb3J3YXJkOiBmdW5jdGlvbiBmb3J3YXJkKCkge1xuICAgICAgZ28oMSk7XG4gICAgfSxcbiAgICBsaXN0ZW46IGZ1bmN0aW9uIGxpc3RlbihsaXN0ZW5lcikge1xuICAgICAgcmV0dXJuIGxpc3RlbmVycy5wdXNoKGxpc3RlbmVyKTtcbiAgICB9LFxuICAgIGJsb2NrOiBmdW5jdGlvbiBibG9jayhibG9ja2VyKSB7XG4gICAgICB2YXIgdW5ibG9jayA9IGJsb2NrZXJzLnB1c2goYmxvY2tlcik7XG5cbiAgICAgIGlmIChibG9ja2Vycy5sZW5ndGggPT09IDEpIHtcbiAgICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoQmVmb3JlVW5sb2FkRXZlbnRUeXBlLCBwcm9tcHRCZWZvcmVVbmxvYWQpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgICB1bmJsb2NrKCk7IC8vIFJlbW92ZSB0aGUgYmVmb3JldW5sb2FkIGxpc3RlbmVyIHNvIHRoZSBkb2N1bWVudCBtYXlcbiAgICAgICAgLy8gc3RpbGwgYmUgc2FsdmFnZWFibGUgaW4gdGhlIHBhZ2VoaWRlIGV2ZW50LlxuICAgICAgICAvLyBTZWUgaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy8jdW5sb2FkaW5nLWRvY3VtZW50c1xuXG4gICAgICAgIGlmICghYmxvY2tlcnMubGVuZ3RoKSB7XG4gICAgICAgICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoQmVmb3JlVW5sb2FkRXZlbnRUeXBlLCBwcm9tcHRCZWZvcmVVbmxvYWQpO1xuICAgICAgICB9XG4gICAgICB9O1xuICAgIH1cbiAgfTtcbiAgcmV0dXJuIGhpc3Rvcnk7XG59XG4vKipcclxuICogTWVtb3J5IGhpc3Rvcnkgc3RvcmVzIHRoZSBjdXJyZW50IGxvY2F0aW9uIGluIG1lbW9yeS4gSXQgaXMgZGVzaWduZWQgZm9yIHVzZVxyXG4gKiBpbiBzdGF0ZWZ1bCBub24tYnJvd3NlciBlbnZpcm9ubWVudHMgbGlrZSB0ZXN0cyBhbmQgUmVhY3QgTmF0aXZlLlxyXG4gKlxyXG4gKiBAc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9yZW1peC1ydW4vaGlzdG9yeS90cmVlL21haW4vZG9jcy9hcGktcmVmZXJlbmNlLm1kI2NyZWF0ZW1lbW9yeWhpc3RvcnlcclxuICovXG5cbmZ1bmN0aW9uIGNyZWF0ZU1lbW9yeUhpc3Rvcnkob3B0aW9ucykge1xuICBpZiAob3B0aW9ucyA9PT0gdm9pZCAwKSB7XG4gICAgb3B0aW9ucyA9IHt9O1xuICB9XG5cbiAgdmFyIF9vcHRpb25zMyA9IG9wdGlvbnMsXG4gICAgICBfb3B0aW9uczMkaW5pdGlhbEVudHIgPSBfb3B0aW9uczMuaW5pdGlhbEVudHJpZXMsXG4gICAgICBpbml0aWFsRW50cmllcyA9IF9vcHRpb25zMyRpbml0aWFsRW50ciA9PT0gdm9pZCAwID8gWycvJ10gOiBfb3B0aW9uczMkaW5pdGlhbEVudHIsXG4gICAgICBpbml0aWFsSW5kZXggPSBfb3B0aW9uczMuaW5pdGlhbEluZGV4O1xuICB2YXIgZW50cmllcyA9IGluaXRpYWxFbnRyaWVzLm1hcChmdW5jdGlvbiAoZW50cnkpIHtcbiAgICB2YXIgbG9jYXRpb24gPSByZWFkT25seShfZXh0ZW5kcyh7XG4gICAgICBwYXRobmFtZTogJy8nLFxuICAgICAgc2VhcmNoOiAnJyxcbiAgICAgIGhhc2g6ICcnLFxuICAgICAgc3RhdGU6IG51bGwsXG4gICAgICBrZXk6IGNyZWF0ZUtleSgpXG4gICAgfSwgdHlwZW9mIGVudHJ5ID09PSAnc3RyaW5nJyA/IHBhcnNlUGF0aChlbnRyeSkgOiBlbnRyeSkpO1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcobG9jYXRpb24ucGF0aG5hbWUuY2hhckF0KDApID09PSAnLycsIFwiUmVsYXRpdmUgcGF0aG5hbWVzIGFyZSBub3Qgc3VwcG9ydGVkIGluIGNyZWF0ZU1lbW9yeUhpc3RvcnkoeyBpbml0aWFsRW50cmllcyB9KSAoaW52YWxpZCBlbnRyeTogXCIgKyBKU09OLnN0cmluZ2lmeShlbnRyeSkgKyBcIilcIikgOiB2b2lkIDA7XG4gICAgcmV0dXJuIGxvY2F0aW9uO1xuICB9KTtcbiAgdmFyIGluZGV4ID0gY2xhbXAoaW5pdGlhbEluZGV4ID09IG51bGwgPyBlbnRyaWVzLmxlbmd0aCAtIDEgOiBpbml0aWFsSW5kZXgsIDAsIGVudHJpZXMubGVuZ3RoIC0gMSk7XG4gIHZhciBhY3Rpb24gPSBBY3Rpb24uUG9wO1xuICB2YXIgbG9jYXRpb24gPSBlbnRyaWVzW2luZGV4XTtcbiAgdmFyIGxpc3RlbmVycyA9IGNyZWF0ZUV2ZW50cygpO1xuICB2YXIgYmxvY2tlcnMgPSBjcmVhdGVFdmVudHMoKTtcblxuICBmdW5jdGlvbiBjcmVhdGVIcmVmKHRvKSB7XG4gICAgcmV0dXJuIHR5cGVvZiB0byA9PT0gJ3N0cmluZycgPyB0byA6IGNyZWF0ZVBhdGgodG8pO1xuICB9XG5cbiAgZnVuY3Rpb24gZ2V0TmV4dExvY2F0aW9uKHRvLCBzdGF0ZSkge1xuICAgIGlmIChzdGF0ZSA9PT0gdm9pZCAwKSB7XG4gICAgICBzdGF0ZSA9IG51bGw7XG4gICAgfVxuXG4gICAgcmV0dXJuIHJlYWRPbmx5KF9leHRlbmRzKHtcbiAgICAgIHBhdGhuYW1lOiBsb2NhdGlvbi5wYXRobmFtZSxcbiAgICAgIHNlYXJjaDogJycsXG4gICAgICBoYXNoOiAnJ1xuICAgIH0sIHR5cGVvZiB0byA9PT0gJ3N0cmluZycgPyBwYXJzZVBhdGgodG8pIDogdG8sIHtcbiAgICAgIHN0YXRlOiBzdGF0ZSxcbiAgICAgIGtleTogY3JlYXRlS2V5KClcbiAgICB9KSk7XG4gIH1cblxuICBmdW5jdGlvbiBhbGxvd1R4KGFjdGlvbiwgbG9jYXRpb24sIHJldHJ5KSB7XG4gICAgcmV0dXJuICFibG9ja2Vycy5sZW5ndGggfHwgKGJsb2NrZXJzLmNhbGwoe1xuICAgICAgYWN0aW9uOiBhY3Rpb24sXG4gICAgICBsb2NhdGlvbjogbG9jYXRpb24sXG4gICAgICByZXRyeTogcmV0cnlcbiAgICB9KSwgZmFsc2UpO1xuICB9XG5cbiAgZnVuY3Rpb24gYXBwbHlUeChuZXh0QWN0aW9uLCBuZXh0TG9jYXRpb24pIHtcbiAgICBhY3Rpb24gPSBuZXh0QWN0aW9uO1xuICAgIGxvY2F0aW9uID0gbmV4dExvY2F0aW9uO1xuICAgIGxpc3RlbmVycy5jYWxsKHtcbiAgICAgIGFjdGlvbjogYWN0aW9uLFxuICAgICAgbG9jYXRpb246IGxvY2F0aW9uXG4gICAgfSk7XG4gIH1cblxuICBmdW5jdGlvbiBwdXNoKHRvLCBzdGF0ZSkge1xuICAgIHZhciBuZXh0QWN0aW9uID0gQWN0aW9uLlB1c2g7XG4gICAgdmFyIG5leHRMb2NhdGlvbiA9IGdldE5leHRMb2NhdGlvbih0bywgc3RhdGUpO1xuXG4gICAgZnVuY3Rpb24gcmV0cnkoKSB7XG4gICAgICBwdXNoKHRvLCBzdGF0ZSk7XG4gICAgfVxuXG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyhsb2NhdGlvbi5wYXRobmFtZS5jaGFyQXQoMCkgPT09ICcvJywgXCJSZWxhdGl2ZSBwYXRobmFtZXMgYXJlIG5vdCBzdXBwb3J0ZWQgaW4gbWVtb3J5IGhpc3RvcnkucHVzaChcIiArIEpTT04uc3RyaW5naWZ5KHRvKSArIFwiKVwiKSA6IHZvaWQgMDtcblxuICAgIGlmIChhbGxvd1R4KG5leHRBY3Rpb24sIG5leHRMb2NhdGlvbiwgcmV0cnkpKSB7XG4gICAgICBpbmRleCArPSAxO1xuICAgICAgZW50cmllcy5zcGxpY2UoaW5kZXgsIGVudHJpZXMubGVuZ3RoLCBuZXh0TG9jYXRpb24pO1xuICAgICAgYXBwbHlUeChuZXh0QWN0aW9uLCBuZXh0TG9jYXRpb24pO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHJlcGxhY2UodG8sIHN0YXRlKSB7XG4gICAgdmFyIG5leHRBY3Rpb24gPSBBY3Rpb24uUmVwbGFjZTtcbiAgICB2YXIgbmV4dExvY2F0aW9uID0gZ2V0TmV4dExvY2F0aW9uKHRvLCBzdGF0ZSk7XG5cbiAgICBmdW5jdGlvbiByZXRyeSgpIHtcbiAgICAgIHJlcGxhY2UodG8sIHN0YXRlKTtcbiAgICB9XG5cbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKGxvY2F0aW9uLnBhdGhuYW1lLmNoYXJBdCgwKSA9PT0gJy8nLCBcIlJlbGF0aXZlIHBhdGhuYW1lcyBhcmUgbm90IHN1cHBvcnRlZCBpbiBtZW1vcnkgaGlzdG9yeS5yZXBsYWNlKFwiICsgSlNPTi5zdHJpbmdpZnkodG8pICsgXCIpXCIpIDogdm9pZCAwO1xuXG4gICAgaWYgKGFsbG93VHgobmV4dEFjdGlvbiwgbmV4dExvY2F0aW9uLCByZXRyeSkpIHtcbiAgICAgIGVudHJpZXNbaW5kZXhdID0gbmV4dExvY2F0aW9uO1xuICAgICAgYXBwbHlUeChuZXh0QWN0aW9uLCBuZXh0TG9jYXRpb24pO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGdvKGRlbHRhKSB7XG4gICAgdmFyIG5leHRJbmRleCA9IGNsYW1wKGluZGV4ICsgZGVsdGEsIDAsIGVudHJpZXMubGVuZ3RoIC0gMSk7XG4gICAgdmFyIG5leHRBY3Rpb24gPSBBY3Rpb24uUG9wO1xuICAgIHZhciBuZXh0TG9jYXRpb24gPSBlbnRyaWVzW25leHRJbmRleF07XG5cbiAgICBmdW5jdGlvbiByZXRyeSgpIHtcbiAgICAgIGdvKGRlbHRhKTtcbiAgICB9XG5cbiAgICBpZiAoYWxsb3dUeChuZXh0QWN0aW9uLCBuZXh0TG9jYXRpb24sIHJldHJ5KSkge1xuICAgICAgaW5kZXggPSBuZXh0SW5kZXg7XG4gICAgICBhcHBseVR4KG5leHRBY3Rpb24sIG5leHRMb2NhdGlvbik7XG4gICAgfVxuICB9XG5cbiAgdmFyIGhpc3RvcnkgPSB7XG4gICAgZ2V0IGluZGV4KCkge1xuICAgICAgcmV0dXJuIGluZGV4O1xuICAgIH0sXG5cbiAgICBnZXQgYWN0aW9uKCkge1xuICAgICAgcmV0dXJuIGFjdGlvbjtcbiAgICB9LFxuXG4gICAgZ2V0IGxvY2F0aW9uKCkge1xuICAgICAgcmV0dXJuIGxvY2F0aW9uO1xuICAgIH0sXG5cbiAgICBjcmVhdGVIcmVmOiBjcmVhdGVIcmVmLFxuICAgIHB1c2g6IHB1c2gsXG4gICAgcmVwbGFjZTogcmVwbGFjZSxcbiAgICBnbzogZ28sXG4gICAgYmFjazogZnVuY3Rpb24gYmFjaygpIHtcbiAgICAgIGdvKC0xKTtcbiAgICB9LFxuICAgIGZvcndhcmQ6IGZ1bmN0aW9uIGZvcndhcmQoKSB7XG4gICAgICBnbygxKTtcbiAgICB9LFxuICAgIGxpc3RlbjogZnVuY3Rpb24gbGlzdGVuKGxpc3RlbmVyKSB7XG4gICAgICByZXR1cm4gbGlzdGVuZXJzLnB1c2gobGlzdGVuZXIpO1xuICAgIH0sXG4gICAgYmxvY2s6IGZ1bmN0aW9uIGJsb2NrKGJsb2NrZXIpIHtcbiAgICAgIHJldHVybiBibG9ja2Vycy5wdXNoKGJsb2NrZXIpO1xuICAgIH1cbiAgfTtcbiAgcmV0dXJuIGhpc3Rvcnk7XG59IC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBVVElMU1xuLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cblxuZnVuY3Rpb24gY2xhbXAobiwgbG93ZXJCb3VuZCwgdXBwZXJCb3VuZCkge1xuICByZXR1cm4gTWF0aC5taW4oTWF0aC5tYXgobiwgbG93ZXJCb3VuZCksIHVwcGVyQm91bmQpO1xufVxuXG5mdW5jdGlvbiBwcm9tcHRCZWZvcmVVbmxvYWQoZXZlbnQpIHtcbiAgLy8gQ2FuY2VsIHRoZSBldmVudC5cbiAgZXZlbnQucHJldmVudERlZmF1bHQoKTsgLy8gQ2hyb21lIChhbmQgbGVnYWN5IElFKSByZXF1aXJlcyByZXR1cm5WYWx1ZSB0byBiZSBzZXQuXG5cbiAgZXZlbnQucmV0dXJuVmFsdWUgPSAnJztcbn1cblxuZnVuY3Rpb24gY3JlYXRlRXZlbnRzKCkge1xuICB2YXIgaGFuZGxlcnMgPSBbXTtcbiAgcmV0dXJuIHtcbiAgICBnZXQgbGVuZ3RoKCkge1xuICAgICAgcmV0dXJuIGhhbmRsZXJzLmxlbmd0aDtcbiAgICB9LFxuXG4gICAgcHVzaDogZnVuY3Rpb24gcHVzaChmbikge1xuICAgICAgaGFuZGxlcnMucHVzaChmbik7XG4gICAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgICBoYW5kbGVycyA9IGhhbmRsZXJzLmZpbHRlcihmdW5jdGlvbiAoaGFuZGxlcikge1xuICAgICAgICAgIHJldHVybiBoYW5kbGVyICE9PSBmbjtcbiAgICAgICAgfSk7XG4gICAgICB9O1xuICAgIH0sXG4gICAgY2FsbDogZnVuY3Rpb24gY2FsbChhcmcpIHtcbiAgICAgIGhhbmRsZXJzLmZvckVhY2goZnVuY3Rpb24gKGZuKSB7XG4gICAgICAgIHJldHVybiBmbiAmJiBmbihhcmcpO1xuICAgICAgfSk7XG4gICAgfVxuICB9O1xufVxuXG5mdW5jdGlvbiBjcmVhdGVLZXkoKSB7XG4gIHJldHVybiBNYXRoLnJhbmRvbSgpLnRvU3RyaW5nKDM2KS5zdWJzdHIoMiwgOCk7XG59XG4vKipcclxuICogQ3JlYXRlcyBhIHN0cmluZyBVUkwgcGF0aCBmcm9tIHRoZSBnaXZlbiBwYXRobmFtZSwgc2VhcmNoLCBhbmQgaGFzaCBjb21wb25lbnRzLlxyXG4gKlxyXG4gKiBAc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9yZW1peC1ydW4vaGlzdG9yeS90cmVlL21haW4vZG9jcy9hcGktcmVmZXJlbmNlLm1kI2NyZWF0ZXBhdGhcclxuICovXG5cblxuZnVuY3Rpb24gY3JlYXRlUGF0aChfcmVmKSB7XG4gIHZhciBfcmVmJHBhdGhuYW1lID0gX3JlZi5wYXRobmFtZSxcbiAgICAgIHBhdGhuYW1lID0gX3JlZiRwYXRobmFtZSA9PT0gdm9pZCAwID8gJy8nIDogX3JlZiRwYXRobmFtZSxcbiAgICAgIF9yZWYkc2VhcmNoID0gX3JlZi5zZWFyY2gsXG4gICAgICBzZWFyY2ggPSBfcmVmJHNlYXJjaCA9PT0gdm9pZCAwID8gJycgOiBfcmVmJHNlYXJjaCxcbiAgICAgIF9yZWYkaGFzaCA9IF9yZWYuaGFzaCxcbiAgICAgIGhhc2ggPSBfcmVmJGhhc2ggPT09IHZvaWQgMCA/ICcnIDogX3JlZiRoYXNoO1xuICBpZiAoc2VhcmNoICYmIHNlYXJjaCAhPT0gJz8nKSBwYXRobmFtZSArPSBzZWFyY2guY2hhckF0KDApID09PSAnPycgPyBzZWFyY2ggOiAnPycgKyBzZWFyY2g7XG4gIGlmIChoYXNoICYmIGhhc2ggIT09ICcjJykgcGF0aG5hbWUgKz0gaGFzaC5jaGFyQXQoMCkgPT09ICcjJyA/IGhhc2ggOiAnIycgKyBoYXNoO1xuICByZXR1cm4gcGF0aG5hbWU7XG59XG4vKipcclxuICogUGFyc2VzIGEgc3RyaW5nIFVSTCBwYXRoIGludG8gaXRzIHNlcGFyYXRlIHBhdGhuYW1lLCBzZWFyY2gsIGFuZCBoYXNoIGNvbXBvbmVudHMuXHJcbiAqXHJcbiAqIEBzZWUgaHR0cHM6Ly9naXRodWIuY29tL3JlbWl4LXJ1bi9oaXN0b3J5L3RyZWUvbWFpbi9kb2NzL2FwaS1yZWZlcmVuY2UubWQjcGFyc2VwYXRoXHJcbiAqL1xuXG5mdW5jdGlvbiBwYXJzZVBhdGgocGF0aCkge1xuICB2YXIgcGFyc2VkUGF0aCA9IHt9O1xuXG4gIGlmIChwYXRoKSB7XG4gICAgdmFyIGhhc2hJbmRleCA9IHBhdGguaW5kZXhPZignIycpO1xuXG4gICAgaWYgKGhhc2hJbmRleCA+PSAwKSB7XG4gICAgICBwYXJzZWRQYXRoLmhhc2ggPSBwYXRoLnN1YnN0cihoYXNoSW5kZXgpO1xuICAgICAgcGF0aCA9IHBhdGguc3Vic3RyKDAsIGhhc2hJbmRleCk7XG4gICAgfVxuXG4gICAgdmFyIHNlYXJjaEluZGV4ID0gcGF0aC5pbmRleE9mKCc/Jyk7XG5cbiAgICBpZiAoc2VhcmNoSW5kZXggPj0gMCkge1xuICAgICAgcGFyc2VkUGF0aC5zZWFyY2ggPSBwYXRoLnN1YnN0cihzZWFyY2hJbmRleCk7XG4gICAgICBwYXRoID0gcGF0aC5zdWJzdHIoMCwgc2VhcmNoSW5kZXgpO1xuICAgIH1cblxuICAgIGlmIChwYXRoKSB7XG4gICAgICBwYXJzZWRQYXRoLnBhdGhuYW1lID0gcGF0aDtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gcGFyc2VkUGF0aDtcbn1cblxuZXhwb3J0IHsgQWN0aW9uLCBjcmVhdGVCcm93c2VySGlzdG9yeSwgY3JlYXRlSGFzaEhpc3RvcnksIGNyZWF0ZU1lbW9yeUhpc3RvcnksIGNyZWF0ZVBhdGgsIHBhcnNlUGF0aCB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguanMubWFwXG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBfZXh0ZW5kcygpIHtcbiAgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQpIHtcbiAgICBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTtcblxuICAgICAgZm9yICh2YXIga2V5IGluIHNvdXJjZSkge1xuICAgICAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkge1xuICAgICAgICAgIHRhcmdldFtrZXldID0gc291cmNlW2tleV07XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gdGFyZ2V0O1xuICB9O1xuXG4gIHJldHVybiBfZXh0ZW5kcy5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xufSIsIi8qKlxuICogUmVhY3QgUm91dGVyIHY2LjMuMFxuICpcbiAqIENvcHlyaWdodCAoYykgUmVtaXggU29mdHdhcmUgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRS5tZCBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIEBsaWNlbnNlIE1JVFxuICovXG5pbXBvcnQgeyBwYXJzZVBhdGgsIGNyZWF0ZU1lbW9yeUhpc3RvcnksIEFjdGlvbiB9IGZyb20gJ2hpc3RvcnknO1xuZXhwb3J0IHsgQWN0aW9uIGFzIE5hdmlnYXRpb25UeXBlLCBjcmVhdGVQYXRoLCBwYXJzZVBhdGggfSBmcm9tICdoaXN0b3J5JztcbmltcG9ydCB7IGNyZWF0ZUNvbnRleHQsIHVzZUNvbnRleHQsIHVzZU1lbW8sIHVzZVJlZiwgdXNlRWZmZWN0LCB1c2VDYWxsYmFjaywgY3JlYXRlRWxlbWVudCwgdXNlU3RhdGUsIHVzZUxheW91dEVmZmVjdCwgQ2hpbGRyZW4sIGlzVmFsaWRFbGVtZW50LCBGcmFnbWVudCB9IGZyb20gJ3JlYWN0JztcblxuY29uc3QgTmF2aWdhdGlvbkNvbnRleHQgPSAvKiNfX1BVUkVfXyovY3JlYXRlQ29udGV4dChudWxsKTtcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICBOYXZpZ2F0aW9uQ29udGV4dC5kaXNwbGF5TmFtZSA9IFwiTmF2aWdhdGlvblwiO1xufVxuXG5jb25zdCBMb2NhdGlvbkNvbnRleHQgPSAvKiNfX1BVUkVfXyovY3JlYXRlQ29udGV4dChudWxsKTtcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICBMb2NhdGlvbkNvbnRleHQuZGlzcGxheU5hbWUgPSBcIkxvY2F0aW9uXCI7XG59XG5cbmNvbnN0IFJvdXRlQ29udGV4dCA9IC8qI19fUFVSRV9fKi9jcmVhdGVDb250ZXh0KHtcbiAgb3V0bGV0OiBudWxsLFxuICBtYXRjaGVzOiBbXVxufSk7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgUm91dGVDb250ZXh0LmRpc3BsYXlOYW1lID0gXCJSb3V0ZVwiO1xufVxuXG5mdW5jdGlvbiBpbnZhcmlhbnQoY29uZCwgbWVzc2FnZSkge1xuICBpZiAoIWNvbmQpIHRocm93IG5ldyBFcnJvcihtZXNzYWdlKTtcbn1cbmZ1bmN0aW9uIHdhcm5pbmcoY29uZCwgbWVzc2FnZSkge1xuICBpZiAoIWNvbmQpIHtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tY29uc29sZVxuICAgIGlmICh0eXBlb2YgY29uc29sZSAhPT0gXCJ1bmRlZmluZWRcIikgY29uc29sZS53YXJuKG1lc3NhZ2UpO1xuXG4gICAgdHJ5IHtcbiAgICAgIC8vIFdlbGNvbWUgdG8gZGVidWdnaW5nIFJlYWN0IFJvdXRlciFcbiAgICAgIC8vXG4gICAgICAvLyBUaGlzIGVycm9yIGlzIHRocm93biBhcyBhIGNvbnZlbmllbmNlIHNvIHlvdSBjYW4gbW9yZSBlYXNpbHlcbiAgICAgIC8vIGZpbmQgdGhlIHNvdXJjZSBmb3IgYSB3YXJuaW5nIHRoYXQgYXBwZWFycyBpbiB0aGUgY29uc29sZSBieVxuICAgICAgLy8gZW5hYmxpbmcgXCJwYXVzZSBvbiBleGNlcHRpb25zXCIgaW4geW91ciBKYXZhU2NyaXB0IGRlYnVnZ2VyLlxuICAgICAgdGhyb3cgbmV3IEVycm9yKG1lc3NhZ2UpOyAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tZW1wdHlcbiAgICB9IGNhdGNoIChlKSB7fVxuICB9XG59XG5jb25zdCBhbHJlYWR5V2FybmVkID0ge307XG5mdW5jdGlvbiB3YXJuaW5nT25jZShrZXksIGNvbmQsIG1lc3NhZ2UpIHtcbiAgaWYgKCFjb25kICYmICFhbHJlYWR5V2FybmVkW2tleV0pIHtcbiAgICBhbHJlYWR5V2FybmVkW2tleV0gPSB0cnVlO1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoZmFsc2UsIG1lc3NhZ2UpIDogdm9pZCAwO1xuICB9XG59XG5cbi8qKlxuICogUmV0dXJucyBhIHBhdGggd2l0aCBwYXJhbXMgaW50ZXJwb2xhdGVkLlxuICpcbiAqIEBzZWUgaHR0cHM6Ly9yZWFjdHJvdXRlci5jb20vZG9jcy9lbi92Ni9hcGkjZ2VuZXJhdGVwYXRoXG4gKi9cbmZ1bmN0aW9uIGdlbmVyYXRlUGF0aChwYXRoLCBwYXJhbXMpIHtcbiAgaWYgKHBhcmFtcyA9PT0gdm9pZCAwKSB7XG4gICAgcGFyYW1zID0ge307XG4gIH1cblxuICByZXR1cm4gcGF0aC5yZXBsYWNlKC86KFxcdyspL2csIChfLCBrZXkpID0+IHtcbiAgICAhKHBhcmFtc1trZXldICE9IG51bGwpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCBcIk1pc3NpbmcgXFxcIjpcIiArIGtleSArIFwiXFxcIiBwYXJhbVwiKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gICAgcmV0dXJuIHBhcmFtc1trZXldO1xuICB9KS5yZXBsYWNlKC9cXC8qXFwqJC8sIF8gPT4gcGFyYW1zW1wiKlwiXSA9PSBudWxsID8gXCJcIiA6IHBhcmFtc1tcIipcIl0ucmVwbGFjZSgvXlxcLyovLCBcIi9cIikpO1xufVxuLyoqXG4gKiBBIFJvdXRlTWF0Y2ggY29udGFpbnMgaW5mbyBhYm91dCBob3cgYSByb3V0ZSBtYXRjaGVkIGEgVVJMLlxuICovXG5cbi8qKlxuICogTWF0Y2hlcyB0aGUgZ2l2ZW4gcm91dGVzIHRvIGEgbG9jYXRpb24gYW5kIHJldHVybnMgdGhlIG1hdGNoIGRhdGEuXG4gKlxuICogQHNlZSBodHRwczovL3JlYWN0cm91dGVyLmNvbS9kb2NzL2VuL3Y2L2FwaSNtYXRjaHJvdXRlc1xuICovXG5mdW5jdGlvbiBtYXRjaFJvdXRlcyhyb3V0ZXMsIGxvY2F0aW9uQXJnLCBiYXNlbmFtZSkge1xuICBpZiAoYmFzZW5hbWUgPT09IHZvaWQgMCkge1xuICAgIGJhc2VuYW1lID0gXCIvXCI7XG4gIH1cblxuICBsZXQgbG9jYXRpb24gPSB0eXBlb2YgbG9jYXRpb25BcmcgPT09IFwic3RyaW5nXCIgPyBwYXJzZVBhdGgobG9jYXRpb25BcmcpIDogbG9jYXRpb25Bcmc7XG4gIGxldCBwYXRobmFtZSA9IHN0cmlwQmFzZW5hbWUobG9jYXRpb24ucGF0aG5hbWUgfHwgXCIvXCIsIGJhc2VuYW1lKTtcblxuICBpZiAocGF0aG5hbWUgPT0gbnVsbCkge1xuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgbGV0IGJyYW5jaGVzID0gZmxhdHRlblJvdXRlcyhyb3V0ZXMpO1xuICByYW5rUm91dGVCcmFuY2hlcyhicmFuY2hlcyk7XG4gIGxldCBtYXRjaGVzID0gbnVsbDtcblxuICBmb3IgKGxldCBpID0gMDsgbWF0Y2hlcyA9PSBudWxsICYmIGkgPCBicmFuY2hlcy5sZW5ndGg7ICsraSkge1xuICAgIG1hdGNoZXMgPSBtYXRjaFJvdXRlQnJhbmNoKGJyYW5jaGVzW2ldLCBwYXRobmFtZSk7XG4gIH1cblxuICByZXR1cm4gbWF0Y2hlcztcbn1cblxuZnVuY3Rpb24gZmxhdHRlblJvdXRlcyhyb3V0ZXMsIGJyYW5jaGVzLCBwYXJlbnRzTWV0YSwgcGFyZW50UGF0aCkge1xuICBpZiAoYnJhbmNoZXMgPT09IHZvaWQgMCkge1xuICAgIGJyYW5jaGVzID0gW107XG4gIH1cblxuICBpZiAocGFyZW50c01ldGEgPT09IHZvaWQgMCkge1xuICAgIHBhcmVudHNNZXRhID0gW107XG4gIH1cblxuICBpZiAocGFyZW50UGF0aCA9PT0gdm9pZCAwKSB7XG4gICAgcGFyZW50UGF0aCA9IFwiXCI7XG4gIH1cblxuICByb3V0ZXMuZm9yRWFjaCgocm91dGUsIGluZGV4KSA9PiB7XG4gICAgbGV0IG1ldGEgPSB7XG4gICAgICByZWxhdGl2ZVBhdGg6IHJvdXRlLnBhdGggfHwgXCJcIixcbiAgICAgIGNhc2VTZW5zaXRpdmU6IHJvdXRlLmNhc2VTZW5zaXRpdmUgPT09IHRydWUsXG4gICAgICBjaGlsZHJlbkluZGV4OiBpbmRleCxcbiAgICAgIHJvdXRlXG4gICAgfTtcblxuICAgIGlmIChtZXRhLnJlbGF0aXZlUGF0aC5zdGFydHNXaXRoKFwiL1wiKSkge1xuICAgICAgIW1ldGEucmVsYXRpdmVQYXRoLnN0YXJ0c1dpdGgocGFyZW50UGF0aCkgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsIFwiQWJzb2x1dGUgcm91dGUgcGF0aCBcXFwiXCIgKyBtZXRhLnJlbGF0aXZlUGF0aCArIFwiXFxcIiBuZXN0ZWQgdW5kZXIgcGF0aCBcIiArIChcIlxcXCJcIiArIHBhcmVudFBhdGggKyBcIlxcXCIgaXMgbm90IHZhbGlkLiBBbiBhYnNvbHV0ZSBjaGlsZCByb3V0ZSBwYXRoIFwiKSArIFwibXVzdCBzdGFydCB3aXRoIHRoZSBjb21iaW5lZCBwYXRoIG9mIGFsbCBpdHMgcGFyZW50IHJvdXRlcy5cIikgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICAgICAgbWV0YS5yZWxhdGl2ZVBhdGggPSBtZXRhLnJlbGF0aXZlUGF0aC5zbGljZShwYXJlbnRQYXRoLmxlbmd0aCk7XG4gICAgfVxuXG4gICAgbGV0IHBhdGggPSBqb2luUGF0aHMoW3BhcmVudFBhdGgsIG1ldGEucmVsYXRpdmVQYXRoXSk7XG4gICAgbGV0IHJvdXRlc01ldGEgPSBwYXJlbnRzTWV0YS5jb25jYXQobWV0YSk7IC8vIEFkZCB0aGUgY2hpbGRyZW4gYmVmb3JlIGFkZGluZyB0aGlzIHJvdXRlIHRvIHRoZSBhcnJheSBzbyB3ZSB0cmF2ZXJzZSB0aGVcbiAgICAvLyByb3V0ZSB0cmVlIGRlcHRoLWZpcnN0IGFuZCBjaGlsZCByb3V0ZXMgYXBwZWFyIGJlZm9yZSB0aGVpciBwYXJlbnRzIGluXG4gICAgLy8gdGhlIFwiZmxhdHRlbmVkXCIgdmVyc2lvbi5cblxuICAgIGlmIChyb3V0ZS5jaGlsZHJlbiAmJiByb3V0ZS5jaGlsZHJlbi5sZW5ndGggPiAwKSB7XG4gICAgICAhKHJvdXRlLmluZGV4ICE9PSB0cnVlKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgXCJJbmRleCByb3V0ZXMgbXVzdCBub3QgaGF2ZSBjaGlsZCByb3V0ZXMuIFBsZWFzZSByZW1vdmUgXCIgKyAoXCJhbGwgY2hpbGQgcm91dGVzIGZyb20gcm91dGUgcGF0aCBcXFwiXCIgKyBwYXRoICsgXCJcXFwiLlwiKSkgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICAgICAgZmxhdHRlblJvdXRlcyhyb3V0ZS5jaGlsZHJlbiwgYnJhbmNoZXMsIHJvdXRlc01ldGEsIHBhdGgpO1xuICAgIH0gLy8gUm91dGVzIHdpdGhvdXQgYSBwYXRoIHNob3VsZG4ndCBldmVyIG1hdGNoIGJ5IHRoZW1zZWx2ZXMgdW5sZXNzIHRoZXkgYXJlXG4gICAgLy8gaW5kZXggcm91dGVzLCBzbyBkb24ndCBhZGQgdGhlbSB0byB0aGUgbGlzdCBvZiBwb3NzaWJsZSBicmFuY2hlcy5cblxuXG4gICAgaWYgKHJvdXRlLnBhdGggPT0gbnVsbCAmJiAhcm91dGUuaW5kZXgpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBicmFuY2hlcy5wdXNoKHtcbiAgICAgIHBhdGgsXG4gICAgICBzY29yZTogY29tcHV0ZVNjb3JlKHBhdGgsIHJvdXRlLmluZGV4KSxcbiAgICAgIHJvdXRlc01ldGFcbiAgICB9KTtcbiAgfSk7XG4gIHJldHVybiBicmFuY2hlcztcbn1cblxuZnVuY3Rpb24gcmFua1JvdXRlQnJhbmNoZXMoYnJhbmNoZXMpIHtcbiAgYnJhbmNoZXMuc29ydCgoYSwgYikgPT4gYS5zY29yZSAhPT0gYi5zY29yZSA/IGIuc2NvcmUgLSBhLnNjb3JlIC8vIEhpZ2hlciBzY29yZSBmaXJzdFxuICA6IGNvbXBhcmVJbmRleGVzKGEucm91dGVzTWV0YS5tYXAobWV0YSA9PiBtZXRhLmNoaWxkcmVuSW5kZXgpLCBiLnJvdXRlc01ldGEubWFwKG1ldGEgPT4gbWV0YS5jaGlsZHJlbkluZGV4KSkpO1xufVxuXG5jb25zdCBwYXJhbVJlID0gL146XFx3KyQvO1xuY29uc3QgZHluYW1pY1NlZ21lbnRWYWx1ZSA9IDM7XG5jb25zdCBpbmRleFJvdXRlVmFsdWUgPSAyO1xuY29uc3QgZW1wdHlTZWdtZW50VmFsdWUgPSAxO1xuY29uc3Qgc3RhdGljU2VnbWVudFZhbHVlID0gMTA7XG5jb25zdCBzcGxhdFBlbmFsdHkgPSAtMjtcblxuY29uc3QgaXNTcGxhdCA9IHMgPT4gcyA9PT0gXCIqXCI7XG5cbmZ1bmN0aW9uIGNvbXB1dGVTY29yZShwYXRoLCBpbmRleCkge1xuICBsZXQgc2VnbWVudHMgPSBwYXRoLnNwbGl0KFwiL1wiKTtcbiAgbGV0IGluaXRpYWxTY29yZSA9IHNlZ21lbnRzLmxlbmd0aDtcblxuICBpZiAoc2VnbWVudHMuc29tZShpc1NwbGF0KSkge1xuICAgIGluaXRpYWxTY29yZSArPSBzcGxhdFBlbmFsdHk7XG4gIH1cblxuICBpZiAoaW5kZXgpIHtcbiAgICBpbml0aWFsU2NvcmUgKz0gaW5kZXhSb3V0ZVZhbHVlO1xuICB9XG5cbiAgcmV0dXJuIHNlZ21lbnRzLmZpbHRlcihzID0+ICFpc1NwbGF0KHMpKS5yZWR1Y2UoKHNjb3JlLCBzZWdtZW50KSA9PiBzY29yZSArIChwYXJhbVJlLnRlc3Qoc2VnbWVudCkgPyBkeW5hbWljU2VnbWVudFZhbHVlIDogc2VnbWVudCA9PT0gXCJcIiA/IGVtcHR5U2VnbWVudFZhbHVlIDogc3RhdGljU2VnbWVudFZhbHVlKSwgaW5pdGlhbFNjb3JlKTtcbn1cblxuZnVuY3Rpb24gY29tcGFyZUluZGV4ZXMoYSwgYikge1xuICBsZXQgc2libGluZ3MgPSBhLmxlbmd0aCA9PT0gYi5sZW5ndGggJiYgYS5zbGljZSgwLCAtMSkuZXZlcnkoKG4sIGkpID0+IG4gPT09IGJbaV0pO1xuICByZXR1cm4gc2libGluZ3MgPyAvLyBJZiB0d28gcm91dGVzIGFyZSBzaWJsaW5ncywgd2Ugc2hvdWxkIHRyeSB0byBtYXRjaCB0aGUgZWFybGllciBzaWJsaW5nXG4gIC8vIGZpcnN0LiBUaGlzIGFsbG93cyBwZW9wbGUgdG8gaGF2ZSBmaW5lLWdyYWluZWQgY29udHJvbCBvdmVyIHRoZSBtYXRjaGluZ1xuICAvLyBiZWhhdmlvciBieSBzaW1wbHkgcHV0dGluZyByb3V0ZXMgd2l0aCBpZGVudGljYWwgcGF0aHMgaW4gdGhlIG9yZGVyIHRoZXlcbiAgLy8gd2FudCB0aGVtIHRyaWVkLlxuICBhW2EubGVuZ3RoIC0gMV0gLSBiW2IubGVuZ3RoIC0gMV0gOiAvLyBPdGhlcndpc2UsIGl0IGRvZXNuJ3QgcmVhbGx5IG1ha2Ugc2Vuc2UgdG8gcmFuayBub24tc2libGluZ3MgYnkgaW5kZXgsXG4gIC8vIHNvIHRoZXkgc29ydCBlcXVhbGx5LlxuICAwO1xufVxuXG5mdW5jdGlvbiBtYXRjaFJvdXRlQnJhbmNoKGJyYW5jaCwgcGF0aG5hbWUpIHtcbiAgbGV0IHtcbiAgICByb3V0ZXNNZXRhXG4gIH0gPSBicmFuY2g7XG4gIGxldCBtYXRjaGVkUGFyYW1zID0ge307XG4gIGxldCBtYXRjaGVkUGF0aG5hbWUgPSBcIi9cIjtcbiAgbGV0IG1hdGNoZXMgPSBbXTtcblxuICBmb3IgKGxldCBpID0gMDsgaSA8IHJvdXRlc01ldGEubGVuZ3RoOyArK2kpIHtcbiAgICBsZXQgbWV0YSA9IHJvdXRlc01ldGFbaV07XG4gICAgbGV0IGVuZCA9IGkgPT09IHJvdXRlc01ldGEubGVuZ3RoIC0gMTtcbiAgICBsZXQgcmVtYWluaW5nUGF0aG5hbWUgPSBtYXRjaGVkUGF0aG5hbWUgPT09IFwiL1wiID8gcGF0aG5hbWUgOiBwYXRobmFtZS5zbGljZShtYXRjaGVkUGF0aG5hbWUubGVuZ3RoKSB8fCBcIi9cIjtcbiAgICBsZXQgbWF0Y2ggPSBtYXRjaFBhdGgoe1xuICAgICAgcGF0aDogbWV0YS5yZWxhdGl2ZVBhdGgsXG4gICAgICBjYXNlU2Vuc2l0aXZlOiBtZXRhLmNhc2VTZW5zaXRpdmUsXG4gICAgICBlbmRcbiAgICB9LCByZW1haW5pbmdQYXRobmFtZSk7XG4gICAgaWYgKCFtYXRjaCkgcmV0dXJuIG51bGw7XG4gICAgT2JqZWN0LmFzc2lnbihtYXRjaGVkUGFyYW1zLCBtYXRjaC5wYXJhbXMpO1xuICAgIGxldCByb3V0ZSA9IG1ldGEucm91dGU7XG4gICAgbWF0Y2hlcy5wdXNoKHtcbiAgICAgIHBhcmFtczogbWF0Y2hlZFBhcmFtcyxcbiAgICAgIHBhdGhuYW1lOiBqb2luUGF0aHMoW21hdGNoZWRQYXRobmFtZSwgbWF0Y2gucGF0aG5hbWVdKSxcbiAgICAgIHBhdGhuYW1lQmFzZTogbm9ybWFsaXplUGF0aG5hbWUoam9pblBhdGhzKFttYXRjaGVkUGF0aG5hbWUsIG1hdGNoLnBhdGhuYW1lQmFzZV0pKSxcbiAgICAgIHJvdXRlXG4gICAgfSk7XG5cbiAgICBpZiAobWF0Y2gucGF0aG5hbWVCYXNlICE9PSBcIi9cIikge1xuICAgICAgbWF0Y2hlZFBhdGhuYW1lID0gam9pblBhdGhzKFttYXRjaGVkUGF0aG5hbWUsIG1hdGNoLnBhdGhuYW1lQmFzZV0pO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBtYXRjaGVzO1xufVxuLyoqXG4gKiBBIFBhdGhQYXR0ZXJuIGlzIHVzZWQgdG8gbWF0Y2ggb24gc29tZSBwb3J0aW9uIG9mIGEgVVJMIHBhdGhuYW1lLlxuICovXG5cblxuLyoqXG4gKiBQZXJmb3JtcyBwYXR0ZXJuIG1hdGNoaW5nIG9uIGEgVVJMIHBhdGhuYW1lIGFuZCByZXR1cm5zIGluZm9ybWF0aW9uIGFib3V0XG4gKiB0aGUgbWF0Y2guXG4gKlxuICogQHNlZSBodHRwczovL3JlYWN0cm91dGVyLmNvbS9kb2NzL2VuL3Y2L2FwaSNtYXRjaHBhdGhcbiAqL1xuZnVuY3Rpb24gbWF0Y2hQYXRoKHBhdHRlcm4sIHBhdGhuYW1lKSB7XG4gIGlmICh0eXBlb2YgcGF0dGVybiA9PT0gXCJzdHJpbmdcIikge1xuICAgIHBhdHRlcm4gPSB7XG4gICAgICBwYXRoOiBwYXR0ZXJuLFxuICAgICAgY2FzZVNlbnNpdGl2ZTogZmFsc2UsXG4gICAgICBlbmQ6IHRydWVcbiAgICB9O1xuICB9XG5cbiAgbGV0IFttYXRjaGVyLCBwYXJhbU5hbWVzXSA9IGNvbXBpbGVQYXRoKHBhdHRlcm4ucGF0aCwgcGF0dGVybi5jYXNlU2Vuc2l0aXZlLCBwYXR0ZXJuLmVuZCk7XG4gIGxldCBtYXRjaCA9IHBhdGhuYW1lLm1hdGNoKG1hdGNoZXIpO1xuICBpZiAoIW1hdGNoKSByZXR1cm4gbnVsbDtcbiAgbGV0IG1hdGNoZWRQYXRobmFtZSA9IG1hdGNoWzBdO1xuICBsZXQgcGF0aG5hbWVCYXNlID0gbWF0Y2hlZFBhdGhuYW1lLnJlcGxhY2UoLyguKVxcLyskLywgXCIkMVwiKTtcbiAgbGV0IGNhcHR1cmVHcm91cHMgPSBtYXRjaC5zbGljZSgxKTtcbiAgbGV0IHBhcmFtcyA9IHBhcmFtTmFtZXMucmVkdWNlKChtZW1vLCBwYXJhbU5hbWUsIGluZGV4KSA9PiB7XG4gICAgLy8gV2UgbmVlZCB0byBjb21wdXRlIHRoZSBwYXRobmFtZUJhc2UgaGVyZSB1c2luZyB0aGUgcmF3IHNwbGF0IHZhbHVlXG4gICAgLy8gaW5zdGVhZCBvZiB1c2luZyBwYXJhbXNbXCIqXCJdIGxhdGVyIGJlY2F1c2UgaXQgd2lsbCBiZSBkZWNvZGVkIHRoZW5cbiAgICBpZiAocGFyYW1OYW1lID09PSBcIipcIikge1xuICAgICAgbGV0IHNwbGF0VmFsdWUgPSBjYXB0dXJlR3JvdXBzW2luZGV4XSB8fCBcIlwiO1xuICAgICAgcGF0aG5hbWVCYXNlID0gbWF0Y2hlZFBhdGhuYW1lLnNsaWNlKDAsIG1hdGNoZWRQYXRobmFtZS5sZW5ndGggLSBzcGxhdFZhbHVlLmxlbmd0aCkucmVwbGFjZSgvKC4pXFwvKyQvLCBcIiQxXCIpO1xuICAgIH1cblxuICAgIG1lbW9bcGFyYW1OYW1lXSA9IHNhZmVseURlY29kZVVSSUNvbXBvbmVudChjYXB0dXJlR3JvdXBzW2luZGV4XSB8fCBcIlwiLCBwYXJhbU5hbWUpO1xuICAgIHJldHVybiBtZW1vO1xuICB9LCB7fSk7XG4gIHJldHVybiB7XG4gICAgcGFyYW1zLFxuICAgIHBhdGhuYW1lOiBtYXRjaGVkUGF0aG5hbWUsXG4gICAgcGF0aG5hbWVCYXNlLFxuICAgIHBhdHRlcm5cbiAgfTtcbn1cblxuZnVuY3Rpb24gY29tcGlsZVBhdGgocGF0aCwgY2FzZVNlbnNpdGl2ZSwgZW5kKSB7XG4gIGlmIChjYXNlU2Vuc2l0aXZlID09PSB2b2lkIDApIHtcbiAgICBjYXNlU2Vuc2l0aXZlID0gZmFsc2U7XG4gIH1cblxuICBpZiAoZW5kID09PSB2b2lkIDApIHtcbiAgICBlbmQgPSB0cnVlO1xuICB9XG5cbiAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyhwYXRoID09PSBcIipcIiB8fCAhcGF0aC5lbmRzV2l0aChcIipcIikgfHwgcGF0aC5lbmRzV2l0aChcIi8qXCIpLCBcIlJvdXRlIHBhdGggXFxcIlwiICsgcGF0aCArIFwiXFxcIiB3aWxsIGJlIHRyZWF0ZWQgYXMgaWYgaXQgd2VyZSBcIiArIChcIlxcXCJcIiArIHBhdGgucmVwbGFjZSgvXFwqJC8sIFwiLypcIikgKyBcIlxcXCIgYmVjYXVzZSB0aGUgYCpgIGNoYXJhY3RlciBtdXN0IFwiKSArIFwiYWx3YXlzIGZvbGxvdyBhIGAvYCBpbiB0aGUgcGF0dGVybi4gVG8gZ2V0IHJpZCBvZiB0aGlzIHdhcm5pbmcsIFwiICsgKFwicGxlYXNlIGNoYW5nZSB0aGUgcm91dGUgcGF0aCB0byBcXFwiXCIgKyBwYXRoLnJlcGxhY2UoL1xcKiQvLCBcIi8qXCIpICsgXCJcXFwiLlwiKSkgOiB2b2lkIDA7XG4gIGxldCBwYXJhbU5hbWVzID0gW107XG4gIGxldCByZWdleHBTb3VyY2UgPSBcIl5cIiArIHBhdGgucmVwbGFjZSgvXFwvKlxcKj8kLywgXCJcIikgLy8gSWdub3JlIHRyYWlsaW5nIC8gYW5kIC8qLCB3ZSdsbCBoYW5kbGUgaXQgYmVsb3dcbiAgLnJlcGxhY2UoL15cXC8qLywgXCIvXCIpIC8vIE1ha2Ugc3VyZSBpdCBoYXMgYSBsZWFkaW5nIC9cbiAgLnJlcGxhY2UoL1tcXFxcLiorXiQ/e318KClbXFxdXS9nLCBcIlxcXFwkJlwiKSAvLyBFc2NhcGUgc3BlY2lhbCByZWdleCBjaGFyc1xuICAucmVwbGFjZSgvOihcXHcrKS9nLCAoXywgcGFyYW1OYW1lKSA9PiB7XG4gICAgcGFyYW1OYW1lcy5wdXNoKHBhcmFtTmFtZSk7XG4gICAgcmV0dXJuIFwiKFteXFxcXC9dKylcIjtcbiAgfSk7XG5cbiAgaWYgKHBhdGguZW5kc1dpdGgoXCIqXCIpKSB7XG4gICAgcGFyYW1OYW1lcy5wdXNoKFwiKlwiKTtcbiAgICByZWdleHBTb3VyY2UgKz0gcGF0aCA9PT0gXCIqXCIgfHwgcGF0aCA9PT0gXCIvKlwiID8gXCIoLiopJFwiIC8vIEFscmVhZHkgbWF0Y2hlZCB0aGUgaW5pdGlhbCAvLCBqdXN0IG1hdGNoIHRoZSByZXN0XG4gICAgOiBcIig/OlxcXFwvKC4rKXxcXFxcLyopJFwiOyAvLyBEb24ndCBpbmNsdWRlIHRoZSAvIGluIHBhcmFtc1tcIipcIl1cbiAgfSBlbHNlIHtcbiAgICByZWdleHBTb3VyY2UgKz0gZW5kID8gXCJcXFxcLyokXCIgLy8gV2hlbiBtYXRjaGluZyB0byB0aGUgZW5kLCBpZ25vcmUgdHJhaWxpbmcgc2xhc2hlc1xuICAgIDogLy8gT3RoZXJ3aXNlLCBtYXRjaCBhIHdvcmQgYm91bmRhcnkgb3IgYSBwcm9jZWVkaW5nIC8uIFRoZSB3b3JkIGJvdW5kYXJ5IHJlc3RyaWN0c1xuICAgIC8vIHBhcmVudCByb3V0ZXMgdG8gbWF0Y2hpbmcgb25seSB0aGVpciBvd24gd29yZHMgYW5kIG5vdGhpbmcgbW9yZSwgZS5nLiBwYXJlbnRcbiAgICAvLyByb3V0ZSBcIi9ob21lXCIgc2hvdWxkIG5vdCBtYXRjaCBcIi9ob21lMlwiLlxuICAgIC8vIEFkZGl0aW9uYWxseSwgYWxsb3cgcGF0aHMgc3RhcnRpbmcgd2l0aCBgLmAsIGAtYCwgYH5gLCBhbmQgdXJsLWVuY29kZWQgZW50aXRpZXMsXG4gICAgLy8gYnV0IGRvIG5vdCBjb25zdW1lIHRoZSBjaGFyYWN0ZXIgaW4gdGhlIG1hdGNoZWQgcGF0aCBzbyB0aGV5IGNhbiBtYXRjaCBhZ2FpbnN0XG4gICAgLy8gbmVzdGVkIHBhdGhzLlxuICAgIFwiKD86KD89Wy5+LV18JVswLTlBLUZdezJ9KXxcXFxcYnxcXFxcL3wkKVwiO1xuICB9XG5cbiAgbGV0IG1hdGNoZXIgPSBuZXcgUmVnRXhwKHJlZ2V4cFNvdXJjZSwgY2FzZVNlbnNpdGl2ZSA/IHVuZGVmaW5lZCA6IFwiaVwiKTtcbiAgcmV0dXJuIFttYXRjaGVyLCBwYXJhbU5hbWVzXTtcbn1cblxuZnVuY3Rpb24gc2FmZWx5RGVjb2RlVVJJQ29tcG9uZW50KHZhbHVlLCBwYXJhbU5hbWUpIHtcbiAgdHJ5IHtcbiAgICByZXR1cm4gZGVjb2RlVVJJQ29tcG9uZW50KHZhbHVlKTtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKGZhbHNlLCBcIlRoZSB2YWx1ZSBmb3IgdGhlIFVSTCBwYXJhbSBcXFwiXCIgKyBwYXJhbU5hbWUgKyBcIlxcXCIgd2lsbCBub3QgYmUgZGVjb2RlZCBiZWNhdXNlXCIgKyAoXCIgdGhlIHN0cmluZyBcXFwiXCIgKyB2YWx1ZSArIFwiXFxcIiBpcyBhIG1hbGZvcm1lZCBVUkwgc2VnbWVudC4gVGhpcyBpcyBwcm9iYWJseVwiKSArIChcIiBkdWUgdG8gYSBiYWQgcGVyY2VudCBlbmNvZGluZyAoXCIgKyBlcnJvciArIFwiKS5cIikpIDogdm9pZCAwO1xuICAgIHJldHVybiB2YWx1ZTtcbiAgfVxufVxuLyoqXG4gKiBSZXR1cm5zIGEgcmVzb2x2ZWQgcGF0aCBvYmplY3QgcmVsYXRpdmUgdG8gdGhlIGdpdmVuIHBhdGhuYW1lLlxuICpcbiAqIEBzZWUgaHR0cHM6Ly9yZWFjdHJvdXRlci5jb20vZG9jcy9lbi92Ni9hcGkjcmVzb2x2ZXBhdGhcbiAqL1xuXG5cbmZ1bmN0aW9uIHJlc29sdmVQYXRoKHRvLCBmcm9tUGF0aG5hbWUpIHtcbiAgaWYgKGZyb21QYXRobmFtZSA9PT0gdm9pZCAwKSB7XG4gICAgZnJvbVBhdGhuYW1lID0gXCIvXCI7XG4gIH1cblxuICBsZXQge1xuICAgIHBhdGhuYW1lOiB0b1BhdGhuYW1lLFxuICAgIHNlYXJjaCA9IFwiXCIsXG4gICAgaGFzaCA9IFwiXCJcbiAgfSA9IHR5cGVvZiB0byA9PT0gXCJzdHJpbmdcIiA/IHBhcnNlUGF0aCh0bykgOiB0bztcbiAgbGV0IHBhdGhuYW1lID0gdG9QYXRobmFtZSA/IHRvUGF0aG5hbWUuc3RhcnRzV2l0aChcIi9cIikgPyB0b1BhdGhuYW1lIDogcmVzb2x2ZVBhdGhuYW1lKHRvUGF0aG5hbWUsIGZyb21QYXRobmFtZSkgOiBmcm9tUGF0aG5hbWU7XG4gIHJldHVybiB7XG4gICAgcGF0aG5hbWUsXG4gICAgc2VhcmNoOiBub3JtYWxpemVTZWFyY2goc2VhcmNoKSxcbiAgICBoYXNoOiBub3JtYWxpemVIYXNoKGhhc2gpXG4gIH07XG59XG5cbmZ1bmN0aW9uIHJlc29sdmVQYXRobmFtZShyZWxhdGl2ZVBhdGgsIGZyb21QYXRobmFtZSkge1xuICBsZXQgc2VnbWVudHMgPSBmcm9tUGF0aG5hbWUucmVwbGFjZSgvXFwvKyQvLCBcIlwiKS5zcGxpdChcIi9cIik7XG4gIGxldCByZWxhdGl2ZVNlZ21lbnRzID0gcmVsYXRpdmVQYXRoLnNwbGl0KFwiL1wiKTtcbiAgcmVsYXRpdmVTZWdtZW50cy5mb3JFYWNoKHNlZ21lbnQgPT4ge1xuICAgIGlmIChzZWdtZW50ID09PSBcIi4uXCIpIHtcbiAgICAgIC8vIEtlZXAgdGhlIHJvb3QgXCJcIiBzZWdtZW50IHNvIHRoZSBwYXRobmFtZSBzdGFydHMgYXQgL1xuICAgICAgaWYgKHNlZ21lbnRzLmxlbmd0aCA+IDEpIHNlZ21lbnRzLnBvcCgpO1xuICAgIH0gZWxzZSBpZiAoc2VnbWVudCAhPT0gXCIuXCIpIHtcbiAgICAgIHNlZ21lbnRzLnB1c2goc2VnbWVudCk7XG4gICAgfVxuICB9KTtcbiAgcmV0dXJuIHNlZ21lbnRzLmxlbmd0aCA+IDEgPyBzZWdtZW50cy5qb2luKFwiL1wiKSA6IFwiL1wiO1xufVxuXG5mdW5jdGlvbiByZXNvbHZlVG8odG9BcmcsIHJvdXRlUGF0aG5hbWVzLCBsb2NhdGlvblBhdGhuYW1lKSB7XG4gIGxldCB0byA9IHR5cGVvZiB0b0FyZyA9PT0gXCJzdHJpbmdcIiA/IHBhcnNlUGF0aCh0b0FyZykgOiB0b0FyZztcbiAgbGV0IHRvUGF0aG5hbWUgPSB0b0FyZyA9PT0gXCJcIiB8fCB0by5wYXRobmFtZSA9PT0gXCJcIiA/IFwiL1wiIDogdG8ucGF0aG5hbWU7IC8vIElmIGEgcGF0aG5hbWUgaXMgZXhwbGljaXRseSBwcm92aWRlZCBpbiBgdG9gLCBpdCBzaG91bGQgYmUgcmVsYXRpdmUgdG8gdGhlXG4gIC8vIHJvdXRlIGNvbnRleHQuIFRoaXMgaXMgZXhwbGFpbmVkIGluIGBOb3RlIG9uIGA8TGluayB0bz5gIHZhbHVlc2AgaW4gb3VyXG4gIC8vIG1pZ3JhdGlvbiBndWlkZSBmcm9tIHY1IGFzIGEgbWVhbnMgb2YgZGlzYW1iaWd1YXRpb24gYmV0d2VlbiBgdG9gIHZhbHVlc1xuICAvLyB0aGF0IGJlZ2luIHdpdGggYC9gIGFuZCB0aG9zZSB0aGF0IGRvIG5vdC4gSG93ZXZlciwgdGhpcyBpcyBwcm9ibGVtYXRpYyBmb3JcbiAgLy8gYHRvYCB2YWx1ZXMgdGhhdCBkbyBub3QgcHJvdmlkZSBhIHBhdGhuYW1lLiBgdG9gIGNhbiBzaW1wbHkgYmUgYSBzZWFyY2ggb3JcbiAgLy8gaGFzaCBzdHJpbmcsIGluIHdoaWNoIGNhc2Ugd2Ugc2hvdWxkIGFzc3VtZSB0aGF0IHRoZSBuYXZpZ2F0aW9uIGlzIHJlbGF0aXZlXG4gIC8vIHRvIHRoZSBjdXJyZW50IGxvY2F0aW9uJ3MgcGF0aG5hbWUgYW5kICpub3QqIHRoZSByb3V0ZSBwYXRobmFtZS5cblxuICBsZXQgZnJvbTtcblxuICBpZiAodG9QYXRobmFtZSA9PSBudWxsKSB7XG4gICAgZnJvbSA9IGxvY2F0aW9uUGF0aG5hbWU7XG4gIH0gZWxzZSB7XG4gICAgbGV0IHJvdXRlUGF0aG5hbWVJbmRleCA9IHJvdXRlUGF0aG5hbWVzLmxlbmd0aCAtIDE7XG5cbiAgICBpZiAodG9QYXRobmFtZS5zdGFydHNXaXRoKFwiLi5cIikpIHtcbiAgICAgIGxldCB0b1NlZ21lbnRzID0gdG9QYXRobmFtZS5zcGxpdChcIi9cIik7IC8vIEVhY2ggbGVhZGluZyAuLiBzZWdtZW50IG1lYW5zIFwiZ28gdXAgb25lIHJvdXRlXCIgaW5zdGVhZCBvZiBcImdvIHVwIG9uZVxuICAgICAgLy8gVVJMIHNlZ21lbnRcIi4gIFRoaXMgaXMgYSBrZXkgZGlmZmVyZW5jZSBmcm9tIGhvdyA8YSBocmVmPiB3b3JrcyBhbmQgYVxuICAgICAgLy8gbWFqb3IgcmVhc29uIHdlIGNhbGwgdGhpcyBhIFwidG9cIiB2YWx1ZSBpbnN0ZWFkIG9mIGEgXCJocmVmXCIuXG5cbiAgICAgIHdoaWxlICh0b1NlZ21lbnRzWzBdID09PSBcIi4uXCIpIHtcbiAgICAgICAgdG9TZWdtZW50cy5zaGlmdCgpO1xuICAgICAgICByb3V0ZVBhdGhuYW1lSW5kZXggLT0gMTtcbiAgICAgIH1cblxuICAgICAgdG8ucGF0aG5hbWUgPSB0b1NlZ21lbnRzLmpvaW4oXCIvXCIpO1xuICAgIH0gLy8gSWYgdGhlcmUgYXJlIG1vcmUgXCIuLlwiIHNlZ21lbnRzIHRoYW4gcGFyZW50IHJvdXRlcywgcmVzb2x2ZSByZWxhdGl2ZSB0b1xuICAgIC8vIHRoZSByb290IC8gVVJMLlxuXG5cbiAgICBmcm9tID0gcm91dGVQYXRobmFtZUluZGV4ID49IDAgPyByb3V0ZVBhdGhuYW1lc1tyb3V0ZVBhdGhuYW1lSW5kZXhdIDogXCIvXCI7XG4gIH1cblxuICBsZXQgcGF0aCA9IHJlc29sdmVQYXRoKHRvLCBmcm9tKTsgLy8gRW5zdXJlIHRoZSBwYXRobmFtZSBoYXMgYSB0cmFpbGluZyBzbGFzaCBpZiB0aGUgb3JpZ2luYWwgdG8gdmFsdWUgaGFkIG9uZS5cblxuICBpZiAodG9QYXRobmFtZSAmJiB0b1BhdGhuYW1lICE9PSBcIi9cIiAmJiB0b1BhdGhuYW1lLmVuZHNXaXRoKFwiL1wiKSAmJiAhcGF0aC5wYXRobmFtZS5lbmRzV2l0aChcIi9cIikpIHtcbiAgICBwYXRoLnBhdGhuYW1lICs9IFwiL1wiO1xuICB9XG5cbiAgcmV0dXJuIHBhdGg7XG59XG5mdW5jdGlvbiBnZXRUb1BhdGhuYW1lKHRvKSB7XG4gIC8vIEVtcHR5IHN0cmluZ3Mgc2hvdWxkIGJlIHRyZWF0ZWQgdGhlIHNhbWUgYXMgLyBwYXRoc1xuICByZXR1cm4gdG8gPT09IFwiXCIgfHwgdG8ucGF0aG5hbWUgPT09IFwiXCIgPyBcIi9cIiA6IHR5cGVvZiB0byA9PT0gXCJzdHJpbmdcIiA/IHBhcnNlUGF0aCh0bykucGF0aG5hbWUgOiB0by5wYXRobmFtZTtcbn1cbmZ1bmN0aW9uIHN0cmlwQmFzZW5hbWUocGF0aG5hbWUsIGJhc2VuYW1lKSB7XG4gIGlmIChiYXNlbmFtZSA9PT0gXCIvXCIpIHJldHVybiBwYXRobmFtZTtcblxuICBpZiAoIXBhdGhuYW1lLnRvTG93ZXJDYXNlKCkuc3RhcnRzV2l0aChiYXNlbmFtZS50b0xvd2VyQ2FzZSgpKSkge1xuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgbGV0IG5leHRDaGFyID0gcGF0aG5hbWUuY2hhckF0KGJhc2VuYW1lLmxlbmd0aCk7XG5cbiAgaWYgKG5leHRDaGFyICYmIG5leHRDaGFyICE9PSBcIi9cIikge1xuICAgIC8vIHBhdGhuYW1lIGRvZXMgbm90IHN0YXJ0IHdpdGggYmFzZW5hbWUvXG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICByZXR1cm4gcGF0aG5hbWUuc2xpY2UoYmFzZW5hbWUubGVuZ3RoKSB8fCBcIi9cIjtcbn1cbmNvbnN0IGpvaW5QYXRocyA9IHBhdGhzID0+IHBhdGhzLmpvaW4oXCIvXCIpLnJlcGxhY2UoL1xcL1xcLysvZywgXCIvXCIpO1xuY29uc3Qgbm9ybWFsaXplUGF0aG5hbWUgPSBwYXRobmFtZSA9PiBwYXRobmFtZS5yZXBsYWNlKC9cXC8rJC8sIFwiXCIpLnJlcGxhY2UoL15cXC8qLywgXCIvXCIpO1xuXG5jb25zdCBub3JtYWxpemVTZWFyY2ggPSBzZWFyY2ggPT4gIXNlYXJjaCB8fCBzZWFyY2ggPT09IFwiP1wiID8gXCJcIiA6IHNlYXJjaC5zdGFydHNXaXRoKFwiP1wiKSA/IHNlYXJjaCA6IFwiP1wiICsgc2VhcmNoO1xuXG5jb25zdCBub3JtYWxpemVIYXNoID0gaGFzaCA9PiAhaGFzaCB8fCBoYXNoID09PSBcIiNcIiA/IFwiXCIgOiBoYXNoLnN0YXJ0c1dpdGgoXCIjXCIpID8gaGFzaCA6IFwiI1wiICsgaGFzaDtcblxuLyoqXG4gKiBSZXR1cm5zIHRoZSBmdWxsIGhyZWYgZm9yIHRoZSBnaXZlbiBcInRvXCIgdmFsdWUuIFRoaXMgaXMgdXNlZnVsIGZvciBidWlsZGluZ1xuICogY3VzdG9tIGxpbmtzIHRoYXQgYXJlIGFsc28gYWNjZXNzaWJsZSBhbmQgcHJlc2VydmUgcmlnaHQtY2xpY2sgYmVoYXZpb3IuXG4gKlxuICogQHNlZSBodHRwczovL3JlYWN0cm91dGVyLmNvbS9kb2NzL2VuL3Y2L2FwaSN1c2VocmVmXG4gKi9cblxuZnVuY3Rpb24gdXNlSHJlZih0bykge1xuICAhdXNlSW5Sb3V0ZXJDb250ZXh0KCkgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsIC8vIFRPRE86IFRoaXMgZXJyb3IgaXMgcHJvYmFibHkgYmVjYXVzZSB0aGV5IHNvbWVob3cgaGF2ZSAyIHZlcnNpb25zIG9mIHRoZVxuICAvLyByb3V0ZXIgbG9hZGVkLiBXZSBjYW4gaGVscCB0aGVtIHVuZGVyc3RhbmQgaG93IHRvIGF2b2lkIHRoYXQuXG4gIFwidXNlSHJlZigpIG1heSBiZSB1c2VkIG9ubHkgaW4gdGhlIGNvbnRleHQgb2YgYSA8Um91dGVyPiBjb21wb25lbnQuXCIpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgbGV0IHtcbiAgICBiYXNlbmFtZSxcbiAgICBuYXZpZ2F0b3JcbiAgfSA9IHVzZUNvbnRleHQoTmF2aWdhdGlvbkNvbnRleHQpO1xuICBsZXQge1xuICAgIGhhc2gsXG4gICAgcGF0aG5hbWUsXG4gICAgc2VhcmNoXG4gIH0gPSB1c2VSZXNvbHZlZFBhdGgodG8pO1xuICBsZXQgam9pbmVkUGF0aG5hbWUgPSBwYXRobmFtZTtcblxuICBpZiAoYmFzZW5hbWUgIT09IFwiL1wiKSB7XG4gICAgbGV0IHRvUGF0aG5hbWUgPSBnZXRUb1BhdGhuYW1lKHRvKTtcbiAgICBsZXQgZW5kc1dpdGhTbGFzaCA9IHRvUGF0aG5hbWUgIT0gbnVsbCAmJiB0b1BhdGhuYW1lLmVuZHNXaXRoKFwiL1wiKTtcbiAgICBqb2luZWRQYXRobmFtZSA9IHBhdGhuYW1lID09PSBcIi9cIiA/IGJhc2VuYW1lICsgKGVuZHNXaXRoU2xhc2ggPyBcIi9cIiA6IFwiXCIpIDogam9pblBhdGhzKFtiYXNlbmFtZSwgcGF0aG5hbWVdKTtcbiAgfVxuXG4gIHJldHVybiBuYXZpZ2F0b3IuY3JlYXRlSHJlZih7XG4gICAgcGF0aG5hbWU6IGpvaW5lZFBhdGhuYW1lLFxuICAgIHNlYXJjaCxcbiAgICBoYXNoXG4gIH0pO1xufVxuLyoqXG4gKiBSZXR1cm5zIHRydWUgaWYgdGhpcyBjb21wb25lbnQgaXMgYSBkZXNjZW5kYW50IG9mIGEgPFJvdXRlcj4uXG4gKlxuICogQHNlZSBodHRwczovL3JlYWN0cm91dGVyLmNvbS9kb2NzL2VuL3Y2L2FwaSN1c2VpbnJvdXRlcmNvbnRleHRcbiAqL1xuXG5mdW5jdGlvbiB1c2VJblJvdXRlckNvbnRleHQoKSB7XG4gIHJldHVybiB1c2VDb250ZXh0KExvY2F0aW9uQ29udGV4dCkgIT0gbnVsbDtcbn1cbi8qKlxuICogUmV0dXJucyB0aGUgY3VycmVudCBsb2NhdGlvbiBvYmplY3QsIHdoaWNoIHJlcHJlc2VudHMgdGhlIGN1cnJlbnQgVVJMIGluIHdlYlxuICogYnJvd3NlcnMuXG4gKlxuICogTm90ZTogSWYgeW91J3JlIHVzaW5nIHRoaXMgaXQgbWF5IG1lYW4geW91J3JlIGRvaW5nIHNvbWUgb2YgeW91ciBvd25cbiAqIFwicm91dGluZ1wiIGluIHlvdXIgYXBwLCBhbmQgd2UnZCBsaWtlIHRvIGtub3cgd2hhdCB5b3VyIHVzZSBjYXNlIGlzLiBXZSBtYXlcbiAqIGJlIGFibGUgdG8gcHJvdmlkZSBzb21ldGhpbmcgaGlnaGVyLWxldmVsIHRvIGJldHRlciBzdWl0IHlvdXIgbmVlZHMuXG4gKlxuICogQHNlZSBodHRwczovL3JlYWN0cm91dGVyLmNvbS9kb2NzL2VuL3Y2L2FwaSN1c2Vsb2NhdGlvblxuICovXG5cbmZ1bmN0aW9uIHVzZUxvY2F0aW9uKCkge1xuICAhdXNlSW5Sb3V0ZXJDb250ZXh0KCkgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsIC8vIFRPRE86IFRoaXMgZXJyb3IgaXMgcHJvYmFibHkgYmVjYXVzZSB0aGV5IHNvbWVob3cgaGF2ZSAyIHZlcnNpb25zIG9mIHRoZVxuICAvLyByb3V0ZXIgbG9hZGVkLiBXZSBjYW4gaGVscCB0aGVtIHVuZGVyc3RhbmQgaG93IHRvIGF2b2lkIHRoYXQuXG4gIFwidXNlTG9jYXRpb24oKSBtYXkgYmUgdXNlZCBvbmx5IGluIHRoZSBjb250ZXh0IG9mIGEgPFJvdXRlcj4gY29tcG9uZW50LlwiKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gIHJldHVybiB1c2VDb250ZXh0KExvY2F0aW9uQ29udGV4dCkubG9jYXRpb247XG59XG4vKipcbiAqIFJldHVybnMgdGhlIGN1cnJlbnQgbmF2aWdhdGlvbiBhY3Rpb24gd2hpY2ggZGVzY3JpYmVzIGhvdyB0aGUgcm91dGVyIGNhbWUgdG9cbiAqIHRoZSBjdXJyZW50IGxvY2F0aW9uLCBlaXRoZXIgYnkgYSBwb3AsIHB1c2gsIG9yIHJlcGxhY2Ugb24gdGhlIGhpc3Rvcnkgc3RhY2suXG4gKlxuICogQHNlZSBodHRwczovL3JlYWN0cm91dGVyLmNvbS9kb2NzL2VuL3Y2L2FwaSN1c2VuYXZpZ2F0aW9udHlwZVxuICovXG5cbmZ1bmN0aW9uIHVzZU5hdmlnYXRpb25UeXBlKCkge1xuICByZXR1cm4gdXNlQ29udGV4dChMb2NhdGlvbkNvbnRleHQpLm5hdmlnYXRpb25UeXBlO1xufVxuLyoqXG4gKiBSZXR1cm5zIHRydWUgaWYgdGhlIFVSTCBmb3IgdGhlIGdpdmVuIFwidG9cIiB2YWx1ZSBtYXRjaGVzIHRoZSBjdXJyZW50IFVSTC5cbiAqIFRoaXMgaXMgdXNlZnVsIGZvciBjb21wb25lbnRzIHRoYXQgbmVlZCB0byBrbm93IFwiYWN0aXZlXCIgc3RhdGUsIGUuZy5cbiAqIDxOYXZMaW5rPi5cbiAqXG4gKiBAc2VlIGh0dHBzOi8vcmVhY3Ryb3V0ZXIuY29tL2RvY3MvZW4vdjYvYXBpI3VzZW1hdGNoXG4gKi9cblxuZnVuY3Rpb24gdXNlTWF0Y2gocGF0dGVybikge1xuICAhdXNlSW5Sb3V0ZXJDb250ZXh0KCkgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsIC8vIFRPRE86IFRoaXMgZXJyb3IgaXMgcHJvYmFibHkgYmVjYXVzZSB0aGV5IHNvbWVob3cgaGF2ZSAyIHZlcnNpb25zIG9mIHRoZVxuICAvLyByb3V0ZXIgbG9hZGVkLiBXZSBjYW4gaGVscCB0aGVtIHVuZGVyc3RhbmQgaG93IHRvIGF2b2lkIHRoYXQuXG4gIFwidXNlTWF0Y2goKSBtYXkgYmUgdXNlZCBvbmx5IGluIHRoZSBjb250ZXh0IG9mIGEgPFJvdXRlcj4gY29tcG9uZW50LlwiKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gIGxldCB7XG4gICAgcGF0aG5hbWVcbiAgfSA9IHVzZUxvY2F0aW9uKCk7XG4gIHJldHVybiB1c2VNZW1vKCgpID0+IG1hdGNoUGF0aChwYXR0ZXJuLCBwYXRobmFtZSksIFtwYXRobmFtZSwgcGF0dGVybl0pO1xufVxuLyoqXG4gKiBUaGUgaW50ZXJmYWNlIGZvciB0aGUgbmF2aWdhdGUoKSBmdW5jdGlvbiByZXR1cm5lZCBmcm9tIHVzZU5hdmlnYXRlKCkuXG4gKi9cblxuLyoqXG4gKiBSZXR1cm5zIGFuIGltcGVyYXRpdmUgbWV0aG9kIGZvciBjaGFuZ2luZyB0aGUgbG9jYXRpb24uIFVzZWQgYnkgPExpbms+cywgYnV0XG4gKiBtYXkgYWxzbyBiZSB1c2VkIGJ5IG90aGVyIGVsZW1lbnRzIHRvIGNoYW5nZSB0aGUgbG9jYXRpb24uXG4gKlxuICogQHNlZSBodHRwczovL3JlYWN0cm91dGVyLmNvbS9kb2NzL2VuL3Y2L2FwaSN1c2VuYXZpZ2F0ZVxuICovXG5mdW5jdGlvbiB1c2VOYXZpZ2F0ZSgpIHtcbiAgIXVzZUluUm91dGVyQ29udGV4dCgpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCAvLyBUT0RPOiBUaGlzIGVycm9yIGlzIHByb2JhYmx5IGJlY2F1c2UgdGhleSBzb21laG93IGhhdmUgMiB2ZXJzaW9ucyBvZiB0aGVcbiAgLy8gcm91dGVyIGxvYWRlZC4gV2UgY2FuIGhlbHAgdGhlbSB1bmRlcnN0YW5kIGhvdyB0byBhdm9pZCB0aGF0LlxuICBcInVzZU5hdmlnYXRlKCkgbWF5IGJlIHVzZWQgb25seSBpbiB0aGUgY29udGV4dCBvZiBhIDxSb3V0ZXI+IGNvbXBvbmVudC5cIikgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICBsZXQge1xuICAgIGJhc2VuYW1lLFxuICAgIG5hdmlnYXRvclxuICB9ID0gdXNlQ29udGV4dChOYXZpZ2F0aW9uQ29udGV4dCk7XG4gIGxldCB7XG4gICAgbWF0Y2hlc1xuICB9ID0gdXNlQ29udGV4dChSb3V0ZUNvbnRleHQpO1xuICBsZXQge1xuICAgIHBhdGhuYW1lOiBsb2NhdGlvblBhdGhuYW1lXG4gIH0gPSB1c2VMb2NhdGlvbigpO1xuICBsZXQgcm91dGVQYXRobmFtZXNKc29uID0gSlNPTi5zdHJpbmdpZnkobWF0Y2hlcy5tYXAobWF0Y2ggPT4gbWF0Y2gucGF0aG5hbWVCYXNlKSk7XG4gIGxldCBhY3RpdmVSZWYgPSB1c2VSZWYoZmFsc2UpO1xuICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgIGFjdGl2ZVJlZi5jdXJyZW50ID0gdHJ1ZTtcbiAgfSk7XG4gIGxldCBuYXZpZ2F0ZSA9IHVzZUNhbGxiYWNrKGZ1bmN0aW9uICh0bywgb3B0aW9ucykge1xuICAgIGlmIChvcHRpb25zID09PSB2b2lkIDApIHtcbiAgICAgIG9wdGlvbnMgPSB7fTtcbiAgICB9XG5cbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKGFjdGl2ZVJlZi5jdXJyZW50LCBcIllvdSBzaG91bGQgY2FsbCBuYXZpZ2F0ZSgpIGluIGEgUmVhY3QudXNlRWZmZWN0KCksIG5vdCB3aGVuIFwiICsgXCJ5b3VyIGNvbXBvbmVudCBpcyBmaXJzdCByZW5kZXJlZC5cIikgOiB2b2lkIDA7XG4gICAgaWYgKCFhY3RpdmVSZWYuY3VycmVudCkgcmV0dXJuO1xuXG4gICAgaWYgKHR5cGVvZiB0byA9PT0gXCJudW1iZXJcIikge1xuICAgICAgbmF2aWdhdG9yLmdvKHRvKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBsZXQgcGF0aCA9IHJlc29sdmVUbyh0bywgSlNPTi5wYXJzZShyb3V0ZVBhdGhuYW1lc0pzb24pLCBsb2NhdGlvblBhdGhuYW1lKTtcblxuICAgIGlmIChiYXNlbmFtZSAhPT0gXCIvXCIpIHtcbiAgICAgIHBhdGgucGF0aG5hbWUgPSBqb2luUGF0aHMoW2Jhc2VuYW1lLCBwYXRoLnBhdGhuYW1lXSk7XG4gICAgfVxuXG4gICAgKCEhb3B0aW9ucy5yZXBsYWNlID8gbmF2aWdhdG9yLnJlcGxhY2UgOiBuYXZpZ2F0b3IucHVzaCkocGF0aCwgb3B0aW9ucy5zdGF0ZSk7XG4gIH0sIFtiYXNlbmFtZSwgbmF2aWdhdG9yLCByb3V0ZVBhdGhuYW1lc0pzb24sIGxvY2F0aW9uUGF0aG5hbWVdKTtcbiAgcmV0dXJuIG5hdmlnYXRlO1xufVxuY29uc3QgT3V0bGV0Q29udGV4dCA9IC8qI19fUFVSRV9fKi9jcmVhdGVDb250ZXh0KG51bGwpO1xuLyoqXG4gKiBSZXR1cm5zIHRoZSBjb250ZXh0IChpZiBwcm92aWRlZCkgZm9yIHRoZSBjaGlsZCByb3V0ZSBhdCB0aGlzIGxldmVsIG9mIHRoZSByb3V0ZVxuICogaGllcmFyY2h5LlxuICogQHNlZSBodHRwczovL3JlYWN0cm91dGVyLmNvbS9kb2NzL2VuL3Y2L2FwaSN1c2VvdXRsZXRjb250ZXh0XG4gKi9cblxuZnVuY3Rpb24gdXNlT3V0bGV0Q29udGV4dCgpIHtcbiAgcmV0dXJuIHVzZUNvbnRleHQoT3V0bGV0Q29udGV4dCk7XG59XG4vKipcbiAqIFJldHVybnMgdGhlIGVsZW1lbnQgZm9yIHRoZSBjaGlsZCByb3V0ZSBhdCB0aGlzIGxldmVsIG9mIHRoZSByb3V0ZVxuICogaGllcmFyY2h5LiBVc2VkIGludGVybmFsbHkgYnkgPE91dGxldD4gdG8gcmVuZGVyIGNoaWxkIHJvdXRlcy5cbiAqXG4gKiBAc2VlIGh0dHBzOi8vcmVhY3Ryb3V0ZXIuY29tL2RvY3MvZW4vdjYvYXBpI3VzZW91dGxldFxuICovXG5cbmZ1bmN0aW9uIHVzZU91dGxldChjb250ZXh0KSB7XG4gIGxldCBvdXRsZXQgPSB1c2VDb250ZXh0KFJvdXRlQ29udGV4dCkub3V0bGV0O1xuXG4gIGlmIChvdXRsZXQpIHtcbiAgICByZXR1cm4gLyojX19QVVJFX18qL2NyZWF0ZUVsZW1lbnQoT3V0bGV0Q29udGV4dC5Qcm92aWRlciwge1xuICAgICAgdmFsdWU6IGNvbnRleHRcbiAgICB9LCBvdXRsZXQpO1xuICB9XG5cbiAgcmV0dXJuIG91dGxldDtcbn1cbi8qKlxuICogUmV0dXJucyBhbiBvYmplY3Qgb2Yga2V5L3ZhbHVlIHBhaXJzIG9mIHRoZSBkeW5hbWljIHBhcmFtcyBmcm9tIHRoZSBjdXJyZW50XG4gKiBVUkwgdGhhdCB3ZXJlIG1hdGNoZWQgYnkgdGhlIHJvdXRlIHBhdGguXG4gKlxuICogQHNlZSBodHRwczovL3JlYWN0cm91dGVyLmNvbS9kb2NzL2VuL3Y2L2FwaSN1c2VwYXJhbXNcbiAqL1xuXG5mdW5jdGlvbiB1c2VQYXJhbXMoKSB7XG4gIGxldCB7XG4gICAgbWF0Y2hlc1xuICB9ID0gdXNlQ29udGV4dChSb3V0ZUNvbnRleHQpO1xuICBsZXQgcm91dGVNYXRjaCA9IG1hdGNoZXNbbWF0Y2hlcy5sZW5ndGggLSAxXTtcbiAgcmV0dXJuIHJvdXRlTWF0Y2ggPyByb3V0ZU1hdGNoLnBhcmFtcyA6IHt9O1xufVxuLyoqXG4gKiBSZXNvbHZlcyB0aGUgcGF0aG5hbWUgb2YgdGhlIGdpdmVuIGB0b2AgdmFsdWUgYWdhaW5zdCB0aGUgY3VycmVudCBsb2NhdGlvbi5cbiAqXG4gKiBAc2VlIGh0dHBzOi8vcmVhY3Ryb3V0ZXIuY29tL2RvY3MvZW4vdjYvYXBpI3VzZXJlc29sdmVkcGF0aFxuICovXG5cbmZ1bmN0aW9uIHVzZVJlc29sdmVkUGF0aCh0bykge1xuICBsZXQge1xuICAgIG1hdGNoZXNcbiAgfSA9IHVzZUNvbnRleHQoUm91dGVDb250ZXh0KTtcbiAgbGV0IHtcbiAgICBwYXRobmFtZTogbG9jYXRpb25QYXRobmFtZVxuICB9ID0gdXNlTG9jYXRpb24oKTtcbiAgbGV0IHJvdXRlUGF0aG5hbWVzSnNvbiA9IEpTT04uc3RyaW5naWZ5KG1hdGNoZXMubWFwKG1hdGNoID0+IG1hdGNoLnBhdGhuYW1lQmFzZSkpO1xuICByZXR1cm4gdXNlTWVtbygoKSA9PiByZXNvbHZlVG8odG8sIEpTT04ucGFyc2Uocm91dGVQYXRobmFtZXNKc29uKSwgbG9jYXRpb25QYXRobmFtZSksIFt0bywgcm91dGVQYXRobmFtZXNKc29uLCBsb2NhdGlvblBhdGhuYW1lXSk7XG59XG4vKipcbiAqIFJldHVybnMgdGhlIGVsZW1lbnQgb2YgdGhlIHJvdXRlIHRoYXQgbWF0Y2hlZCB0aGUgY3VycmVudCBsb2NhdGlvbiwgcHJlcGFyZWRcbiAqIHdpdGggdGhlIGNvcnJlY3QgY29udGV4dCB0byByZW5kZXIgdGhlIHJlbWFpbmRlciBvZiB0aGUgcm91dGUgdHJlZS4gUm91dGVcbiAqIGVsZW1lbnRzIGluIHRoZSB0cmVlIG11c3QgcmVuZGVyIGFuIDxPdXRsZXQ+IHRvIHJlbmRlciB0aGVpciBjaGlsZCByb3V0ZSdzXG4gKiBlbGVtZW50LlxuICpcbiAqIEBzZWUgaHR0cHM6Ly9yZWFjdHJvdXRlci5jb20vZG9jcy9lbi92Ni9hcGkjdXNlcm91dGVzXG4gKi9cblxuZnVuY3Rpb24gdXNlUm91dGVzKHJvdXRlcywgbG9jYXRpb25BcmcpIHtcbiAgIXVzZUluUm91dGVyQ29udGV4dCgpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCAvLyBUT0RPOiBUaGlzIGVycm9yIGlzIHByb2JhYmx5IGJlY2F1c2UgdGhleSBzb21laG93IGhhdmUgMiB2ZXJzaW9ucyBvZiB0aGVcbiAgLy8gcm91dGVyIGxvYWRlZC4gV2UgY2FuIGhlbHAgdGhlbSB1bmRlcnN0YW5kIGhvdyB0byBhdm9pZCB0aGF0LlxuICBcInVzZVJvdXRlcygpIG1heSBiZSB1c2VkIG9ubHkgaW4gdGhlIGNvbnRleHQgb2YgYSA8Um91dGVyPiBjb21wb25lbnQuXCIpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgbGV0IHtcbiAgICBtYXRjaGVzOiBwYXJlbnRNYXRjaGVzXG4gIH0gPSB1c2VDb250ZXh0KFJvdXRlQ29udGV4dCk7XG4gIGxldCByb3V0ZU1hdGNoID0gcGFyZW50TWF0Y2hlc1twYXJlbnRNYXRjaGVzLmxlbmd0aCAtIDFdO1xuICBsZXQgcGFyZW50UGFyYW1zID0gcm91dGVNYXRjaCA/IHJvdXRlTWF0Y2gucGFyYW1zIDoge307XG4gIGxldCBwYXJlbnRQYXRobmFtZSA9IHJvdXRlTWF0Y2ggPyByb3V0ZU1hdGNoLnBhdGhuYW1lIDogXCIvXCI7XG4gIGxldCBwYXJlbnRQYXRobmFtZUJhc2UgPSByb3V0ZU1hdGNoID8gcm91dGVNYXRjaC5wYXRobmFtZUJhc2UgOiBcIi9cIjtcbiAgbGV0IHBhcmVudFJvdXRlID0gcm91dGVNYXRjaCAmJiByb3V0ZU1hdGNoLnJvdXRlO1xuXG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgICAvLyBZb3Ugd29uJ3QgZ2V0IGEgd2FybmluZyBhYm91dCAyIGRpZmZlcmVudCA8Um91dGVzPiB1bmRlciBhIDxSb3V0ZT5cbiAgICAvLyB3aXRob3V0IGEgdHJhaWxpbmcgKiwgYnV0IHRoaXMgaXMgYSBiZXN0LWVmZm9ydCB3YXJuaW5nIGFueXdheSBzaW5jZSB3ZVxuICAgIC8vIGNhbm5vdCBldmVuIGdpdmUgdGhlIHdhcm5pbmcgdW5sZXNzIHRoZXkgbGFuZCBhdCB0aGUgcGFyZW50IHJvdXRlLlxuICAgIC8vXG4gICAgLy8gRXhhbXBsZTpcbiAgICAvL1xuICAgIC8vIDxSb3V0ZXM+XG4gICAgLy8gICB7LyogVGhpcyByb3V0ZSBwYXRoIE1VU1QgZW5kIHdpdGggLyogYmVjYXVzZSBvdGhlcndpc2VcbiAgICAvLyAgICAgICBpdCB3aWxsIG5ldmVyIG1hdGNoIC9ibG9nL3Bvc3QvMTIzICovfVxuICAgIC8vICAgPFJvdXRlIHBhdGg9XCJibG9nXCIgZWxlbWVudD17PEJsb2cgLz59IC8+XG4gICAgLy8gICA8Um91dGUgcGF0aD1cImJsb2cvZmVlZFwiIGVsZW1lbnQ9ezxCbG9nRmVlZCAvPn0gLz5cbiAgICAvLyA8L1JvdXRlcz5cbiAgICAvL1xuICAgIC8vIGZ1bmN0aW9uIEJsb2coKSB7XG4gICAgLy8gICByZXR1cm4gKFxuICAgIC8vICAgICA8Um91dGVzPlxuICAgIC8vICAgICAgIDxSb3V0ZSBwYXRoPVwicG9zdC86aWRcIiBlbGVtZW50PXs8UG9zdCAvPn0gLz5cbiAgICAvLyAgICAgPC9Sb3V0ZXM+XG4gICAgLy8gICApO1xuICAgIC8vIH1cbiAgICBsZXQgcGFyZW50UGF0aCA9IHBhcmVudFJvdXRlICYmIHBhcmVudFJvdXRlLnBhdGggfHwgXCJcIjtcbiAgICB3YXJuaW5nT25jZShwYXJlbnRQYXRobmFtZSwgIXBhcmVudFJvdXRlIHx8IHBhcmVudFBhdGguZW5kc1dpdGgoXCIqXCIpLCBcIllvdSByZW5kZXJlZCBkZXNjZW5kYW50IDxSb3V0ZXM+IChvciBjYWxsZWQgYHVzZVJvdXRlcygpYCkgYXQgXCIgKyAoXCJcXFwiXCIgKyBwYXJlbnRQYXRobmFtZSArIFwiXFxcIiAodW5kZXIgPFJvdXRlIHBhdGg9XFxcIlwiICsgcGFyZW50UGF0aCArIFwiXFxcIj4pIGJ1dCB0aGUgXCIpICsgXCJwYXJlbnQgcm91dGUgcGF0aCBoYXMgbm8gdHJhaWxpbmcgXFxcIipcXFwiLiBUaGlzIG1lYW5zIGlmIHlvdSBuYXZpZ2F0ZSBcIiArIFwiZGVlcGVyLCB0aGUgcGFyZW50IHdvbid0IG1hdGNoIGFueW1vcmUgYW5kIHRoZXJlZm9yZSB0aGUgY2hpbGQgXCIgKyBcInJvdXRlcyB3aWxsIG5ldmVyIHJlbmRlci5cXG5cXG5cIiArIChcIlBsZWFzZSBjaGFuZ2UgdGhlIHBhcmVudCA8Um91dGUgcGF0aD1cXFwiXCIgKyBwYXJlbnRQYXRoICsgXCJcXFwiPiB0byA8Um91dGUgXCIpICsgKFwicGF0aD1cXFwiXCIgKyAocGFyZW50UGF0aCA9PT0gXCIvXCIgPyBcIipcIiA6IHBhcmVudFBhdGggKyBcIi8qXCIpICsgXCJcXFwiPi5cIikpO1xuICB9XG5cbiAgbGV0IGxvY2F0aW9uRnJvbUNvbnRleHQgPSB1c2VMb2NhdGlvbigpO1xuICBsZXQgbG9jYXRpb247XG5cbiAgaWYgKGxvY2F0aW9uQXJnKSB7XG4gICAgdmFyIF9wYXJzZWRMb2NhdGlvbkFyZyRwYTtcblxuICAgIGxldCBwYXJzZWRMb2NhdGlvbkFyZyA9IHR5cGVvZiBsb2NhdGlvbkFyZyA9PT0gXCJzdHJpbmdcIiA/IHBhcnNlUGF0aChsb2NhdGlvbkFyZykgOiBsb2NhdGlvbkFyZztcbiAgICAhKHBhcmVudFBhdGhuYW1lQmFzZSA9PT0gXCIvXCIgfHwgKChfcGFyc2VkTG9jYXRpb25BcmckcGEgPSBwYXJzZWRMb2NhdGlvbkFyZy5wYXRobmFtZSkgPT0gbnVsbCA/IHZvaWQgMCA6IF9wYXJzZWRMb2NhdGlvbkFyZyRwYS5zdGFydHNXaXRoKHBhcmVudFBhdGhuYW1lQmFzZSkpKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgXCJXaGVuIG92ZXJyaWRpbmcgdGhlIGxvY2F0aW9uIHVzaW5nIGA8Um91dGVzIGxvY2F0aW9uPmAgb3IgYHVzZVJvdXRlcyhyb3V0ZXMsIGxvY2F0aW9uKWAsIFwiICsgXCJ0aGUgbG9jYXRpb24gcGF0aG5hbWUgbXVzdCBiZWdpbiB3aXRoIHRoZSBwb3J0aW9uIG9mIHRoZSBVUkwgcGF0aG5hbWUgdGhhdCB3YXMgXCIgKyAoXCJtYXRjaGVkIGJ5IGFsbCBwYXJlbnQgcm91dGVzLiBUaGUgY3VycmVudCBwYXRobmFtZSBiYXNlIGlzIFxcXCJcIiArIHBhcmVudFBhdGhuYW1lQmFzZSArIFwiXFxcIiBcIikgKyAoXCJidXQgcGF0aG5hbWUgXFxcIlwiICsgcGFyc2VkTG9jYXRpb25BcmcucGF0aG5hbWUgKyBcIlxcXCIgd2FzIGdpdmVuIGluIHRoZSBgbG9jYXRpb25gIHByb3AuXCIpKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gICAgbG9jYXRpb24gPSBwYXJzZWRMb2NhdGlvbkFyZztcbiAgfSBlbHNlIHtcbiAgICBsb2NhdGlvbiA9IGxvY2F0aW9uRnJvbUNvbnRleHQ7XG4gIH1cblxuICBsZXQgcGF0aG5hbWUgPSBsb2NhdGlvbi5wYXRobmFtZSB8fCBcIi9cIjtcbiAgbGV0IHJlbWFpbmluZ1BhdGhuYW1lID0gcGFyZW50UGF0aG5hbWVCYXNlID09PSBcIi9cIiA/IHBhdGhuYW1lIDogcGF0aG5hbWUuc2xpY2UocGFyZW50UGF0aG5hbWVCYXNlLmxlbmd0aCkgfHwgXCIvXCI7XG4gIGxldCBtYXRjaGVzID0gbWF0Y2hSb3V0ZXMocm91dGVzLCB7XG4gICAgcGF0aG5hbWU6IHJlbWFpbmluZ1BhdGhuYW1lXG4gIH0pO1xuXG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKHBhcmVudFJvdXRlIHx8IG1hdGNoZXMgIT0gbnVsbCwgXCJObyByb3V0ZXMgbWF0Y2hlZCBsb2NhdGlvbiBcXFwiXCIgKyBsb2NhdGlvbi5wYXRobmFtZSArIGxvY2F0aW9uLnNlYXJjaCArIGxvY2F0aW9uLmhhc2ggKyBcIlxcXCIgXCIpIDogdm9pZCAwO1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcobWF0Y2hlcyA9PSBudWxsIHx8IG1hdGNoZXNbbWF0Y2hlcy5sZW5ndGggLSAxXS5yb3V0ZS5lbGVtZW50ICE9PSB1bmRlZmluZWQsIFwiTWF0Y2hlZCBsZWFmIHJvdXRlIGF0IGxvY2F0aW9uIFxcXCJcIiArIGxvY2F0aW9uLnBhdGhuYW1lICsgbG9jYXRpb24uc2VhcmNoICsgbG9jYXRpb24uaGFzaCArIFwiXFxcIiBkb2VzIG5vdCBoYXZlIGFuIGVsZW1lbnQuIFwiICsgXCJUaGlzIG1lYW5zIGl0IHdpbGwgcmVuZGVyIGFuIDxPdXRsZXQgLz4gd2l0aCBhIG51bGwgdmFsdWUgYnkgZGVmYXVsdCByZXN1bHRpbmcgaW4gYW4gXFxcImVtcHR5XFxcIiBwYWdlLlwiKSA6IHZvaWQgMDtcbiAgfVxuXG4gIHJldHVybiBfcmVuZGVyTWF0Y2hlcyhtYXRjaGVzICYmIG1hdGNoZXMubWFwKG1hdGNoID0+IE9iamVjdC5hc3NpZ24oe30sIG1hdGNoLCB7XG4gICAgcGFyYW1zOiBPYmplY3QuYXNzaWduKHt9LCBwYXJlbnRQYXJhbXMsIG1hdGNoLnBhcmFtcyksXG4gICAgcGF0aG5hbWU6IGpvaW5QYXRocyhbcGFyZW50UGF0aG5hbWVCYXNlLCBtYXRjaC5wYXRobmFtZV0pLFxuICAgIHBhdGhuYW1lQmFzZTogbWF0Y2gucGF0aG5hbWVCYXNlID09PSBcIi9cIiA/IHBhcmVudFBhdGhuYW1lQmFzZSA6IGpvaW5QYXRocyhbcGFyZW50UGF0aG5hbWVCYXNlLCBtYXRjaC5wYXRobmFtZUJhc2VdKVxuICB9KSksIHBhcmVudE1hdGNoZXMpO1xufVxuZnVuY3Rpb24gX3JlbmRlck1hdGNoZXMobWF0Y2hlcywgcGFyZW50TWF0Y2hlcykge1xuICBpZiAocGFyZW50TWF0Y2hlcyA9PT0gdm9pZCAwKSB7XG4gICAgcGFyZW50TWF0Y2hlcyA9IFtdO1xuICB9XG5cbiAgaWYgKG1hdGNoZXMgPT0gbnVsbCkgcmV0dXJuIG51bGw7XG4gIHJldHVybiBtYXRjaGVzLnJlZHVjZVJpZ2h0KChvdXRsZXQsIG1hdGNoLCBpbmRleCkgPT4ge1xuICAgIHJldHVybiAvKiNfX1BVUkVfXyovY3JlYXRlRWxlbWVudChSb3V0ZUNvbnRleHQuUHJvdmlkZXIsIHtcbiAgICAgIGNoaWxkcmVuOiBtYXRjaC5yb3V0ZS5lbGVtZW50ICE9PSB1bmRlZmluZWQgPyBtYXRjaC5yb3V0ZS5lbGVtZW50IDogb3V0bGV0LFxuICAgICAgdmFsdWU6IHtcbiAgICAgICAgb3V0bGV0LFxuICAgICAgICBtYXRjaGVzOiBwYXJlbnRNYXRjaGVzLmNvbmNhdChtYXRjaGVzLnNsaWNlKDAsIGluZGV4ICsgMSkpXG4gICAgICB9XG4gICAgfSk7XG4gIH0sIG51bGwpO1xufVxuXG4vKipcbiAqIEEgPFJvdXRlcj4gdGhhdCBzdG9yZXMgYWxsIGVudHJpZXMgaW4gbWVtb3J5LlxuICpcbiAqIEBzZWUgaHR0cHM6Ly9yZWFjdHJvdXRlci5jb20vZG9jcy9lbi92Ni9hcGkjbWVtb3J5cm91dGVyXG4gKi9cbmZ1bmN0aW9uIE1lbW9yeVJvdXRlcihfcmVmKSB7XG4gIGxldCB7XG4gICAgYmFzZW5hbWUsXG4gICAgY2hpbGRyZW4sXG4gICAgaW5pdGlhbEVudHJpZXMsXG4gICAgaW5pdGlhbEluZGV4XG4gIH0gPSBfcmVmO1xuICBsZXQgaGlzdG9yeVJlZiA9IHVzZVJlZigpO1xuXG4gIGlmIChoaXN0b3J5UmVmLmN1cnJlbnQgPT0gbnVsbCkge1xuICAgIGhpc3RvcnlSZWYuY3VycmVudCA9IGNyZWF0ZU1lbW9yeUhpc3Rvcnkoe1xuICAgICAgaW5pdGlhbEVudHJpZXMsXG4gICAgICBpbml0aWFsSW5kZXhcbiAgICB9KTtcbiAgfVxuXG4gIGxldCBoaXN0b3J5ID0gaGlzdG9yeVJlZi5jdXJyZW50O1xuICBsZXQgW3N0YXRlLCBzZXRTdGF0ZV0gPSB1c2VTdGF0ZSh7XG4gICAgYWN0aW9uOiBoaXN0b3J5LmFjdGlvbixcbiAgICBsb2NhdGlvbjogaGlzdG9yeS5sb2NhdGlvblxuICB9KTtcbiAgdXNlTGF5b3V0RWZmZWN0KCgpID0+IGhpc3RvcnkubGlzdGVuKHNldFN0YXRlKSwgW2hpc3RvcnldKTtcbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9jcmVhdGVFbGVtZW50KFJvdXRlciwge1xuICAgIGJhc2VuYW1lOiBiYXNlbmFtZSxcbiAgICBjaGlsZHJlbjogY2hpbGRyZW4sXG4gICAgbG9jYXRpb246IHN0YXRlLmxvY2F0aW9uLFxuICAgIG5hdmlnYXRpb25UeXBlOiBzdGF0ZS5hY3Rpb24sXG4gICAgbmF2aWdhdG9yOiBoaXN0b3J5XG4gIH0pO1xufVxuXG4vKipcbiAqIENoYW5nZXMgdGhlIGN1cnJlbnQgbG9jYXRpb24uXG4gKlxuICogTm90ZTogVGhpcyBBUEkgaXMgbW9zdGx5IHVzZWZ1bCBpbiBSZWFjdC5Db21wb25lbnQgc3ViY2xhc3NlcyB0aGF0IGFyZSBub3RcbiAqIGFibGUgdG8gdXNlIGhvb2tzLiBJbiBmdW5jdGlvbmFsIGNvbXBvbmVudHMsIHdlIHJlY29tbWVuZCB5b3UgdXNlIHRoZVxuICogYHVzZU5hdmlnYXRlYCBob29rIGluc3RlYWQuXG4gKlxuICogQHNlZSBodHRwczovL3JlYWN0cm91dGVyLmNvbS9kb2NzL2VuL3Y2L2FwaSNuYXZpZ2F0ZVxuICovXG5mdW5jdGlvbiBOYXZpZ2F0ZShfcmVmMikge1xuICBsZXQge1xuICAgIHRvLFxuICAgIHJlcGxhY2UsXG4gICAgc3RhdGVcbiAgfSA9IF9yZWYyO1xuICAhdXNlSW5Sb3V0ZXJDb250ZXh0KCkgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsIC8vIFRPRE86IFRoaXMgZXJyb3IgaXMgcHJvYmFibHkgYmVjYXVzZSB0aGV5IHNvbWVob3cgaGF2ZSAyIHZlcnNpb25zIG9mXG4gIC8vIHRoZSByb3V0ZXIgbG9hZGVkLiBXZSBjYW4gaGVscCB0aGVtIHVuZGVyc3RhbmQgaG93IHRvIGF2b2lkIHRoYXQuXG4gIFwiPE5hdmlnYXRlPiBtYXkgYmUgdXNlZCBvbmx5IGluIHRoZSBjb250ZXh0IG9mIGEgPFJvdXRlcj4gY29tcG9uZW50LlwiKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoIXVzZUNvbnRleHQoTmF2aWdhdGlvbkNvbnRleHQpLnN0YXRpYywgXCI8TmF2aWdhdGU+IG11c3Qgbm90IGJlIHVzZWQgb24gdGhlIGluaXRpYWwgcmVuZGVyIGluIGEgPFN0YXRpY1JvdXRlcj4uIFwiICsgXCJUaGlzIGlzIGEgbm8tb3AsIGJ1dCB5b3Ugc2hvdWxkIG1vZGlmeSB5b3VyIGNvZGUgc28gdGhlIDxOYXZpZ2F0ZT4gaXMgXCIgKyBcIm9ubHkgZXZlciByZW5kZXJlZCBpbiByZXNwb25zZSB0byBzb21lIHVzZXIgaW50ZXJhY3Rpb24gb3Igc3RhdGUgY2hhbmdlLlwiKSA6IHZvaWQgMDtcbiAgbGV0IG5hdmlnYXRlID0gdXNlTmF2aWdhdGUoKTtcbiAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICBuYXZpZ2F0ZSh0bywge1xuICAgICAgcmVwbGFjZSxcbiAgICAgIHN0YXRlXG4gICAgfSk7XG4gIH0pO1xuICByZXR1cm4gbnVsbDtcbn1cblxuLyoqXG4gKiBSZW5kZXJzIHRoZSBjaGlsZCByb3V0ZSdzIGVsZW1lbnQsIGlmIHRoZXJlIGlzIG9uZS5cbiAqXG4gKiBAc2VlIGh0dHBzOi8vcmVhY3Ryb3V0ZXIuY29tL2RvY3MvZW4vdjYvYXBpI291dGxldFxuICovXG5mdW5jdGlvbiBPdXRsZXQocHJvcHMpIHtcbiAgcmV0dXJuIHVzZU91dGxldChwcm9wcy5jb250ZXh0KTtcbn1cblxuLyoqXG4gKiBEZWNsYXJlcyBhbiBlbGVtZW50IHRoYXQgc2hvdWxkIGJlIHJlbmRlcmVkIGF0IGEgY2VydGFpbiBVUkwgcGF0aC5cbiAqXG4gKiBAc2VlIGh0dHBzOi8vcmVhY3Ryb3V0ZXIuY29tL2RvY3MvZW4vdjYvYXBpI3JvdXRlXG4gKi9cbmZ1bmN0aW9uIFJvdXRlKF9wcm9wcykge1xuICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCBcIkEgPFJvdXRlPiBpcyBvbmx5IGV2ZXIgdG8gYmUgdXNlZCBhcyB0aGUgY2hpbGQgb2YgPFJvdXRlcz4gZWxlbWVudCwgXCIgKyBcIm5ldmVyIHJlbmRlcmVkIGRpcmVjdGx5LiBQbGVhc2Ugd3JhcCB5b3VyIDxSb3V0ZT4gaW4gYSA8Um91dGVzPi5cIikgOiBpbnZhcmlhbnQoZmFsc2UpIDtcbn1cblxuLyoqXG4gKiBQcm92aWRlcyBsb2NhdGlvbiBjb250ZXh0IGZvciB0aGUgcmVzdCBvZiB0aGUgYXBwLlxuICpcbiAqIE5vdGU6IFlvdSB1c3VhbGx5IHdvbid0IHJlbmRlciBhIDxSb3V0ZXI+IGRpcmVjdGx5LiBJbnN0ZWFkLCB5b3UnbGwgcmVuZGVyIGFcbiAqIHJvdXRlciB0aGF0IGlzIG1vcmUgc3BlY2lmaWMgdG8geW91ciBlbnZpcm9ubWVudCBzdWNoIGFzIGEgPEJyb3dzZXJSb3V0ZXI+XG4gKiBpbiB3ZWIgYnJvd3NlcnMgb3IgYSA8U3RhdGljUm91dGVyPiBmb3Igc2VydmVyIHJlbmRlcmluZy5cbiAqXG4gKiBAc2VlIGh0dHBzOi8vcmVhY3Ryb3V0ZXIuY29tL2RvY3MvZW4vdjYvYXBpI3JvdXRlclxuICovXG5mdW5jdGlvbiBSb3V0ZXIoX3JlZjMpIHtcbiAgbGV0IHtcbiAgICBiYXNlbmFtZTogYmFzZW5hbWVQcm9wID0gXCIvXCIsXG4gICAgY2hpbGRyZW4gPSBudWxsLFxuICAgIGxvY2F0aW9uOiBsb2NhdGlvblByb3AsXG4gICAgbmF2aWdhdGlvblR5cGUgPSBBY3Rpb24uUG9wLFxuICAgIG5hdmlnYXRvcixcbiAgICBzdGF0aWM6IHN0YXRpY1Byb3AgPSBmYWxzZVxuICB9ID0gX3JlZjM7XG4gICEhdXNlSW5Sb3V0ZXJDb250ZXh0KCkgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsIFwiWW91IGNhbm5vdCByZW5kZXIgYSA8Um91dGVyPiBpbnNpZGUgYW5vdGhlciA8Um91dGVyPi5cIiArIFwiIFlvdSBzaG91bGQgbmV2ZXIgaGF2ZSBtb3JlIHRoYW4gb25lIGluIHlvdXIgYXBwLlwiKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gIGxldCBiYXNlbmFtZSA9IG5vcm1hbGl6ZVBhdGhuYW1lKGJhc2VuYW1lUHJvcCk7XG4gIGxldCBuYXZpZ2F0aW9uQ29udGV4dCA9IHVzZU1lbW8oKCkgPT4gKHtcbiAgICBiYXNlbmFtZSxcbiAgICBuYXZpZ2F0b3IsXG4gICAgc3RhdGljOiBzdGF0aWNQcm9wXG4gIH0pLCBbYmFzZW5hbWUsIG5hdmlnYXRvciwgc3RhdGljUHJvcF0pO1xuXG4gIGlmICh0eXBlb2YgbG9jYXRpb25Qcm9wID09PSBcInN0cmluZ1wiKSB7XG4gICAgbG9jYXRpb25Qcm9wID0gcGFyc2VQYXRoKGxvY2F0aW9uUHJvcCk7XG4gIH1cblxuICBsZXQge1xuICAgIHBhdGhuYW1lID0gXCIvXCIsXG4gICAgc2VhcmNoID0gXCJcIixcbiAgICBoYXNoID0gXCJcIixcbiAgICBzdGF0ZSA9IG51bGwsXG4gICAga2V5ID0gXCJkZWZhdWx0XCJcbiAgfSA9IGxvY2F0aW9uUHJvcDtcbiAgbGV0IGxvY2F0aW9uID0gdXNlTWVtbygoKSA9PiB7XG4gICAgbGV0IHRyYWlsaW5nUGF0aG5hbWUgPSBzdHJpcEJhc2VuYW1lKHBhdGhuYW1lLCBiYXNlbmFtZSk7XG5cbiAgICBpZiAodHJhaWxpbmdQYXRobmFtZSA9PSBudWxsKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICByZXR1cm4ge1xuICAgICAgcGF0aG5hbWU6IHRyYWlsaW5nUGF0aG5hbWUsXG4gICAgICBzZWFyY2gsXG4gICAgICBoYXNoLFxuICAgICAgc3RhdGUsXG4gICAgICBrZXlcbiAgICB9O1xuICB9LCBbYmFzZW5hbWUsIHBhdGhuYW1lLCBzZWFyY2gsIGhhc2gsIHN0YXRlLCBrZXldKTtcbiAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyhsb2NhdGlvbiAhPSBudWxsLCBcIjxSb3V0ZXIgYmFzZW5hbWU9XFxcIlwiICsgYmFzZW5hbWUgKyBcIlxcXCI+IGlzIG5vdCBhYmxlIHRvIG1hdGNoIHRoZSBVUkwgXCIgKyAoXCJcXFwiXCIgKyBwYXRobmFtZSArIHNlYXJjaCArIGhhc2ggKyBcIlxcXCIgYmVjYXVzZSBpdCBkb2VzIG5vdCBzdGFydCB3aXRoIHRoZSBcIikgKyBcImJhc2VuYW1lLCBzbyB0aGUgPFJvdXRlcj4gd29uJ3QgcmVuZGVyIGFueXRoaW5nLlwiKSA6IHZvaWQgMDtcblxuICBpZiAobG9jYXRpb24gPT0gbnVsbCkge1xuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9jcmVhdGVFbGVtZW50KE5hdmlnYXRpb25Db250ZXh0LlByb3ZpZGVyLCB7XG4gICAgdmFsdWU6IG5hdmlnYXRpb25Db250ZXh0XG4gIH0sIC8qI19fUFVSRV9fKi9jcmVhdGVFbGVtZW50KExvY2F0aW9uQ29udGV4dC5Qcm92aWRlciwge1xuICAgIGNoaWxkcmVuOiBjaGlsZHJlbixcbiAgICB2YWx1ZToge1xuICAgICAgbG9jYXRpb24sXG4gICAgICBuYXZpZ2F0aW9uVHlwZVxuICAgIH1cbiAgfSkpO1xufVxuXG4vKipcbiAqIEEgY29udGFpbmVyIGZvciBhIG5lc3RlZCB0cmVlIG9mIDxSb3V0ZT4gZWxlbWVudHMgdGhhdCByZW5kZXJzIHRoZSBicmFuY2hcbiAqIHRoYXQgYmVzdCBtYXRjaGVzIHRoZSBjdXJyZW50IGxvY2F0aW9uLlxuICpcbiAqIEBzZWUgaHR0cHM6Ly9yZWFjdHJvdXRlci5jb20vZG9jcy9lbi92Ni9hcGkjcm91dGVzXG4gKi9cbmZ1bmN0aW9uIFJvdXRlcyhfcmVmNCkge1xuICBsZXQge1xuICAgIGNoaWxkcmVuLFxuICAgIGxvY2F0aW9uXG4gIH0gPSBfcmVmNDtcbiAgcmV0dXJuIHVzZVJvdXRlcyhjcmVhdGVSb3V0ZXNGcm9tQ2hpbGRyZW4oY2hpbGRyZW4pLCBsb2NhdGlvbik7XG59IC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFVUSUxTXG4vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5cbi8qKlxuICogQ3JlYXRlcyBhIHJvdXRlIGNvbmZpZyBmcm9tIGEgUmVhY3QgXCJjaGlsZHJlblwiIG9iamVjdCwgd2hpY2ggaXMgdXN1YWxseVxuICogZWl0aGVyIGEgYDxSb3V0ZT5gIGVsZW1lbnQgb3IgYW4gYXJyYXkgb2YgdGhlbS4gVXNlZCBpbnRlcm5hbGx5IGJ5XG4gKiBgPFJvdXRlcz5gIHRvIGNyZWF0ZSBhIHJvdXRlIGNvbmZpZyBmcm9tIGl0cyBjaGlsZHJlbi5cbiAqXG4gKiBAc2VlIGh0dHBzOi8vcmVhY3Ryb3V0ZXIuY29tL2RvY3MvZW4vdjYvYXBpI2NyZWF0ZXJvdXRlc2Zyb21jaGlsZHJlblxuICovXG5cbmZ1bmN0aW9uIGNyZWF0ZVJvdXRlc0Zyb21DaGlsZHJlbihjaGlsZHJlbikge1xuICBsZXQgcm91dGVzID0gW107XG4gIENoaWxkcmVuLmZvckVhY2goY2hpbGRyZW4sIGVsZW1lbnQgPT4ge1xuICAgIGlmICghIC8qI19fUFVSRV9fKi9pc1ZhbGlkRWxlbWVudChlbGVtZW50KSkge1xuICAgICAgLy8gSWdub3JlIG5vbi1lbGVtZW50cy4gVGhpcyBhbGxvd3MgcGVvcGxlIHRvIG1vcmUgZWFzaWx5IGlubGluZVxuICAgICAgLy8gY29uZGl0aW9uYWxzIGluIHRoZWlyIHJvdXRlIGNvbmZpZy5cbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAoZWxlbWVudC50eXBlID09PSBGcmFnbWVudCkge1xuICAgICAgLy8gVHJhbnNwYXJlbnRseSBzdXBwb3J0IFJlYWN0LkZyYWdtZW50IGFuZCBpdHMgY2hpbGRyZW4uXG4gICAgICByb3V0ZXMucHVzaC5hcHBseShyb3V0ZXMsIGNyZWF0ZVJvdXRlc0Zyb21DaGlsZHJlbihlbGVtZW50LnByb3BzLmNoaWxkcmVuKSk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgIShlbGVtZW50LnR5cGUgPT09IFJvdXRlKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgXCJbXCIgKyAodHlwZW9mIGVsZW1lbnQudHlwZSA9PT0gXCJzdHJpbmdcIiA/IGVsZW1lbnQudHlwZSA6IGVsZW1lbnQudHlwZS5uYW1lKSArIFwiXSBpcyBub3QgYSA8Um91dGU+IGNvbXBvbmVudC4gQWxsIGNvbXBvbmVudCBjaGlsZHJlbiBvZiA8Um91dGVzPiBtdXN0IGJlIGEgPFJvdXRlPiBvciA8UmVhY3QuRnJhZ21lbnQ+XCIpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgICBsZXQgcm91dGUgPSB7XG4gICAgICBjYXNlU2Vuc2l0aXZlOiBlbGVtZW50LnByb3BzLmNhc2VTZW5zaXRpdmUsXG4gICAgICBlbGVtZW50OiBlbGVtZW50LnByb3BzLmVsZW1lbnQsXG4gICAgICBpbmRleDogZWxlbWVudC5wcm9wcy5pbmRleCxcbiAgICAgIHBhdGg6IGVsZW1lbnQucHJvcHMucGF0aFxuICAgIH07XG5cbiAgICBpZiAoZWxlbWVudC5wcm9wcy5jaGlsZHJlbikge1xuICAgICAgcm91dGUuY2hpbGRyZW4gPSBjcmVhdGVSb3V0ZXNGcm9tQ2hpbGRyZW4oZWxlbWVudC5wcm9wcy5jaGlsZHJlbik7XG4gICAgfVxuXG4gICAgcm91dGVzLnB1c2gocm91dGUpO1xuICB9KTtcbiAgcmV0dXJuIHJvdXRlcztcbn1cbi8qKlxuICogUmVuZGVycyB0aGUgcmVzdWx0IG9mIGBtYXRjaFJvdXRlcygpYCBpbnRvIGEgUmVhY3QgZWxlbWVudC5cbiAqL1xuXG5mdW5jdGlvbiByZW5kZXJNYXRjaGVzKG1hdGNoZXMpIHtcbiAgcmV0dXJuIF9yZW5kZXJNYXRjaGVzKG1hdGNoZXMpO1xufVxuXG5leHBvcnQgeyBNZW1vcnlSb3V0ZXIsIE5hdmlnYXRlLCBPdXRsZXQsIFJvdXRlLCBSb3V0ZXIsIFJvdXRlcywgTG9jYXRpb25Db250ZXh0IGFzIFVOU0FGRV9Mb2NhdGlvbkNvbnRleHQsIE5hdmlnYXRpb25Db250ZXh0IGFzIFVOU0FGRV9OYXZpZ2F0aW9uQ29udGV4dCwgUm91dGVDb250ZXh0IGFzIFVOU0FGRV9Sb3V0ZUNvbnRleHQsIGNyZWF0ZVJvdXRlc0Zyb21DaGlsZHJlbiwgZ2VuZXJhdGVQYXRoLCBtYXRjaFBhdGgsIG1hdGNoUm91dGVzLCByZW5kZXJNYXRjaGVzLCByZXNvbHZlUGF0aCwgdXNlSHJlZiwgdXNlSW5Sb3V0ZXJDb250ZXh0LCB1c2VMb2NhdGlvbiwgdXNlTWF0Y2gsIHVzZU5hdmlnYXRlLCB1c2VOYXZpZ2F0aW9uVHlwZSwgdXNlT3V0bGV0LCB1c2VPdXRsZXRDb250ZXh0LCB1c2VQYXJhbXMsIHVzZVJlc29sdmVkUGF0aCwgdXNlUm91dGVzIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5qcy5tYXBcbiIsIi8qKlxuICogUmVhY3QgUm91dGVyIERPTSB2Ni4zLjBcbiAqXG4gKiBDb3B5cmlnaHQgKGMpIFJlbWl4IFNvZnR3YXJlIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UubWQgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBAbGljZW5zZSBNSVRcbiAqL1xuaW1wb3J0IHsgdXNlUmVmLCB1c2VTdGF0ZSwgdXNlTGF5b3V0RWZmZWN0LCBjcmVhdGVFbGVtZW50LCBmb3J3YXJkUmVmLCB1c2VDYWxsYmFjaywgdXNlTWVtbyB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IGNyZWF0ZUJyb3dzZXJIaXN0b3J5LCBjcmVhdGVIYXNoSGlzdG9yeSB9IGZyb20gJ2hpc3RvcnknO1xuaW1wb3J0IHsgUm91dGVyLCB1c2VIcmVmLCBjcmVhdGVQYXRoLCB1c2VMb2NhdGlvbiwgdXNlUmVzb2x2ZWRQYXRoLCB1c2VOYXZpZ2F0ZSB9IGZyb20gJ3JlYWN0LXJvdXRlcic7XG5leHBvcnQgeyBNZW1vcnlSb3V0ZXIsIE5hdmlnYXRlLCBOYXZpZ2F0aW9uVHlwZSwgT3V0bGV0LCBSb3V0ZSwgUm91dGVyLCBSb3V0ZXMsIFVOU0FGRV9Mb2NhdGlvbkNvbnRleHQsIFVOU0FGRV9OYXZpZ2F0aW9uQ29udGV4dCwgVU5TQUZFX1JvdXRlQ29udGV4dCwgY3JlYXRlUGF0aCwgY3JlYXRlUm91dGVzRnJvbUNoaWxkcmVuLCBnZW5lcmF0ZVBhdGgsIG1hdGNoUGF0aCwgbWF0Y2hSb3V0ZXMsIHBhcnNlUGF0aCwgcmVuZGVyTWF0Y2hlcywgcmVzb2x2ZVBhdGgsIHVzZUhyZWYsIHVzZUluUm91dGVyQ29udGV4dCwgdXNlTG9jYXRpb24sIHVzZU1hdGNoLCB1c2VOYXZpZ2F0ZSwgdXNlTmF2aWdhdGlvblR5cGUsIHVzZU91dGxldCwgdXNlT3V0bGV0Q29udGV4dCwgdXNlUGFyYW1zLCB1c2VSZXNvbHZlZFBhdGgsIHVzZVJvdXRlcyB9IGZyb20gJ3JlYWN0LXJvdXRlcic7XG5cbmZ1bmN0aW9uIF9leHRlbmRzKCkge1xuICBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gKHRhcmdldCkge1xuICAgIGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldO1xuXG4gICAgICBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7XG4gICAgICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7XG4gICAgICAgICAgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB0YXJnZXQ7XG4gIH07XG5cbiAgcmV0dXJuIF9leHRlbmRzLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG59XG5cbmZ1bmN0aW9uIF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKHNvdXJjZSwgZXhjbHVkZWQpIHtcbiAgaWYgKHNvdXJjZSA9PSBudWxsKSByZXR1cm4ge307XG4gIHZhciB0YXJnZXQgPSB7fTtcbiAgdmFyIHNvdXJjZUtleXMgPSBPYmplY3Qua2V5cyhzb3VyY2UpO1xuICB2YXIga2V5LCBpO1xuXG4gIGZvciAoaSA9IDA7IGkgPCBzb3VyY2VLZXlzLmxlbmd0aDsgaSsrKSB7XG4gICAga2V5ID0gc291cmNlS2V5c1tpXTtcbiAgICBpZiAoZXhjbHVkZWQuaW5kZXhPZihrZXkpID49IDApIGNvbnRpbnVlO1xuICAgIHRhcmdldFtrZXldID0gc291cmNlW2tleV07XG4gIH1cblxuICByZXR1cm4gdGFyZ2V0O1xufVxuXG5jb25zdCBfZXhjbHVkZWQgPSBbXCJvbkNsaWNrXCIsIFwicmVsb2FkRG9jdW1lbnRcIiwgXCJyZXBsYWNlXCIsIFwic3RhdGVcIiwgXCJ0YXJnZXRcIiwgXCJ0b1wiXSxcbiAgICAgIF9leGNsdWRlZDIgPSBbXCJhcmlhLWN1cnJlbnRcIiwgXCJjYXNlU2Vuc2l0aXZlXCIsIFwiY2xhc3NOYW1lXCIsIFwiZW5kXCIsIFwic3R5bGVcIiwgXCJ0b1wiLCBcImNoaWxkcmVuXCJdO1xuXG5mdW5jdGlvbiB3YXJuaW5nKGNvbmQsIG1lc3NhZ2UpIHtcbiAgaWYgKCFjb25kKSB7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWNvbnNvbGVcbiAgICBpZiAodHlwZW9mIGNvbnNvbGUgIT09IFwidW5kZWZpbmVkXCIpIGNvbnNvbGUud2FybihtZXNzYWdlKTtcblxuICAgIHRyeSB7XG4gICAgICAvLyBXZWxjb21lIHRvIGRlYnVnZ2luZyBSZWFjdCBSb3V0ZXIhXG4gICAgICAvL1xuICAgICAgLy8gVGhpcyBlcnJvciBpcyB0aHJvd24gYXMgYSBjb252ZW5pZW5jZSBzbyB5b3UgY2FuIG1vcmUgZWFzaWx5XG4gICAgICAvLyBmaW5kIHRoZSBzb3VyY2UgZm9yIGEgd2FybmluZyB0aGF0IGFwcGVhcnMgaW4gdGhlIGNvbnNvbGUgYnlcbiAgICAgIC8vIGVuYWJsaW5nIFwicGF1c2Ugb24gZXhjZXB0aW9uc1wiIGluIHlvdXIgSmF2YVNjcmlwdCBkZWJ1Z2dlci5cbiAgICAgIHRocm93IG5ldyBFcnJvcihtZXNzYWdlKTsgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWVtcHR5XG4gICAgfSBjYXRjaCAoZSkge31cbiAgfVxufSAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gQ09NUE9ORU5UU1xuLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cblxuLyoqXG4gKiBBIGA8Um91dGVyPmAgZm9yIHVzZSBpbiB3ZWIgYnJvd3NlcnMuIFByb3ZpZGVzIHRoZSBjbGVhbmVzdCBVUkxzLlxuICovXG5mdW5jdGlvbiBCcm93c2VyUm91dGVyKF9yZWYpIHtcbiAgbGV0IHtcbiAgICBiYXNlbmFtZSxcbiAgICBjaGlsZHJlbixcbiAgICB3aW5kb3dcbiAgfSA9IF9yZWY7XG4gIGxldCBoaXN0b3J5UmVmID0gdXNlUmVmKCk7XG5cbiAgaWYgKGhpc3RvcnlSZWYuY3VycmVudCA9PSBudWxsKSB7XG4gICAgaGlzdG9yeVJlZi5jdXJyZW50ID0gY3JlYXRlQnJvd3Nlckhpc3Rvcnkoe1xuICAgICAgd2luZG93XG4gICAgfSk7XG4gIH1cblxuICBsZXQgaGlzdG9yeSA9IGhpc3RvcnlSZWYuY3VycmVudDtcbiAgbGV0IFtzdGF0ZSwgc2V0U3RhdGVdID0gdXNlU3RhdGUoe1xuICAgIGFjdGlvbjogaGlzdG9yeS5hY3Rpb24sXG4gICAgbG9jYXRpb246IGhpc3RvcnkubG9jYXRpb25cbiAgfSk7XG4gIHVzZUxheW91dEVmZmVjdCgoKSA9PiBoaXN0b3J5Lmxpc3RlbihzZXRTdGF0ZSksIFtoaXN0b3J5XSk7XG4gIHJldHVybiAvKiNfX1BVUkVfXyovY3JlYXRlRWxlbWVudChSb3V0ZXIsIHtcbiAgICBiYXNlbmFtZTogYmFzZW5hbWUsXG4gICAgY2hpbGRyZW46IGNoaWxkcmVuLFxuICAgIGxvY2F0aW9uOiBzdGF0ZS5sb2NhdGlvbixcbiAgICBuYXZpZ2F0aW9uVHlwZTogc3RhdGUuYWN0aW9uLFxuICAgIG5hdmlnYXRvcjogaGlzdG9yeVxuICB9KTtcbn1cblxuLyoqXG4gKiBBIGA8Um91dGVyPmAgZm9yIHVzZSBpbiB3ZWIgYnJvd3NlcnMuIFN0b3JlcyB0aGUgbG9jYXRpb24gaW4gdGhlIGhhc2hcbiAqIHBvcnRpb24gb2YgdGhlIFVSTCBzbyBpdCBpcyBub3Qgc2VudCB0byB0aGUgc2VydmVyLlxuICovXG5mdW5jdGlvbiBIYXNoUm91dGVyKF9yZWYyKSB7XG4gIGxldCB7XG4gICAgYmFzZW5hbWUsXG4gICAgY2hpbGRyZW4sXG4gICAgd2luZG93XG4gIH0gPSBfcmVmMjtcbiAgbGV0IGhpc3RvcnlSZWYgPSB1c2VSZWYoKTtcblxuICBpZiAoaGlzdG9yeVJlZi5jdXJyZW50ID09IG51bGwpIHtcbiAgICBoaXN0b3J5UmVmLmN1cnJlbnQgPSBjcmVhdGVIYXNoSGlzdG9yeSh7XG4gICAgICB3aW5kb3dcbiAgICB9KTtcbiAgfVxuXG4gIGxldCBoaXN0b3J5ID0gaGlzdG9yeVJlZi5jdXJyZW50O1xuICBsZXQgW3N0YXRlLCBzZXRTdGF0ZV0gPSB1c2VTdGF0ZSh7XG4gICAgYWN0aW9uOiBoaXN0b3J5LmFjdGlvbixcbiAgICBsb2NhdGlvbjogaGlzdG9yeS5sb2NhdGlvblxuICB9KTtcbiAgdXNlTGF5b3V0RWZmZWN0KCgpID0+IGhpc3RvcnkubGlzdGVuKHNldFN0YXRlKSwgW2hpc3RvcnldKTtcbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9jcmVhdGVFbGVtZW50KFJvdXRlciwge1xuICAgIGJhc2VuYW1lOiBiYXNlbmFtZSxcbiAgICBjaGlsZHJlbjogY2hpbGRyZW4sXG4gICAgbG9jYXRpb246IHN0YXRlLmxvY2F0aW9uLFxuICAgIG5hdmlnYXRpb25UeXBlOiBzdGF0ZS5hY3Rpb24sXG4gICAgbmF2aWdhdG9yOiBoaXN0b3J5XG4gIH0pO1xufVxuXG4vKipcbiAqIEEgYDxSb3V0ZXI+YCB0aGF0IGFjY2VwdHMgYSBwcmUtaW5zdGFudGlhdGVkIGhpc3Rvcnkgb2JqZWN0LiBJdCdzIGltcG9ydGFudFxuICogdG8gbm90ZSB0aGF0IHVzaW5nIHlvdXIgb3duIGhpc3Rvcnkgb2JqZWN0IGlzIGhpZ2hseSBkaXNjb3VyYWdlZCBhbmQgbWF5IGFkZFxuICogdHdvIHZlcnNpb25zIG9mIHRoZSBoaXN0b3J5IGxpYnJhcnkgdG8geW91ciBidW5kbGVzIHVubGVzcyB5b3UgdXNlIHRoZSBzYW1lXG4gKiB2ZXJzaW9uIG9mIHRoZSBoaXN0b3J5IGxpYnJhcnkgdGhhdCBSZWFjdCBSb3V0ZXIgdXNlcyBpbnRlcm5hbGx5LlxuICovXG5mdW5jdGlvbiBIaXN0b3J5Um91dGVyKF9yZWYzKSB7XG4gIGxldCB7XG4gICAgYmFzZW5hbWUsXG4gICAgY2hpbGRyZW4sXG4gICAgaGlzdG9yeVxuICB9ID0gX3JlZjM7XG4gIGNvbnN0IFtzdGF0ZSwgc2V0U3RhdGVdID0gdXNlU3RhdGUoe1xuICAgIGFjdGlvbjogaGlzdG9yeS5hY3Rpb24sXG4gICAgbG9jYXRpb246IGhpc3RvcnkubG9jYXRpb25cbiAgfSk7XG4gIHVzZUxheW91dEVmZmVjdCgoKSA9PiBoaXN0b3J5Lmxpc3RlbihzZXRTdGF0ZSksIFtoaXN0b3J5XSk7XG4gIHJldHVybiAvKiNfX1BVUkVfXyovY3JlYXRlRWxlbWVudChSb3V0ZXIsIHtcbiAgICBiYXNlbmFtZTogYmFzZW5hbWUsXG4gICAgY2hpbGRyZW46IGNoaWxkcmVuLFxuICAgIGxvY2F0aW9uOiBzdGF0ZS5sb2NhdGlvbixcbiAgICBuYXZpZ2F0aW9uVHlwZTogc3RhdGUuYWN0aW9uLFxuICAgIG5hdmlnYXRvcjogaGlzdG9yeVxuICB9KTtcbn1cblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICBIaXN0b3J5Um91dGVyLmRpc3BsYXlOYW1lID0gXCJ1bnN0YWJsZV9IaXN0b3J5Um91dGVyXCI7XG59XG5cbmZ1bmN0aW9uIGlzTW9kaWZpZWRFdmVudChldmVudCkge1xuICByZXR1cm4gISEoZXZlbnQubWV0YUtleSB8fCBldmVudC5hbHRLZXkgfHwgZXZlbnQuY3RybEtleSB8fCBldmVudC5zaGlmdEtleSk7XG59XG5cbi8qKlxuICogVGhlIHB1YmxpYyBBUEkgZm9yIHJlbmRlcmluZyBhIGhpc3RvcnktYXdhcmUgPGE+LlxuICovXG5jb25zdCBMaW5rID0gLyojX19QVVJFX18qL2ZvcndhcmRSZWYoZnVuY3Rpb24gTGlua1dpdGhSZWYoX3JlZjQsIHJlZikge1xuICBsZXQge1xuICAgIG9uQ2xpY2ssXG4gICAgcmVsb2FkRG9jdW1lbnQsXG4gICAgcmVwbGFjZSA9IGZhbHNlLFxuICAgIHN0YXRlLFxuICAgIHRhcmdldCxcbiAgICB0b1xuICB9ID0gX3JlZjQsXG4gICAgICByZXN0ID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UoX3JlZjQsIF9leGNsdWRlZCk7XG5cbiAgbGV0IGhyZWYgPSB1c2VIcmVmKHRvKTtcbiAgbGV0IGludGVybmFsT25DbGljayA9IHVzZUxpbmtDbGlja0hhbmRsZXIodG8sIHtcbiAgICByZXBsYWNlLFxuICAgIHN0YXRlLFxuICAgIHRhcmdldFxuICB9KTtcblxuICBmdW5jdGlvbiBoYW5kbGVDbGljayhldmVudCkge1xuICAgIGlmIChvbkNsaWNrKSBvbkNsaWNrKGV2ZW50KTtcblxuICAgIGlmICghZXZlbnQuZGVmYXVsdFByZXZlbnRlZCAmJiAhcmVsb2FkRG9jdW1lbnQpIHtcbiAgICAgIGludGVybmFsT25DbGljayhldmVudCk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIChcbiAgICAvKiNfX1BVUkVfXyovXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGpzeC1hMTF5L2FuY2hvci1oYXMtY29udGVudFxuICAgIGNyZWF0ZUVsZW1lbnQoXCJhXCIsIF9leHRlbmRzKHt9LCByZXN0LCB7XG4gICAgICBocmVmOiBocmVmLFxuICAgICAgb25DbGljazogaGFuZGxlQ2xpY2ssXG4gICAgICByZWY6IHJlZixcbiAgICAgIHRhcmdldDogdGFyZ2V0XG4gICAgfSkpXG4gICk7XG59KTtcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICBMaW5rLmRpc3BsYXlOYW1lID0gXCJMaW5rXCI7XG59XG5cbi8qKlxuICogQSA8TGluaz4gd3JhcHBlciB0aGF0IGtub3dzIGlmIGl0J3MgXCJhY3RpdmVcIiBvciBub3QuXG4gKi9cbmNvbnN0IE5hdkxpbmsgPSAvKiNfX1BVUkVfXyovZm9yd2FyZFJlZihmdW5jdGlvbiBOYXZMaW5rV2l0aFJlZihfcmVmNSwgcmVmKSB7XG4gIGxldCB7XG4gICAgXCJhcmlhLWN1cnJlbnRcIjogYXJpYUN1cnJlbnRQcm9wID0gXCJwYWdlXCIsXG4gICAgY2FzZVNlbnNpdGl2ZSA9IGZhbHNlLFxuICAgIGNsYXNzTmFtZTogY2xhc3NOYW1lUHJvcCA9IFwiXCIsXG4gICAgZW5kID0gZmFsc2UsXG4gICAgc3R5bGU6IHN0eWxlUHJvcCxcbiAgICB0byxcbiAgICBjaGlsZHJlblxuICB9ID0gX3JlZjUsXG4gICAgICByZXN0ID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UoX3JlZjUsIF9leGNsdWRlZDIpO1xuXG4gIGxldCBsb2NhdGlvbiA9IHVzZUxvY2F0aW9uKCk7XG4gIGxldCBwYXRoID0gdXNlUmVzb2x2ZWRQYXRoKHRvKTtcbiAgbGV0IGxvY2F0aW9uUGF0aG5hbWUgPSBsb2NhdGlvbi5wYXRobmFtZTtcbiAgbGV0IHRvUGF0aG5hbWUgPSBwYXRoLnBhdGhuYW1lO1xuXG4gIGlmICghY2FzZVNlbnNpdGl2ZSkge1xuICAgIGxvY2F0aW9uUGF0aG5hbWUgPSBsb2NhdGlvblBhdGhuYW1lLnRvTG93ZXJDYXNlKCk7XG4gICAgdG9QYXRobmFtZSA9IHRvUGF0aG5hbWUudG9Mb3dlckNhc2UoKTtcbiAgfVxuXG4gIGxldCBpc0FjdGl2ZSA9IGxvY2F0aW9uUGF0aG5hbWUgPT09IHRvUGF0aG5hbWUgfHwgIWVuZCAmJiBsb2NhdGlvblBhdGhuYW1lLnN0YXJ0c1dpdGgodG9QYXRobmFtZSkgJiYgbG9jYXRpb25QYXRobmFtZS5jaGFyQXQodG9QYXRobmFtZS5sZW5ndGgpID09PSBcIi9cIjtcbiAgbGV0IGFyaWFDdXJyZW50ID0gaXNBY3RpdmUgPyBhcmlhQ3VycmVudFByb3AgOiB1bmRlZmluZWQ7XG4gIGxldCBjbGFzc05hbWU7XG5cbiAgaWYgKHR5cGVvZiBjbGFzc05hbWVQcm9wID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICBjbGFzc05hbWUgPSBjbGFzc05hbWVQcm9wKHtcbiAgICAgIGlzQWN0aXZlXG4gICAgfSk7XG4gIH0gZWxzZSB7XG4gICAgLy8gSWYgdGhlIGNsYXNzTmFtZSBwcm9wIGlzIG5vdCBhIGZ1bmN0aW9uLCB3ZSB1c2UgYSBkZWZhdWx0IGBhY3RpdmVgXG4gICAgLy8gY2xhc3MgZm9yIDxOYXZMaW5rIC8+cyB0aGF0IGFyZSBhY3RpdmUuIEluIHY1IGBhY3RpdmVgIHdhcyB0aGUgZGVmYXVsdFxuICAgIC8vIHZhbHVlIGZvciBgYWN0aXZlQ2xhc3NOYW1lYCwgYnV0IHdlIGFyZSByZW1vdmluZyB0aGF0IEFQSSBhbmQgY2FuIHN0aWxsXG4gICAgLy8gdXNlIHRoZSBvbGQgZGVmYXVsdCBiZWhhdmlvciBmb3IgYSBjbGVhbmVyIHVwZ3JhZGUgcGF0aCBhbmQga2VlcCB0aGVcbiAgICAvLyBzaW1wbGUgc3R5bGluZyBydWxlcyB3b3JraW5nIGFzIHRoZXkgY3VycmVudGx5IGRvLlxuICAgIGNsYXNzTmFtZSA9IFtjbGFzc05hbWVQcm9wLCBpc0FjdGl2ZSA/IFwiYWN0aXZlXCIgOiBudWxsXS5maWx0ZXIoQm9vbGVhbikuam9pbihcIiBcIik7XG4gIH1cblxuICBsZXQgc3R5bGUgPSB0eXBlb2Ygc3R5bGVQcm9wID09PSBcImZ1bmN0aW9uXCIgPyBzdHlsZVByb3Aoe1xuICAgIGlzQWN0aXZlXG4gIH0pIDogc3R5bGVQcm9wO1xuICByZXR1cm4gLyojX19QVVJFX18qL2NyZWF0ZUVsZW1lbnQoTGluaywgX2V4dGVuZHMoe30sIHJlc3QsIHtcbiAgICBcImFyaWEtY3VycmVudFwiOiBhcmlhQ3VycmVudCxcbiAgICBjbGFzc05hbWU6IGNsYXNzTmFtZSxcbiAgICByZWY6IHJlZixcbiAgICBzdHlsZTogc3R5bGUsXG4gICAgdG86IHRvXG4gIH0pLCB0eXBlb2YgY2hpbGRyZW4gPT09IFwiZnVuY3Rpb25cIiA/IGNoaWxkcmVuKHtcbiAgICBpc0FjdGl2ZVxuICB9KSA6IGNoaWxkcmVuKTtcbn0pO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gIE5hdkxpbmsuZGlzcGxheU5hbWUgPSBcIk5hdkxpbmtcIjtcbn0gLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIEhPT0tTXG4vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuXG4vKipcbiAqIEhhbmRsZXMgdGhlIGNsaWNrIGJlaGF2aW9yIGZvciByb3V0ZXIgYDxMaW5rPmAgY29tcG9uZW50cy4gVGhpcyBpcyB1c2VmdWwgaWZcbiAqIHlvdSBuZWVkIHRvIGNyZWF0ZSBjdXN0b20gYDxMaW5rPmAgY29tcG9uZW50cyB3aXRoIHRoZSBzYW1lIGNsaWNrIGJlaGF2aW9yIHdlXG4gKiB1c2UgaW4gb3VyIGV4cG9ydGVkIGA8TGluaz5gLlxuICovXG5cblxuZnVuY3Rpb24gdXNlTGlua0NsaWNrSGFuZGxlcih0bywgX3RlbXApIHtcbiAgbGV0IHtcbiAgICB0YXJnZXQsXG4gICAgcmVwbGFjZTogcmVwbGFjZVByb3AsXG4gICAgc3RhdGVcbiAgfSA9IF90ZW1wID09PSB2b2lkIDAgPyB7fSA6IF90ZW1wO1xuICBsZXQgbmF2aWdhdGUgPSB1c2VOYXZpZ2F0ZSgpO1xuICBsZXQgbG9jYXRpb24gPSB1c2VMb2NhdGlvbigpO1xuICBsZXQgcGF0aCA9IHVzZVJlc29sdmVkUGF0aCh0byk7XG4gIHJldHVybiB1c2VDYWxsYmFjayhldmVudCA9PiB7XG4gICAgaWYgKGV2ZW50LmJ1dHRvbiA9PT0gMCAmJiAoIC8vIElnbm9yZSBldmVyeXRoaW5nIGJ1dCBsZWZ0IGNsaWNrc1xuICAgICF0YXJnZXQgfHwgdGFyZ2V0ID09PSBcIl9zZWxmXCIpICYmIC8vIExldCBicm93c2VyIGhhbmRsZSBcInRhcmdldD1fYmxhbmtcIiBldGMuXG4gICAgIWlzTW9kaWZpZWRFdmVudChldmVudCkgLy8gSWdub3JlIGNsaWNrcyB3aXRoIG1vZGlmaWVyIGtleXNcbiAgICApIHtcbiAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7IC8vIElmIHRoZSBVUkwgaGFzbid0IGNoYW5nZWQsIGEgcmVndWxhciA8YT4gd2lsbCBkbyBhIHJlcGxhY2UgaW5zdGVhZCBvZlxuICAgICAgLy8gYSBwdXNoLCBzbyBkbyB0aGUgc2FtZSBoZXJlLlxuXG4gICAgICBsZXQgcmVwbGFjZSA9ICEhcmVwbGFjZVByb3AgfHwgY3JlYXRlUGF0aChsb2NhdGlvbikgPT09IGNyZWF0ZVBhdGgocGF0aCk7XG4gICAgICBuYXZpZ2F0ZSh0bywge1xuICAgICAgICByZXBsYWNlLFxuICAgICAgICBzdGF0ZVxuICAgICAgfSk7XG4gICAgfVxuICB9LCBbbG9jYXRpb24sIG5hdmlnYXRlLCBwYXRoLCByZXBsYWNlUHJvcCwgc3RhdGUsIHRhcmdldCwgdG9dKTtcbn1cbi8qKlxuICogQSBjb252ZW5pZW50IHdyYXBwZXIgZm9yIHJlYWRpbmcgYW5kIHdyaXRpbmcgc2VhcmNoIHBhcmFtZXRlcnMgdmlhIHRoZVxuICogVVJMU2VhcmNoUGFyYW1zIGludGVyZmFjZS5cbiAqL1xuXG5mdW5jdGlvbiB1c2VTZWFyY2hQYXJhbXMoZGVmYXVsdEluaXQpIHtcbiAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyh0eXBlb2YgVVJMU2VhcmNoUGFyYW1zICE9PSBcInVuZGVmaW5lZFwiLCBcIllvdSBjYW5ub3QgdXNlIHRoZSBgdXNlU2VhcmNoUGFyYW1zYCBob29rIGluIGEgYnJvd3NlciB0aGF0IGRvZXMgbm90IFwiICsgXCJzdXBwb3J0IHRoZSBVUkxTZWFyY2hQYXJhbXMgQVBJLiBJZiB5b3UgbmVlZCB0byBzdXBwb3J0IEludGVybmV0IFwiICsgXCJFeHBsb3JlciAxMSwgd2UgcmVjb21tZW5kIHlvdSBsb2FkIGEgcG9seWZpbGwgc3VjaCBhcyBcIiArIFwiaHR0cHM6Ly9naXRodWIuY29tL3VuZ2FwL3VybC1zZWFyY2gtcGFyYW1zXFxuXFxuXCIgKyBcIklmIHlvdSdyZSB1bnN1cmUgaG93IHRvIGxvYWQgcG9seWZpbGxzLCB3ZSByZWNvbW1lbmQgeW91IGNoZWNrIG91dCBcIiArIFwiaHR0cHM6Ly9wb2x5ZmlsbC5pby92My8gd2hpY2ggcHJvdmlkZXMgc29tZSByZWNvbW1lbmRhdGlvbnMgYWJvdXQgaG93IFwiICsgXCJ0byBsb2FkIHBvbHlmaWxscyBvbmx5IGZvciB1c2VycyB0aGF0IG5lZWQgdGhlbSwgaW5zdGVhZCBvZiBmb3IgZXZlcnkgXCIgKyBcInVzZXIuXCIpIDogdm9pZCAwO1xuICBsZXQgZGVmYXVsdFNlYXJjaFBhcmFtc1JlZiA9IHVzZVJlZihjcmVhdGVTZWFyY2hQYXJhbXMoZGVmYXVsdEluaXQpKTtcbiAgbGV0IGxvY2F0aW9uID0gdXNlTG9jYXRpb24oKTtcbiAgbGV0IHNlYXJjaFBhcmFtcyA9IHVzZU1lbW8oKCkgPT4ge1xuICAgIGxldCBzZWFyY2hQYXJhbXMgPSBjcmVhdGVTZWFyY2hQYXJhbXMobG9jYXRpb24uc2VhcmNoKTtcblxuICAgIGZvciAobGV0IGtleSBvZiBkZWZhdWx0U2VhcmNoUGFyYW1zUmVmLmN1cnJlbnQua2V5cygpKSB7XG4gICAgICBpZiAoIXNlYXJjaFBhcmFtcy5oYXMoa2V5KSkge1xuICAgICAgICBkZWZhdWx0U2VhcmNoUGFyYW1zUmVmLmN1cnJlbnQuZ2V0QWxsKGtleSkuZm9yRWFjaCh2YWx1ZSA9PiB7XG4gICAgICAgICAgc2VhcmNoUGFyYW1zLmFwcGVuZChrZXksIHZhbHVlKTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHNlYXJjaFBhcmFtcztcbiAgfSwgW2xvY2F0aW9uLnNlYXJjaF0pO1xuICBsZXQgbmF2aWdhdGUgPSB1c2VOYXZpZ2F0ZSgpO1xuICBsZXQgc2V0U2VhcmNoUGFyYW1zID0gdXNlQ2FsbGJhY2soKG5leHRJbml0LCBuYXZpZ2F0ZU9wdGlvbnMpID0+IHtcbiAgICBuYXZpZ2F0ZShcIj9cIiArIGNyZWF0ZVNlYXJjaFBhcmFtcyhuZXh0SW5pdCksIG5hdmlnYXRlT3B0aW9ucyk7XG4gIH0sIFtuYXZpZ2F0ZV0pO1xuICByZXR1cm4gW3NlYXJjaFBhcmFtcywgc2V0U2VhcmNoUGFyYW1zXTtcbn1cblxuLyoqXG4gKiBDcmVhdGVzIGEgVVJMU2VhcmNoUGFyYW1zIG9iamVjdCB1c2luZyB0aGUgZ2l2ZW4gaW5pdGlhbGl6ZXIuXG4gKlxuICogVGhpcyBpcyBpZGVudGljYWwgdG8gYG5ldyBVUkxTZWFyY2hQYXJhbXMoaW5pdClgIGV4Y2VwdCBpdCBhbHNvXG4gKiBzdXBwb3J0cyBhcnJheXMgYXMgdmFsdWVzIGluIHRoZSBvYmplY3QgZm9ybSBvZiB0aGUgaW5pdGlhbGl6ZXJcbiAqIGluc3RlYWQgb2YganVzdCBzdHJpbmdzLiBUaGlzIGlzIGNvbnZlbmllbnQgd2hlbiB5b3UgbmVlZCBtdWx0aXBsZVxuICogdmFsdWVzIGZvciBhIGdpdmVuIGtleSwgYnV0IGRvbid0IHdhbnQgdG8gdXNlIGFuIGFycmF5IGluaXRpYWxpemVyLlxuICpcbiAqIEZvciBleGFtcGxlLCBpbnN0ZWFkIG9mOlxuICpcbiAqICAgbGV0IHNlYXJjaFBhcmFtcyA9IG5ldyBVUkxTZWFyY2hQYXJhbXMoW1xuICogICAgIFsnc29ydCcsICduYW1lJ10sXG4gKiAgICAgWydzb3J0JywgJ3ByaWNlJ11cbiAqICAgXSk7XG4gKlxuICogeW91IGNhbiBkbzpcbiAqXG4gKiAgIGxldCBzZWFyY2hQYXJhbXMgPSBjcmVhdGVTZWFyY2hQYXJhbXMoe1xuICogICAgIHNvcnQ6IFsnbmFtZScsICdwcmljZSddXG4gKiAgIH0pO1xuICovXG5mdW5jdGlvbiBjcmVhdGVTZWFyY2hQYXJhbXMoaW5pdCkge1xuICBpZiAoaW5pdCA9PT0gdm9pZCAwKSB7XG4gICAgaW5pdCA9IFwiXCI7XG4gIH1cblxuICByZXR1cm4gbmV3IFVSTFNlYXJjaFBhcmFtcyh0eXBlb2YgaW5pdCA9PT0gXCJzdHJpbmdcIiB8fCBBcnJheS5pc0FycmF5KGluaXQpIHx8IGluaXQgaW5zdGFuY2VvZiBVUkxTZWFyY2hQYXJhbXMgPyBpbml0IDogT2JqZWN0LmtleXMoaW5pdCkucmVkdWNlKChtZW1vLCBrZXkpID0+IHtcbiAgICBsZXQgdmFsdWUgPSBpbml0W2tleV07XG4gICAgcmV0dXJuIG1lbW8uY29uY2F0KEFycmF5LmlzQXJyYXkodmFsdWUpID8gdmFsdWUubWFwKHYgPT4gW2tleSwgdl0pIDogW1trZXksIHZhbHVlXV0pO1xuICB9LCBbXSkpO1xufVxuXG5leHBvcnQgeyBCcm93c2VyUm91dGVyLCBIYXNoUm91dGVyLCBMaW5rLCBOYXZMaW5rLCBjcmVhdGVTZWFyY2hQYXJhbXMsIEhpc3RvcnlSb3V0ZXIgYXMgdW5zdGFibGVfSGlzdG9yeVJvdXRlciwgdXNlTGlua0NsaWNrSGFuZGxlciwgdXNlU2VhcmNoUGFyYW1zIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5qcy5tYXBcbiIsImZ1bmN0aW9uIGFzeW5jR2VuZXJhdG9yU3RlcChnZW4sIHJlc29sdmUsIHJlamVjdCwgX25leHQsIF90aHJvdywga2V5LCBhcmcpIHtcbiAgdHJ5IHtcbiAgICB2YXIgaW5mbyA9IGdlbltrZXldKGFyZyk7XG4gICAgdmFyIHZhbHVlID0gaW5mby52YWx1ZTtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICByZWplY3QoZXJyb3IpO1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGlmIChpbmZvLmRvbmUpIHtcbiAgICByZXNvbHZlKHZhbHVlKTtcbiAgfSBlbHNlIHtcbiAgICBQcm9taXNlLnJlc29sdmUodmFsdWUpLnRoZW4oX25leHQsIF90aHJvdyk7XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gX2FzeW5jVG9HZW5lcmF0b3IoZm4pIHtcbiAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgc2VsZiA9IHRoaXMsXG4gICAgICAgIGFyZ3MgPSBhcmd1bWVudHM7XG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgIHZhciBnZW4gPSBmbi5hcHBseShzZWxmLCBhcmdzKTtcblxuICAgICAgZnVuY3Rpb24gX25leHQodmFsdWUpIHtcbiAgICAgICAgYXN5bmNHZW5lcmF0b3JTdGVwKGdlbiwgcmVzb2x2ZSwgcmVqZWN0LCBfbmV4dCwgX3Rocm93LCBcIm5leHRcIiwgdmFsdWUpO1xuICAgICAgfVxuXG4gICAgICBmdW5jdGlvbiBfdGhyb3coZXJyKSB7XG4gICAgICAgIGFzeW5jR2VuZXJhdG9yU3RlcChnZW4sIHJlc29sdmUsIHJlamVjdCwgX25leHQsIF90aHJvdywgXCJ0aHJvd1wiLCBlcnIpO1xuICAgICAgfVxuXG4gICAgICBfbmV4dCh1bmRlZmluZWQpO1xuICAgIH0pO1xuICB9O1xufSIsImltcG9ydCB7IGNyZWF0ZUNvbnRleHQgfSBmcm9tICdyZWFjdCc7XG5cbmNvbnN0IFVzZXJDb250ZXh0ID0gY3JlYXRlQ29udGV4dCgpO1xuXG5leHBvcnQgZGVmYXVsdCBVc2VyQ29udGV4dDtcbiIsImltcG9ydCBSZWFjdCwgeyB1c2VDb250ZXh0IH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgTGluaywgdXNlTmF2aWdhdGUgfSBmcm9tICdyZWFjdC1yb3V0ZXItZG9tJztcblxuaW1wb3J0IFVzZXJDb250ZXh0IGZyb20gJy4vVXNlckRldGFpbHMnO1xuXG5jb25zdCBMb2dpbiA9ICgpID0+IHtcbiAgbGV0IG5hdmlnYXRlID0gdXNlTmF2aWdhdGUoKTtcblxuICAvLyBmdW5jdGlvbiBsb2dpbkNsaWNrKCkge1xuICAvLyAgIG5hdmlnYXRlKCcvaG9tZScpO1xuICAvLyB9XG5cbiAgY29uc3QgaGFuZGxlU3VibWl0ID0gYXN5bmMgKGUpID0+IHtcbiAgICBlLnByZXZlbnREZWZhdWx0KCk7IC8vU28gdGhhdCBmb3JtIHN1Ym1pc3Npb24gZG9lc24ndCB0cmlnZ2VyIGEgcGFnZSByZWZyZXNoXG4gICAgY29uc3QgdXNlciA9IHsgdXNlcm5hbWUsIHBhc3N3b3JkIH07XG4gICAgLy8gc2VuZCB0aGUgdXNlcm5hbWUgYW5kIHBhc3N3b3JkIHRvIHRoZSBzZXJ2ZXJcbiAgICB0cnkge1xuICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBmZXRjaCgnL2xvZ2luJywge1xuICAgICAgICBtZXRob2Q6ICdQT1NUJywgLy8gb3IgJ1BVVCdcbiAgICAgICAgaGVhZGVyczoge1xuICAgICAgICAgICdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24vanNvbicsXG4gICAgICAgIH0sXG4gICAgICAgIGJvZHk6IEpTT04uc3RyaW5naWZ5KHVzZXIpLFxuICAgICAgfSk7XG4gICAgICBjb25zdCByZXNwb25zZUJvZHkgPSBhd2FpdCByZXNwb25zZS5qc29uKCk7XG4gICAgfSBjYXRjaCB7fVxuICB9O1xuXG4gIHJldHVybiAoXG4gICAgPGRpdiBjbGFzc05hbWU9XCJsb2dpblwiPlxuICAgICAgPGgxPkxvZ2luIFBhZ2U8L2gxPlxuXG4gICAgICA8ZGl2PlxuICAgICAgICA8Zm9ybSBvblN1Ym1pdD17aGFuZGxlU3VibWl0fT5cbiAgICAgICAgICA8aW5wdXRcbiAgICAgICAgICAgIG5hbWU9XCJ1c2VybmFtZVwiXG4gICAgICAgICAgICB0eXBlPVwidGV4dFwiXG4gICAgICAgICAgICBwbGFjZWhvbGRlcj1cInVzZXJuYW1lXCJcbiAgICAgICAgICAgIG9uQ2hhbmdlPXsoeyB0YXJnZXQgfSkgPT4gc2V0VXNlcm5hbWUodGFyZ2V0LnZhbHVlKX1cbiAgICAgICAgICA+PC9pbnB1dD5cbiAgICAgICAgICA8aW5wdXRcbiAgICAgICAgICAgIG5hbWU9XCJwYXNzd29yZFwiXG4gICAgICAgICAgICB0eXBlPVwicGFzc3dvcmRcIlxuICAgICAgICAgICAgcGxhY2Vob2xkZXI9XCJwYXNzd29yZFwiXG4gICAgICAgICAgICBvbkNoYW5nZT17KHsgdGFyZ2V0IH0pID0+IHNldFBhc3N3b3JkKHRhcmdldC52YWx1ZSl9XG4gICAgICAgICAgPjwvaW5wdXQ+XG4gICAgICAgICAgPGlucHV0IHR5cGU9XCJzdWJtaXRcIiB2YWx1ZT1cIkxvZ2luXCI+PC9pbnB1dD5cbiAgICAgICAgPC9mb3JtPlxuICAgICAgPC9kaXY+XG4gICAgPC9kaXY+XG4gICk7XG59O1xuXG5leHBvcnQgZGVmYXVsdCBMb2dpbjtcbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIF9hcnJheUxpa2VUb0FycmF5KGFyciwgbGVuKSB7XG4gIGlmIChsZW4gPT0gbnVsbCB8fCBsZW4gPiBhcnIubGVuZ3RoKSBsZW4gPSBhcnIubGVuZ3RoO1xuXG4gIGZvciAodmFyIGkgPSAwLCBhcnIyID0gbmV3IEFycmF5KGxlbik7IGkgPCBsZW47IGkrKykge1xuICAgIGFycjJbaV0gPSBhcnJbaV07XG4gIH1cblxuICByZXR1cm4gYXJyMjtcbn0iLCJpbXBvcnQgYXJyYXlMaWtlVG9BcnJheSBmcm9tIFwiLi9hcnJheUxpa2VUb0FycmF5LmpzXCI7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBfdW5zdXBwb3J0ZWRJdGVyYWJsZVRvQXJyYXkobywgbWluTGVuKSB7XG4gIGlmICghbykgcmV0dXJuO1xuICBpZiAodHlwZW9mIG8gPT09IFwic3RyaW5nXCIpIHJldHVybiBhcnJheUxpa2VUb0FycmF5KG8sIG1pbkxlbik7XG4gIHZhciBuID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKG8pLnNsaWNlKDgsIC0xKTtcbiAgaWYgKG4gPT09IFwiT2JqZWN0XCIgJiYgby5jb25zdHJ1Y3RvcikgbiA9IG8uY29uc3RydWN0b3IubmFtZTtcbiAgaWYgKG4gPT09IFwiTWFwXCIgfHwgbiA9PT0gXCJTZXRcIikgcmV0dXJuIEFycmF5LmZyb20obyk7XG4gIGlmIChuID09PSBcIkFyZ3VtZW50c1wiIHx8IC9eKD86VWl8SSludCg/Ojh8MTZ8MzIpKD86Q2xhbXBlZCk/QXJyYXkkLy50ZXN0KG4pKSByZXR1cm4gYXJyYXlMaWtlVG9BcnJheShvLCBtaW5MZW4pO1xufSIsImltcG9ydCBhcnJheVdpdGhIb2xlcyBmcm9tIFwiLi9hcnJheVdpdGhIb2xlcy5qc1wiO1xuaW1wb3J0IGl0ZXJhYmxlVG9BcnJheUxpbWl0IGZyb20gXCIuL2l0ZXJhYmxlVG9BcnJheUxpbWl0LmpzXCI7XG5pbXBvcnQgdW5zdXBwb3J0ZWRJdGVyYWJsZVRvQXJyYXkgZnJvbSBcIi4vdW5zdXBwb3J0ZWRJdGVyYWJsZVRvQXJyYXkuanNcIjtcbmltcG9ydCBub25JdGVyYWJsZVJlc3QgZnJvbSBcIi4vbm9uSXRlcmFibGVSZXN0LmpzXCI7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBfc2xpY2VkVG9BcnJheShhcnIsIGkpIHtcbiAgcmV0dXJuIGFycmF5V2l0aEhvbGVzKGFycikgfHwgaXRlcmFibGVUb0FycmF5TGltaXQoYXJyLCBpKSB8fCB1bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheShhcnIsIGkpIHx8IG5vbkl0ZXJhYmxlUmVzdCgpO1xufSIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIF9hcnJheVdpdGhIb2xlcyhhcnIpIHtcbiAgaWYgKEFycmF5LmlzQXJyYXkoYXJyKSkgcmV0dXJuIGFycjtcbn0iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBfaXRlcmFibGVUb0FycmF5TGltaXQoYXJyLCBpKSB7XG4gIHZhciBfaSA9IGFyciA9PSBudWxsID8gbnVsbCA6IHR5cGVvZiBTeW1ib2wgIT09IFwidW5kZWZpbmVkXCIgJiYgYXJyW1N5bWJvbC5pdGVyYXRvcl0gfHwgYXJyW1wiQEBpdGVyYXRvclwiXTtcblxuICBpZiAoX2kgPT0gbnVsbCkgcmV0dXJuO1xuICB2YXIgX2FyciA9IFtdO1xuICB2YXIgX24gPSB0cnVlO1xuICB2YXIgX2QgPSBmYWxzZTtcblxuICB2YXIgX3MsIF9lO1xuXG4gIHRyeSB7XG4gICAgZm9yIChfaSA9IF9pLmNhbGwoYXJyKTsgIShfbiA9IChfcyA9IF9pLm5leHQoKSkuZG9uZSk7IF9uID0gdHJ1ZSkge1xuICAgICAgX2Fyci5wdXNoKF9zLnZhbHVlKTtcblxuICAgICAgaWYgKGkgJiYgX2Fyci5sZW5ndGggPT09IGkpIGJyZWFrO1xuICAgIH1cbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgX2QgPSB0cnVlO1xuICAgIF9lID0gZXJyO1xuICB9IGZpbmFsbHkge1xuICAgIHRyeSB7XG4gICAgICBpZiAoIV9uICYmIF9pW1wicmV0dXJuXCJdICE9IG51bGwpIF9pW1wicmV0dXJuXCJdKCk7XG4gICAgfSBmaW5hbGx5IHtcbiAgICAgIGlmIChfZCkgdGhyb3cgX2U7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIF9hcnI7XG59IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gX25vbkl0ZXJhYmxlUmVzdCgpIHtcbiAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkludmFsaWQgYXR0ZW1wdCB0byBkZXN0cnVjdHVyZSBub24taXRlcmFibGUgaW5zdGFuY2UuXFxuSW4gb3JkZXIgdG8gYmUgaXRlcmFibGUsIG5vbi1hcnJheSBvYmplY3RzIG11c3QgaGF2ZSBhIFtTeW1ib2wuaXRlcmF0b3JdKCkgbWV0aG9kLlwiKTtcbn0iLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgTGluaywgdXNlTmF2aWdhdGUgfSBmcm9tICdyZWFjdC1yb3V0ZXItZG9tJztcblxuY29uc3QgTG9naW4gPSAoKSA9PiB7XG4gIGNvbnN0IFt1c2VybmFtZSwgc2V0VXNlcm5hbWVdID0gdXNlU3RhdGUoJycpO1xuICBjb25zdCBbcGFzc3dvcmQsIHNldFBhc3N3b3JkXSA9IHVzZVN0YXRlKCcnKTtcbiAgY29uc3QgW3N0YXRlLCBzZXRTZXRTdGF0ZV0gPSB1c2VTdGF0ZSgpO1xuICBsZXQgbmF2aWdhdGUgPSB1c2VOYXZpZ2F0ZSgpO1xuICBjb25zb2xlLmxvZygnY3JlYXRlVXNlcicpO1xuICAvLyBmdW5jdGlvbiBsb2dpbkNsaWNrKCkge1xuICAvLyAgIG5hdmlnYXRlKCcvaG9tZScpO1xuICAvLyB9XG5cbiAgY29uc3QgaGFuZGxlU3VibWl0ID0gYXN5bmMgKGUpID0+IHtcbiAgICBlLnByZXZlbnREZWZhdWx0KCk7IC8vU28gdGhhdCBmb3JtIHN1Ym1pc3Npb24gZG9lc24ndCB0cmlnZ2VyIGEgcGFnZSByZWZyZXNoXG4gICAgY29uc3QgdXNlciA9IHsgdXNlcm5hbWUsIHBhc3N3b3JkIH07XG4gICAgLy8gc2VuZCB0aGUgdXNlcm5hbWUgYW5kIHBhc3N3b3JkIHRvIHRoZSBzZXJ2ZXJcbiAgICB0cnkge1xuICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBmZXRjaCgnL2NyZWF0ZXVzZXInLCB7XG4gICAgICAgIG1ldGhvZDogJ1BPU1QnLCAvLyBvciAnUFVUJ1xuICAgICAgICBoZWFkZXJzOiB7XG4gICAgICAgICAgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uJyxcbiAgICAgICAgfSxcbiAgICAgICAgYm9keTogSlNPTi5zdHJpbmdpZnkodXNlciksXG4gICAgICB9KTtcbiAgICAgIGNvbnN0IHJlc3BvbnNlQm9keSA9IGF3YWl0IHJlc3BvbnNlLmpzb24oKTtcbiAgICB9IGNhdGNoIHt9XG4gIH07XG5cbiAgcmV0dXJuIChcbiAgICA8ZGl2IGNsYXNzTmFtZT0nY3JlYXRldXNlcic+XG4gICAgICA8aDE+Q3JlYXRlIFVzZXIgUGFnZTwvaDE+XG5cbiAgICAgIDxkaXY+XG4gICAgICAgIDxmb3JtIG9uU3VibWl0PXtoYW5kbGVTdWJtaXR9PlxuICAgICAgICAgIDxpbnB1dFxuICAgICAgICAgICAgbmFtZT0ndXNlcm5hbWUnXG4gICAgICAgICAgICB0eXBlPSd0ZXh0J1xuICAgICAgICAgICAgcGxhY2Vob2xkZXI9J3VzZXJuYW1lJ1xuICAgICAgICAgICAgb25DaGFuZ2U9eyh7IHRhcmdldCB9KSA9PiBzZXRVc2VybmFtZSh0YXJnZXQudmFsdWUpfVxuICAgICAgICAgID48L2lucHV0PlxuICAgICAgICAgIDxpbnB1dFxuICAgICAgICAgICAgbmFtZT0ncGFzc3dvcmQnXG4gICAgICAgICAgICB0eXBlPSdwYXNzd29yZCdcbiAgICAgICAgICAgIHBsYWNlaG9sZGVyPSdwYXNzd29yZCdcbiAgICAgICAgICAgIG9uQ2hhbmdlPXsoeyB0YXJnZXQgfSkgPT4gc2V0UGFzc3dvcmQodGFyZ2V0LnZhbHVlKX1cbiAgICAgICAgICA+PC9pbnB1dD5cbiAgICAgICAgICA8aW5wdXRcbiAgICAgICAgICAgIG5hbWU9J3N0YXRlJ1xuICAgICAgICAgICAgdHlwZT0ndGV4dCdcbiAgICAgICAgICAgIHBsYWNlaG9sZGVyPSdzdGF0ZSdcbiAgICAgICAgICAgIG9uQ2hhbmdlPXsoeyB0YXJnZXQgfSkgPT4gc2V0U3RhdGUodGFyZ2V0LnZhbHVlKX1cbiAgICAgICAgICA+PC9pbnB1dD5cblxuICAgICAgICAgIDxpbnB1dCB0eXBlPSdzdWJtaXQnIHZhbHVlPSdDcmVhdGUgVXNlcic+PC9pbnB1dD5cbiAgICAgICAgPC9mb3JtPlxuICAgICAgPC9kaXY+XG4gICAgPC9kaXY+XG4gICk7XG59O1xuXG5leHBvcnQgZGVmYXVsdCBMb2dpbjtcbiIsImltcG9ydCBSZWFjdCwgeyB1c2VDb250ZXh0LCB1c2VFZmZlY3QgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBMaW5rLCB1c2VOYXZpZ2F0ZSwgUmVkaXJlY3QgfSBmcm9tICdyZWFjdC1yb3V0ZXItZG9tJztcbmltcG9ydCBVc2VyQ29udGV4dCBmcm9tICcuL1VzZXJEZXRhaWxzJztcblxuY29uc3QgSG9tZSA9ICgpID0+IHtcbiAgbGV0IG5hdmlnYXRlID0gdXNlTmF2aWdhdGUoKTtcbiAgY29uc3QgdXNlciA9IHVzZUNvbnRleHQoVXNlckNvbnRleHQpO1xuICBjb25zb2xlLmxvZyh1c2VyKTtcblxuICAvL0lmIHVzZXIgaXMgYWxyZWFkeSBsb2dnZWQgaW4gdmlhIGNvb2xpZXMvc3RvcmFnZSAoVEJEIGJ5IENvbHRvbikgdGhlbiByZWRpcmVjdCB0byB0aGVpciBsYW5kaW5nIHBhZ2VcbiAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICBpZiAodXNlcikge1xuICAgICAgbmF2aWdhdGUoJy91c2VybGFuZGluZycpO1xuICAgIH1cbiAgfSksXG4gICAgW107XG5cbiAgZnVuY3Rpb24gbG9naW5DbGljaygpIHtcbiAgICBuYXZpZ2F0ZSgnL2xvZ2luJyk7XG4gIH1cblxuICBmdW5jdGlvbiBjcmVhdGVDbGljaygpIHtcbiAgICBuYXZpZ2F0ZSgnL2NyZWF0ZXVzZXInKTtcbiAgfVxuXG4gIGlmICghdXNlcikge1xuICAgIHJldHVybiAoXG4gICAgICA8ZGl2IGNsYXNzTmFtZT1cImhvbWVcIj5cbiAgICAgICAgPGJ1dHRvbiBjbGFzc05hbWU9XCJsb2dpbi1idG5cIiBvbkNsaWNrPXsoKSA9PiBsb2dpbkNsaWNrKCl9PlxuICAgICAgICAgIExvZ2luXG4gICAgICAgIDwvYnV0dG9uPlxuICAgICAgICA8YnV0dG9uIGNsYXNzTmFtZT1cImNyZWF0ZS1idG5cIiBvbkNsaWNrPXsoKSA9PiBjcmVhdGVDbGljaygpfT5cbiAgICAgICAgICBDcmVhdGUgVXNlclxuICAgICAgICA8L2J1dHRvbj5cbiAgICAgICAgey8qIDxMaW5rIHRvPVwiL2hvbWVcIj5Ib21lPC9MaW5rPiAgKi99XG4gICAgICA8L2Rpdj5cbiAgICApO1xuICAgIC8vIH0gZWxzZSB7XG4gICAgLy8gICAvLyA8UmVkaXJlY3QgdG89XCIvdXNlcmxhbmRpbmdcIiAvPjtcbiAgICAvLyAgIG5hdmlnYXRlKCcvY3JlYXRldXNlcicpO1xuICAgIC8vIH1cbiAgfVxufTtcblxuZXhwb3J0IGRlZmF1bHQgSG9tZTtcbiIsImltcG9ydCBhcnJheVdpdGhvdXRIb2xlcyBmcm9tIFwiLi9hcnJheVdpdGhvdXRIb2xlcy5qc1wiO1xuaW1wb3J0IGl0ZXJhYmxlVG9BcnJheSBmcm9tIFwiLi9pdGVyYWJsZVRvQXJyYXkuanNcIjtcbmltcG9ydCB1bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheSBmcm9tIFwiLi91bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheS5qc1wiO1xuaW1wb3J0IG5vbkl0ZXJhYmxlU3ByZWFkIGZyb20gXCIuL25vbkl0ZXJhYmxlU3ByZWFkLmpzXCI7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBfdG9Db25zdW1hYmxlQXJyYXkoYXJyKSB7XG4gIHJldHVybiBhcnJheVdpdGhvdXRIb2xlcyhhcnIpIHx8IGl0ZXJhYmxlVG9BcnJheShhcnIpIHx8IHVuc3VwcG9ydGVkSXRlcmFibGVUb0FycmF5KGFycikgfHwgbm9uSXRlcmFibGVTcHJlYWQoKTtcbn0iLCJpbXBvcnQgYXJyYXlMaWtlVG9BcnJheSBmcm9tIFwiLi9hcnJheUxpa2VUb0FycmF5LmpzXCI7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBfYXJyYXlXaXRob3V0SG9sZXMoYXJyKSB7XG4gIGlmIChBcnJheS5pc0FycmF5KGFycikpIHJldHVybiBhcnJheUxpa2VUb0FycmF5KGFycik7XG59IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gX2l0ZXJhYmxlVG9BcnJheShpdGVyKSB7XG4gIGlmICh0eXBlb2YgU3ltYm9sICE9PSBcInVuZGVmaW5lZFwiICYmIGl0ZXJbU3ltYm9sLml0ZXJhdG9yXSAhPSBudWxsIHx8IGl0ZXJbXCJAQGl0ZXJhdG9yXCJdICE9IG51bGwpIHJldHVybiBBcnJheS5mcm9tKGl0ZXIpO1xufSIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIF9ub25JdGVyYWJsZVNwcmVhZCgpIHtcbiAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkludmFsaWQgYXR0ZW1wdCB0byBzcHJlYWQgbm9uLWl0ZXJhYmxlIGluc3RhbmNlLlxcbkluIG9yZGVyIHRvIGJlIGl0ZXJhYmxlLCBub24tYXJyYXkgb2JqZWN0cyBtdXN0IGhhdmUgYSBbU3ltYm9sLml0ZXJhdG9yXSgpIG1ldGhvZC5cIik7XG59IiwiaW1wb3J0IFJlYWN0LCB7IHVzZVN0YXRlLCB1c2VFZmZlY3QsIHVzZUNvbnRleHQgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgVXNlckNvbnRleHQgZnJvbSAnLi9Vc2VyRGV0YWlscyc7XG5cbmNvbnN0IEJyZXdlcnkgPSAocHJvcHMpID0+IHtcbiAgY29uc3QgdXNlciA9IHVzZUNvbnRleHQoVXNlckNvbnRleHQpO1xuICBjb25zdCBicmV3ZXJ5Q29tcCA9IHByb3BzLmJyZXdlcnlDb21wO1xuICBsZXQgYkF0dHJpYnMgPSB7fTtcblxuICBpZiAoYnJld2VyeUNvbXAgPT09ICdzdGF0ZScpIHtcbiAgICAvL1N0YXRlIENvbXBvbmVudCBwcm9wc1xuICAgIGJBdHRyaWJzLm5hbWUgPSBwcm9wcy5uYW1lO1xuICAgIGJBdHRyaWJzLmlkID0gcHJvcHMuaWQ7XG4gICAgYkF0dHJpYnMuYnJld2VyeV90eXBlID0gcHJvcHMuYnJld2VyeV90eXBlO1xuICAgIGJBdHRyaWJzLnN0YXRlID0gcHJvcHMuc3RhdGU7XG4gICAgYkF0dHJpYnMuY2l0eSA9IHByb3BzLmNpdHk7XG4gICAgYkF0dHJpYnMucGhvbmUgPSBwcm9wcy5waG9uZTtcbiAgICBiQXR0cmlicy5zdHJlZXQgPSBwcm9wcy5zdHJlZXQ7XG4gICAgYkF0dHJpYnMuc3RyZWV0ID0gcHJvcHMuc3RyZWV0O1xuICAgIGJBdHRyaWJzLmFkZHJlc3NfMiA9IHByb3BzLmFkZHJlc3NfMjtcbiAgICBiQXR0cmlicy5hZGRTdGF0ZVRvVmlzaXRlZCA9IHByb3BzLmFkZFN0YXRlVG9WaXNpdGVkO1xuICB9IGVsc2Uge1xuICAgIC8vVmlzaXRlZCBCcmV3ZXJpZXMgQ29tcG9uZW50IHByb3BzXG4gICAgYkF0dHJpYnMuaWQgPSBwcm9wcy5pZDtcbiAgICBiQXR0cmlicy51c2Vyc2lkID0gcHJvcHMudXNlcnNpZDtcbiAgICBiQXR0cmlicy5icmV3ZXJ5bmFtZSA9IHByb3BzLmJyZXdlcnluYW1lO1xuICAgIGJBdHRyaWJzLmJyZXdlcnl0eXBlID0gcHJvcHMuYnJld2VyeXR5cGU7XG4gICAgYkF0dHJpYnMuYnJld2VyeXN0YXRlID0gcHJvcHMuYnJld2VyeXN0YXRlO1xuICAgIGJBdHRyaWJzLmJyZXdlcnljaXR5ID0gcHJvcHMuYnJld2VyeWNpdHk7XG4gICAgYkF0dHJpYnMuYnJld2VyeXBob25lID0gcHJvcHMuYnJld2VyeXBob25lO1xuICAgIGJBdHRyaWJzLnJlbW92ZVZpc2l0ZWQgPSBwcm9wcy5yZW1vdmVWaXNpdGVkO1xuICB9XG5cbiAgLy9Db25kaXRpb25hbCBsb2dpYyBmb3IgdHlwZSBvZiBjb21wb25lbnQgd2FudCB0byByZW5kZXJcblxuICBpZiAoYnJld2VyeUNvbXAgPT09ICdzdGF0ZScpIHtcbiAgICAvL3JlbmRlciBzdGF0ZSBjb21wb25lbnQgYnJld2VyeVxuICAgIHJldHVybiAoXG4gICAgICA8PlxuICAgICAgICA8ZGl2PlxuICAgICAgICAgIDxzcGFuPk5hbWU6IHtiQXR0cmlicy5uYW1lfTwvc3Bhbj5cbiAgICAgICAgICA8c3Bhbj5Mb2NhdGlvbjoge2JBdHRyaWJzLnN0cmVldH08L3NwYW4+XG4gICAgICAgICAgPHNwYW4+UmF0aW5nOiB7YkF0dHJpYnMuYWRkcmVzc18yfTwvc3Bhbj5cbiAgICAgICAgICA8YnV0dG9uXG4gICAgICAgICAgICBvbkNsaWNrPXsoZSkgPT4ge1xuICAgICAgICAgICAgICBiQXR0cmlicy5hZGRTdGF0ZVRvVmlzaXRlZCh7XG4gICAgICAgICAgICAgICAgaWQ6IGJBdHRyaWJzLmlkLFxuICAgICAgICAgICAgICAgIG5hbWU6IGJBdHRyaWJzLm5hbWUsXG4gICAgICAgICAgICAgICAgYnJld2VyeV90eXBlOiBiQXR0cmlicy5icmV3ZXJ5X3R5cGUsXG4gICAgICAgICAgICAgICAgc3RhdGU6IGJBdHRyaWJzLnN0YXRlLFxuICAgICAgICAgICAgICAgIGNpdHk6IGJBdHRyaWJzLmNpdHksXG4gICAgICAgICAgICAgICAgcGhvbmU6IGJBdHRyaWJzLnBob25lLFxuICAgICAgICAgICAgICAgIC8vIHVzZXJzaWQ6IHVzZXIudXNlcnNpZCxcbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9fVxuICAgICAgICAgID5cbiAgICAgICAgICAgIEFkZCB0byBWaXNpdGVkXG4gICAgICAgICAgPC9idXR0b24+XG4gICAgICAgIDwvZGl2PlxuICAgICAgPC8+XG4gICAgKTtcbiAgfSBlbHNlIHtcbiAgICAvL3JlbmRlciB2aXNpdGVkIGNvbXBvbmVudCBicmV3ZXJ5XG4gICAgcmV0dXJuIChcbiAgICAgIDw+XG4gICAgICAgIDxkaXY+XG4gICAgICAgICAgPHNwYW4+TmFtZToge2JBdHRyaWJzLmJyZXdlcnluYW1lfTwvc3Bhbj5cbiAgICAgICAgICA8c3Bhbj5TdGF0ZToge2JBdHRyaWJzLmJyZXdlcnlzdGF0ZX08L3NwYW4+XG4gICAgICAgICAgPHNwYW4+Q2l0eToge2JBdHRyaWJzLmJyZXdlcnljaXR5fTwvc3Bhbj5cbiAgICAgICAgICA8YnV0dG9uXG4gICAgICAgICAgICBvbkNsaWNrPXsoZSkgPT4ge1xuICAgICAgICAgICAgICAvLyBjb25zb2xlLmxvZygnUmVtb3ZlIFZpc2l0ZWQgLSBGdW5jdGlvbicpO1xuICAgICAgICAgICAgICAvLyBjb25zb2xlLmxvZyhiQXR0cmlicy5yZW1vdmVWaXNpdGVkKTtcblxuICAgICAgICAgICAgICBiQXR0cmlicy5yZW1vdmVWaXNpdGVkKHtcbiAgICAgICAgICAgICAgICBpZDogYkF0dHJpYnMuaWQsXG4gICAgICAgICAgICAgICAgbmFtZTogYkF0dHJpYnMuYnJld2VyeW5hbWUsXG4gICAgICAgICAgICAgICAgYnJld2VyeV90eXBlOiBiQXR0cmlicy5icmV3ZXJ5dHlwZSxcbiAgICAgICAgICAgICAgICBzdGF0ZTogYkF0dHJpYnMuYnJld2VyeXN0YXRlLFxuICAgICAgICAgICAgICAgIGNpdHk6IGJBdHRyaWJzLmJyZXdlcnljaXR5LFxuICAgICAgICAgICAgICAgIHBob25lOiBiQXR0cmlicy5icmV3ZXJ5cGhvbmUsXG4gICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfX1cbiAgICAgICAgICA+XG4gICAgICAgICAgICBSZW1vdmVcbiAgICAgICAgICA8L2J1dHRvbj5cbiAgICAgICAgPC9kaXY+XG4gICAgICA8Lz5cbiAgICApO1xuICB9XG59O1xuXG5leHBvcnQgZGVmYXVsdCBCcmV3ZXJ5O1xuIiwiaW1wb3J0IFJlYWN0LCB7IHVzZVN0YXRlLCB1c2VFZmZlY3QsIHVzZUNvbnRleHQgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgVXNlckNvbnRleHQgZnJvbSAnLi9Vc2VyRGV0YWlscyc7XG5pbXBvcnQgQnJld2VyeSBmcm9tICcuL0JyZXdlcnknO1xuaW1wb3J0IGF4aW9zIGZyb20gJ2F4aW9zJztcblxuY29uc3QgU3RhdGVCcmV3ZXJpZXMgPSAocHJvcHMpID0+IHtcbiAgY29uc3Qgc3RhdGVCcmV3ZXJpZXMgPSBwcm9wcy5zdGF0ZUJyZXdlcmllcztcbiAgY29uc3QgYWRkU3RhdGVUb1Zpc2l0ZWQgPSBwcm9wcy5hZGRTdGF0ZVRvVmlzaXRlZDtcblxuICBjb25zdCBzdGF0ZUJyZXdlcmllc0FycmF5ID0gc3RhdGVCcmV3ZXJpZXMubWFwKChicmV3ZXJ5LCBpbmRleCkgPT4ge1xuICAgIHJldHVybiAoXG4gICAgICA8QnJld2VyeVxuICAgICAgICB7Li4uYnJld2VyeX0gLy9wYXNzaW5nIGFsbCBvZiB0aGUgcHJvcGVydGllcyBkb3duIGZvciBlYWNoIGJyZXdlcnlcbiAgICAgICAgYWRkU3RhdGVUb1Zpc2l0ZWQ9e2FkZFN0YXRlVG9WaXNpdGVkfVxuICAgICAgICBicmV3ZXJ5Q29tcD17J3N0YXRlJ31cbiAgICAgICAgdW5pcXVlaWQ9e2BTdGF0ZUJyZXdlcnkke2luZGV4fWB9IC8vYXZvaWRpbmcgY29uZmxpY3RzIHdpdGggZGF0YWJhc2UgZmllbGQgaWRcbiAgICAgICAga2V5PXtgU3RhdGVCcmV3ZXJ5JHtpbmRleH1gfVxuICAgICAgLz5cbiAgICApO1xuICB9KTtcbiAgcmV0dXJuIChcbiAgICA8ZGl2PlxuICAgICAgPGgyPlN0YXRlIEJyZXdlcmllczwvaDI+XG4gICAgICB7c3RhdGVCcmV3ZXJpZXNBcnJheX1cbiAgICA8L2Rpdj5cbiAgKTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IFN0YXRlQnJld2VyaWVzO1xuIiwiaW1wb3J0IFJlYWN0LCB7IHVzZVN0YXRlLCB1c2VFZmZlY3QsIHVzZUNvbnRleHQgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgVXNlckNvbnRleHQgZnJvbSAnLi9Vc2VyRGV0YWlscyc7XG5pbXBvcnQgQnJld2VyeSBmcm9tICcuL0JyZXdlcnknO1xuXG5jb25zdCBWaXNpdGVkQnJld2VyaWVzID0gKHByb3BzKSA9PiB7XG4gIGNvbnN0IHZpc0JyZXdlcmllcyA9IHByb3BzLnZpc0JyZXdlcmllcztcbiAgY29uc3QgcmVtb3ZlVmlzaXRlZCA9IHByb3BzLnJlbW92ZVZpc2l0ZWQ7XG5cbiAgY29uc3QgdmlzQnJld2VyaWVzQXJyYXkgPSB2aXNCcmV3ZXJpZXMubWFwKChicmV3ZXJ5LCBpbmRleCkgPT4ge1xuICAgIHJldHVybiAoXG4gICAgICA8QnJld2VyeVxuICAgICAgICB7Li4uYnJld2VyeX0gLy9wYXNzaW5nIGFsbCBvZiB0aGUgcHJvcGVydGllcyBkb3duIGZvciBlYWNoIGJyZXdlcnlcbiAgICAgICAgcmVtb3ZlVmlzaXRlZD17cmVtb3ZlVmlzaXRlZH1cbiAgICAgICAgYnJld2VyeUNvbXA9eyd2aXNpdGVkJ31cbiAgICAgICAgdW5pcXVlaWQ9e2BWaXNCcmV3ZXJ5JHtpbmRleH1gfSAvL2F2b2lkaW5nIGNvbmZsaWN0cyB3aXRoIGRhdGFiYXNlIGZpZWxkIGlkXG4gICAgICAgIGtleT17YFZpc0JyZXdlcnkke2luZGV4fWB9XG4gICAgICAvPlxuICAgICk7XG4gIH0pO1xuICByZXR1cm4gKFxuICAgIDxkaXY+XG4gICAgICA8aDI+VmlzaXRlZCBCcmV3ZXJpZXM8L2gyPlxuICAgICAge3Zpc0JyZXdlcmllc0FycmF5fVxuICAgIDwvZGl2PlxuICApO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgVmlzaXRlZEJyZXdlcmllcztcbiIsImltcG9ydCBSZWFjdCwgeyB1c2VFZmZlY3QsIHVzZVN0YXRlLCB1c2VDb250ZXh0LCBmbHVzaFN5bmMgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgU3RhdGVCcmV3ZXJpZXMgZnJvbSAnLi9TdGF0ZUJyZXdlcmllcyc7XG5pbXBvcnQgVmlzaXRlZEJyZXdlcmllcyBmcm9tICcuL1Zpc2l0ZWRCcmV3ZXJpZXMnO1xuaW1wb3J0IFVzZXJDb250ZXh0IGZyb20gJy4vVXNlckRldGFpbHMnO1xuaW1wb3J0IGF4aW9zIGZyb20gJ2F4aW9zJztcbmltcG9ydCB7IHBhcnNlIH0gZnJvbSAnaXBhZGRyLmpzJztcblxuY29uc3QgVXNlckxhbmRpbmcgPSAoKSA9PiB7XG4gIC8vT2J0YWluaW5nIHN0YXRlIHVwb24gdXNlciBoaXR0aW5nIGxhbmRpbmcgcGFnZSAtIHVzZXIncyBzdGF0ZSBicmV3ZXJpZXMgYW5kIHZpc2l0ZWQgYnJld2VyaWVzXG4gIC8vQmF0Y2hpbmcgc3RhdGUgY2hhbmdlcyBpbiBSZWFjdCBsZWFkaW5nIHRvIG9uQ2xpY2sgdXBkYXRlIGxhZ3MuLi5cbiAgY29uc3QgW3N0YXRlQnJld2VyaWVzLCBzZXRTdGF0ZUJyZXdlcmllc10gPSB1c2VTdGF0ZSgpO1xuICBjb25zdCBbdmlzQnJld2VyaWVzLCBzZXRWaXNCcmV3ZXJpZXNdID0gdXNlU3RhdGUoKTtcbiAgY29uc3QgdXNlciA9IHVzZUNvbnRleHQoVXNlckNvbnRleHQpO1xuXG4gIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgLy9RdWVyeSB1c2VyJ3Mgc3RhdGUgYnJld2VyaWVzXG4gICAgY29uc3QgZ2V0QnJld2VyaWVzID0gYXN5bmMgKCkgPT4ge1xuICAgICAgaWYgKHVzZXIpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGF4aW9zLmdldCgnL2FwaScsIHtcbiAgICAgICAgICAgIHBhcmFtczogeyBzdGF0ZTogdXNlci5zdGF0ZSwgaWQ6IHVzZXIudXNlcnNpZCB9LFxuICAgICAgICAgIH0pO1xuICAgICAgICAgIHNldFN0YXRlQnJld2VyaWVzKHJlc3BvbnNlLmRhdGEuZ2V0QnJld2VyaWVzKTtcbiAgICAgICAgICBzZXRWaXNCcmV3ZXJpZXMocmVzcG9uc2UuZGF0YS52aXNpdGVkKTtcbiAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICBjb25zb2xlLmxvZyhlcnJvcik7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9O1xuICAgIGdldEJyZXdlcmllcygpO1xuICB9LCBbXSk7XG5cbiAgY29uc3QgYWRkU3RhdGVUb1Zpc2l0ZWQgPSBhc3luYyAoYnJld2VyeURldGFpbHMpID0+IHtcbiAgICAvL0FkZCBzdGF0ZSBicmV3ZXJ5IHRvIHZpc2l0ZWQgYnJld2VyeSBsaXN0XG4gICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBheGlvcy5wb3N0KCcvdmlzaXRlZC9hZGQnLCB7XG4gICAgICBhZGRWaXNpdGVkOiB7XG4gICAgICAgIGJyZXdlcnlpZDogYnJld2VyeURldGFpbHMuaWQsXG4gICAgICAgIGJyZXdlcnluYW1lOiBicmV3ZXJ5RGV0YWlscy5uYW1lLFxuICAgICAgICBicmV3ZXJ5dHlwZTogYnJld2VyeURldGFpbHMuYnJld2VyeV90eXBlLFxuICAgICAgICBicmV3ZXJ5c3RhdGU6IGJyZXdlcnlEZXRhaWxzLnN0YXRlLFxuICAgICAgICBicmV3ZXJ5Y2l0eTogYnJld2VyeURldGFpbHMuY2l0eSxcbiAgICAgICAgYnJld2VyeXBob25lOiBicmV3ZXJ5RGV0YWlscy5waG9uZSxcbiAgICAgICAgdXNlcklkOiB1c2VyLnVzZXJzaWQsXG4gICAgICB9LFxuICAgICAgLy8gcGFyYW1zOiB7IHVzZXJJZDogdXNlci51c2Vyc2lkIH0sIC8vSGF2aW5nIHRyb3VibGUgc2VuZGluZyBvdmVyIHVzZXIgaWQgYXMgc2VwYXJhdGUgcGFyYW1zXG4gICAgfSk7XG5cbiAgICAvL1NraXBzIHJlLXJlbmRlcmluZyBzb21ldGltZXMuLi4udGhpbmsgZHVlIHRvIGF1dG9tYXRjaGljIGJhdGNoaW5nLi4uZmx1c2hTeW5jIHBvc3NpYmxlIHNvbHV0aW9uXG4gICAgLy9odHRwczovL2dpdGh1Yi5jb20vcmVhY3R3Zy9yZWFjdC0xOC9kaXNjdXNzaW9ucy8yMVxuICAgIHNldFZpc0JyZXdlcmllcyhbLi4ucmVzcG9uc2UuZGF0YS52aXNpdGVkXSk7XG4gIH07XG5cbiAgY29uc3QgcmVtb3ZlVmlzaXRlZCA9IGFzeW5jIChicmV3ZXJ5RGV0YWlscykgPT4ge1xuICAgIC8vQWRkIHN0YXRlIGJyZXdlcnkgdG8gdmlzaXRlZCBicmV3ZXJ5IGxpc3RcblxuICAgIGNvbnNvbGUubG9nKCdyaWNreScpO1xuICAgIGNvbnNvbGUubG9nKGBicmV3ZXJ5RGV0YWlscy5pZDogJHticmV3ZXJ5RGV0YWlscy5pZH1gKTtcbiAgICBjb25zb2xlLmxvZyhgYnJld2VyeURldGFpbHMubmFtZTogJHticmV3ZXJ5RGV0YWlscy5uYW1lfWApO1xuICAgIGNvbnNvbGUubG9nKGBicmV3ZXJ5RGV0YWlscy50eXBlOiAke2JyZXdlcnlEZXRhaWxzLmJyZXdlcnlfdHlwZX1gKTtcbiAgICBjb25zb2xlLmxvZyhgYnJld2VyeURldGFpbHMuc3RhdGU6ICR7YnJld2VyeURldGFpbHMuc3RhdGV9YCk7XG4gICAgY29uc29sZS5sb2coYGJyZXdlcnlEZXRhaWxzLmNpdHk6ICR7YnJld2VyeURldGFpbHMuY2l0eX1gKTtcbiAgICBjb25zb2xlLmxvZyhgYnJld2VyeURldGFpbHMucGhvbmU6ICR7YnJld2VyeURldGFpbHMucGhvbmV9YCk7XG5cbiAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGF4aW9zLmRlbGV0ZSgnL3Zpc2l0ZWQvZGVsZXRlJywge1xuICAgICAgZGF0YToge1xuICAgICAgICBicmV3ZXJ5aWQ6IGJyZXdlcnlEZXRhaWxzLmlkLFxuICAgICAgICBicmV3ZXJ5bmFtZTogYnJld2VyeURldGFpbHMubmFtZSxcbiAgICAgICAgYnJld2VyeXR5cGU6IGJyZXdlcnlEZXRhaWxzLmJyZXdlcnlfdHlwZSxcbiAgICAgICAgYnJld2VyeXN0YXRlOiBicmV3ZXJ5RGV0YWlscy5zdGF0ZSxcbiAgICAgICAgYnJld2VyeWNpdHk6IGJyZXdlcnlEZXRhaWxzLmNpdHksXG4gICAgICAgIGJyZXdlcnlwaG9uZTogYnJld2VyeURldGFpbHMucGhvbmUsXG4gICAgICAgIHVzZXJJZDogdXNlci51c2Vyc2lkLFxuICAgICAgfSxcbiAgICAgIC8vIHBhcmFtczogeyB1c2VySWQ6IHVzZXIudXNlcnNpZCB9LFxuICAgIH0pO1xuXG4gICAgc2V0VmlzQnJld2VyaWVzKFsuLi5yZXNwb25zZS5kYXRhLnZpc2l0ZWRdKTtcbiAgfTtcblxuICBpZiAoc3RhdGVCcmV3ZXJpZXMpIHtcbiAgICByZXR1cm4gKFxuICAgICAgPGRpdiBjbGFzc05hbWU9XCJ1c2VybGFuZGluZ1wiPlxuICAgICAgICA8U3RhdGVCcmV3ZXJpZXNcbiAgICAgICAgICBzdGF0ZUJyZXdlcmllcz17Wy4uLnN0YXRlQnJld2VyaWVzXX1cbiAgICAgICAgICBhZGRTdGF0ZVRvVmlzaXRlZD17YWRkU3RhdGVUb1Zpc2l0ZWR9XG4gICAgICAgIC8+XG4gICAgICAgIDxWaXNpdGVkQnJld2VyaWVzXG4gICAgICAgICAgdmlzQnJld2VyaWVzPXtbLi4udmlzQnJld2VyaWVzXX1cbiAgICAgICAgICByZW1vdmVWaXNpdGVkPXtyZW1vdmVWaXNpdGVkfVxuICAgICAgICAvPlxuICAgICAgPC9kaXY+XG4gICAgKTtcbiAgfVxufTtcblxuZXhwb3J0IGRlZmF1bHQgVXNlckxhbmRpbmc7XG4iLCJpbXBvcnQgUmVhY3QsIHsgdXNlU3RhdGUsIHVzZUVmZmVjdCwgdXNlQ29udGV4dCB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCBVc2VyQ29udGV4dCBmcm9tICcuL1VzZXJEZXRhaWxzJztcblxuY29uc3QgTmF2YmFyID0gKHByb3BzKSA9PiB7XG4gIGNvbnN0IHVzZXIgPSB1c2VDb250ZXh0KFVzZXJDb250ZXh0KTtcblxuICByZXR1cm4gKFxuICAgIDw+XG4gICAgICA8aGVhZGVyPlxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT0nYnJhbmQnPkZpbmRNeUJyZXdzPC9kaXY+XG4gICAgICAgIDx1bCBjbGFzc05hbWU9J25hdl9saW5rcyc+XG4gICAgICAgICAge3VzZXIgJiYgKFxuICAgICAgICAgICAgPGxpPlxuICAgICAgICAgICAgICA8YSBocmVmPScjJz5DaGFuZ2UgU3RhdGU8L2E+XG4gICAgICAgICAgICA8L2xpPlxuICAgICAgICAgICl9XG4gICAgICAgICAge3VzZXIgJiYgKFxuICAgICAgICAgICAgPGxpPlxuICAgICAgICAgICAgICA8YSBocmVmPScjJz5Mb2dvdXQ8L2E+XG4gICAgICAgICAgICA8L2xpPlxuICAgICAgICAgICl9XG4gICAgICAgIDwvdWw+XG4gICAgICA8L2hlYWRlcj5cbiAgICA8Lz5cbiAgKTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IE5hdmJhcjtcbiIsImltcG9ydCBSZWFjdCwgeyB1c2VTdGF0ZSwgdXNlRWZmZWN0LCB1c2VDb250ZXh0IH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IFVzZXJDb250ZXh0IGZyb20gJy4vVXNlckRldGFpbHMnO1xuXG5jb25zdCBGb290ZXIgPSAocHJvcHMpID0+IHtcbiAgY29uc3QgdXNlciA9IHVzZUNvbnRleHQoVXNlckNvbnRleHQpO1xuXG4gIHJldHVybiAoXG4gICAgPD5cbiAgICAgIDxmb290ZXI+XG4gICAgICAgIDxoMj5GT09URVI8L2gyPlxuICAgICAgPC9mb290ZXI+XG4gICAgPC8+XG4gICk7XG59O1xuXG5leHBvcnQgZGVmYXVsdCBGb290ZXI7XG4iLCJpbXBvcnQge1xuICBCcm93c2VyUm91dGVyIGFzIFJvdXRlcixcbiAgUm91dGUsXG4gIFJvdXRlcyxcbiAgTmF2aWdhdGUsXG59IGZyb20gJ3JlYWN0LXJvdXRlci1kb20nO1xuaW1wb3J0IFJlYWN0LCB7IGNyZWF0ZUNvbnRleHQgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgTG9naW4gZnJvbSAnLi9Mb2dpbic7XG5pbXBvcnQgQ3JlYXRlVXNlciBmcm9tICcuL0NyZWF0ZVVzZXInO1xuaW1wb3J0IEhvbWUgZnJvbSAnLi9Ib21lJztcbmltcG9ydCBVc2VyQ29udGV4dCBmcm9tICcuL1VzZXJEZXRhaWxzJztcbmltcG9ydCBVc2VyTGFuZGluZyBmcm9tICcuL1VzZXJMYW5kaW5nJztcbmltcG9ydCBOYXZiYXIgZnJvbSAnLi9OYXZiYXInO1xuaW1wb3J0IEZvb3RlciBmcm9tICcuL0Zvb3Rlcic7XG4vL2h0dHBzOi8vd3d3LmZpZ21hLmNvbS9maWxlLzJQUmR0bzRwQkU2YWxxSWh3OWVQNHovQnJld2VyeS1BcHA/bm9kZS1pZD0wJTNBMVxuLy9MaXN0IGNvbXBvbmVudC0tLS1icmV3ZXJpZXMgaW4gc3RhdGVcbi8vQWxyZWFkeSB2aXNpdGVkIGJyZXdlcmllc1xuLy9Mb2dpblxuLy9Ob3RlczogSGFkIHRvIGluc3RhbGwgcmVhY3Qtcm91dGVyIHRvIHNldHVwIGZyb250LXNpZGUgcm91dGluZyB0byBkaWZmZXJlbnQgd2ViIHBhZ2Vcbi8vICAgICAgMSkgQWxsIGNvbXBvbmVudHMgbmVzdGVkIHdpdGhpbiBSb3V0ZXIgY29tcG9uZW50IGhhdmUgYWNjZXNzIHRvIHRoZSByb3V0ZXJcbi8vICAgICAgMikgQWxsIG9mIG91ciByb3V0ZXMgZ28gaW5zaWRlIHRoZSBTd2l0Y2ggY29tcG9uZW50XG4vLyAgICAgIDMpIFJvdXRlIHBhdGggaXMgdGhlIGVuZCBwb2ludCB3ZSB3YW50IHRvIGdvIHRvIGFuZCB0aGVuIGluc2lkZSBpdCBpcyB0aGUgY29tcG9uZW50IHdhbnQgdG8gc2hvdyB3aGVuIHRoZXkgZmluaXNoIHRoYXQgcm91dGVcbi8vICAgICAgNCkgT25seSB3aGF0IGlzIGluc2lkZSB0aGUgc3dpdGNoIGNvbXBvbmVudCBpcyBnb2luZyB0byBnZXQgcmUtcmVuZGVyZWRcbi8vICAgICAgNSkgUm91dGVzIHJlcGxhY2VkIFN3aXRjaCBjb21wb25lbnQgaW4gcmVhY3Qtcm91dGVyLWRvbSB2NiBodHRwczovL3d3dy55b3V0dWJlLmNvbS93YXRjaD92PWFaR3p3RWpaclhjXG5cbi8vSGFyZGNvZGluZyBVc2VyIEluZm9ybWF0aW9uIGZvciBUZXN0aW5nIFB1cnBvc2VzLi4uLi53b3VsZCBoYXZlIHRvIGZldGNoIHRoaXMgZnJvbSBjb29raWVzIHdpdGhpbiBVc2VyRGV0YWlscyBjb21wb25lbnQgSSBiZWxpZXZlLi4uLlxuY29uc3QgdXNlciA9IHtcbiAgbmFtZTogJ1JpY2t5JyxcbiAgdXNlcnNpZDogMixcbiAgc3RhdGU6ICduZXdfeW9yaycsXG4gIGZhdm9yaXRlczogWydueWMgYnJldycsICdicmV3NGxpZmUnXSxcbn07XG4vL0lmIGRvbid0IHdhbnQgdXNlciBsb2dnZWQgaW4gdGhlbiB1bmNvbW1lbnQgYmVsb3cuLi4uXG4vLyBjb25zdCB1c2VyID0gdW5kZWZpbmVkO1xuXG5jb25zdCBBcHAgPSAoKSA9PiB7XG4gIHJldHVybiAoXG4gICAgPFVzZXJDb250ZXh0LlByb3ZpZGVyIHZhbHVlPXt1c2VyfT5cbiAgICAgIDxSb3V0ZXI+XG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPSdBcHAnPlxuICAgICAgICAgIDxOYXZiYXIgLz5cbiAgICAgICAgICA8Um91dGVzPlxuICAgICAgICAgICAgPFJvdXRlIGV4YWN0IHBhdGg9Jy8nIGVsZW1lbnQ9ezxIb21lIC8+fT48L1JvdXRlPlxuICAgICAgICAgICAgPFJvdXRlIGV4YWN0IHBhdGg9Jy9sb2dpbicgZWxlbWVudD17PExvZ2luIC8+fT48L1JvdXRlPlxuICAgICAgICAgICAgPFJvdXRlIGV4YWN0IHBhdGg9Jy9jcmVhdGV1c2VyJyBlbGVtZW50PXs8Q3JlYXRlVXNlciAvPn0+PC9Sb3V0ZT5cbiAgICAgICAgICAgIDxSb3V0ZSBleGFjdCBwYXRoPScvdXNlcmxhbmRpbmcnIGVsZW1lbnQ9ezxVc2VyTGFuZGluZyAvPn0+PC9Sb3V0ZT5cbiAgICAgICAgICAgIDxSb3V0ZSBwYXRoPScqJyBlbGVtZW50PXs8TmF2aWdhdGUgdG89Jy8nIHJlcGxhY2UgLz59PjwvUm91dGU+XG4gICAgICAgICAgPC9Sb3V0ZXM+XG4gICAgICAgICAgPEZvb3RlciAvPlxuICAgICAgICA8L2Rpdj5cbiAgICAgIDwvUm91dGVyPlxuICAgIDwvVXNlckNvbnRleHQuUHJvdmlkZXI+XG4gICk7XG59O1xuXG5leHBvcnQgZGVmYXVsdCBBcHA7XG4iLCJcbiAgICAgIGltcG9ydCBBUEkgZnJvbSBcIiEuLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbmplY3RTdHlsZXNJbnRvU3R5bGVUYWcuanNcIjtcbiAgICAgIGltcG9ydCBkb21BUEkgZnJvbSBcIiEuLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZURvbUFQSS5qc1wiO1xuICAgICAgaW1wb3J0IGluc2VydEZuIGZyb20gXCIhLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0QnlTZWxlY3Rvci5qc1wiO1xuICAgICAgaW1wb3J0IHNldEF0dHJpYnV0ZXMgZnJvbSBcIiEuLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zZXRBdHRyaWJ1dGVzV2l0aG91dEF0dHJpYnV0ZXMuanNcIjtcbiAgICAgIGltcG9ydCBpbnNlcnRTdHlsZUVsZW1lbnQgZnJvbSBcIiEuLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRTdHlsZUVsZW1lbnQuanNcIjtcbiAgICAgIGltcG9ydCBzdHlsZVRhZ1RyYW5zZm9ybUZuIGZyb20gXCIhLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVUYWdUcmFuc2Zvcm0uanNcIjtcbiAgICAgIGltcG9ydCBjb250ZW50LCAqIGFzIG5hbWVkRXhwb3J0IGZyb20gXCIhIS4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzPz9ydWxlU2V0WzFdLnJ1bGVzWzJdLnVzZVsxXSEuLi9ub2RlX21vZHVsZXMvc2Fzcy1sb2FkZXIvZGlzdC9janMuanMhLi9zdHlsZXMuY3NzXCI7XG4gICAgICBcbiAgICAgIFxuXG52YXIgb3B0aW9ucyA9IHt9O1xuXG5vcHRpb25zLnN0eWxlVGFnVHJhbnNmb3JtID0gc3R5bGVUYWdUcmFuc2Zvcm1Gbjtcbm9wdGlvbnMuc2V0QXR0cmlidXRlcyA9IHNldEF0dHJpYnV0ZXM7XG5cbiAgICAgIG9wdGlvbnMuaW5zZXJ0ID0gaW5zZXJ0Rm4uYmluZChudWxsLCBcImhlYWRcIik7XG4gICAgXG5vcHRpb25zLmRvbUFQSSA9IGRvbUFQSTtcbm9wdGlvbnMuaW5zZXJ0U3R5bGVFbGVtZW50ID0gaW5zZXJ0U3R5bGVFbGVtZW50O1xuXG52YXIgdXBkYXRlID0gQVBJKGNvbnRlbnQsIG9wdGlvbnMpO1xuXG5cblxuZXhwb3J0ICogZnJvbSBcIiEhLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanM/P3J1bGVTZXRbMV0ucnVsZXNbMl0udXNlWzFdIS4uL25vZGVfbW9kdWxlcy9zYXNzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL3N0eWxlcy5jc3NcIjtcbiAgICAgICBleHBvcnQgZGVmYXVsdCBjb250ZW50ICYmIGNvbnRlbnQubG9jYWxzID8gY29udGVudC5sb2NhbHMgOiB1bmRlZmluZWQ7XG4iLCJpbXBvcnQgUmVhY3QgZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgeyByZW5kZXIgfSBmcm9tIFwicmVhY3QtZG9tXCI7XG5pbXBvcnQgKiBhcyBSZWFjdERPTUNsaWVudCBmcm9tIFwicmVhY3QtZG9tL2NsaWVudFwiO1xuaW1wb3J0IEFwcCBmcm9tIFwiLi9jb21wb25lbnRzL0FwcFwiO1xuXG5jb25zdCBjb250YWluZXIgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcInJvb3RcIik7XG5cbmltcG9ydCBzdHlsZXMgZnJvbSBcIi4vc3R5bGVzLmNzc1wiOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVudXNlZC12YXJzXG5cbmNvbnN0IHJvb3QgPSBSZWFjdERPTUNsaWVudC5jcmVhdGVSb290KGNvbnRhaW5lcik7XG5yb290LnJlbmRlcig8QXBwIC8+KTtcbiJdLCJuYW1lcyI6WyJtb2R1bGUiLCJleHBvcnRzIiwidXRpbHMiLCJzZXR0bGUiLCJjb29raWVzIiwiYnVpbGRVUkwiLCJidWlsZEZ1bGxQYXRoIiwicGFyc2VIZWFkZXJzIiwiaXNVUkxTYW1lT3JpZ2luIiwiY3JlYXRlRXJyb3IiLCJ0cmFuc2l0aW9uYWxEZWZhdWx0cyIsIkNhbmNlbCIsImNvbmZpZyIsIlByb21pc2UiLCJyZXNvbHZlIiwicmVqZWN0Iiwib25DYW5jZWxlZCIsInJlcXVlc3REYXRhIiwiZGF0YSIsInJlcXVlc3RIZWFkZXJzIiwiaGVhZGVycyIsInJlc3BvbnNlVHlwZSIsImRvbmUiLCJjYW5jZWxUb2tlbiIsInVuc3Vic2NyaWJlIiwic2lnbmFsIiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsImlzRm9ybURhdGEiLCJyZXF1ZXN0IiwiWE1MSHR0cFJlcXVlc3QiLCJhdXRoIiwidXNlcm5hbWUiLCJwYXNzd29yZCIsInVuZXNjYXBlIiwiZW5jb2RlVVJJQ29tcG9uZW50IiwiQXV0aG9yaXphdGlvbiIsImJ0b2EiLCJmdWxsUGF0aCIsImJhc2VVUkwiLCJ1cmwiLCJvbmxvYWRlbmQiLCJyZXNwb25zZUhlYWRlcnMiLCJnZXRBbGxSZXNwb25zZUhlYWRlcnMiLCJyZXNwb25zZSIsInJlc3BvbnNlVGV4dCIsInN0YXR1cyIsInN0YXR1c1RleHQiLCJ2YWx1ZSIsImVyciIsIm9wZW4iLCJtZXRob2QiLCJ0b1VwcGVyQ2FzZSIsInBhcmFtcyIsInBhcmFtc1NlcmlhbGl6ZXIiLCJ0aW1lb3V0Iiwib25yZWFkeXN0YXRlY2hhbmdlIiwicmVhZHlTdGF0ZSIsInJlc3BvbnNlVVJMIiwiaW5kZXhPZiIsInNldFRpbWVvdXQiLCJvbmFib3J0Iiwib25lcnJvciIsIm9udGltZW91dCIsInRpbWVvdXRFcnJvck1lc3NhZ2UiLCJ0cmFuc2l0aW9uYWwiLCJjbGFyaWZ5VGltZW91dEVycm9yIiwiaXNTdGFuZGFyZEJyb3dzZXJFbnYiLCJ4c3JmVmFsdWUiLCJ3aXRoQ3JlZGVudGlhbHMiLCJ4c3JmQ29va2llTmFtZSIsInJlYWQiLCJ1bmRlZmluZWQiLCJ4c3JmSGVhZGVyTmFtZSIsImZvckVhY2giLCJ2YWwiLCJrZXkiLCJ0b0xvd2VyQ2FzZSIsInNldFJlcXVlc3RIZWFkZXIiLCJpc1VuZGVmaW5lZCIsIm9uRG93bmxvYWRQcm9ncmVzcyIsImFkZEV2ZW50TGlzdGVuZXIiLCJvblVwbG9hZFByb2dyZXNzIiwidXBsb2FkIiwiY2FuY2VsIiwidHlwZSIsImFib3J0Iiwic3Vic2NyaWJlIiwiYWJvcnRlZCIsInNlbmQiLCJiaW5kIiwiQXhpb3MiLCJtZXJnZUNvbmZpZyIsImF4aW9zIiwiY3JlYXRlSW5zdGFuY2UiLCJkZWZhdWx0Q29uZmlnIiwiY29udGV4dCIsImluc3RhbmNlIiwicHJvdG90eXBlIiwiZXh0ZW5kIiwiY3JlYXRlIiwiaW5zdGFuY2VDb25maWciLCJDYW5jZWxUb2tlbiIsImlzQ2FuY2VsIiwiVkVSU0lPTiIsImFsbCIsInByb21pc2VzIiwic3ByZWFkIiwiaXNBeGlvc0Vycm9yIiwibWVzc2FnZSIsInRoaXMiLCJ0b1N0cmluZyIsIl9fQ0FOQ0VMX18iLCJleGVjdXRvciIsIlR5cGVFcnJvciIsInJlc29sdmVQcm9taXNlIiwicHJvbWlzZSIsInRva2VuIiwidGhlbiIsIl9saXN0ZW5lcnMiLCJpIiwibCIsImxlbmd0aCIsIm9uZnVsZmlsbGVkIiwiX3Jlc29sdmUiLCJyZWFzb24iLCJ0aHJvd0lmUmVxdWVzdGVkIiwibGlzdGVuZXIiLCJwdXNoIiwiaW5kZXgiLCJzcGxpY2UiLCJzb3VyY2UiLCJjIiwiSW50ZXJjZXB0b3JNYW5hZ2VyIiwiZGlzcGF0Y2hSZXF1ZXN0IiwidmFsaWRhdG9yIiwidmFsaWRhdG9ycyIsImRlZmF1bHRzIiwiaW50ZXJjZXB0b3JzIiwiY29uZmlnT3JVcmwiLCJhc3NlcnRPcHRpb25zIiwic2lsZW50SlNPTlBhcnNpbmciLCJib29sZWFuIiwiZm9yY2VkSlNPTlBhcnNpbmciLCJyZXF1ZXN0SW50ZXJjZXB0b3JDaGFpbiIsInN5bmNocm9ub3VzUmVxdWVzdEludGVyY2VwdG9ycyIsImludGVyY2VwdG9yIiwicnVuV2hlbiIsInN5bmNocm9ub3VzIiwidW5zaGlmdCIsImZ1bGZpbGxlZCIsInJlamVjdGVkIiwicmVzcG9uc2VJbnRlcmNlcHRvckNoYWluIiwiY2hhaW4iLCJBcnJheSIsImFwcGx5IiwiY29uY2F0Iiwic2hpZnQiLCJuZXdDb25maWciLCJvbkZ1bGZpbGxlZCIsIm9uUmVqZWN0ZWQiLCJlcnJvciIsImdldFVyaSIsInJlcGxhY2UiLCJoYW5kbGVycyIsInVzZSIsIm9wdGlvbnMiLCJlamVjdCIsImlkIiwiZm4iLCJoIiwiaXNBYnNvbHV0ZVVSTCIsImNvbWJpbmVVUkxzIiwicmVxdWVzdGVkVVJMIiwiZW5oYW5jZUVycm9yIiwiY29kZSIsIkVycm9yIiwidHJhbnNmb3JtRGF0YSIsInRocm93SWZDYW5jZWxsYXRpb25SZXF1ZXN0ZWQiLCJjYWxsIiwidHJhbnNmb3JtUmVxdWVzdCIsIm1lcmdlIiwiY29tbW9uIiwiYWRhcHRlciIsInRyYW5zZm9ybVJlc3BvbnNlIiwidG9KU09OIiwibmFtZSIsImRlc2NyaXB0aW9uIiwibnVtYmVyIiwiZmlsZU5hbWUiLCJsaW5lTnVtYmVyIiwiY29sdW1uTnVtYmVyIiwic3RhY2siLCJjb25maWcxIiwiY29uZmlnMiIsImdldE1lcmdlZFZhbHVlIiwidGFyZ2V0IiwiaXNQbGFpbk9iamVjdCIsImlzQXJyYXkiLCJzbGljZSIsIm1lcmdlRGVlcFByb3BlcnRpZXMiLCJwcm9wIiwidmFsdWVGcm9tQ29uZmlnMiIsImRlZmF1bHRUb0NvbmZpZzIiLCJtZXJnZURpcmVjdEtleXMiLCJtZXJnZU1hcCIsIk9iamVjdCIsImtleXMiLCJjb25maWdWYWx1ZSIsInZhbGlkYXRlU3RhdHVzIiwiZm5zIiwibm9ybWFsaXplSGVhZGVyTmFtZSIsIkRFRkFVTFRfQ09OVEVOVF9UWVBFIiwic2V0Q29udGVudFR5cGVJZlVuc2V0IiwicHJvY2VzcyIsImlzQXJyYXlCdWZmZXIiLCJpc0J1ZmZlciIsImlzU3RyZWFtIiwiaXNGaWxlIiwiaXNCbG9iIiwiaXNBcnJheUJ1ZmZlclZpZXciLCJidWZmZXIiLCJpc1VSTFNlYXJjaFBhcmFtcyIsImlzT2JqZWN0IiwicmF3VmFsdWUiLCJwYXJzZXIiLCJlbmNvZGVyIiwiaXNTdHJpbmciLCJKU09OIiwicGFyc2UiLCJ0cmltIiwiZSIsInN0cmluZ2lmeSIsInN0cmluZ2lmeVNhZmVseSIsInN0cmljdEpTT05QYXJzaW5nIiwibWF4Q29udGVudExlbmd0aCIsIm1heEJvZHlMZW5ndGgiLCJ0aGlzQXJnIiwiYXJncyIsImFyZ3VtZW50cyIsImVuY29kZSIsInNlcmlhbGl6ZWRQYXJhbXMiLCJwYXJ0cyIsInYiLCJpc0RhdGUiLCJ0b0lTT1N0cmluZyIsImpvaW4iLCJoYXNobWFya0luZGV4IiwicmVsYXRpdmVVUkwiLCJ3cml0ZSIsImV4cGlyZXMiLCJwYXRoIiwiZG9tYWluIiwic2VjdXJlIiwiY29va2llIiwiaXNOdW1iZXIiLCJEYXRlIiwidG9HTVRTdHJpbmciLCJkb2N1bWVudCIsIm1hdGNoIiwiUmVnRXhwIiwiZGVjb2RlVVJJQ29tcG9uZW50IiwicmVtb3ZlIiwibm93IiwidGVzdCIsInBheWxvYWQiLCJvcmlnaW5VUkwiLCJtc2llIiwibmF2aWdhdG9yIiwidXNlckFnZW50IiwidXJsUGFyc2luZ05vZGUiLCJjcmVhdGVFbGVtZW50IiwicmVzb2x2ZVVSTCIsImhyZWYiLCJzZXRBdHRyaWJ1dGUiLCJwcm90b2NvbCIsImhvc3QiLCJzZWFyY2giLCJoYXNoIiwiaG9zdG5hbWUiLCJwb3J0IiwicGF0aG5hbWUiLCJjaGFyQXQiLCJ3aW5kb3ciLCJsb2NhdGlvbiIsInJlcXVlc3RVUkwiLCJwYXJzZWQiLCJub3JtYWxpemVkTmFtZSIsImlnbm9yZUR1cGxpY2F0ZU9mIiwic3BsaXQiLCJsaW5lIiwic3Vic3RyIiwiY2FsbGJhY2siLCJhcnIiLCJ0aGluZyIsImRlcHJlY2F0ZWRXYXJuaW5ncyIsInZlcnNpb24iLCJmb3JtYXRNZXNzYWdlIiwib3B0IiwiZGVzYyIsIm9wdHMiLCJjb25zb2xlIiwid2FybiIsInNjaGVtYSIsImFsbG93VW5rbm93biIsInJlc3VsdCIsImdldFByb3RvdHlwZU9mIiwiaXNGdW5jdGlvbiIsIm9iaiIsImhhc093blByb3BlcnR5IiwiY29uc3RydWN0b3IiLCJBcnJheUJ1ZmZlciIsImlzVmlldyIsInBpcGUiLCJwcm9kdWN0IiwiYXNzaWduVmFsdWUiLCJhIiwiYiIsInN0ciIsInN0cmlwQk9NIiwiY29udGVudCIsImNoYXJDb2RlQXQiLCJfX19DU1NfTE9BREVSX0VYUE9SVF9fXyIsImxvY2FscyIsImNzc1dpdGhNYXBwaW5nVG9TdHJpbmciLCJsaXN0IiwibWFwIiwiaXRlbSIsIm5lZWRMYXllciIsIm1vZHVsZXMiLCJtZWRpYSIsImRlZHVwZSIsInN1cHBvcnRzIiwibGF5ZXIiLCJhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzIiwiayIsIl9rIiwiY3NzTWFwcGluZyIsImJhc2U2NCIsInNvdXJjZU1hcHBpbmciLCJzb3VyY2VVUkxzIiwic291cmNlcyIsInNvdXJjZVJvb3QiLCJleHBhbmRJUHY2IiwiaXBhZGRyIiwiaXB2NFBhcnQiLCJpcHY0UmVnZXhlcyIsImlwdjZQYXJ0IiwiaXB2NlJlZ2V4ZXMiLCJtYXRjaENJRFIiLCJ6b25lSW5kZXgiLCJmaXJzdCIsInNlY29uZCIsInBhcnRTaXplIiwiY2lkckJpdHMiLCJwYXJ0Iiwic3VibmV0TWF0Y2giLCJhZGRyZXNzIiwicmFuZ2VMaXN0IiwiZGVmYXVsdE5hbWUiLCJsZW4iLCJyYW5nZU5hbWUiLCJyYW5nZVN1Ym5ldHMiLCJzdWJuZXQiLCJraW5kIiwiSVB2NCIsIm9jdGV0cyIsIm9jdGV0IiwidG9Ob3JtYWxpemVkU3RyaW5nIiwidG9CeXRlQXJyYXkiLCJvdGhlciIsImNpZHJSYW5nZSIsInJlZiIsIlNwZWNpYWxSYW5nZXMiLCJ1bnNwZWNpZmllZCIsImJyb2FkY2FzdCIsIm11bHRpY2FzdCIsImxpbmtMb2NhbCIsImxvb3BiYWNrIiwiY2FycmllckdyYWRlTmF0IiwicmVzZXJ2ZWQiLCJyYW5nZSIsInRvSVB2NE1hcHBlZEFkZHJlc3MiLCJJUHY2IiwicHJlZml4TGVuZ3RoRnJvbVN1Ym5ldE1hc2siLCJjaWRyIiwic3RvcCIsInplcm9zIiwiemVyb3RhYmxlIiwiZm91ck9jdGV0IiwibG9uZ1ZhbHVlIiwic3RyaW5nIiwicGFyc2VJbnRBdXRvIiwicGFyc2VJbnQiLCJyZXN1bHRzIiwicmV2ZXJzZSIsInpvbmVJZCIsInRvUkZDNTk1MlN0cmluZyIsImJlc3RNYXRjaEluZGV4IiwiYmVzdE1hdGNoTGVuZ3RoIiwicmVnZXgiLCJleGVjIiwic3Vic3RyaW5nIiwiYnl0ZXMiLCJhZGRyIiwic3VmZml4IiwidG9GaXhlZExlbmd0aFN0cmluZyIsInBhZFN0YXJ0IiwidW5pcXVlTG9jYWwiLCJpcHY0TWFwcGVkIiwicmZjNjE0NSIsInJmYzYwNTIiLCJ0ZXJlZG8iLCJpc0lQdjRNYXBwZWRBZGRyZXNzIiwidG9JUHY0QWRkcmVzcyIsImhpZ2giLCJsb3ciLCJjb2xvbkNvdW50IiwibGFzdENvbG9uIiwicmVwbGFjZW1lbnQiLCJyZXBsYWNlbWVudENvdW50IiwibGFzdEluZGV4T2YiLCJpc0lQdjQiLCJpc0lQdjYiLCJpc1ZhbGlkIiwiZXJyb3IxIiwiaXNWYWxpZEZvdXJQYXJ0RGVjaW1hbCIsInBhcnNlQ0lEUiIsIm1hc2tMZW5ndGgiLCJkZWZpbmVQcm9wZXJ0eSIsInN1Ym5ldE1hc2tGcm9tUHJlZml4TGVuZ3RoIiwicHJlZml4IiwiZmlsbGVkT2N0ZXRDb3VudCIsImoiLCJNYXRoIiwiZmxvb3IiLCJwb3ciLCJicm9hZGNhc3RBZGRyZXNzRnJvbUNJRFIiLCJpcEludGVyZmFjZU9jdGV0cyIsInN1Ym5ldE1hc2tPY3RldHMiLCJuZXR3b3JrQWRkcmVzc0Zyb21DSURSIiwiZnJvbUJ5dGVBcnJheSIsImFhIiwiYmEiLCJwIiwiY2EiLCJTZXQiLCJkYSIsImVhIiwiZmEiLCJhZGQiLCJoYSIsImlhIiwiamEiLCJrYSIsImxhIiwicSIsImQiLCJmIiwiZyIsImFjY2VwdHNCb29sZWFucyIsImF0dHJpYnV0ZU5hbWUiLCJhdHRyaWJ1dGVOYW1lc3BhY2UiLCJtdXN0VXNlUHJvcGVydHkiLCJwcm9wZXJ0eU5hbWUiLCJzYW5pdGl6ZVVSTCIsInJlbW92ZUVtcHR5U3RyaW5nIiwieiIsInBhIiwicWEiLCJyYSIsIm5hIiwiaXNOYU4iLCJvYSIsIm1hIiwicmVtb3ZlQXR0cmlidXRlIiwic2V0QXR0cmlidXRlTlMiLCJ4bGlua0hyZWYiLCJzYSIsIl9fU0VDUkVUX0lOVEVSTkFMU19ET19OT1RfVVNFX09SX1lPVV9XSUxMX0JFX0ZJUkVEIiwidGEiLCJTeW1ib2wiLCJmb3IiLCJ1YSIsInZhIiwid2EiLCJ4YSIsInlhIiwiQWEiLCJCYSIsIkNhIiwiRGEiLCJFYSIsIkZhIiwiR2EiLCJIYSIsIml0ZXJhdG9yIiwiSWEiLCJKYSIsIkEiLCJhc3NpZ24iLCJLYSIsIkxhIiwiTWEiLCJwcmVwYXJlU3RhY2tUcmFjZSIsInNldCIsIlJlZmxlY3QiLCJjb25zdHJ1Y3QiLCJkaXNwbGF5TmFtZSIsImluY2x1ZGVzIiwiTmEiLCJ0YWciLCJyZW5kZXIiLCJPYSIsIiQkdHlwZW9mIiwiX2NvbnRleHQiLCJfcGF5bG9hZCIsIl9pbml0IiwiUGEiLCJRYSIsIlJhIiwibm9kZU5hbWUiLCJUYSIsIl92YWx1ZVRyYWNrZXIiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJnZXQiLCJjb25maWd1cmFibGUiLCJlbnVtZXJhYmxlIiwiZ2V0VmFsdWUiLCJzZXRWYWx1ZSIsInN0b3BUcmFja2luZyIsIlNhIiwiVWEiLCJjaGVja2VkIiwiVmEiLCJhY3RpdmVFbGVtZW50IiwiYm9keSIsIldhIiwiZGVmYXVsdENoZWNrZWQiLCJkZWZhdWx0VmFsdWUiLCJfd3JhcHBlclN0YXRlIiwiaW5pdGlhbENoZWNrZWQiLCJYYSIsImluaXRpYWxWYWx1ZSIsImNvbnRyb2xsZWQiLCJZYSIsIlphIiwiJGEiLCJhYiIsIm93bmVyRG9jdW1lbnQiLCJiYiIsImNiIiwic2VsZWN0ZWQiLCJkZWZhdWx0U2VsZWN0ZWQiLCJkaXNhYmxlZCIsImRiIiwiZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwiLCJjaGlsZHJlbiIsImViIiwiZmIiLCJnYiIsInRleHRDb250ZW50IiwiaGIiLCJpYiIsImpiIiwia2IiLCJuYW1lc3BhY2VVUkkiLCJpbm5lckhUTUwiLCJ2YWx1ZU9mIiwiZmlyc3RDaGlsZCIsInJlbW92ZUNoaWxkIiwiYXBwZW5kQ2hpbGQiLCJNU0FwcCIsImV4ZWNVbnNhZmVMb2NhbEZ1bmN0aW9uIiwibGIiLCJsYXN0Q2hpbGQiLCJub2RlVHlwZSIsIm5vZGVWYWx1ZSIsIm1iIiwiYW5pbWF0aW9uSXRlcmF0aW9uQ291bnQiLCJhc3BlY3RSYXRpbyIsImJvcmRlckltYWdlT3V0c2V0IiwiYm9yZGVySW1hZ2VTbGljZSIsImJvcmRlckltYWdlV2lkdGgiLCJib3hGbGV4IiwiYm94RmxleEdyb3VwIiwiYm94T3JkaW5hbEdyb3VwIiwiY29sdW1uQ291bnQiLCJjb2x1bW5zIiwiZmxleCIsImZsZXhHcm93IiwiZmxleFBvc2l0aXZlIiwiZmxleFNocmluayIsImZsZXhOZWdhdGl2ZSIsImZsZXhPcmRlciIsImdyaWRBcmVhIiwiZ3JpZFJvdyIsImdyaWRSb3dFbmQiLCJncmlkUm93U3BhbiIsImdyaWRSb3dTdGFydCIsImdyaWRDb2x1bW4iLCJncmlkQ29sdW1uRW5kIiwiZ3JpZENvbHVtblNwYW4iLCJncmlkQ29sdW1uU3RhcnQiLCJmb250V2VpZ2h0IiwibGluZUNsYW1wIiwibGluZUhlaWdodCIsIm9wYWNpdHkiLCJvcmRlciIsIm9ycGhhbnMiLCJ0YWJTaXplIiwid2lkb3dzIiwiekluZGV4Iiwiem9vbSIsImZpbGxPcGFjaXR5IiwiZmxvb2RPcGFjaXR5Iiwic3RvcE9wYWNpdHkiLCJzdHJva2VEYXNoYXJyYXkiLCJzdHJva2VEYXNob2Zmc2V0Iiwic3Ryb2tlTWl0ZXJsaW1pdCIsInN0cm9rZU9wYWNpdHkiLCJzdHJva2VXaWR0aCIsIm5iIiwib2IiLCJwYiIsInN0eWxlIiwic2V0UHJvcGVydHkiLCJxYiIsIm1lbnVpdGVtIiwiYXJlYSIsImJhc2UiLCJiciIsImNvbCIsImVtYmVkIiwiaHIiLCJpbWciLCJpbnB1dCIsImtleWdlbiIsImxpbmsiLCJtZXRhIiwicGFyYW0iLCJ0cmFjayIsIndiciIsInJiIiwic2IiLCJpcyIsInRiIiwidWIiLCJzcmNFbGVtZW50IiwiY29ycmVzcG9uZGluZ1VzZUVsZW1lbnQiLCJwYXJlbnROb2RlIiwidmIiLCJ3YiIsInhiIiwieWIiLCJ6YiIsInN0YXRlTm9kZSIsIkFiIiwiQmIiLCJDYiIsIkRiIiwiRWIiLCJGYiIsIkdiIiwiSGIiLCJJYiIsIkpiIiwiS2IiLCJtIiwib25FcnJvciIsIkxiIiwiTWIiLCJOYiIsIk9iIiwiUGIiLCJRYiIsIlNiIiwiYWx0ZXJuYXRlIiwicmV0dXJuIiwiZmxhZ3MiLCJUYiIsIm1lbW9pemVkU3RhdGUiLCJkZWh5ZHJhdGVkIiwiVWIiLCJXYiIsImNoaWxkIiwic2libGluZyIsImN1cnJlbnQiLCJWYiIsIlhiIiwiWWIiLCJ1bnN0YWJsZV9zY2hlZHVsZUNhbGxiYWNrIiwiWmIiLCJ1bnN0YWJsZV9jYW5jZWxDYWxsYmFjayIsIiRiIiwidW5zdGFibGVfc2hvdWxkWWllbGQiLCJhYyIsInVuc3RhYmxlX3JlcXVlc3RQYWludCIsIkQiLCJ1bnN0YWJsZV9ub3ciLCJiYyIsInVuc3RhYmxlX2dldEN1cnJlbnRQcmlvcml0eUxldmVsIiwiY2MiLCJ1bnN0YWJsZV9JbW1lZGlhdGVQcmlvcml0eSIsImRjIiwidW5zdGFibGVfVXNlckJsb2NraW5nUHJpb3JpdHkiLCJlYyIsInVuc3RhYmxlX05vcm1hbFByaW9yaXR5IiwiZmMiLCJ1bnN0YWJsZV9Mb3dQcmlvcml0eSIsImdjIiwidW5zdGFibGVfSWRsZVByaW9yaXR5IiwiaGMiLCJpYyIsImxjIiwiY2x6MzIiLCJtYyIsIm5jIiwibG9nIiwiTE4yIiwib2MiLCJwYyIsInFjIiwicmMiLCJwZW5kaW5nTGFuZXMiLCJzdXNwZW5kZWRMYW5lcyIsInBpbmdlZExhbmVzIiwiZW50YW5nbGVkTGFuZXMiLCJlbnRhbmdsZW1lbnRzIiwic2MiLCJ1YyIsInZjIiwid2MiLCJldmVudFRpbWVzIiwieWMiLCJFIiwiemMiLCJBYyIsIkJjIiwiQ2MiLCJEYyIsIkVjIiwiRmMiLCJHYyIsIkhjIiwiSWMiLCJKYyIsIktjIiwiTWFwIiwiTGMiLCJNYyIsIk5jIiwiT2MiLCJkZWxldGUiLCJwb2ludGVySWQiLCJQYyIsIm5hdGl2ZUV2ZW50IiwiYmxvY2tlZE9uIiwiZG9tRXZlbnROYW1lIiwiZXZlbnRTeXN0ZW1GbGFncyIsInRhcmdldENvbnRhaW5lcnMiLCJSYyIsIlNjIiwicHJpb3JpdHkiLCJpc0RlaHlkcmF0ZWQiLCJjb250YWluZXJJbmZvIiwiVGMiLCJVYyIsImRpc3BhdGNoRXZlbnQiLCJWYyIsIldjIiwiWGMiLCJZYyIsIlpjIiwiUmVhY3RDdXJyZW50QmF0Y2hDb25maWciLCIkYyIsInRyYW5zaXRpb24iLCJhZCIsImJkIiwiY2QiLCJkZCIsIlFjIiwic3RvcFByb3BhZ2F0aW9uIiwiZWQiLCJmZCIsImdkIiwiaGQiLCJqZCIsImtleUNvZGUiLCJjaGFyQ29kZSIsImtkIiwibGQiLCJtZCIsIl9yZWFjdE5hbWUiLCJfdGFyZ2V0SW5zdCIsImN1cnJlbnRUYXJnZXQiLCJpc0RlZmF1bHRQcmV2ZW50ZWQiLCJkZWZhdWx0UHJldmVudGVkIiwicmV0dXJuVmFsdWUiLCJpc1Byb3BhZ2F0aW9uU3RvcHBlZCIsInByZXZlbnREZWZhdWx0IiwiY2FuY2VsQnViYmxlIiwicGVyc2lzdCIsImlzUGVyc2lzdGVudCIsInJkIiwic2QiLCJ0ZCIsIm5kIiwiZXZlbnRQaGFzZSIsImJ1YmJsZXMiLCJjYW5jZWxhYmxlIiwidGltZVN0YW1wIiwiaXNUcnVzdGVkIiwib2QiLCJwZCIsInZpZXciLCJkZXRhaWwiLCJxZCIsInZkIiwic2NyZWVuWCIsInNjcmVlblkiLCJjbGllbnRYIiwiY2xpZW50WSIsInBhZ2VYIiwicGFnZVkiLCJjdHJsS2V5Iiwic2hpZnRLZXkiLCJhbHRLZXkiLCJtZXRhS2V5IiwiZ2V0TW9kaWZpZXJTdGF0ZSIsInVkIiwiYnV0dG9uIiwiYnV0dG9ucyIsInJlbGF0ZWRUYXJnZXQiLCJmcm9tRWxlbWVudCIsInRvRWxlbWVudCIsIm1vdmVtZW50WCIsIm1vdmVtZW50WSIsIndkIiwieWQiLCJkYXRhVHJhbnNmZXIiLCJBZCIsIkNkIiwiYW5pbWF0aW9uTmFtZSIsImVsYXBzZWRUaW1lIiwicHNldWRvRWxlbWVudCIsIkRkIiwiY2xpcGJvYXJkRGF0YSIsIkVkIiwiR2QiLCJIZCIsIkVzYyIsIlNwYWNlYmFyIiwiTGVmdCIsIlVwIiwiUmlnaHQiLCJEb3duIiwiRGVsIiwiV2luIiwiTWVudSIsIkFwcHMiLCJTY3JvbGwiLCJNb3pQcmludGFibGVLZXkiLCJJZCIsIkpkIiwiQWx0IiwiQ29udHJvbCIsIk1ldGEiLCJTaGlmdCIsIktkIiwiTGQiLCJTdHJpbmciLCJmcm9tQ2hhckNvZGUiLCJyZXBlYXQiLCJsb2NhbGUiLCJ3aGljaCIsIk1kIiwiT2QiLCJ3aWR0aCIsImhlaWdodCIsInByZXNzdXJlIiwidGFuZ2VudGlhbFByZXNzdXJlIiwidGlsdFgiLCJ0aWx0WSIsInR3aXN0IiwicG9pbnRlclR5cGUiLCJpc1ByaW1hcnkiLCJRZCIsInRvdWNoZXMiLCJ0YXJnZXRUb3VjaGVzIiwiY2hhbmdlZFRvdWNoZXMiLCJTZCIsIlRkIiwiZGVsdGFYIiwid2hlZWxEZWx0YVgiLCJkZWx0YVkiLCJ3aGVlbERlbHRhWSIsIndoZWVsRGVsdGEiLCJkZWx0YVoiLCJkZWx0YU1vZGUiLCJVZCIsIlZkIiwiV2QiLCJYZCIsImRvY3VtZW50TW9kZSIsIllkIiwiWmQiLCIkZCIsImFlIiwiYmUiLCJjZSIsImRlIiwiZ2UiLCJjb2xvciIsImRhdGUiLCJkYXRldGltZSIsImVtYWlsIiwibW9udGgiLCJ0ZWwiLCJ0ZXh0IiwidGltZSIsIndlZWsiLCJoZSIsImllIiwiamUiLCJldmVudCIsImxpc3RlbmVycyIsImtlIiwibGUiLCJtZSIsIm5lIiwib2UiLCJwZSIsInFlIiwicmUiLCJzZSIsInRlIiwidWUiLCJvbmlucHV0IiwidmUiLCJkZXRhY2hFdmVudCIsIndlIiwieGUiLCJhdHRhY2hFdmVudCIsInllIiwiemUiLCJBZSIsIkNlIiwiRGUiLCJFZSIsIkZlIiwibm9kZSIsIm9mZnNldCIsIm5leHRTaWJsaW5nIiwiR2UiLCJjb250YWlucyIsImNvbXBhcmVEb2N1bWVudFBvc2l0aW9uIiwiSGUiLCJIVE1MSUZyYW1lRWxlbWVudCIsImNvbnRlbnRXaW5kb3ciLCJJZSIsImNvbnRlbnRFZGl0YWJsZSIsIkplIiwiZm9jdXNlZEVsZW0iLCJzZWxlY3Rpb25SYW5nZSIsImRvY3VtZW50RWxlbWVudCIsInN0YXJ0IiwiZW5kIiwic2VsZWN0aW9uU3RhcnQiLCJzZWxlY3Rpb25FbmQiLCJtaW4iLCJkZWZhdWx0VmlldyIsImdldFNlbGVjdGlvbiIsInJhbmdlQ291bnQiLCJhbmNob3JOb2RlIiwiYW5jaG9yT2Zmc2V0IiwiZm9jdXNOb2RlIiwiZm9jdXNPZmZzZXQiLCJjcmVhdGVSYW5nZSIsInNldFN0YXJ0IiwicmVtb3ZlQWxsUmFuZ2VzIiwiYWRkUmFuZ2UiLCJzZXRFbmQiLCJlbGVtZW50IiwibGVmdCIsInNjcm9sbExlZnQiLCJ0b3AiLCJzY3JvbGxUb3AiLCJmb2N1cyIsIktlIiwiTGUiLCJNZSIsIk5lIiwiT2UiLCJQZSIsIlFlIiwiUmUiLCJhbmltYXRpb25lbmQiLCJhbmltYXRpb25pdGVyYXRpb24iLCJhbmltYXRpb25zdGFydCIsInRyYW5zaXRpb25lbmQiLCJTZSIsIlRlIiwiVWUiLCJhbmltYXRpb24iLCJWZSIsIldlIiwiWGUiLCJZZSIsIlplIiwiJGUiLCJhZiIsImJmIiwiY2YiLCJmZiIsImdmIiwiaGYiLCJSYiIsIkYiLCJqZiIsImhhcyIsImtmIiwibGYiLCJtZiIsInJhbmRvbSIsIm5mIiwiY2FwdHVyZSIsInBhc3NpdmUiLCJuIiwiQyIsInQiLCJ4IiwiciIsIkIiLCJvZiIsInBmIiwicGFyZW50V2luZG93IiwicWYiLCJyZiIsIk8iLCJUIiwiemEiLCJMIiwiZWUiLCJjaGFyIiwiZmUiLCJzZiIsInRmIiwidWYiLCJ2ZiIsIndmIiwieGYiLCJ5ZiIsIl9faHRtbCIsInpmIiwiQWYiLCJjbGVhclRpbWVvdXQiLCJCZiIsIkRmIiwicXVldWVNaWNyb3Rhc2siLCJjYXRjaCIsIkNmIiwiRWYiLCJGZiIsIkdmIiwicHJldmlvdXNTaWJsaW5nIiwiSGYiLCJJZiIsIkpmIiwiS2YiLCJMZiIsIk1mIiwiTmYiLCJPZiIsIkciLCJIIiwiUGYiLCJJIiwiUWYiLCJSZiIsIlNmIiwiY29udGV4dFR5cGVzIiwiX19yZWFjdEludGVybmFsTWVtb2l6ZWRVbm1hc2tlZENoaWxkQ29udGV4dCIsIl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkTWFza2VkQ2hpbGRDb250ZXh0IiwiVGYiLCJjaGlsZENvbnRleHRUeXBlcyIsIlVmIiwiVmYiLCJXZiIsImdldENoaWxkQ29udGV4dCIsIlhmIiwiX19yZWFjdEludGVybmFsTWVtb2l6ZWRNZXJnZWRDaGlsZENvbnRleHQiLCJZZiIsIlpmIiwiJGYiLCJhZyIsImJnIiwiZGciLCJlZyIsImZnIiwiZGVmYXVsdFByb3BzIiwiZ2ciLCJoZyIsImlnIiwiamciLCJrZyIsImxnIiwiX2N1cnJlbnRWYWx1ZSIsIm1nIiwiY2hpbGRMYW5lcyIsIm5nIiwiZGVwZW5kZW5jaWVzIiwiZmlyc3RDb250ZXh0IiwibGFuZXMiLCJvZyIsInBnIiwibWVtb2l6ZWRWYWx1ZSIsIm5leHQiLCJxZyIsInJnIiwic2ciLCJ1cGRhdGVRdWV1ZSIsImJhc2VTdGF0ZSIsImZpcnN0QmFzZVVwZGF0ZSIsImxhc3RCYXNlVXBkYXRlIiwic2hhcmVkIiwicGVuZGluZyIsImludGVybGVhdmVkIiwiZWZmZWN0cyIsInRnIiwidWciLCJldmVudFRpbWUiLCJsYW5lIiwidmciLCJKIiwibW9kZSIsIksiLCJ3ZyIsInhnIiwieWciLCJ3IiwidSIsInkiLCJ6ZyIsIkFnIiwiQmciLCJDb21wb25lbnQiLCJyZWZzIiwiQ2ciLCJGZyIsImlzTW91bnRlZCIsIl9yZWFjdEludGVybmFscyIsImVucXVldWVTZXRTdGF0ZSIsIk0iLCJEZyIsIkVnIiwiZW5xdWV1ZVJlcGxhY2VTdGF0ZSIsImVucXVldWVGb3JjZVVwZGF0ZSIsIkdnIiwic2hvdWxkQ29tcG9uZW50VXBkYXRlIiwiaXNQdXJlUmVhY3RDb21wb25lbnQiLCJIZyIsImNvbnRleHRUeXBlIiwic3RhdGUiLCJ1cGRhdGVyIiwiSWciLCJjb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzIiwiVU5TQUZFX2NvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMiLCJKZyIsInByb3BzIiwiZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzIiwiZ2V0U25hcHNob3RCZWZvcmVVcGRhdGUiLCJVTlNBRkVfY29tcG9uZW50V2lsbE1vdW50IiwiY29tcG9uZW50V2lsbE1vdW50IiwiY29tcG9uZW50RGlkTW91bnQiLCJLZyIsIkxnIiwiTWciLCJOZyIsIk9nIiwiUGciLCJRZyIsIlJnIiwiU2ciLCJUZyIsIlVnIiwiVmciLCJXZyIsIlhnIiwiWWciLCJOIiwiWmciLCIkZyIsImFoIiwiZWxlbWVudFR5cGUiLCJkZWxldGlvbnMiLCJiaCIsInBlbmRpbmdQcm9wcyIsIm92ZXJmbG93IiwidHJlZUNvbnRleHQiLCJyZXRyeUxhbmUiLCJjaCIsImRoIiwiZWgiLCJmaCIsIm1lbW9pemVkUHJvcHMiLCJnaCIsImhoIiwiaWgiLCJfb3duZXIiLCJfc3RyaW5nUmVmIiwiamgiLCJraCIsImxoIiwibWgiLCJuaCIsIm9oIiwiaW1wbGVtZW50YXRpb24iLCJwaCIsInFoIiwicmgiLCJzaCIsInRoIiwidWgiLCJ2aCIsIndoIiwieGgiLCJ5aCIsInRhZ05hbWUiLCJ6aCIsIkFoIiwiQmgiLCJQIiwiQ2giLCJyZXZlYWxPcmRlciIsIkRoIiwiRWgiLCJfd29ya0luUHJvZ3Jlc3NWZXJzaW9uUHJpbWFyeSIsIkZoIiwiUmVhY3RDdXJyZW50RGlzcGF0Y2hlciIsIkdoIiwiSGgiLCJRIiwiUiIsIlMiLCJJaCIsIkpoIiwiS2giLCJMaCIsIlUiLCJNaCIsIk5oIiwiT2giLCJQaCIsIlFoIiwiUmgiLCJTaCIsIlRoIiwiYmFzZVF1ZXVlIiwicXVldWUiLCJVaCIsIlZoIiwiV2giLCJsYXN0UmVuZGVyZWRSZWR1Y2VyIiwiYWN0aW9uIiwiaGFzRWFnZXJTdGF0ZSIsImVhZ2VyU3RhdGUiLCJsYXN0UmVuZGVyZWRTdGF0ZSIsImRpc3BhdGNoIiwiWGgiLCJZaCIsIlpoIiwiJGgiLCJhaSIsImdldFNuYXBzaG90IiwiYmkiLCJjaSIsImRpIiwibGFzdEVmZmVjdCIsInN0b3JlcyIsImVpIiwiZmkiLCJnaSIsImRlc3Ryb3kiLCJkZXBzIiwiaGkiLCJpaSIsImppIiwia2kiLCJsaSIsIm1pIiwibmkiLCJvaSIsInBpIiwicWkiLCJyaSIsInNpIiwidGkiLCJ1aSIsInZpIiwid2kiLCJ4aSIsInlpIiwicmVhZENvbnRleHQiLCJ1c2VDYWxsYmFjayIsInVzZUNvbnRleHQiLCJ1c2VFZmZlY3QiLCJ1c2VJbXBlcmF0aXZlSGFuZGxlIiwidXNlSW5zZXJ0aW9uRWZmZWN0IiwidXNlTGF5b3V0RWZmZWN0IiwidXNlTWVtbyIsInVzZVJlZHVjZXIiLCJ1c2VSZWYiLCJ1c2VTdGF0ZSIsInVzZURlYnVnVmFsdWUiLCJ1c2VEZWZlcnJlZFZhbHVlIiwidXNlVHJhbnNpdGlvbiIsInVzZU11dGFibGVTb3VyY2UiLCJ1c2VTeW5jRXh0ZXJuYWxTdG9yZSIsInVzZUlkIiwidW5zdGFibGVfaXNOZXdSZWNvbmNpbGVyIiwiaWRlbnRpZmllclByZWZpeCIsInppIiwiQWkiLCJMaSIsIk5pIiwiT2kiLCJCaSIsIldlYWtNYXAiLCJDaSIsIkRpIiwiRWkiLCJGaSIsImdldERlcml2ZWRTdGF0ZUZyb21FcnJvciIsImNvbXBvbmVudERpZENhdGNoIiwiR2kiLCJjb21wb25lbnRTdGFjayIsIkhpIiwicGluZ0NhY2hlIiwiSWkiLCJKaSIsIktpIiwiUGkiLCJ0YWlsTW9kZSIsInRhaWwiLCJWIiwic3VidHJlZUZsYWdzIiwiUWkiLCJwZW5kaW5nQ29udGV4dCIsIlJpIiwid2FzTXVsdGlwbGUiLCJtdWx0aXBsZSIsIm9uQ2xpY2siLCJvbmNsaWNrIiwic2l6ZSIsImNyZWF0ZUVsZW1lbnROUyIsImF1dG9Gb2N1cyIsImNyZWF0ZVRleHROb2RlIiwiVyIsIlNpIiwicmVuZGVyaW5nIiwiVGkiLCJyZW5kZXJpbmdTdGFydFRpbWUiLCJpc0JhY2t3YXJkcyIsImxhc3QiLCJVaSIsIlZpIiwiV2kiLCJSZWFjdEN1cnJlbnRPd25lciIsIlhpIiwiWWkiLCJaaSIsIiRpIiwiYWoiLCJjb21wYXJlIiwiYmoiLCJjaiIsImRqIiwiYmFzZUxhbmVzIiwiY2FjaGVQb29sIiwiZWoiLCJmaiIsImdqIiwiVU5TQUZFX2NvbXBvbmVudFdpbGxVcGRhdGUiLCJjb21wb25lbnRXaWxsVXBkYXRlIiwiY29tcG9uZW50RGlkVXBkYXRlIiwiaGoiLCJpaiIsImpqIiwia2oiLCJsaiIsIm1qIiwiZmFsbGJhY2siLCJuaiIsIm9qIiwicGoiLCJxaiIsIl9yZWFjdFJldHJ5IiwicmoiLCJzaiIsInRqIiwidWoiLCJ2aiIsInhqIiwieWoiLCJ6aiIsIkFqIiwiV2Vha1NldCIsIlgiLCJCaiIsIkNqIiwiRGoiLCJFaiIsIkdqIiwiSGoiLCJJaiIsIkpqIiwib25Db21taXRGaWJlclVubW91bnQiLCJjb21wb25lbnRXaWxsVW5tb3VudCIsIktqIiwiTGoiLCJNaiIsIk5qIiwiT2oiLCJQaiIsIlFqIiwiaW5zZXJ0QmVmb3JlIiwiX3JlYWN0Um9vdENvbnRhaW5lciIsIlJqIiwiVGoiLCJTaiIsIlhqIiwiWWoiLCJaaiIsImFrIiwiX19yZWFjdEludGVybmFsU25hcHNob3RCZWZvcmVVcGRhdGUiLCJzcmMiLCJXaiIsIkxrIiwiYmsiLCJjZWlsIiwiY2siLCJkayIsImVrIiwiWSIsIloiLCJmayIsImdrIiwiaGsiLCJpayIsImprIiwiVmoiLCJJbmZpbml0eSIsImtrIiwibGsiLCJtayIsIm5rIiwib2siLCJwayIsInFrIiwicmsiLCJzayIsInRrIiwiY2FsbGJhY2tOb2RlIiwiZXhwaXJhdGlvblRpbWVzIiwiZXhwaXJlZExhbmVzIiwidGMiLCJjYWxsYmFja1ByaW9yaXR5IiwiY2ciLCJ1ayIsInZrIiwid2siLCJ4ayIsInlrIiwiemsiLCJBayIsIkJrIiwiQ2siLCJEayIsIkVrIiwiZmluaXNoZWRXb3JrIiwiZmluaXNoZWRMYW5lcyIsIkZrIiwidGltZW91dEhhbmRsZSIsIkdrIiwiSGsiLCJJayIsIkprIiwiS2siLCJtdXRhYmxlUmVhZExhbmVzIiwieGMiLCJGaiIsImRpc3BsYXkiLCJVaiIsIm9uQ29tbWl0RmliZXJSb290IiwiamMiLCJvblJlY292ZXJhYmxlRXJyb3IiLCJNayIsIm9uUG9zdENvbW1pdEZpYmVyUm9vdCIsIk5rIiwiT2siLCJRayIsImlzUmVhY3RDb21wb25lbnQiLCJwZW5kaW5nQ2hpbGRyZW4iLCJSayIsIm11dGFibGVTb3VyY2VFYWdlckh5ZHJhdGlvbkRhdGEiLCJTayIsImNhY2hlIiwidHJhbnNpdGlvbnMiLCJUayIsIlVrIiwiVmsiLCJXayIsIlhrIiwiWWsiLCJaayIsIndqIiwiUGsiLCJhbCIsInJlcG9ydEVycm9yIiwiYmwiLCJfaW50ZXJuYWxSb290IiwiY2wiLCJkbCIsImVsIiwiZmwiLCJobCIsImdsIiwidW5tb3VudCIsInVuc3RhYmxlX3NjaGVkdWxlSHlkcmF0aW9uIiwicXVlcnlTZWxlY3RvckFsbCIsImZvcm0iLCJpbCIsInVzaW5nQ2xpZW50RW50cnlQb2ludCIsIkV2ZW50cyIsImpsIiwiZmluZEZpYmVyQnlIb3N0SW5zdGFuY2UiLCJidW5kbGVUeXBlIiwicmVuZGVyZXJQYWNrYWdlTmFtZSIsImtsIiwicmVuZGVyZXJDb25maWciLCJvdmVycmlkZUhvb2tTdGF0ZSIsIm92ZXJyaWRlSG9va1N0YXRlRGVsZXRlUGF0aCIsIm92ZXJyaWRlSG9va1N0YXRlUmVuYW1lUGF0aCIsIm92ZXJyaWRlUHJvcHMiLCJvdmVycmlkZVByb3BzRGVsZXRlUGF0aCIsIm92ZXJyaWRlUHJvcHNSZW5hbWVQYXRoIiwic2V0RXJyb3JIYW5kbGVyIiwic2V0U3VzcGVuc2VIYW5kbGVyIiwic2NoZWR1bGVVcGRhdGUiLCJjdXJyZW50RGlzcGF0Y2hlclJlZiIsImZpbmRIb3N0SW5zdGFuY2VCeUZpYmVyIiwiZmluZEhvc3RJbnN0YW5jZXNGb3JSZWZyZXNoIiwic2NoZWR1bGVSZWZyZXNoIiwic2NoZWR1bGVSb290Iiwic2V0UmVmcmVzaEhhbmRsZXIiLCJnZXRDdXJyZW50RmliZXIiLCJyZWNvbmNpbGVyVmVyc2lvbiIsIl9fUkVBQ1RfREVWVE9PTFNfR0xPQkFMX0hPT0tfXyIsImxsIiwiaXNEaXNhYmxlZCIsInN1cHBvcnRzRmliZXIiLCJpbmplY3QiLCJjcmVhdGVQb3J0YWwiLCJjcmVhdGVSb290IiwidW5zdGFibGVfc3RyaWN0TW9kZSIsImZpbmRET01Ob2RlIiwiZmx1c2hTeW5jIiwiaHlkcmF0ZSIsImh5ZHJhdGVSb290IiwiaHlkcmF0ZWRTb3VyY2VzIiwiX2dldFZlcnNpb24iLCJfc291cmNlIiwidW5tb3VudENvbXBvbmVudEF0Tm9kZSIsInVuc3RhYmxlX2JhdGNoZWRVcGRhdGVzIiwidW5zdGFibGVfcmVuZGVyU3VidHJlZUludG9Db250YWluZXIiLCJjaGVja0RDRSIsInNldFN0YXRlIiwiZm9yY2VVcGRhdGUiLCJfX3NlbGYiLCJfX3NvdXJjZSIsImVzY2FwZSIsIl9zdGF0dXMiLCJfcmVzdWx0IiwiZGVmYXVsdCIsIkNoaWxkcmVuIiwiY291bnQiLCJ0b0FycmF5Iiwib25seSIsIkZyYWdtZW50IiwiUHJvZmlsZXIiLCJQdXJlQ29tcG9uZW50IiwiU3RyaWN0TW9kZSIsIlN1c3BlbnNlIiwiY2xvbmVFbGVtZW50IiwiY3JlYXRlQ29udGV4dCIsIl9jdXJyZW50VmFsdWUyIiwiX3RocmVhZENvdW50IiwiUHJvdmlkZXIiLCJDb25zdW1lciIsIl9kZWZhdWx0VmFsdWUiLCJfZ2xvYmFsTmFtZSIsImNyZWF0ZUZhY3RvcnkiLCJjcmVhdGVSZWYiLCJmb3J3YXJkUmVmIiwiaXNWYWxpZEVsZW1lbnQiLCJsYXp5IiwibWVtbyIsInN0YXJ0VHJhbnNpdGlvbiIsInVuc3RhYmxlX2FjdCIsInJ1bnRpbWUiLCJPcCIsImhhc093biIsIiRTeW1ib2wiLCJpdGVyYXRvclN5bWJvbCIsImFzeW5jSXRlcmF0b3JTeW1ib2wiLCJhc3luY0l0ZXJhdG9yIiwidG9TdHJpbmdUYWdTeW1ib2wiLCJ0b1N0cmluZ1RhZyIsImRlZmluZSIsIndyaXRhYmxlIiwid3JhcCIsImlubmVyRm4iLCJvdXRlckZuIiwic2VsZiIsInRyeUxvY3NMaXN0IiwicHJvdG9HZW5lcmF0b3IiLCJHZW5lcmF0b3IiLCJnZW5lcmF0b3IiLCJDb250ZXh0IiwiX2ludm9rZSIsIkdlblN0YXRlU3VzcGVuZGVkU3RhcnQiLCJhcmciLCJHZW5TdGF0ZUV4ZWN1dGluZyIsIkdlblN0YXRlQ29tcGxldGVkIiwiZG9uZVJlc3VsdCIsImRlbGVnYXRlIiwiZGVsZWdhdGVSZXN1bHQiLCJtYXliZUludm9rZURlbGVnYXRlIiwiQ29udGludWVTZW50aW5lbCIsInNlbnQiLCJfc2VudCIsImRpc3BhdGNoRXhjZXB0aW9uIiwiYWJydXB0IiwicmVjb3JkIiwidHJ5Q2F0Y2giLCJHZW5TdGF0ZVN1c3BlbmRlZFlpZWxkIiwibWFrZUludm9rZU1ldGhvZCIsIkdlbmVyYXRvckZ1bmN0aW9uIiwiR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGUiLCJJdGVyYXRvclByb3RvdHlwZSIsImdldFByb3RvIiwiTmF0aXZlSXRlcmF0b3JQcm90b3R5cGUiLCJ2YWx1ZXMiLCJHcCIsImRlZmluZUl0ZXJhdG9yTWV0aG9kcyIsIkFzeW5jSXRlcmF0b3IiLCJQcm9taXNlSW1wbCIsImludm9rZSIsIl9fYXdhaXQiLCJ1bndyYXBwZWQiLCJwcmV2aW91c1Byb21pc2UiLCJjYWxsSW52b2tlV2l0aE1ldGhvZEFuZEFyZyIsImluZm8iLCJyZXN1bHROYW1lIiwibmV4dExvYyIsInB1c2hUcnlFbnRyeSIsImxvY3MiLCJlbnRyeSIsInRyeUxvYyIsImNhdGNoTG9jIiwiZmluYWxseUxvYyIsImFmdGVyTG9jIiwidHJ5RW50cmllcyIsInJlc2V0VHJ5RW50cnkiLCJjb21wbGV0aW9uIiwicmVzZXQiLCJpdGVyYWJsZSIsIml0ZXJhdG9yTWV0aG9kIiwiaXNHZW5lcmF0b3JGdW5jdGlvbiIsImdlbkZ1biIsImN0b3IiLCJtYXJrIiwic2V0UHJvdG90eXBlT2YiLCJfX3Byb3RvX18iLCJhd3JhcCIsImFzeW5jIiwiaXRlciIsIm9iamVjdCIsInBvcCIsInNraXBUZW1wUmVzZXQiLCJwcmV2Iiwicm9vdFJlY29yZCIsInJ2YWwiLCJleGNlcHRpb24iLCJoYW5kbGUiLCJsb2MiLCJjYXVnaHQiLCJoYXNDYXRjaCIsImhhc0ZpbmFsbHkiLCJmaW5hbGx5RW50cnkiLCJjb21wbGV0ZSIsImZpbmlzaCIsInRocm93biIsImRlbGVnYXRlWWllbGQiLCJyZWdlbmVyYXRvclJ1bnRpbWUiLCJhY2NpZGVudGFsU3RyaWN0TW9kZSIsImdsb2JhbFRoaXMiLCJGdW5jdGlvbiIsInNvcnRJbmRleCIsInBlcmZvcm1hbmNlIiwic2V0SW1tZWRpYXRlIiwic3RhcnRUaW1lIiwiZXhwaXJhdGlvblRpbWUiLCJwcmlvcml0eUxldmVsIiwic2NoZWR1bGluZyIsImlzSW5wdXRQZW5kaW5nIiwiTWVzc2FnZUNoYW5uZWwiLCJwb3J0MiIsInBvcnQxIiwib25tZXNzYWdlIiwicG9zdE1lc3NhZ2UiLCJ1bnN0YWJsZV9Qcm9maWxpbmciLCJ1bnN0YWJsZV9jb250aW51ZUV4ZWN1dGlvbiIsInVuc3RhYmxlX2ZvcmNlRnJhbWVSYXRlIiwidW5zdGFibGVfZ2V0Rmlyc3RDYWxsYmFja05vZGUiLCJ1bnN0YWJsZV9uZXh0IiwidW5zdGFibGVfcGF1c2VFeGVjdXRpb24iLCJ1bnN0YWJsZV9ydW5XaXRoUHJpb3JpdHkiLCJkZWxheSIsInVuc3RhYmxlX3dyYXBDYWxsYmFjayIsInN0eWxlc0luRE9NIiwiZ2V0SW5kZXhCeUlkZW50aWZpZXIiLCJpZGVudGlmaWVyIiwibW9kdWxlc1RvRG9tIiwiaWRDb3VudE1hcCIsImlkZW50aWZpZXJzIiwiaW5kZXhCeUlkZW50aWZpZXIiLCJjc3MiLCJzb3VyY2VNYXAiLCJyZWZlcmVuY2VzIiwiYWRkRWxlbWVudFN0eWxlIiwiYnlJbmRleCIsImFwaSIsImRvbUFQSSIsInVwZGF0ZSIsIm5ld09iaiIsImxhc3RJZGVudGlmaWVycyIsIm5ld0xpc3QiLCJuZXdMYXN0SWRlbnRpZmllcnMiLCJfaSIsIl9pbmRleCIsImluc2VydCIsInN0eWxlVGFyZ2V0IiwicXVlcnlTZWxlY3RvciIsImNvbnRlbnREb2N1bWVudCIsImhlYWQiLCJnZXRUYXJnZXQiLCJzZXRBdHRyaWJ1dGVzIiwiYXR0cmlidXRlcyIsInN0eWxlRWxlbWVudCIsIm5vbmNlIiwiaW5zZXJ0U3R5bGVFbGVtZW50Iiwic3R5bGVUYWdUcmFuc2Zvcm0iLCJyZW1vdmVTdHlsZUVsZW1lbnQiLCJzdHlsZVNoZWV0IiwiY3NzVGV4dCIsIl9fd2VicGFja19tb2R1bGVfY2FjaGVfXyIsIl9fd2VicGFja19yZXF1aXJlX18iLCJtb2R1bGVJZCIsImNhY2hlZE1vZHVsZSIsImxvYWRlZCIsIl9fd2VicGFja19tb2R1bGVzX18iLCJnZXR0ZXIiLCJfX2VzTW9kdWxlIiwiZGVmaW5pdGlvbiIsIm8iLCJubWQiLCJwYXRocyIsIkFjdGlvbiIsIkJlZm9yZVVubG9hZEV2ZW50VHlwZSIsInByb21wdEJlZm9yZVVubG9hZCIsImNyZWF0ZUV2ZW50cyIsImZpbHRlciIsImhhbmRsZXIiLCJwYXJzZWRQYXRoIiwiaGFzaEluZGV4Iiwic2VhcmNoSW5kZXgiLCJOYXZpZ2F0aW9uQ29udGV4dCIsIkxvY2F0aW9uQ29udGV4dCIsIlJvdXRlQ29udGV4dCIsIm91dGxldCIsIm1hdGNoZXMiLCJpbnZhcmlhbnQiLCJjb25kIiwibWF0Y2hSb3V0ZXMiLCJyb3V0ZXMiLCJsb2NhdGlvbkFyZyIsImJhc2VuYW1lIiwic3RyaXBCYXNlbmFtZSIsImJyYW5jaGVzIiwiZmxhdHRlblJvdXRlcyIsInNvcnQiLCJzY29yZSIsImV2ZXJ5IiwiY29tcGFyZUluZGV4ZXMiLCJyb3V0ZXNNZXRhIiwiY2hpbGRyZW5JbmRleCIsInJhbmtSb3V0ZUJyYW5jaGVzIiwibWF0Y2hSb3V0ZUJyYW5jaCIsInBhcmVudHNNZXRhIiwicGFyZW50UGF0aCIsInJvdXRlIiwicmVsYXRpdmVQYXRoIiwiY2FzZVNlbnNpdGl2ZSIsInN0YXJ0c1dpdGgiLCJqb2luUGF0aHMiLCJjb21wdXRlU2NvcmUiLCJwYXJhbVJlIiwiaXNTcGxhdCIsInMiLCJzZWdtZW50cyIsImluaXRpYWxTY29yZSIsInNvbWUiLCJyZWR1Y2UiLCJzZWdtZW50IiwiYnJhbmNoIiwibWF0Y2hlZFBhcmFtcyIsIm1hdGNoZWRQYXRobmFtZSIsInJlbWFpbmluZ1BhdGhuYW1lIiwibWF0Y2hQYXRoIiwicGF0aG5hbWVCYXNlIiwibm9ybWFsaXplUGF0aG5hbWUiLCJwYXR0ZXJuIiwibWF0Y2hlciIsInBhcmFtTmFtZXMiLCJyZWdleHBTb3VyY2UiLCJfIiwicGFyYW1OYW1lIiwiZW5kc1dpdGgiLCJjb21waWxlUGF0aCIsImNhcHR1cmVHcm91cHMiLCJzcGxhdFZhbHVlIiwic2FmZWx5RGVjb2RlVVJJQ29tcG9uZW50IiwibmV4dENoYXIiLCJub3JtYWxpemVTZWFyY2giLCJub3JtYWxpemVIYXNoIiwidXNlSW5Sb3V0ZXJDb250ZXh0IiwibG9jYXRpb25QYXRobmFtZSIsInJvdXRlUGF0aG5hbWVzSnNvbiIsImFjdGl2ZVJlZiIsIm5hdmlnYXRlIiwidG8iLCJnbyIsInRvQXJnIiwicm91dGVQYXRobmFtZXMiLCJmcm9tIiwidG9QYXRobmFtZSIsInJvdXRlUGF0aG5hbWVJbmRleCIsInRvU2VnbWVudHMiLCJmcm9tUGF0aG5hbWUiLCJyZXNvbHZlUGF0aG5hbWUiLCJyZXNvbHZlUGF0aCIsInJlc29sdmVUbyIsIk5hdmlnYXRlIiwiX3JlZjIiLCJSb3V0ZSIsIl9wcm9wcyIsIl9yZWYzIiwiYmFzZW5hbWVQcm9wIiwibG9jYXRpb25Qcm9wIiwibmF2aWdhdGlvblR5cGUiLCJQb3AiLCJzdGF0aWMiLCJzdGF0aWNQcm9wIiwibmF2aWdhdGlvbkNvbnRleHQiLCJ0cmFpbGluZ1BhdGhuYW1lIiwiUm91dGVzIiwiX3JlZjQiLCJwYXJlbnRNYXRjaGVzIiwicm91dGVNYXRjaCIsInBhcmVudFBhcmFtcyIsInBhcmVudFBhdGhuYW1lQmFzZSIsImxvY2F0aW9uRnJvbUNvbnRleHQiLCJfcGFyc2VkTG9jYXRpb25BcmckcGEiLCJwYXJzZWRMb2NhdGlvbkFyZyIsInJlZHVjZVJpZ2h0IiwiX3JlbmRlck1hdGNoZXMiLCJ1c2VSb3V0ZXMiLCJjcmVhdGVSb3V0ZXNGcm9tQ2hpbGRyZW4iLCJCcm93c2VyUm91dGVyIiwiX3JlZiIsImhpc3RvcnlSZWYiLCJfb3B0aW9ucyR3aW5kb3ciLCJnbG9iYWxIaXN0b3J5IiwiaGlzdG9yeSIsImdldEluZGV4QW5kTG9jYXRpb24iLCJfd2luZG93JGxvY2F0aW9uIiwiaWR4IiwidXNyIiwiYmxvY2tlZFBvcFR4IiwiYmxvY2tlcnMiLCJuZXh0QWN0aW9uIiwiX2dldEluZGV4QW5kTG9jYXRpb24iLCJuZXh0SW5kZXgiLCJuZXh0TG9jYXRpb24iLCJkZWx0YSIsInJldHJ5IiwiYXBwbHlUeCIsIl9nZXRJbmRleEFuZExvY2F0aW9uMiIsImNyZWF0ZUhyZWYiLCJfcmVmJHBhdGhuYW1lIiwiX3JlZiRzZWFyY2giLCJfcmVmJGhhc2giLCJnZXROZXh0TG9jYXRpb24iLCJnZXRIaXN0b3J5U3RhdGVBbmRVcmwiLCJhbGxvd1R4IiwiX2dldEluZGV4QW5kTG9jYXRpb24zIiwicmVwbGFjZVN0YXRlIiwiUHVzaCIsIl9nZXRIaXN0b3J5U3RhdGVBbmRVciIsImhpc3RvcnlTdGF0ZSIsInB1c2hTdGF0ZSIsIlJlcGxhY2UiLCJfZ2V0SGlzdG9yeVN0YXRlQW5kVXIyIiwiYmFjayIsImZvcndhcmQiLCJsaXN0ZW4iLCJibG9jayIsImJsb2NrZXIiLCJ1bmJsb2NrIiwiY3JlYXRlQnJvd3Nlckhpc3RvcnkiLCJhc3luY0dlbmVyYXRvclN0ZXAiLCJnZW4iLCJfbmV4dCIsIl90aHJvdyIsIl9hc3luY1RvR2VuZXJhdG9yIiwidXNlTmF2aWdhdGUiLCJoYW5kbGVTdWJtaXQiLCJ1c2VyIiwiZmV0Y2giLCJqc29uIiwiY2xhc3NOYW1lIiwib25TdWJtaXQiLCJwbGFjZWhvbGRlciIsIm9uQ2hhbmdlIiwic2V0VXNlcm5hbWUiLCJzZXRQYXNzd29yZCIsIl9hcnJheUxpa2VUb0FycmF5IiwiYXJyMiIsIl91bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheSIsIm1pbkxlbiIsIl9zbGljZWRUb0FycmF5IiwiX3MiLCJfZSIsIl9hcnIiLCJfbiIsIl9kIiwiVXNlckNvbnRleHQiLCJfdG9Db25zdW1hYmxlQXJyYXkiLCJicmV3ZXJ5Q29tcCIsImJBdHRyaWJzIiwiYnJld2VyeV90eXBlIiwiY2l0eSIsInBob25lIiwic3RyZWV0IiwiYWRkcmVzc18yIiwiYWRkU3RhdGVUb1Zpc2l0ZWQiLCJ1c2Vyc2lkIiwiYnJld2VyeW5hbWUiLCJicmV3ZXJ5dHlwZSIsImJyZXdlcnlzdGF0ZSIsImJyZXdlcnljaXR5IiwiYnJld2VyeXBob25lIiwicmVtb3ZlVmlzaXRlZCIsInN0YXRlQnJld2VyaWVzIiwic3RhdGVCcmV3ZXJpZXNBcnJheSIsImJyZXdlcnkiLCJ1bmlxdWVpZCIsInZpc0JyZXdlcmllcyIsInZpc0JyZXdlcmllc0FycmF5Iiwic2V0U3RhdGVCcmV3ZXJpZXMiLCJzZXRWaXNCcmV3ZXJpZXMiLCJnZXRCcmV3ZXJpZXMiLCJ2aXNpdGVkIiwiYnJld2VyeURldGFpbHMiLCJhZGRWaXNpdGVkIiwiYnJld2VyeWlkIiwidXNlcklkIiwiZmF2b3JpdGVzIiwiZXhhY3QiLCJDcmVhdGVVc2VyIiwiY29udGFpbmVyIiwiZ2V0RWxlbWVudEJ5SWQiLCJSZWFjdERPTUNsaWVudCJdLCJzb3VyY2VSb290IjoiIn0=